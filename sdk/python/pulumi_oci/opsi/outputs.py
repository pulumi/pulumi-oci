# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseInsightConnectionCredentialDetails',
    'DatabaseInsightConnectionDetails',
    'DatabaseInsightConnectionDetailsHost',
    'DatabaseInsightCredentialDetails',
    'ExadataInsightMemberVmClusterDetail',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetail',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails',
    'NewsReportContentTypes',
    'OpsiConfigurationConfigItem',
    'OpsiConfigurationConfigItemMetadata',
    'OpsiConfigurationConfigItemMetadataUnitDetail',
    'OpsiConfigurationConfigItemMetadataValueInputDetail',
    'GetAwrHubAwrSnapshotItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult',
    'GetAwrHubAwrSnapshotsFilterResult',
    'GetAwrHubAwrSourcesSummaryItemResult',
    'GetAwrHubsAwrHubSummaryCollectionResult',
    'GetAwrHubsAwrHubSummaryCollectionItemResult',
    'GetAwrHubsFilterResult',
    'GetDatabaseInsightConnectionCredentialDetailResult',
    'GetDatabaseInsightConnectionDetailResult',
    'GetDatabaseInsightConnectionDetailHostResult',
    'GetDatabaseInsightCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult',
    'GetDatabaseInsightsFilterResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult',
    'GetEnterpriseManagerBridgesFilterResult',
    'GetExadataInsightMemberVmClusterDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult',
    'GetExadataInsightsFilterResult',
    'GetHostInsightsFilterResult',
    'GetHostInsightsHostInsightSummaryCollectionResult',
    'GetHostInsightsHostInsightSummaryCollectionItemResult',
    'GetImportableAgentEntitiesItemResult',
    'GetImportableAgentEntityItemResult',
    'GetImportableComputeEntitiesItemResult',
    'GetImportableComputeEntityItemResult',
    'GetNewsReportContentTypeResult',
    'GetNewsReportsFilterResult',
    'GetNewsReportsNewsReportCollectionResult',
    'GetNewsReportsNewsReportCollectionItemResult',
    'GetNewsReportsNewsReportCollectionItemContentTypeResult',
    'GetOperationsInsightsPrivateEndpointsFilterResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult',
    'GetOperationsInsightsWarehouseUsersFilterResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult',
    'GetOperationsInsightsWarehousesFilterResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult',
    'GetOpsiConfigurationConfigItemResult',
    'GetOpsiConfigurationConfigItemMetadataResult',
    'GetOpsiConfigurationConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationConfigItemMetadataValueInputDetailResult',
    'GetOpsiConfigurationConfigurationItemConfigItemResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult',
    'GetOpsiConfigurationsFilterResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult',
]

@pulumi.output_type
class DatabaseInsightConnectionCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        DatabaseInsightConnectionCredentialDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: Optional[str] = None,
             credential_type: Optional[str] = None,
             password_secret_id: Optional[str] = None,
             role: Optional[str] = None,
             user_name: Optional[str] = None,
             wallet_secret_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        if credential_source_name is not None:
            _setter("credential_source_name", credential_source_name)
        if credential_type is not None:
            _setter("credential_type", credential_type)
        if password_secret_id is not None:
            _setter("password_secret_id", password_secret_id)
        if role is not None:
            _setter("role", role)
        if user_name is not None:
            _setter("user_name", user_name)
        if wallet_secret_id is not None:
            _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class DatabaseInsightConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        """
        :param str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['DatabaseInsightConnectionDetailsHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param int port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        DatabaseInsightConnectionDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_name=host_name,
            hosts=hosts,
            port=port,
            protocol=protocol,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_name: Optional[str] = None,
             hosts: Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']] = None,
             port: Optional[int] = None,
             protocol: Optional[str] = None,
             service_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        if host_name is not None:
            _setter("host_name", host_name)
        if hosts is not None:
            _setter("hosts", hosts)
        if port is not None:
            _setter("port", port)
        if protocol is not None:
            _setter("protocol", protocol)
        if service_name is not None:
            _setter("service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class DatabaseInsightConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        DatabaseInsightConnectionDetailsHost._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_ip=host_ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_ip: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostIp' in kwargs:
            host_ip = kwargs['hostIp']

        if host_ip is not None:
            _setter("host_ip", host_ip)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DatabaseInsightCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 credential_source_name: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        """
        :param str credential_type: Credential type.
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        DatabaseInsightCredentialDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_type=credential_type,
            credential_source_name=credential_source_name,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_type: str,
             credential_source_name: Optional[str] = None,
             password_secret_id: Optional[str] = None,
             role: Optional[str] = None,
             user_name: Optional[str] = None,
             wallet_secret_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_type", credential_type)
        if credential_source_name is not None:
            _setter("credential_source_name", credential_source_name)
        if password_secret_id is not None:
            _setter("password_secret_id", password_secret_id)
        if role is not None:
            _setter("role", role)
        if user_name is not None:
            _setter("user_name", user_name)
        if wallet_secret_id is not None:
            _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "dbmPrivateEndpointId":
            suggest = "dbm_private_endpoint_id"
        elif key == "memberDatabaseDetails":
            suggest = "member_database_details"
        elif key == "opsiPrivateEndpointId":
            suggest = "opsi_private_endpoint_id"
        elif key == "vmclusterId":
            suggest = "vmcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 member_database_details: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 vmcluster_id: Optional[str] = None):
        """
        :param str compartment_id: (Updatable) Compartment Identifier of database
        :param str dbm_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        :param Sequence['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs'] member_database_details: The databases that belong to the VM Cluster
        :param str opsi_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        :param str vmcluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
        ExadataInsightMemberVmClusterDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            member_database_details=member_database_details,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            vmcluster_id=vmcluster_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             dbm_private_endpoint_id: Optional[str] = None,
             member_database_details: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']] = None,
             opsi_private_endpoint_id: Optional[str] = None,
             vmcluster_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'memberDatabaseDetails' in kwargs:
            member_database_details = kwargs['memberDatabaseDetails']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'vmclusterId' in kwargs:
            vmcluster_id = kwargs['vmclusterId']

        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if dbm_private_endpoint_id is not None:
            _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        if member_database_details is not None:
            _setter("member_database_details", member_database_details)
        if opsi_private_endpoint_id is not None:
            _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        if vmcluster_id is not None:
            _setter("vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        (Updatable) Compartment Identifier of database
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        """
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']]:
        """
        The databases that belong to the VM Cluster
        """
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "connectionDetails":
            suggest = "connection_details"
        elif key == "credentialDetails":
            suggest = "credential_details"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseResourceType":
            suggest = "database_resource_type"
        elif key == "dbmPrivateEndpointId":
            suggest = "dbm_private_endpoint_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "entitySource":
            suggest = "entity_source"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "opsiPrivateEndpointId":
            suggest = "opsi_private_endpoint_id"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "systemTags":
            suggest = "system_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails'] = None,
                 credential_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails'] = None,
                 database_id: Optional[str] = None,
                 database_resource_type: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_type: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        """
        :param str compartment_id: (Updatable) Compartment Identifier of database
        :param 'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs' connection_details: Connection details of the private endpoints.
        :param 'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs' credential_details: User credential details to connect to the database. This is supplied via the External Database Service.
        :param str database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        :param str database_resource_type: Oracle Cloud Infrastructure database resource type
        :param str dbm_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str deployment_type: Database Deployment Type
        :param str entity_source: Source of the database entity.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str opsi_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        :param str service_name: Database service name used for connection requests.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            connection_details=connection_details,
            credential_details=credential_details,
            database_id=database_id,
            database_resource_type=database_resource_type,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            defined_tags=defined_tags,
            deployment_type=deployment_type,
            entity_source=entity_source,
            freeform_tags=freeform_tags,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            service_name=service_name,
            system_tags=system_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             connection_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails'] = None,
             credential_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails'] = None,
             database_id: Optional[str] = None,
             database_resource_type: Optional[str] = None,
             dbm_private_endpoint_id: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             deployment_type: Optional[str] = None,
             entity_source: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             opsi_private_endpoint_id: Optional[str] = None,
             service_name: Optional[str] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'connectionDetails' in kwargs:
            connection_details = kwargs['connectionDetails']
        if 'credentialDetails' in kwargs:
            credential_details = kwargs['credentialDetails']
        if 'databaseId' in kwargs:
            database_id = kwargs['databaseId']
        if 'databaseResourceType' in kwargs:
            database_resource_type = kwargs['databaseResourceType']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']

        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if connection_details is not None:
            _setter("connection_details", connection_details)
        if credential_details is not None:
            _setter("credential_details", credential_details)
        if database_id is not None:
            _setter("database_id", database_id)
        if database_resource_type is not None:
            _setter("database_resource_type", database_resource_type)
        if dbm_private_endpoint_id is not None:
            _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if deployment_type is not None:
            _setter("deployment_type", deployment_type)
        if entity_source is not None:
            _setter("entity_source", entity_source)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if opsi_private_endpoint_id is not None:
            _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        if service_name is not None:
            _setter("service_name", service_name)
        if system_tags is not None:
            _setter("system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        (Updatable) Compartment Identifier of database
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails']:
        """
        Connection details of the private endpoints.
        """
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails']:
        """
        User credential details to connect to the database. This is supplied via the External Database Service.
        """
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[str]:
        """
        Oracle Cloud Infrastructure database resource type
        """
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        """
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        """
        Database Deployment Type
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        """
        Source of the database entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        """
        :param Sequence['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hosts=hosts,
            protocol=protocol,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hosts: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']] = None,
             protocol: Optional[str] = None,
             service_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        if hosts is not None:
            _setter("hosts", hosts)
        if protocol is not None:
            _setter("protocol", protocol)
        if service_name is not None:
            _setter("service_name", service_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_ip=host_ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_ip: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostIp' in kwargs:
            host_ip = kwargs['hostIp']

        if host_ip is not None:
            _setter("host_ip", host_ip)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 credential_source_name: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        """
        :param str credential_type: Credential type.
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_type=credential_type,
            credential_source_name=credential_source_name,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_type: str,
             credential_source_name: Optional[str] = None,
             password_secret_id: Optional[str] = None,
             role: Optional[str] = None,
             user_name: Optional[str] = None,
             wallet_secret_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_type", credential_type)
        if credential_source_name is not None:
            _setter("credential_source_name", credential_source_name)
        if password_secret_id is not None:
            _setter("password_secret_id", password_secret_id)
        if role is not None:
            _setter("role", role)
        if user_name is not None:
            _setter("user_name", user_name)
        if wallet_secret_id is not None:
            _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class NewsReportContentTypes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityPlanningResources":
            suggest = "capacity_planning_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NewsReportContentTypes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NewsReportContentTypes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NewsReportContentTypes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_planning_resources: Sequence[str]):
        """
        :param Sequence[str] capacity_planning_resources: (Updatable) Supported resources for capacity planning content type.
        """
        NewsReportContentTypes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity_planning_resources=capacity_planning_resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity_planning_resources: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'capacityPlanningResources' in kwargs:
            capacity_planning_resources = kwargs['capacityPlanningResources']

        _setter("capacity_planning_resources", capacity_planning_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Sequence[str]:
        """
        (Updatable) Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")


@pulumi.output_type
class OpsiConfigurationConfigItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItemType":
            suggest = "config_item_type"
        elif key == "applicableContexts":
            suggest = "applicable_contexts"
        elif key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item_type: str,
                 applicable_contexts: Optional[Sequence[str]] = None,
                 default_value: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str config_item_type: (Updatable) Type of configuration item.
        :param Sequence[str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param str default_value: Value of configuration item.
        :param Sequence['OpsiConfigurationConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param str name: (Updatable) Name of configuration item.
        :param str value: (Updatable) Value of configuration item.
        """
        OpsiConfigurationConfigItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_item_type=config_item_type,
            applicable_contexts=applicable_contexts,
            default_value=default_value,
            metadatas=metadatas,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_item_type: str,
             applicable_contexts: Optional[Sequence[str]] = None,
             default_value: Optional[str] = None,
             metadatas: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']] = None,
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'applicableContexts' in kwargs:
            applicable_contexts = kwargs['applicableContexts']
        if 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']

        _setter("config_item_type", config_item_type)
        if applicable_contexts is not None:
            _setter("applicable_contexts", applicable_contexts)
        if default_value is not None:
            _setter("default_value", default_value)
        if metadatas is not None:
            _setter("metadatas", metadatas)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        (Updatable) Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[Sequence[str]]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']]:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Value of configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItemType":
            suggest = "config_item_type"
        elif key == "dataType":
            suggest = "data_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "unitDetails":
            suggest = "unit_details"
        elif key == "valueInputDetails":
            suggest = "value_input_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item_type: Optional[str] = None,
                 data_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 unit_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']] = None,
                 value_input_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']] = None):
        """
        :param str config_item_type: (Updatable) Type of configuration item.
        :param str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param str description: (Updatable) Description of OPSI configuration.
        :param str display_name: (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param Sequence['OpsiConfigurationConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['OpsiConfigurationConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        OpsiConfigurationConfigItemMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_item_type=config_item_type,
            data_type=data_type,
            description=description,
            display_name=display_name,
            unit_details=unit_details,
            value_input_details=value_input_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_item_type: Optional[str] = None,
             data_type: Optional[str] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             unit_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']] = None,
             value_input_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'unitDetails' in kwargs:
            unit_details = kwargs['unitDetails']
        if 'valueInputDetails' in kwargs:
            value_input_details = kwargs['valueInputDetails']

        if config_item_type is not None:
            _setter("config_item_type", config_item_type)
        if data_type is not None:
            _setter("data_type", data_type)
        if description is not None:
            _setter("description", description)
        if display_name is not None:
            _setter("display_name", display_name)
        if unit_details is not None:
            _setter("unit_details", unit_details)
        if value_input_details is not None:
            _setter("value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        """
        (Updatable) Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']]:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']]:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadataUnitDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadataUnitDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadataUnitDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadataUnitDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 unit: Optional[str] = None):
        """
        :param str display_name: (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param str unit: Unit of configuration item.
        """
        OpsiConfigurationConfigItemMetadataUnitDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             unit: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        if display_name is not None:
            _setter("display_name", display_name)
        if unit is not None:
            _setter("unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadataValueInputDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedValueType":
            suggest = "allowed_value_type"
        elif key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"
        elif key == "possibleValues":
            suggest = "possible_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadataValueInputDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadataValueInputDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadataValueInputDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_value_type: Optional[str] = None,
                 max_value: Optional[str] = None,
                 min_value: Optional[str] = None,
                 possible_values: Optional[Sequence[str]] = None):
        """
        :param str allowed_value_type: Allowed value type of configuration item.
        :param str max_value: Maximum value limit for the configuration item.
        :param str min_value: Minimum value limit for the configuration item.
        :param Sequence[str] possible_values: Allowed values to pick for the configuration item.
        """
        OpsiConfigurationConfigItemMetadataValueInputDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_value_type=allowed_value_type,
            max_value=max_value,
            min_value=min_value,
            possible_values=possible_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_value_type: Optional[str] = None,
             max_value: Optional[str] = None,
             min_value: Optional[str] = None,
             possible_values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedValueType' in kwargs:
            allowed_value_type = kwargs['allowedValueType']
        if 'maxValue' in kwargs:
            max_value = kwargs['maxValue']
        if 'minValue' in kwargs:
            min_value = kwargs['minValue']
        if 'possibleValues' in kwargs:
            possible_values = kwargs['possibleValues']

        if allowed_value_type is not None:
            _setter("allowed_value_type", allowed_value_type)
        if max_value is not None:
            _setter("max_value", max_value)
        if min_value is not None:
            _setter("min_value", min_value)
        if possible_values is not None:
            _setter("possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[str]:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[str]:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[str]:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[str]]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetAwrHubAwrSnapshotItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: str,
                 error_count: str,
                 instance_number: int,
                 snapshot_identifier: int,
                 time_db_startup: str,
                 time_snapshot_begin: str,
                 time_snapshot_end: str):
        """
        :param str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param str error_count: The total number of errors.
        :param int instance_number: The database instance number.
        :param int snapshot_identifier: The identifier of the snapshot.
        :param str time_db_startup: The timestamp of the database startup.
        :param str time_snapshot_begin: The start time of the snapshot.
        :param str time_snapshot_end: The end time of the snapshot.
        """
        GetAwrHubAwrSnapshotItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            awr_source_database_id=awr_source_database_id,
            error_count=error_count,
            instance_number=instance_number,
            snapshot_identifier=snapshot_identifier,
            time_db_startup=time_db_startup,
            time_snapshot_begin=time_snapshot_begin,
            time_snapshot_end=time_snapshot_end,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             awr_source_database_id: str,
             error_count: str,
             instance_number: int,
             snapshot_identifier: int,
             time_db_startup: str,
             time_snapshot_begin: str,
             time_snapshot_end: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awrSourceDatabaseId' in kwargs:
            awr_source_database_id = kwargs['awrSourceDatabaseId']
        if 'errorCount' in kwargs:
            error_count = kwargs['errorCount']
        if 'instanceNumber' in kwargs:
            instance_number = kwargs['instanceNumber']
        if 'snapshotIdentifier' in kwargs:
            snapshot_identifier = kwargs['snapshotIdentifier']
        if 'timeDbStartup' in kwargs:
            time_db_startup = kwargs['timeDbStartup']
        if 'timeSnapshotBegin' in kwargs:
            time_snapshot_begin = kwargs['timeSnapshotBegin']
        if 'timeSnapshotEnd' in kwargs:
            time_snapshot_end = kwargs['timeSnapshotEnd']

        _setter("awr_source_database_id", awr_source_database_id)
        _setter("error_count", error_count)
        _setter("instance_number", instance_number)
        _setter("snapshot_identifier", snapshot_identifier)
        _setter("time_db_startup", time_db_startup)
        _setter("time_snapshot_begin", time_snapshot_begin)
        _setter("time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> str:
        """
        The total number of errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> int:
        """
        The database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> int:
        """
        The identifier of the snapshot.
        """
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> str:
        """
        The timestamp of the database startup.
        """
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> str:
        """
        The start time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> str:
        """
        The end time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']):
        """
        :param Sequence['GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemArgs'] items: A list of AWR snapshot summary data.
        """
        GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']:
        """
        A list of AWR snapshot summary data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']):
        """
        :param Sequence['GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemArgs'] items: A list of AWR snapshot summary data.
        """
        GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']:
        """
        A list of AWR snapshot summary data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: str,
                 error_count: str,
                 instance_number: int,
                 snapshot_identifier: int,
                 time_db_startup: str,
                 time_snapshot_begin: str,
                 time_snapshot_end: str):
        """
        :param str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param str error_count: The total number of errors.
        :param int instance_number: The database instance number.
        :param int snapshot_identifier: The identifier of the snapshot.
        :param str time_db_startup: The timestamp of the database startup.
        :param str time_snapshot_begin: The start time of the snapshot.
        :param str time_snapshot_end: The end time of the snapshot.
        """
        GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            awr_source_database_id=awr_source_database_id,
            error_count=error_count,
            instance_number=instance_number,
            snapshot_identifier=snapshot_identifier,
            time_db_startup=time_db_startup,
            time_snapshot_begin=time_snapshot_begin,
            time_snapshot_end=time_snapshot_end,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             awr_source_database_id: str,
             error_count: str,
             instance_number: int,
             snapshot_identifier: int,
             time_db_startup: str,
             time_snapshot_begin: str,
             time_snapshot_end: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awrSourceDatabaseId' in kwargs:
            awr_source_database_id = kwargs['awrSourceDatabaseId']
        if 'errorCount' in kwargs:
            error_count = kwargs['errorCount']
        if 'instanceNumber' in kwargs:
            instance_number = kwargs['instanceNumber']
        if 'snapshotIdentifier' in kwargs:
            snapshot_identifier = kwargs['snapshotIdentifier']
        if 'timeDbStartup' in kwargs:
            time_db_startup = kwargs['timeDbStartup']
        if 'timeSnapshotBegin' in kwargs:
            time_snapshot_begin = kwargs['timeSnapshotBegin']
        if 'timeSnapshotEnd' in kwargs:
            time_snapshot_end = kwargs['timeSnapshotEnd']

        _setter("awr_source_database_id", awr_source_database_id)
        _setter("error_count", error_count)
        _setter("instance_number", instance_number)
        _setter("snapshot_identifier", snapshot_identifier)
        _setter("time_db_startup", time_db_startup)
        _setter("time_snapshot_begin", time_snapshot_begin)
        _setter("time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> str:
        """
        The total number of errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> int:
        """
        The database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> int:
        """
        The identifier of the snapshot.
        """
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> str:
        """
        The timestamp of the database startup.
        """
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> str:
        """
        The start time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> str:
        """
        The end time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetAwrHubAwrSnapshotsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAwrHubAwrSourcesSummaryItemResult(dict):
    def __init__(__self__, *,
                 awr_hub_id: str,
                 awr_source_database_id: str,
                 hours_since_last_import: float,
                 max_snapshot_identifier: float,
                 min_snapshot_identifier: float,
                 name: str,
                 snapshots_uploaded: float,
                 time_first_snapshot_generated: str,
                 time_last_snapshot_generated: str):
        """
        :param str awr_hub_id: Unique Awr Hub identifier
        :param str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param float hours_since_last_import: Number of hours since last AWR snapshots import happened from the Source database.
        :param float max_snapshot_identifier: The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param float min_snapshot_identifier: The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param str name: Name for an Awr source database
        :param float snapshots_uploaded: Number of AWR snapshots uploaded from the Source database.
        :param str time_first_snapshot_generated: The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        :param str time_last_snapshot_generated: The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        GetAwrHubAwrSourcesSummaryItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            awr_hub_id=awr_hub_id,
            awr_source_database_id=awr_source_database_id,
            hours_since_last_import=hours_since_last_import,
            max_snapshot_identifier=max_snapshot_identifier,
            min_snapshot_identifier=min_snapshot_identifier,
            name=name,
            snapshots_uploaded=snapshots_uploaded,
            time_first_snapshot_generated=time_first_snapshot_generated,
            time_last_snapshot_generated=time_last_snapshot_generated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             awr_hub_id: str,
             awr_source_database_id: str,
             hours_since_last_import: float,
             max_snapshot_identifier: float,
             min_snapshot_identifier: float,
             name: str,
             snapshots_uploaded: float,
             time_first_snapshot_generated: str,
             time_last_snapshot_generated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awrHubId' in kwargs:
            awr_hub_id = kwargs['awrHubId']
        if 'awrSourceDatabaseId' in kwargs:
            awr_source_database_id = kwargs['awrSourceDatabaseId']
        if 'hoursSinceLastImport' in kwargs:
            hours_since_last_import = kwargs['hoursSinceLastImport']
        if 'maxSnapshotIdentifier' in kwargs:
            max_snapshot_identifier = kwargs['maxSnapshotIdentifier']
        if 'minSnapshotIdentifier' in kwargs:
            min_snapshot_identifier = kwargs['minSnapshotIdentifier']
        if 'snapshotsUploaded' in kwargs:
            snapshots_uploaded = kwargs['snapshotsUploaded']
        if 'timeFirstSnapshotGenerated' in kwargs:
            time_first_snapshot_generated = kwargs['timeFirstSnapshotGenerated']
        if 'timeLastSnapshotGenerated' in kwargs:
            time_last_snapshot_generated = kwargs['timeLastSnapshotGenerated']

        _setter("awr_hub_id", awr_hub_id)
        _setter("awr_source_database_id", awr_source_database_id)
        _setter("hours_since_last_import", hours_since_last_import)
        _setter("max_snapshot_identifier", max_snapshot_identifier)
        _setter("min_snapshot_identifier", min_snapshot_identifier)
        _setter("name", name)
        _setter("snapshots_uploaded", snapshots_uploaded)
        _setter("time_first_snapshot_generated", time_first_snapshot_generated)
        _setter("time_last_snapshot_generated", time_last_snapshot_generated)

    @property
    @pulumi.getter(name="awrHubId")
    def awr_hub_id(self) -> str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "awr_hub_id")

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="hoursSinceLastImport")
    def hours_since_last_import(self) -> float:
        """
        Number of hours since last AWR snapshots import happened from the Source database.
        """
        return pulumi.get(self, "hours_since_last_import")

    @property
    @pulumi.getter(name="maxSnapshotIdentifier")
    def max_snapshot_identifier(self) -> float:
        """
        The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "max_snapshot_identifier")

    @property
    @pulumi.getter(name="minSnapshotIdentifier")
    def min_snapshot_identifier(self) -> float:
        """
        The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "min_snapshot_identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name for an Awr source database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="snapshotsUploaded")
    def snapshots_uploaded(self) -> float:
        """
        Number of AWR snapshots uploaded from the Source database.
        """
        return pulumi.get(self, "snapshots_uploaded")

    @property
    @pulumi.getter(name="timeFirstSnapshotGenerated")
    def time_first_snapshot_generated(self) -> str:
        """
        The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_first_snapshot_generated")

    @property
    @pulumi.getter(name="timeLastSnapshotGenerated")
    def time_last_snapshot_generated(self) -> str:
        """
        The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_snapshot_generated")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']):
        GetAwrHubsAwrHubSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 awr_mailbox_url: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 object_storage_bucket_name: str,
                 operations_insights_warehouse_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str awr_mailbox_url: Mailbox URL required for AWR hub and AWR source setup.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Awr Hub identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str object_storage_bucket_name: Object Storage Bucket Name
        :param str operations_insights_warehouse_id: Unique Operations Insights Warehouse identifier
        :param str state: Lifecycle states
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        GetAwrHubsAwrHubSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            awr_mailbox_url=awr_mailbox_url,
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            object_storage_bucket_name=object_storage_bucket_name,
            operations_insights_warehouse_id=operations_insights_warehouse_id,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             awr_mailbox_url: str,
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             object_storage_bucket_name: str,
             operations_insights_warehouse_id: str,
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awrMailboxUrl' in kwargs:
            awr_mailbox_url = kwargs['awrMailboxUrl']
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'objectStorageBucketName' in kwargs:
            object_storage_bucket_name = kwargs['objectStorageBucketName']
        if 'operationsInsightsWarehouseId' in kwargs:
            operations_insights_warehouse_id = kwargs['operationsInsightsWarehouseId']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("awr_mailbox_url", awr_mailbox_url)
        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("object_storage_bucket_name", object_storage_bucket_name)
        _setter("operations_insights_warehouse_id", operations_insights_warehouse_id)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="awrMailboxUrl")
    def awr_mailbox_url(self) -> str:
        """
        Mailbox URL required for AWR hub and AWR source setup.
        """
        return pulumi.get(self, "awr_mailbox_url")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> str:
        """
        Object Storage Bucket Name
        """
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAwrHubsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetAwrHubsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseInsightConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str,
                 wallet_secret_id: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        GetDatabaseInsightConnectionCredentialDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: str,
             credential_type: str,
             password_secret_id: str,
             role: str,
             user_name: str,
             wallet_secret_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_source_name", credential_source_name)
        _setter("credential_type", credential_type)
        _setter("password_secret_id", password_secret_id)
        _setter("role", role)
        _setter("user_name", user_name)
        _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: str,
                 hosts: Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult'],
                 port: int,
                 protocol: str,
                 service_name: str):
        """
        :param str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['GetDatabaseInsightConnectionDetailHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param int port: Listener port number used for connection requests.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        GetDatabaseInsightConnectionDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_name=host_name,
            hosts=hosts,
            port=port,
            protocol=protocol,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_name: str,
             hosts: Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult'],
             port: int,
             protocol: str,
             service_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        _setter("host_name", host_name)
        _setter("hosts", hosts)
        _setter("port", port)
        _setter("protocol", protocol)
        _setter("service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult']:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: str,
                 port: int):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests.
        """
        GetDatabaseInsightConnectionDetailHostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_ip=host_ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_ip: str,
             port: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostIp' in kwargs:
            host_ip = kwargs['hostIp']

        _setter("host_ip", host_ip)
        _setter("port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str,
                 wallet_secret_id: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        GetDatabaseInsightCredentialDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: str,
             credential_type: str,
             password_secret_id: str,
             role: str,
             user_name: str,
             wallet_secret_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_source_name", credential_source_name)
        _setter("credential_type", credential_type)
        _setter("password_secret_id", password_secret_id)
        _setter("role", role)
        _setter("user_name", user_name)
        _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']):
        GetDatabaseInsightsDatabaseInsightsCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult'],
                 connection_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult'],
                 credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult'],
                 database_connection_status_details: str,
                 database_display_name: str,
                 database_id: str,
                 database_name: str,
                 database_resource_type: str,
                 database_type: str,
                 database_version: str,
                 dbm_private_endpoint_id: str,
                 defined_tags: Mapping[str, Any],
                 deployment_type: str,
                 enterprise_manager_bridge_id: str,
                 enterprise_manager_entity_display_name: str,
                 enterprise_manager_entity_identifier: str,
                 enterprise_manager_entity_name: str,
                 enterprise_manager_entity_type: str,
                 enterprise_manager_identifier: str,
                 entity_source: str,
                 exadata_insight_id: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 opsi_private_endpoint_id: str,
                 parent_id: str,
                 processor_count: int,
                 root_id: str,
                 service_name: str,
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailArgs'] connection_credential_details: User credential details to connect to the database. This is supplied via the External Database Service.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailArgs'] connection_details: Connection details to connect to the database. HostName, protocol, and port should be specified.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailArgs'] credential_details: User credential details to connect to the database. This is supplied via the External Database Service.
        :param str database_connection_status_details: A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
        :param str database_display_name: Display name of database
        :param str database_id: Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
        :param str database_name: Name of database
        :param str database_resource_type: Oracle Cloud Infrastructure database resource type
        :param str database_type: Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
        :param str database_version: The version of the database.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param str enterprise_manager_identifier: Enterprise Manager Unqiue Identifier
        :param str entity_source: Source of the database entity.
        :param str exadata_insight_id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str opsi_private_endpoint_id: Unique Operations Insights PrivateEndpoint identifier
        :param str parent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster or DB System ID, depending on which configuration the resource belongs to.
        :param int processor_count: Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        :param str root_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        :param str service_name: Database service name used for connection requests.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the database insight was first enabled. An RFC3339 formatted datetime string
        :param str time_updated: The time the database insight was updated. An RFC3339 formatted datetime string
        """
        GetDatabaseInsightsDatabaseInsightsCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            connection_credential_details=connection_credential_details,
            connection_details=connection_details,
            credential_details=credential_details,
            database_connection_status_details=database_connection_status_details,
            database_display_name=database_display_name,
            database_id=database_id,
            database_name=database_name,
            database_resource_type=database_resource_type,
            database_type=database_type,
            database_version=database_version,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            defined_tags=defined_tags,
            deployment_type=deployment_type,
            enterprise_manager_bridge_id=enterprise_manager_bridge_id,
            enterprise_manager_entity_display_name=enterprise_manager_entity_display_name,
            enterprise_manager_entity_identifier=enterprise_manager_entity_identifier,
            enterprise_manager_entity_name=enterprise_manager_entity_name,
            enterprise_manager_entity_type=enterprise_manager_entity_type,
            enterprise_manager_identifier=enterprise_manager_identifier,
            entity_source=entity_source,
            exadata_insight_id=exadata_insight_id,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            parent_id=parent_id,
            processor_count=processor_count,
            root_id=root_id,
            service_name=service_name,
            state=state,
            status=status,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             connection_credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult'],
             connection_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult'],
             credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult'],
             database_connection_status_details: str,
             database_display_name: str,
             database_id: str,
             database_name: str,
             database_resource_type: str,
             database_type: str,
             database_version: str,
             dbm_private_endpoint_id: str,
             defined_tags: Mapping[str, Any],
             deployment_type: str,
             enterprise_manager_bridge_id: str,
             enterprise_manager_entity_display_name: str,
             enterprise_manager_entity_identifier: str,
             enterprise_manager_entity_name: str,
             enterprise_manager_entity_type: str,
             enterprise_manager_identifier: str,
             entity_source: str,
             exadata_insight_id: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             opsi_private_endpoint_id: str,
             parent_id: str,
             processor_count: int,
             root_id: str,
             service_name: str,
             state: str,
             status: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'connectionCredentialDetails' in kwargs:
            connection_credential_details = kwargs['connectionCredentialDetails']
        if 'connectionDetails' in kwargs:
            connection_details = kwargs['connectionDetails']
        if 'credentialDetails' in kwargs:
            credential_details = kwargs['credentialDetails']
        if 'databaseConnectionStatusDetails' in kwargs:
            database_connection_status_details = kwargs['databaseConnectionStatusDetails']
        if 'databaseDisplayName' in kwargs:
            database_display_name = kwargs['databaseDisplayName']
        if 'databaseId' in kwargs:
            database_id = kwargs['databaseId']
        if 'databaseName' in kwargs:
            database_name = kwargs['databaseName']
        if 'databaseResourceType' in kwargs:
            database_resource_type = kwargs['databaseResourceType']
        if 'databaseType' in kwargs:
            database_type = kwargs['databaseType']
        if 'databaseVersion' in kwargs:
            database_version = kwargs['databaseVersion']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if 'enterpriseManagerBridgeId' in kwargs:
            enterprise_manager_bridge_id = kwargs['enterpriseManagerBridgeId']
        if 'enterpriseManagerEntityDisplayName' in kwargs:
            enterprise_manager_entity_display_name = kwargs['enterpriseManagerEntityDisplayName']
        if 'enterpriseManagerEntityIdentifier' in kwargs:
            enterprise_manager_entity_identifier = kwargs['enterpriseManagerEntityIdentifier']
        if 'enterpriseManagerEntityName' in kwargs:
            enterprise_manager_entity_name = kwargs['enterpriseManagerEntityName']
        if 'enterpriseManagerEntityType' in kwargs:
            enterprise_manager_entity_type = kwargs['enterpriseManagerEntityType']
        if 'enterpriseManagerIdentifier' in kwargs:
            enterprise_manager_identifier = kwargs['enterpriseManagerIdentifier']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'exadataInsightId' in kwargs:
            exadata_insight_id = kwargs['exadataInsightId']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'parentId' in kwargs:
            parent_id = kwargs['parentId']
        if 'processorCount' in kwargs:
            processor_count = kwargs['processorCount']
        if 'rootId' in kwargs:
            root_id = kwargs['rootId']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("connection_credential_details", connection_credential_details)
        _setter("connection_details", connection_details)
        _setter("credential_details", credential_details)
        _setter("database_connection_status_details", database_connection_status_details)
        _setter("database_display_name", database_display_name)
        _setter("database_id", database_id)
        _setter("database_name", database_name)
        _setter("database_resource_type", database_resource_type)
        _setter("database_type", database_type)
        _setter("database_version", database_version)
        _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        _setter("defined_tags", defined_tags)
        _setter("deployment_type", deployment_type)
        _setter("enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        _setter("enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        _setter("enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        _setter("enterprise_manager_entity_name", enterprise_manager_entity_name)
        _setter("enterprise_manager_entity_type", enterprise_manager_entity_type)
        _setter("enterprise_manager_identifier", enterprise_manager_identifier)
        _setter("entity_source", entity_source)
        _setter("exadata_insight_id", exadata_insight_id)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        _setter("parent_id", parent_id)
        _setter("processor_count", processor_count)
        _setter("root_id", root_id)
        _setter("service_name", service_name)
        _setter("state", state)
        _setter("status", status)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult']:
        """
        User credential details to connect to the database. This is supplied via the External Database Service.
        """
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult']:
        """
        Connection details to connect to the database. HostName, protocol, and port should be specified.
        """
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult']:
        """
        User credential details to connect to the database. This is supplied via the External Database Service.
        """
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseConnectionStatusDetails")
    def database_connection_status_details(self) -> str:
        """
        A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
        """
        return pulumi.get(self, "database_connection_status_details")

    @property
    @pulumi.getter(name="databaseDisplayName")
    def database_display_name(self) -> str:
        """
        Display name of database
        """
        return pulumi.get(self, "database_display_name")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> str:
        """
        Oracle Cloud Infrastructure database resource type
        """
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        The version of the database.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> str:
        """
        Enterprise Manager Unqiue Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the database entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        """
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> str:
        """
        Unique Operations Insights PrivateEndpoint identifier
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster or DB System ID, depending on which configuration the resource belongs to.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> int:
        """
        Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        """
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter(name="rootId")
    def root_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        """
        return pulumi.get(self, "root_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the database insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the database insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str,
                 wallet_secret_id: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: str,
             credential_type: str,
             password_secret_id: str,
             role: str,
             user_name: str,
             wallet_secret_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_source_name", credential_source_name)
        _setter("credential_type", credential_type)
        _setter("password_secret_id", password_secret_id)
        _setter("role", role)
        _setter("user_name", user_name)
        _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: str,
                 hosts: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult'],
                 port: int,
                 protocol: str,
                 service_name: str):
        """
        :param str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param int port: Listener port number used for connection requests.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_name=host_name,
            hosts=hosts,
            port=port,
            protocol=protocol,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_name: str,
             hosts: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult'],
             port: int,
             protocol: str,
             service_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        _setter("host_name", host_name)
        _setter("hosts", hosts)
        _setter("port", port)
        _setter("protocol", protocol)
        _setter("service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult']:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: str,
                 port: int):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests.
        """
        GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_ip=host_ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_ip: str,
             port: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostIp' in kwargs:
            host_ip = kwargs['hostIp']

        _setter("host_ip", host_ip)
        _setter("port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str,
                 wallet_secret_id: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        :param str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: str,
             credential_type: str,
             password_secret_id: str,
             role: str,
             user_name: str,
             wallet_secret_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_source_name", credential_source_name)
        _setter("credential_type", credential_type)
        _setter("password_secret_id", password_secret_id)
        _setter("role", role)
        _setter("user_name", user_name)
        _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDatabaseInsightsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']):
        GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 object_storage_bucket_name: str,
                 object_storage_bucket_status_details: str,
                 object_storage_namespace_name: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Description of Enterprise Manager Bridge
        :param str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Enterprise Manager bridge identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str object_storage_bucket_name: Object Storage Bucket Name
        :param str object_storage_bucket_status_details: A message describing status of the object storage bucket of this resource. For example, it can be used to provide actionable information about the permission and content validity of the bucket.
        :param str object_storage_namespace_name: Object Storage Namespace Name
        :param str state: Lifecycle states
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the Enterprise Manager bridge was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time the Enterprise Manager bridge was updated. An RFC3339 formatted datetime string
        """
        GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            object_storage_bucket_name=object_storage_bucket_name,
            object_storage_bucket_status_details=object_storage_bucket_status_details,
            object_storage_namespace_name=object_storage_namespace_name,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             object_storage_bucket_name: str,
             object_storage_bucket_status_details: str,
             object_storage_namespace_name: str,
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'objectStorageBucketName' in kwargs:
            object_storage_bucket_name = kwargs['objectStorageBucketName']
        if 'objectStorageBucketStatusDetails' in kwargs:
            object_storage_bucket_status_details = kwargs['objectStorageBucketStatusDetails']
        if 'objectStorageNamespaceName' in kwargs:
            object_storage_namespace_name = kwargs['objectStorageNamespaceName']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("object_storage_bucket_name", object_storage_bucket_name)
        _setter("object_storage_bucket_status_details", object_storage_bucket_status_details)
        _setter("object_storage_namespace_name", object_storage_namespace_name)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of Enterprise Manager Bridge
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> str:
        """
        Object Storage Bucket Name
        """
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageBucketStatusDetails")
    def object_storage_bucket_status_details(self) -> str:
        """
        A message describing status of the object storage bucket of this resource. For example, it can be used to provide actionable information about the permission and content validity of the bucket.
        """
        return pulumi.get(self, "object_storage_bucket_status_details")

    @property
    @pulumi.getter(name="objectStorageNamespaceName")
    def object_storage_namespace_name(self) -> str:
        """
        Object Storage Namespace Name
        """
        return pulumi.get(self, "object_storage_namespace_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the Enterprise Manager bridge was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Enterprise Manager bridge was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnterpriseManagerBridgesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetEnterpriseManagerBridgesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 dbm_private_endpoint_id: str,
                 member_database_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult'],
                 opsi_private_endpoint_id: str,
                 vmcluster_id: str):
        """
        :param str compartment_id: Compartment identifier of the Exadata insight resource
        """
        GetExadataInsightMemberVmClusterDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            member_database_details=member_database_details,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            vmcluster_id=vmcluster_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             dbm_private_endpoint_id: str,
             member_database_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult'],
             opsi_private_endpoint_id: str,
             vmcluster_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'memberDatabaseDetails' in kwargs:
            member_database_details = kwargs['memberDatabaseDetails']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'vmclusterId' in kwargs:
            vmcluster_id = kwargs['vmclusterId']

        _setter("compartment_id", compartment_id)
        _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        _setter("member_database_details", member_database_details)
        _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        _setter("vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment identifier of the Exadata insight resource
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult']:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> str:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult'],
                 credential_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult'],
                 database_id: str,
                 database_resource_type: str,
                 dbm_private_endpoint_id: str,
                 defined_tags: Mapping[str, Any],
                 deployment_type: str,
                 entity_source: str,
                 freeform_tags: Mapping[str, Any],
                 opsi_private_endpoint_id: str,
                 service_name: str,
                 system_tags: Mapping[str, Any]):
        """
        :param str compartment_id: Compartment identifier of the Exadata insight resource
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str entity_source: Source of the Exadata system.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            connection_details=connection_details,
            credential_details=credential_details,
            database_id=database_id,
            database_resource_type=database_resource_type,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            defined_tags=defined_tags,
            deployment_type=deployment_type,
            entity_source=entity_source,
            freeform_tags=freeform_tags,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            service_name=service_name,
            system_tags=system_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             connection_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult'],
             credential_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult'],
             database_id: str,
             database_resource_type: str,
             dbm_private_endpoint_id: str,
             defined_tags: Mapping[str, Any],
             deployment_type: str,
             entity_source: str,
             freeform_tags: Mapping[str, Any],
             opsi_private_endpoint_id: str,
             service_name: str,
             system_tags: Mapping[str, Any],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'connectionDetails' in kwargs:
            connection_details = kwargs['connectionDetails']
        if 'credentialDetails' in kwargs:
            credential_details = kwargs['credentialDetails']
        if 'databaseId' in kwargs:
            database_id = kwargs['databaseId']
        if 'databaseResourceType' in kwargs:
            database_resource_type = kwargs['databaseResourceType']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']

        _setter("compartment_id", compartment_id)
        _setter("connection_details", connection_details)
        _setter("credential_details", credential_details)
        _setter("database_id", database_id)
        _setter("database_resource_type", database_resource_type)
        _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        _setter("defined_tags", defined_tags)
        _setter("deployment_type", deployment_type)
        _setter("entity_source", entity_source)
        _setter("freeform_tags", freeform_tags)
        _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        _setter("service_name", service_name)
        _setter("system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment identifier of the Exadata insight resource
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> str:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult(dict):
    def __init__(__self__, *,
                 hosts: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult'],
                 protocol: str,
                 service_name: str):
        GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hosts=hosts,
            protocol=protocol,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hosts: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult'],
             protocol: str,
             service_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        _setter("hosts", hosts)
        _setter("protocol", protocol)
        _setter("service_name", service_name)

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: str,
                 port: int):
        GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_ip=host_ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_ip: str,
             port: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostIp' in kwargs:
            host_ip = kwargs['hostIp']

        _setter("host_ip", host_ip)
        _setter("port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str,
                 wallet_secret_id: str):
        GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: str,
             credential_type: str,
             password_secret_id: str,
             role: str,
             user_name: str,
             wallet_secret_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_source_name", credential_source_name)
        _setter("credential_type", credential_type)
        _setter("password_secret_id", password_secret_id)
        _setter("role", role)
        _setter("user_name", user_name)
        _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> str:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']):
        GetExadataInsightsExadataInsightSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 enterprise_manager_bridge_id: str,
                 enterprise_manager_entity_display_name: str,
                 enterprise_manager_entity_identifier: str,
                 enterprise_manager_entity_name: str,
                 enterprise_manager_entity_type: str,
                 enterprise_manager_identifier: str,
                 entity_source: str,
                 exadata_display_name: str,
                 exadata_infra_id: str,
                 exadata_infra_resource_type: str,
                 exadata_name: str,
                 exadata_rack_type: str,
                 exadata_shape: str,
                 exadata_type: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_auto_sync_enabled: bool,
                 is_virtualized_exadata: bool,
                 lifecycle_details: str,
                 member_vm_cluster_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult'],
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param str enterprise_manager_identifier: Enterprise Manager Unique Identifier
        :param str entity_source: Source of the Exadata system.
        :param str exadata_display_name: The user-friendly name for the Exadata system. The name does not have to be unique.
        :param str exadata_infra_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        :param str exadata_infra_resource_type: Oracle Cloud Infrastructure exadata infrastructure resource type
        :param str exadata_name: The Exadata system name. If the Exadata systems managed by Enterprise Manager, the name is unique amongst the Exadata systems managed by the same Enterprise Manager.
        :param str exadata_rack_type: Exadata rack type.
        :param str exadata_shape: The shape of the Exadata Infrastructure.
        :param str exadata_type: Filter by one or more Exadata types. Possible value are DBMACHINE, EXACS, and EXACC.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Optional list of Exadata insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param bool is_virtualized_exadata: true if virtualization is used in the Exadata system
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the Exadata insight was first enabled. An RFC3339 formatted datetime string
        :param str time_updated: The time the Exadata insight was updated. An RFC3339 formatted datetime string
        """
        GetExadataInsightsExadataInsightSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            enterprise_manager_bridge_id=enterprise_manager_bridge_id,
            enterprise_manager_entity_display_name=enterprise_manager_entity_display_name,
            enterprise_manager_entity_identifier=enterprise_manager_entity_identifier,
            enterprise_manager_entity_name=enterprise_manager_entity_name,
            enterprise_manager_entity_type=enterprise_manager_entity_type,
            enterprise_manager_identifier=enterprise_manager_identifier,
            entity_source=entity_source,
            exadata_display_name=exadata_display_name,
            exadata_infra_id=exadata_infra_id,
            exadata_infra_resource_type=exadata_infra_resource_type,
            exadata_name=exadata_name,
            exadata_rack_type=exadata_rack_type,
            exadata_shape=exadata_shape,
            exadata_type=exadata_type,
            freeform_tags=freeform_tags,
            id=id,
            is_auto_sync_enabled=is_auto_sync_enabled,
            is_virtualized_exadata=is_virtualized_exadata,
            lifecycle_details=lifecycle_details,
            member_vm_cluster_details=member_vm_cluster_details,
            state=state,
            status=status,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             enterprise_manager_bridge_id: str,
             enterprise_manager_entity_display_name: str,
             enterprise_manager_entity_identifier: str,
             enterprise_manager_entity_name: str,
             enterprise_manager_entity_type: str,
             enterprise_manager_identifier: str,
             entity_source: str,
             exadata_display_name: str,
             exadata_infra_id: str,
             exadata_infra_resource_type: str,
             exadata_name: str,
             exadata_rack_type: str,
             exadata_shape: str,
             exadata_type: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             is_auto_sync_enabled: bool,
             is_virtualized_exadata: bool,
             lifecycle_details: str,
             member_vm_cluster_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult'],
             state: str,
             status: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'enterpriseManagerBridgeId' in kwargs:
            enterprise_manager_bridge_id = kwargs['enterpriseManagerBridgeId']
        if 'enterpriseManagerEntityDisplayName' in kwargs:
            enterprise_manager_entity_display_name = kwargs['enterpriseManagerEntityDisplayName']
        if 'enterpriseManagerEntityIdentifier' in kwargs:
            enterprise_manager_entity_identifier = kwargs['enterpriseManagerEntityIdentifier']
        if 'enterpriseManagerEntityName' in kwargs:
            enterprise_manager_entity_name = kwargs['enterpriseManagerEntityName']
        if 'enterpriseManagerEntityType' in kwargs:
            enterprise_manager_entity_type = kwargs['enterpriseManagerEntityType']
        if 'enterpriseManagerIdentifier' in kwargs:
            enterprise_manager_identifier = kwargs['enterpriseManagerIdentifier']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'exadataDisplayName' in kwargs:
            exadata_display_name = kwargs['exadataDisplayName']
        if 'exadataInfraId' in kwargs:
            exadata_infra_id = kwargs['exadataInfraId']
        if 'exadataInfraResourceType' in kwargs:
            exadata_infra_resource_type = kwargs['exadataInfraResourceType']
        if 'exadataName' in kwargs:
            exadata_name = kwargs['exadataName']
        if 'exadataRackType' in kwargs:
            exadata_rack_type = kwargs['exadataRackType']
        if 'exadataShape' in kwargs:
            exadata_shape = kwargs['exadataShape']
        if 'exadataType' in kwargs:
            exadata_type = kwargs['exadataType']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isAutoSyncEnabled' in kwargs:
            is_auto_sync_enabled = kwargs['isAutoSyncEnabled']
        if 'isVirtualizedExadata' in kwargs:
            is_virtualized_exadata = kwargs['isVirtualizedExadata']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'memberVmClusterDetails' in kwargs:
            member_vm_cluster_details = kwargs['memberVmClusterDetails']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        _setter("enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        _setter("enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        _setter("enterprise_manager_entity_name", enterprise_manager_entity_name)
        _setter("enterprise_manager_entity_type", enterprise_manager_entity_type)
        _setter("enterprise_manager_identifier", enterprise_manager_identifier)
        _setter("entity_source", entity_source)
        _setter("exadata_display_name", exadata_display_name)
        _setter("exadata_infra_id", exadata_infra_id)
        _setter("exadata_infra_resource_type", exadata_infra_resource_type)
        _setter("exadata_name", exadata_name)
        _setter("exadata_rack_type", exadata_rack_type)
        _setter("exadata_shape", exadata_shape)
        _setter("exadata_type", exadata_type)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_auto_sync_enabled", is_auto_sync_enabled)
        _setter("is_virtualized_exadata", is_virtualized_exadata)
        _setter("lifecycle_details", lifecycle_details)
        _setter("member_vm_cluster_details", member_vm_cluster_details)
        _setter("state", state)
        _setter("status", status)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> str:
        """
        Enterprise Manager Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataDisplayName")
    def exadata_display_name(self) -> str:
        """
        The user-friendly name for the Exadata system. The name does not have to be unique.
        """
        return pulumi.get(self, "exadata_display_name")

    @property
    @pulumi.getter(name="exadataInfraId")
    def exadata_infra_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        """
        return pulumi.get(self, "exadata_infra_id")

    @property
    @pulumi.getter(name="exadataInfraResourceType")
    def exadata_infra_resource_type(self) -> str:
        """
        Oracle Cloud Infrastructure exadata infrastructure resource type
        """
        return pulumi.get(self, "exadata_infra_resource_type")

    @property
    @pulumi.getter(name="exadataName")
    def exadata_name(self) -> str:
        """
        The Exadata system name. If the Exadata systems managed by Enterprise Manager, the name is unique amongst the Exadata systems managed by the same Enterprise Manager.
        """
        return pulumi.get(self, "exadata_name")

    @property
    @pulumi.getter(name="exadataRackType")
    def exadata_rack_type(self) -> str:
        """
        Exadata rack type.
        """
        return pulumi.get(self, "exadata_rack_type")

    @property
    @pulumi.getter(name="exadataShape")
    def exadata_shape(self) -> str:
        """
        The shape of the Exadata Infrastructure.
        """
        return pulumi.get(self, "exadata_shape")

    @property
    @pulumi.getter(name="exadataType")
    def exadata_type(self) -> str:
        """
        Filter by one or more Exadata types. Possible value are DBMACHINE, EXACS, and EXACC.
        """
        return pulumi.get(self, "exadata_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Optional list of Exadata insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoSyncEnabled")
    def is_auto_sync_enabled(self) -> bool:
        return pulumi.get(self, "is_auto_sync_enabled")

    @property
    @pulumi.getter(name="isVirtualizedExadata")
    def is_virtualized_exadata(self) -> bool:
        """
        true if virtualization is used in the Exadata system
        """
        return pulumi.get(self, "is_virtualized_exadata")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="memberVmClusterDetails")
    def member_vm_cluster_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult']:
        return pulumi.get(self, "member_vm_cluster_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the Exadata insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Exadata insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 dbm_private_endpoint_id: str,
                 member_database_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult'],
                 opsi_private_endpoint_id: str,
                 vmcluster_id: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            member_database_details=member_database_details,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            vmcluster_id=vmcluster_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             dbm_private_endpoint_id: str,
             member_database_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult'],
             opsi_private_endpoint_id: str,
             vmcluster_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'memberDatabaseDetails' in kwargs:
            member_database_details = kwargs['memberDatabaseDetails']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'vmclusterId' in kwargs:
            vmcluster_id = kwargs['vmclusterId']

        _setter("compartment_id", compartment_id)
        _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        _setter("member_database_details", member_database_details)
        _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        _setter("vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult']:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> str:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult'],
                 credential_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult'],
                 database_id: str,
                 database_resource_type: str,
                 dbm_private_endpoint_id: str,
                 defined_tags: Mapping[str, Any],
                 deployment_type: str,
                 entity_source: str,
                 freeform_tags: Mapping[str, Any],
                 opsi_private_endpoint_id: str,
                 service_name: str,
                 system_tags: Mapping[str, Any]):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str entity_source: Source of the Exadata system.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            connection_details=connection_details,
            credential_details=credential_details,
            database_id=database_id,
            database_resource_type=database_resource_type,
            dbm_private_endpoint_id=dbm_private_endpoint_id,
            defined_tags=defined_tags,
            deployment_type=deployment_type,
            entity_source=entity_source,
            freeform_tags=freeform_tags,
            opsi_private_endpoint_id=opsi_private_endpoint_id,
            service_name=service_name,
            system_tags=system_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             connection_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult'],
             credential_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult'],
             database_id: str,
             database_resource_type: str,
             dbm_private_endpoint_id: str,
             defined_tags: Mapping[str, Any],
             deployment_type: str,
             entity_source: str,
             freeform_tags: Mapping[str, Any],
             opsi_private_endpoint_id: str,
             service_name: str,
             system_tags: Mapping[str, Any],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'connectionDetails' in kwargs:
            connection_details = kwargs['connectionDetails']
        if 'credentialDetails' in kwargs:
            credential_details = kwargs['credentialDetails']
        if 'databaseId' in kwargs:
            database_id = kwargs['databaseId']
        if 'databaseResourceType' in kwargs:
            database_resource_type = kwargs['databaseResourceType']
        if 'dbmPrivateEndpointId' in kwargs:
            dbm_private_endpoint_id = kwargs['dbmPrivateEndpointId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'opsiPrivateEndpointId' in kwargs:
            opsi_private_endpoint_id = kwargs['opsiPrivateEndpointId']
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']

        _setter("compartment_id", compartment_id)
        _setter("connection_details", connection_details)
        _setter("credential_details", credential_details)
        _setter("database_id", database_id)
        _setter("database_resource_type", database_resource_type)
        _setter("dbm_private_endpoint_id", dbm_private_endpoint_id)
        _setter("defined_tags", defined_tags)
        _setter("deployment_type", deployment_type)
        _setter("entity_source", entity_source)
        _setter("freeform_tags", freeform_tags)
        _setter("opsi_private_endpoint_id", opsi_private_endpoint_id)
        _setter("service_name", service_name)
        _setter("system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> str:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult(dict):
    def __init__(__self__, *,
                 hosts: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult'],
                 protocol: str,
                 service_name: str):
        GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hosts=hosts,
            protocol=protocol,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hosts: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult'],
             protocol: str,
             service_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        _setter("hosts", hosts)
        _setter("protocol", protocol)
        _setter("service_name", service_name)

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: str,
                 port: int):
        GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_ip=host_ip,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_ip: str,
             port: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostIp' in kwargs:
            host_ip = kwargs['hostIp']

        _setter("host_ip", host_ip)
        _setter("port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str,
                 wallet_secret_id: str):
        GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credential_source_name=credential_source_name,
            credential_type=credential_type,
            password_secret_id=password_secret_id,
            role=role,
            user_name=user_name,
            wallet_secret_id=wallet_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credential_source_name: str,
             credential_type: str,
             password_secret_id: str,
             role: str,
             user_name: str,
             wallet_secret_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'credentialSourceName' in kwargs:
            credential_source_name = kwargs['credentialSourceName']
        if 'credentialType' in kwargs:
            credential_type = kwargs['credentialType']
        if 'passwordSecretId' in kwargs:
            password_secret_id = kwargs['passwordSecretId']
        if 'userName' in kwargs:
            user_name = kwargs['userName']
        if 'walletSecretId' in kwargs:
            wallet_secret_id = kwargs['walletSecretId']

        _setter("credential_source_name", credential_source_name)
        _setter("credential_type", credential_type)
        _setter("password_secret_id", password_secret_id)
        _setter("role", role)
        _setter("user_name", user_name)
        _setter("wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> str:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetExadataInsightsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetHostInsightsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']):
        GetHostInsightsHostInsightSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 compute_id: str,
                 defined_tags: Mapping[str, Any],
                 enterprise_manager_bridge_id: str,
                 enterprise_manager_entity_display_name: str,
                 enterprise_manager_entity_identifier: str,
                 enterprise_manager_entity_name: str,
                 enterprise_manager_entity_type: str,
                 enterprise_manager_identifier: str,
                 entity_source: str,
                 exadata_insight_id: str,
                 freeform_tags: Mapping[str, Any],
                 host_display_name: str,
                 host_name: str,
                 host_type: str,
                 id: str,
                 lifecycle_details: str,
                 management_agent_id: str,
                 platform_name: str,
                 platform_type: str,
                 platform_version: str,
                 processor_count: int,
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str compute_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param str enterprise_manager_identifier: Enterprise Manager Unique Identifier
        :param str entity_source: Source of the host entity.
        :param str exadata_insight_id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str host_display_name: The user-friendly name for the host. The name does not have to be unique.
        :param str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param str host_type: Filter by one or more host types. Possible values are CLOUD-HOST, EXTERNAL-HOST
        :param str id: Optional list of host insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param str platform_name: Platform name.
        :param str platform_type: Filter by one or more platform types. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        :param str platform_version: Platform version.
        :param int processor_count: Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the host insight was first enabled. An RFC3339 formatted datetime string
        :param str time_updated: The time the host insight was updated. An RFC3339 formatted datetime string
        """
        GetHostInsightsHostInsightSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            compute_id=compute_id,
            defined_tags=defined_tags,
            enterprise_manager_bridge_id=enterprise_manager_bridge_id,
            enterprise_manager_entity_display_name=enterprise_manager_entity_display_name,
            enterprise_manager_entity_identifier=enterprise_manager_entity_identifier,
            enterprise_manager_entity_name=enterprise_manager_entity_name,
            enterprise_manager_entity_type=enterprise_manager_entity_type,
            enterprise_manager_identifier=enterprise_manager_identifier,
            entity_source=entity_source,
            exadata_insight_id=exadata_insight_id,
            freeform_tags=freeform_tags,
            host_display_name=host_display_name,
            host_name=host_name,
            host_type=host_type,
            id=id,
            lifecycle_details=lifecycle_details,
            management_agent_id=management_agent_id,
            platform_name=platform_name,
            platform_type=platform_type,
            platform_version=platform_version,
            processor_count=processor_count,
            state=state,
            status=status,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             compute_id: str,
             defined_tags: Mapping[str, Any],
             enterprise_manager_bridge_id: str,
             enterprise_manager_entity_display_name: str,
             enterprise_manager_entity_identifier: str,
             enterprise_manager_entity_name: str,
             enterprise_manager_entity_type: str,
             enterprise_manager_identifier: str,
             entity_source: str,
             exadata_insight_id: str,
             freeform_tags: Mapping[str, Any],
             host_display_name: str,
             host_name: str,
             host_type: str,
             id: str,
             lifecycle_details: str,
             management_agent_id: str,
             platform_name: str,
             platform_type: str,
             platform_version: str,
             processor_count: int,
             state: str,
             status: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'computeId' in kwargs:
            compute_id = kwargs['computeId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'enterpriseManagerBridgeId' in kwargs:
            enterprise_manager_bridge_id = kwargs['enterpriseManagerBridgeId']
        if 'enterpriseManagerEntityDisplayName' in kwargs:
            enterprise_manager_entity_display_name = kwargs['enterpriseManagerEntityDisplayName']
        if 'enterpriseManagerEntityIdentifier' in kwargs:
            enterprise_manager_entity_identifier = kwargs['enterpriseManagerEntityIdentifier']
        if 'enterpriseManagerEntityName' in kwargs:
            enterprise_manager_entity_name = kwargs['enterpriseManagerEntityName']
        if 'enterpriseManagerEntityType' in kwargs:
            enterprise_manager_entity_type = kwargs['enterpriseManagerEntityType']
        if 'enterpriseManagerIdentifier' in kwargs:
            enterprise_manager_identifier = kwargs['enterpriseManagerIdentifier']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'exadataInsightId' in kwargs:
            exadata_insight_id = kwargs['exadataInsightId']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'hostDisplayName' in kwargs:
            host_display_name = kwargs['hostDisplayName']
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'hostType' in kwargs:
            host_type = kwargs['hostType']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'managementAgentId' in kwargs:
            management_agent_id = kwargs['managementAgentId']
        if 'platformName' in kwargs:
            platform_name = kwargs['platformName']
        if 'platformType' in kwargs:
            platform_type = kwargs['platformType']
        if 'platformVersion' in kwargs:
            platform_version = kwargs['platformVersion']
        if 'processorCount' in kwargs:
            processor_count = kwargs['processorCount']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("compute_id", compute_id)
        _setter("defined_tags", defined_tags)
        _setter("enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        _setter("enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        _setter("enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        _setter("enterprise_manager_entity_name", enterprise_manager_entity_name)
        _setter("enterprise_manager_entity_type", enterprise_manager_entity_type)
        _setter("enterprise_manager_identifier", enterprise_manager_identifier)
        _setter("entity_source", entity_source)
        _setter("exadata_insight_id", exadata_insight_id)
        _setter("freeform_tags", freeform_tags)
        _setter("host_display_name", host_display_name)
        _setter("host_name", host_name)
        _setter("host_type", host_type)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("management_agent_id", management_agent_id)
        _setter("platform_name", platform_name)
        _setter("platform_type", platform_type)
        _setter("platform_version", platform_version)
        _setter("processor_count", processor_count)
        _setter("state", state)
        _setter("status", status)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> str:
        """
        Enterprise Manager Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the host entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        """
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostDisplayName")
    def host_display_name(self) -> str:
        """
        The user-friendly name for the host. The name does not have to be unique.
        """
        return pulumi.get(self, "host_display_name")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        """
        Filter by one or more host types. Possible values are CLOUD-HOST, EXTERNAL-HOST
        """
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Optional list of host insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> str:
        """
        Platform name.
        """
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Filter by one or more platform types. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        """
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> str:
        """
        Platform version.
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> int:
        """
        Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        """
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the host insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the host insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetImportableAgentEntitiesItemResult(dict):
    def __init__(__self__, *,
                 entity_source: str,
                 host_name: str,
                 management_agent_display_name: str,
                 management_agent_id: str,
                 platform_type: str):
        """
        :param str entity_source: Source of the importable agent entity.
        :param str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param str management_agent_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        :param str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        GetImportableAgentEntitiesItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_source=entity_source,
            host_name=host_name,
            management_agent_display_name=management_agent_display_name,
            management_agent_id=management_agent_id,
            platform_type=platform_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_source: str,
             host_name: str,
             management_agent_display_name: str,
             management_agent_id: str,
             platform_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'managementAgentDisplayName' in kwargs:
            management_agent_display_name = kwargs['managementAgentDisplayName']
        if 'managementAgentId' in kwargs:
            management_agent_id = kwargs['managementAgentId']
        if 'platformType' in kwargs:
            platform_type = kwargs['platformType']

        _setter("entity_source", entity_source)
        _setter("host_name", host_name)
        _setter("management_agent_display_name", management_agent_display_name)
        _setter("management_agent_id", management_agent_id)
        _setter("platform_type", platform_type)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="managementAgentDisplayName")
    def management_agent_display_name(self) -> str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        """
        return pulumi.get(self, "management_agent_display_name")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableAgentEntityItemResult(dict):
    def __init__(__self__, *,
                 entity_source: str,
                 host_name: str,
                 management_agent_display_name: str,
                 management_agent_id: str,
                 platform_type: str):
        """
        :param str entity_source: Source of the importable agent entity.
        :param str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param str management_agent_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        :param str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        GetImportableAgentEntityItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_source=entity_source,
            host_name=host_name,
            management_agent_display_name=management_agent_display_name,
            management_agent_id=management_agent_id,
            platform_type=platform_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_source: str,
             host_name: str,
             management_agent_display_name: str,
             management_agent_id: str,
             platform_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'managementAgentDisplayName' in kwargs:
            management_agent_display_name = kwargs['managementAgentDisplayName']
        if 'managementAgentId' in kwargs:
            management_agent_id = kwargs['managementAgentId']
        if 'platformType' in kwargs:
            platform_type = kwargs['platformType']

        _setter("entity_source", entity_source)
        _setter("host_name", host_name)
        _setter("management_agent_display_name", management_agent_display_name)
        _setter("management_agent_id", management_agent_id)
        _setter("platform_type", platform_type)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="managementAgentDisplayName")
    def management_agent_display_name(self) -> str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        """
        return pulumi.get(self, "management_agent_display_name")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableComputeEntitiesItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 compute_display_name: str,
                 compute_id: str,
                 entity_source: str,
                 host_name: str,
                 platform_type: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str compute_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        :param str compute_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        :param str entity_source: Source of the importable agent entity.
        :param str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        """
        GetImportableComputeEntitiesItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            compute_display_name=compute_display_name,
            compute_id=compute_id,
            entity_source=entity_source,
            host_name=host_name,
            platform_type=platform_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             compute_display_name: str,
             compute_id: str,
             entity_source: str,
             host_name: str,
             platform_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'computeDisplayName' in kwargs:
            compute_display_name = kwargs['computeDisplayName']
        if 'computeId' in kwargs:
            compute_id = kwargs['computeId']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'platformType' in kwargs:
            platform_type = kwargs['platformType']

        _setter("compartment_id", compartment_id)
        _setter("compute_display_name", compute_display_name)
        _setter("compute_id", compute_id)
        _setter("entity_source", entity_source)
        _setter("host_name", host_name)
        _setter("platform_type", platform_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeDisplayName")
    def compute_display_name(self) -> str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        """
        return pulumi.get(self, "compute_display_name")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableComputeEntityItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 compute_display_name: str,
                 compute_id: str,
                 entity_source: str,
                 host_name: str,
                 platform_type: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str compute_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        :param str compute_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        :param str entity_source: Source of the importable agent entity.
        :param str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS].
        """
        GetImportableComputeEntityItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            compute_display_name=compute_display_name,
            compute_id=compute_id,
            entity_source=entity_source,
            host_name=host_name,
            platform_type=platform_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             compute_display_name: str,
             compute_id: str,
             entity_source: str,
             host_name: str,
             platform_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'computeDisplayName' in kwargs:
            compute_display_name = kwargs['computeDisplayName']
        if 'computeId' in kwargs:
            compute_id = kwargs['computeId']
        if 'entitySource' in kwargs:
            entity_source = kwargs['entitySource']
        if 'hostName' in kwargs:
            host_name = kwargs['hostName']
        if 'platformType' in kwargs:
            platform_type = kwargs['platformType']

        _setter("compartment_id", compartment_id)
        _setter("compute_display_name", compute_display_name)
        _setter("compute_id", compute_id)
        _setter("entity_source", entity_source)
        _setter("host_name", host_name)
        _setter("platform_type", platform_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeDisplayName")
    def compute_display_name(self) -> str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        """
        return pulumi.get(self, "compute_display_name")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetNewsReportContentTypeResult(dict):
    def __init__(__self__, *,
                 capacity_planning_resources: Sequence[str]):
        """
        :param Sequence[str] capacity_planning_resources: Supported resources for capacity planning content type.
        """
        GetNewsReportContentTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity_planning_resources=capacity_planning_resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity_planning_resources: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'capacityPlanningResources' in kwargs:
            capacity_planning_resources = kwargs['capacityPlanningResources']

        _setter("capacity_planning_resources", capacity_planning_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Sequence[str]:
        """
        Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")


@pulumi.output_type
class GetNewsReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The news report name.
        """
        GetNewsReportsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The news report name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult']):
        GetNewsReportsNewsReportCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 content_types: Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult'],
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 locale: str,
                 name: str,
                 news_frequency: str,
                 ons_topic_id: str,
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetNewsReportsNewsReportCollectionItemContentTypeArgs'] content_types: Content types that the news report can handle.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: The description of the news report.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the news report resource.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str locale: Language of the news report.
        :param str name: The news report name.
        :param str news_frequency: News report frequency.
        :param str ons_topic_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the news report was first enabled. An RFC3339 formatted datetime string.
        :param str time_updated: The time the news report was updated. An RFC3339 formatted datetime string.
        """
        GetNewsReportsNewsReportCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            content_types=content_types,
            defined_tags=defined_tags,
            description=description,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            locale=locale,
            name=name,
            news_frequency=news_frequency,
            ons_topic_id=ons_topic_id,
            state=state,
            status=status,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             content_types: Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult'],
             defined_tags: Mapping[str, Any],
             description: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             locale: str,
             name: str,
             news_frequency: str,
             ons_topic_id: str,
             state: str,
             status: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'contentTypes' in kwargs:
            content_types = kwargs['contentTypes']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'newsFrequency' in kwargs:
            news_frequency = kwargs['newsFrequency']
        if 'onsTopicId' in kwargs:
            ons_topic_id = kwargs['onsTopicId']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("content_types", content_types)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("locale", locale)
        _setter("name", name)
        _setter("news_frequency", news_frequency)
        _setter("ons_topic_id", ons_topic_id)
        _setter("state", state)
        _setter("status", status)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult']:
        """
        Content types that the news report can handle.
        """
        return pulumi.get(self, "content_types")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the news report.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the news report resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def locale(self) -> str:
        """
        Language of the news report.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The news report name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newsFrequency")
    def news_frequency(self) -> str:
        """
        News report frequency.
        """
        return pulumi.get(self, "news_frequency")

    @property
    @pulumi.getter(name="onsTopicId")
    def ons_topic_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
        """
        return pulumi.get(self, "ons_topic_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the news report was first enabled. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the news report was updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionItemContentTypeResult(dict):
    def __init__(__self__, *,
                 capacity_planning_resources: Sequence[str]):
        """
        :param Sequence[str] capacity_planning_resources: Supported resources for capacity planning content type.
        """
        GetNewsReportsNewsReportCollectionItemContentTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capacity_planning_resources=capacity_planning_resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capacity_planning_resources: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'capacityPlanningResources' in kwargs:
            capacity_planning_resources = kwargs['capacityPlanningResources']

        _setter("capacity_planning_resources", capacity_planning_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Sequence[str]:
        """
        Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOperationsInsightsPrivateEndpointsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']):
        GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_used_for_rac_dbs: bool,
                 lifecycle_details: str,
                 nsg_ids: Sequence[str],
                 private_endpoint_status_details: str,
                 private_ip: str,
                 state: str,
                 subnet_id: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 vcn_id: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: The description of the private endpoint.
        :param str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The OCID of the Private service accessed database.
        :param bool is_used_for_rac_dbs: The option to filter OPSI private endpoints that can used for RAC. Should be used along with vcnId query parameter.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence[str] nsg_ids: The OCIDs of the network security groups that the private endpoint belongs to.
        :param str private_endpoint_status_details: A message describing the status of the private endpoint connection of this resource. For example, it can be used to provide actionable information about the validity of the private endpoint connection.
        :param str private_ip: The private IP addresses assigned to the private endpoint. All IP addresses will be concatenated if it is RAC DBs.
        :param str state: Lifecycle states
        :param str subnet_id: The OCID of the subnet.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str vcn_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            is_used_for_rac_dbs=is_used_for_rac_dbs,
            lifecycle_details=lifecycle_details,
            nsg_ids=nsg_ids,
            private_endpoint_status_details=private_endpoint_status_details,
            private_ip=private_ip,
            state=state,
            subnet_id=subnet_id,
            system_tags=system_tags,
            time_created=time_created,
            vcn_id=vcn_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             is_used_for_rac_dbs: bool,
             lifecycle_details: str,
             nsg_ids: Sequence[str],
             private_endpoint_status_details: str,
             private_ip: str,
             state: str,
             subnet_id: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             vcn_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isUsedForRacDbs' in kwargs:
            is_used_for_rac_dbs = kwargs['isUsedForRacDbs']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'nsgIds' in kwargs:
            nsg_ids = kwargs['nsgIds']
        if 'privateEndpointStatusDetails' in kwargs:
            private_endpoint_status_details = kwargs['privateEndpointStatusDetails']
        if 'privateIp' in kwargs:
            private_ip = kwargs['privateIp']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'vcnId' in kwargs:
            vcn_id = kwargs['vcnId']

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_used_for_rac_dbs", is_used_for_rac_dbs)
        _setter("lifecycle_details", lifecycle_details)
        _setter("nsg_ids", nsg_ids)
        _setter("private_endpoint_status_details", private_endpoint_status_details)
        _setter("private_ip", private_ip)
        _setter("state", state)
        _setter("subnet_id", subnet_id)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the private endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Private service accessed database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUsedForRacDbs")
    def is_used_for_rac_dbs(self) -> bool:
        """
        The option to filter OPSI private endpoints that can used for RAC. Should be used along with vcnId query parameter.
        """
        return pulumi.get(self, "is_used_for_rac_dbs")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        """
        The OCIDs of the network security groups that the private endpoint belongs to.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointStatusDetails")
    def private_endpoint_status_details(self) -> str:
        """
        A message describing the status of the private endpoint connection of this resource. For example, it can be used to provide actionable information about the validity of the private endpoint connection.
        """
        return pulumi.get(self, "private_endpoint_status_details")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP addresses assigned to the private endpoint. All IP addresses will be concatenated if it is RAC DBs.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        GetOperationsInsightsWarehouseUsersFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']):
        GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_password: str,
                 defined_tags: Mapping[str, Any],
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_awr_data_access: bool,
                 is_em_data_access: bool,
                 is_opsi_data_access: bool,
                 lifecycle_details: str,
                 name: str,
                 operations_insights_warehouse_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str connection_password: User provided connection password for the AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Operations Insights Warehouse User identifier
        :param bool is_awr_data_access: Indicate whether user has access to AWR data.
        :param bool is_em_data_access: Indicate whether user has access to EM data.
        :param bool is_opsi_data_access: Indicate whether user has access to OPSI data.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        :param str operations_insights_warehouse_id: Unique Operations Insights Warehouse identifier
        :param str state: Lifecycle states
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            connection_password=connection_password,
            defined_tags=defined_tags,
            freeform_tags=freeform_tags,
            id=id,
            is_awr_data_access=is_awr_data_access,
            is_em_data_access=is_em_data_access,
            is_opsi_data_access=is_opsi_data_access,
            lifecycle_details=lifecycle_details,
            name=name,
            operations_insights_warehouse_id=operations_insights_warehouse_id,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             connection_password: str,
             defined_tags: Mapping[str, Any],
             freeform_tags: Mapping[str, Any],
             id: str,
             is_awr_data_access: bool,
             is_em_data_access: bool,
             is_opsi_data_access: bool,
             lifecycle_details: str,
             name: str,
             operations_insights_warehouse_id: str,
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'connectionPassword' in kwargs:
            connection_password = kwargs['connectionPassword']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isAwrDataAccess' in kwargs:
            is_awr_data_access = kwargs['isAwrDataAccess']
        if 'isEmDataAccess' in kwargs:
            is_em_data_access = kwargs['isEmDataAccess']
        if 'isOpsiDataAccess' in kwargs:
            is_opsi_data_access = kwargs['isOpsiDataAccess']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'operationsInsightsWarehouseId' in kwargs:
            operations_insights_warehouse_id = kwargs['operationsInsightsWarehouseId']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("connection_password", connection_password)
        _setter("defined_tags", defined_tags)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_awr_data_access", is_awr_data_access)
        _setter("is_em_data_access", is_em_data_access)
        _setter("is_opsi_data_access", is_opsi_data_access)
        _setter("lifecycle_details", lifecycle_details)
        _setter("name", name)
        _setter("operations_insights_warehouse_id", operations_insights_warehouse_id)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionPassword")
    def connection_password(self) -> str:
        """
        User provided connection password for the AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        return pulumi.get(self, "connection_password")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Operations Insights Warehouse User identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAwrDataAccess")
    def is_awr_data_access(self) -> bool:
        """
        Indicate whether user has access to AWR data.
        """
        return pulumi.get(self, "is_awr_data_access")

    @property
    @pulumi.getter(name="isEmDataAccess")
    def is_em_data_access(self) -> bool:
        """
        Indicate whether user has access to EM data.
        """
        return pulumi.get(self, "is_em_data_access")

    @property
    @pulumi.getter(name="isOpsiDataAccess")
    def is_opsi_data_access(self) -> bool:
        """
        Indicate whether user has access to OPSI data.
        """
        return pulumi.get(self, "is_opsi_data_access")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOperationsInsightsWarehousesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetOperationsInsightsWarehousesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']):
        GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 cpu_allocated: float,
                 cpu_used: float,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 dynamic_group_id: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 operations_insights_tenancy_id: str,
                 state: str,
                 storage_allocated_in_gbs: float,
                 storage_used_in_gbs: float,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_last_wallet_rotated: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param float cpu_allocated: Number of OCPUs allocated to OPSI Warehouse ADW.
        :param float cpu_used: Number of OCPUs used by OPSI Warehouse ADW. Can be fractional.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name.
        :param str dynamic_group_id: OCID of the dynamic group created for the warehouse
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Operations Insights Warehouse identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str operations_insights_tenancy_id: Tenancy Identifier of Operations Insights service
        :param str state: Lifecycle states
        :param float storage_allocated_in_gbs: Storage allocated to OPSI Warehouse ADW.
        :param float storage_used_in_gbs: Storage by OPSI Warehouse ADW in GB.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_last_wallet_rotated: The time at which the ADW wallet was last rotated for the Operations Insights Warehouse. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            cpu_allocated=cpu_allocated,
            cpu_used=cpu_used,
            defined_tags=defined_tags,
            display_name=display_name,
            dynamic_group_id=dynamic_group_id,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            operations_insights_tenancy_id=operations_insights_tenancy_id,
            state=state,
            storage_allocated_in_gbs=storage_allocated_in_gbs,
            storage_used_in_gbs=storage_used_in_gbs,
            system_tags=system_tags,
            time_created=time_created,
            time_last_wallet_rotated=time_last_wallet_rotated,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             cpu_allocated: float,
             cpu_used: float,
             defined_tags: Mapping[str, Any],
             display_name: str,
             dynamic_group_id: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             operations_insights_tenancy_id: str,
             state: str,
             storage_allocated_in_gbs: float,
             storage_used_in_gbs: float,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_last_wallet_rotated: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'cpuAllocated' in kwargs:
            cpu_allocated = kwargs['cpuAllocated']
        if 'cpuUsed' in kwargs:
            cpu_used = kwargs['cpuUsed']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'dynamicGroupId' in kwargs:
            dynamic_group_id = kwargs['dynamicGroupId']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'operationsInsightsTenancyId' in kwargs:
            operations_insights_tenancy_id = kwargs['operationsInsightsTenancyId']
        if 'storageAllocatedInGbs' in kwargs:
            storage_allocated_in_gbs = kwargs['storageAllocatedInGbs']
        if 'storageUsedInGbs' in kwargs:
            storage_used_in_gbs = kwargs['storageUsedInGbs']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeLastWalletRotated' in kwargs:
            time_last_wallet_rotated = kwargs['timeLastWalletRotated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("cpu_allocated", cpu_allocated)
        _setter("cpu_used", cpu_used)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("dynamic_group_id", dynamic_group_id)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("operations_insights_tenancy_id", operations_insights_tenancy_id)
        _setter("state", state)
        _setter("storage_allocated_in_gbs", storage_allocated_in_gbs)
        _setter("storage_used_in_gbs", storage_used_in_gbs)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_last_wallet_rotated", time_last_wallet_rotated)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuAllocated")
    def cpu_allocated(self) -> float:
        """
        Number of OCPUs allocated to OPSI Warehouse ADW.
        """
        return pulumi.get(self, "cpu_allocated")

    @property
    @pulumi.getter(name="cpuUsed")
    def cpu_used(self) -> float:
        """
        Number of OCPUs used by OPSI Warehouse ADW. Can be fractional.
        """
        return pulumi.get(self, "cpu_used")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dynamicGroupId")
    def dynamic_group_id(self) -> str:
        """
        OCID of the dynamic group created for the warehouse
        """
        return pulumi.get(self, "dynamic_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="operationsInsightsTenancyId")
    def operations_insights_tenancy_id(self) -> str:
        """
        Tenancy Identifier of Operations Insights service
        """
        return pulumi.get(self, "operations_insights_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageAllocatedInGbs")
    def storage_allocated_in_gbs(self) -> float:
        """
        Storage allocated to OPSI Warehouse ADW.
        """
        return pulumi.get(self, "storage_allocated_in_gbs")

    @property
    @pulumi.getter(name="storageUsedInGbs")
    def storage_used_in_gbs(self) -> float:
        """
        Storage by OPSI Warehouse ADW in GB.
        """
        return pulumi.get(self, "storage_used_in_gbs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastWalletRotated")
    def time_last_wallet_rotated(self) -> str:
        """
        The time at which the ADW wallet was last rotated for the Operations Insights Warehouse. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_wallet_rotated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOpsiConfigurationConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Sequence[str],
                 config_item_type: str,
                 default_value: str,
                 metadatas: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult'],
                 name: str,
                 value: str):
        """
        :param Sequence[str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param str config_item_type: Type of configuration item.
        :param str default_value: Value of configuration item.
        :param Sequence['GetOpsiConfigurationConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param str name: Name of configuration item.
        :param str value: Value of configuration item.
        """
        GetOpsiConfigurationConfigItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            applicable_contexts=applicable_contexts,
            config_item_type=config_item_type,
            default_value=default_value,
            metadatas=metadatas,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             applicable_contexts: Sequence[str],
             config_item_type: str,
             default_value: str,
             metadatas: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult'],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicableContexts' in kwargs:
            applicable_contexts = kwargs['applicableContexts']
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']

        _setter("applicable_contexts", applicable_contexts)
        _setter("config_item_type", config_item_type)
        _setter("default_value", default_value)
        _setter("metadatas", metadatas)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Sequence[str]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult']:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: str,
                 data_type: str,
                 description: str,
                 display_name: str,
                 unit_details: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult'],
                 value_input_details: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult']):
        """
        :param str config_item_type: Type of configuration item.
        :param str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param str description: Description of OPSI configuration.
        :param str display_name: User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param Sequence['GetOpsiConfigurationConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['GetOpsiConfigurationConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        GetOpsiConfigurationConfigItemMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_item_type=config_item_type,
            data_type=data_type,
            description=description,
            display_name=display_name,
            unit_details=unit_details,
            value_input_details=value_input_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_item_type: str,
             data_type: str,
             description: str,
             display_name: str,
             unit_details: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult'],
             value_input_details: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'unitDetails' in kwargs:
            unit_details = kwargs['unitDetails']
        if 'valueInputDetails' in kwargs:
            value_input_details = kwargs['valueInputDetails']

        _setter("config_item_type", config_item_type)
        _setter("data_type", data_type)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("unit_details", unit_details)
        _setter("value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult']:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult']:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 unit: str):
        """
        :param str display_name: User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param str unit: Unit of configuration item.
        """
        GetOpsiConfigurationConfigItemMetadataUnitDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             unit: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: str,
                 max_value: str,
                 min_value: str,
                 possible_values: Sequence[str]):
        """
        :param str allowed_value_type: Allowed value type of configuration item.
        :param str max_value: Maximum value limit for the configuration item.
        :param str min_value: Minimum value limit for the configuration item.
        :param Sequence[str] possible_values: Allowed values to pick for the configuration item.
        """
        GetOpsiConfigurationConfigItemMetadataValueInputDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_value_type=allowed_value_type,
            max_value=max_value,
            min_value=min_value,
            possible_values=possible_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_value_type: str,
             max_value: str,
             min_value: str,
             possible_values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedValueType' in kwargs:
            allowed_value_type = kwargs['allowedValueType']
        if 'maxValue' in kwargs:
            max_value = kwargs['maxValue']
        if 'minValue' in kwargs:
            min_value = kwargs['minValue']
        if 'possibleValues' in kwargs:
            possible_values = kwargs['possibleValues']

        _setter("allowed_value_type", allowed_value_type)
        _setter("max_value", max_value)
        _setter("min_value", min_value)
        _setter("possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> str:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> str:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> str:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Sequence[str],
                 config_item_type: str,
                 default_value: str,
                 metadatas: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult'],
                 name: str,
                 value: str,
                 value_source_config: str):
        """
        :param Sequence[str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param str config_item_type: Type of configuration item.
        :param str default_value: Value of configuration item.
        :param Sequence['GetOpsiConfigurationConfigurationItemConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param str name: A filter to return only configuration items that match the entire name.
        :param str value: Value of configuration item.
        :param str value_source_config: Source configuration from where the value is taken for a configuration item.
        """
        GetOpsiConfigurationConfigurationItemConfigItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            applicable_contexts=applicable_contexts,
            config_item_type=config_item_type,
            default_value=default_value,
            metadatas=metadatas,
            name=name,
            value=value,
            value_source_config=value_source_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             applicable_contexts: Sequence[str],
             config_item_type: str,
             default_value: str,
             metadatas: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult'],
             name: str,
             value: str,
             value_source_config: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicableContexts' in kwargs:
            applicable_contexts = kwargs['applicableContexts']
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']
        if 'valueSourceConfig' in kwargs:
            value_source_config = kwargs['valueSourceConfig']

        _setter("applicable_contexts", applicable_contexts)
        _setter("config_item_type", config_item_type)
        _setter("default_value", default_value)
        _setter("metadatas", metadatas)
        _setter("name", name)
        _setter("value", value)
        _setter("value_source_config", value_source_config)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Sequence[str]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult']:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only configuration items that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueSourceConfig")
    def value_source_config(self) -> str:
        """
        Source configuration from where the value is taken for a configuration item.
        """
        return pulumi.get(self, "value_source_config")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: str,
                 data_type: str,
                 description: str,
                 display_name: str,
                 unit_details: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult'],
                 value_input_details: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult']):
        """
        :param str config_item_type: Type of configuration item.
        :param str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param str description: Description of configuration item .
        :param str display_name: User-friendly display name for the configuration item unit.
        :param Sequence['GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        GetOpsiConfigurationConfigurationItemConfigItemMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_item_type=config_item_type,
            data_type=data_type,
            description=description,
            display_name=display_name,
            unit_details=unit_details,
            value_input_details=value_input_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_item_type: str,
             data_type: str,
             description: str,
             display_name: str,
             unit_details: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult'],
             value_input_details: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'unitDetails' in kwargs:
            unit_details = kwargs['unitDetails']
        if 'valueInputDetails' in kwargs:
            value_input_details = kwargs['valueInputDetails']

        _setter("config_item_type", config_item_type)
        _setter("data_type", data_type)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("unit_details", unit_details)
        _setter("value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of configuration item .
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name for the configuration item unit.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult']:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult']:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 unit: str):
        """
        :param str display_name: User-friendly display name for the configuration item unit.
        :param str unit: Unit of configuration item.
        """
        GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             unit: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly display name for the configuration item unit.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: str,
                 max_value: str,
                 min_value: str,
                 possible_values: Sequence[str]):
        """
        :param str allowed_value_type: Allowed value type of configuration item.
        :param str max_value: Maximum value limit for the configuration item.
        :param str min_value: Minimum value limit for the configuration item.
        :param Sequence[str] possible_values: Allowed values to pick for the configuration item.
        """
        GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_value_type=allowed_value_type,
            max_value=max_value,
            min_value=min_value,
            possible_values=possible_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_value_type: str,
             max_value: str,
             min_value: str,
             possible_values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedValueType' in kwargs:
            allowed_value_type = kwargs['allowedValueType']
        if 'maxValue' in kwargs:
            max_value = kwargs['maxValue']
        if 'minValue' in kwargs:
            min_value = kwargs['minValue']
        if 'possibleValues' in kwargs:
            possible_values = kwargs['possibleValues']

        _setter("allowed_value_type", allowed_value_type)
        _setter("max_value", max_value)
        _setter("min_value", min_value)
        _setter("possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> str:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> str:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> str:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetOpsiConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of configuration item.
        """
        GetOpsiConfigurationsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult']):
        GetOpsiConfigurationsOpsiConfigurationsCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 config_item_custom_statuses: Sequence[str],
                 config_item_fields: Sequence[str],
                 config_items: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult'],
                 config_items_applicable_contexts: Sequence[str],
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 opsi_config_fields: Sequence[str],
                 opsi_config_type: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemArgs'] config_items: Array of configuration item summary objects.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Description of OPSI configuration.
        :param str display_name: Filter to return based on resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of OPSI configuration resource.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str opsi_config_type: Filter to return based on configuration type of OPSI configuration.
        :param str state: Filter to return based on Lifecycle state of OPSI configuration.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            config_item_custom_statuses=config_item_custom_statuses,
            config_item_fields=config_item_fields,
            config_items=config_items,
            config_items_applicable_contexts=config_items_applicable_contexts,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            opsi_config_fields=opsi_config_fields,
            opsi_config_type=opsi_config_type,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             config_item_custom_statuses: Sequence[str],
             config_item_fields: Sequence[str],
             config_items: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult'],
             config_items_applicable_contexts: Sequence[str],
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             opsi_config_fields: Sequence[str],
             opsi_config_type: str,
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'configItemCustomStatuses' in kwargs:
            config_item_custom_statuses = kwargs['configItemCustomStatuses']
        if 'configItemFields' in kwargs:
            config_item_fields = kwargs['configItemFields']
        if 'configItems' in kwargs:
            config_items = kwargs['configItems']
        if 'configItemsApplicableContexts' in kwargs:
            config_items_applicable_contexts = kwargs['configItemsApplicableContexts']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'opsiConfigFields' in kwargs:
            opsi_config_fields = kwargs['opsiConfigFields']
        if 'opsiConfigType' in kwargs:
            opsi_config_type = kwargs['opsiConfigType']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("config_item_custom_statuses", config_item_custom_statuses)
        _setter("config_item_fields", config_item_fields)
        _setter("config_items", config_items)
        _setter("config_items_applicable_contexts", config_items_applicable_contexts)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("opsi_config_fields", opsi_config_fields)
        _setter("opsi_config_type", opsi_config_type)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configItemCustomStatuses")
    def config_item_custom_statuses(self) -> Sequence[str]:
        return pulumi.get(self, "config_item_custom_statuses")

    @property
    @pulumi.getter(name="configItemFields")
    def config_item_fields(self) -> Sequence[str]:
        return pulumi.get(self, "config_item_fields")

    @property
    @pulumi.getter(name="configItems")
    def config_items(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult']:
        """
        Array of configuration item summary objects.
        """
        return pulumi.get(self, "config_items")

    @property
    @pulumi.getter(name="configItemsApplicableContexts")
    def config_items_applicable_contexts(self) -> Sequence[str]:
        return pulumi.get(self, "config_items_applicable_contexts")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Filter to return based on resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of OPSI configuration resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="opsiConfigFields")
    def opsi_config_fields(self) -> Sequence[str]:
        return pulumi.get(self, "opsi_config_fields")

    @property
    @pulumi.getter(name="opsiConfigType")
    def opsi_config_type(self) -> str:
        """
        Filter to return based on configuration type of OPSI configuration.
        """
        return pulumi.get(self, "opsi_config_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Filter to return based on Lifecycle state of OPSI configuration.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Sequence[str],
                 config_item_type: str,
                 default_value: str,
                 metadatas: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult'],
                 name: str,
                 value: str):
        """
        :param Sequence[str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param str config_item_type: Type of configuration item.
        :param str default_value: Value of configuration item.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param str name: Name of configuration item.
        :param str value: Value of configuration item.
        """
        GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            applicable_contexts=applicable_contexts,
            config_item_type=config_item_type,
            default_value=default_value,
            metadatas=metadatas,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             applicable_contexts: Sequence[str],
             config_item_type: str,
             default_value: str,
             metadatas: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult'],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicableContexts' in kwargs:
            applicable_contexts = kwargs['applicableContexts']
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']

        _setter("applicable_contexts", applicable_contexts)
        _setter("config_item_type", config_item_type)
        _setter("default_value", default_value)
        _setter("metadatas", metadatas)
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Sequence[str]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult']:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: str,
                 data_type: str,
                 description: str,
                 display_name: str,
                 unit_details: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult'],
                 value_input_details: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult']):
        """
        :param str config_item_type: Type of configuration item.
        :param str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param str description: Description of OPSI configuration.
        :param str display_name: Filter to return based on resources that match the entire display name.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_item_type=config_item_type,
            data_type=data_type,
            description=description,
            display_name=display_name,
            unit_details=unit_details,
            value_input_details=value_input_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_item_type: str,
             data_type: str,
             description: str,
             display_name: str,
             unit_details: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult'],
             value_input_details: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configItemType' in kwargs:
            config_item_type = kwargs['configItemType']
        if 'dataType' in kwargs:
            data_type = kwargs['dataType']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'unitDetails' in kwargs:
            unit_details = kwargs['unitDetails']
        if 'valueInputDetails' in kwargs:
            value_input_details = kwargs['valueInputDetails']

        _setter("config_item_type", config_item_type)
        _setter("data_type", data_type)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("unit_details", unit_details)
        _setter("value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Filter to return based on resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult']:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult']:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 unit: str):
        """
        :param str display_name: Filter to return based on resources that match the entire display name.
        :param str unit: Unit of configuration item.
        """
        GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             unit: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Filter to return based on resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: str,
                 max_value: str,
                 min_value: str,
                 possible_values: Sequence[str]):
        """
        :param str allowed_value_type: Allowed value type of configuration item.
        :param str max_value: Maximum value limit for the configuration item.
        :param str min_value: Minimum value limit for the configuration item.
        :param Sequence[str] possible_values: Allowed values to pick for the configuration item.
        """
        GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_value_type=allowed_value_type,
            max_value=max_value,
            min_value=min_value,
            possible_values=possible_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_value_type: str,
             max_value: str,
             min_value: str,
             possible_values: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedValueType' in kwargs:
            allowed_value_type = kwargs['allowedValueType']
        if 'maxValue' in kwargs:
            max_value = kwargs['maxValue']
        if 'minValue' in kwargs:
            min_value = kwargs['minValue']
        if 'possibleValues' in kwargs:
            possible_values = kwargs['possibleValues']

        _setter("allowed_value_type", allowed_value_type)
        _setter("max_value", max_value)
        _setter("min_value", min_value)
        _setter("possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> str:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> str:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> str:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


