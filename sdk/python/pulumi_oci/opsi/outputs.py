# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseInsightConnectionCredentialDetails',
    'DatabaseInsightConnectionDetails',
    'DatabaseInsightConnectionDetailsHost',
    'DatabaseInsightCredentialDetails',
    'ExadataInsightMemberVmClusterDetail',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetail',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails',
    'NewsReportContentTypes',
    'OpsiConfigurationConfigItem',
    'OpsiConfigurationConfigItemMetadata',
    'OpsiConfigurationConfigItemMetadataUnitDetail',
    'OpsiConfigurationConfigItemMetadataValueInputDetail',
    'GetAwrHubAwrSnapshotItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult',
    'GetAwrHubAwrSnapshotsFilterResult',
    'GetAwrHubAwrSourcesSummaryItemResult',
    'GetAwrHubSourcesAwrHubSourceSummaryCollectionResult',
    'GetAwrHubSourcesAwrHubSourceSummaryCollectionItemResult',
    'GetAwrHubSourcesFilterResult',
    'GetAwrHubsAwrHubSummaryCollectionResult',
    'GetAwrHubsAwrHubSummaryCollectionItemResult',
    'GetAwrHubsFilterResult',
    'GetDatabaseInsightConnectionCredentialDetailResult',
    'GetDatabaseInsightConnectionDetailResult',
    'GetDatabaseInsightConnectionDetailHostResult',
    'GetDatabaseInsightCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult',
    'GetDatabaseInsightsFilterResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult',
    'GetEnterpriseManagerBridgesFilterResult',
    'GetExadataInsightMemberVmClusterDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult',
    'GetExadataInsightsFilterResult',
    'GetHostInsightsFilterResult',
    'GetHostInsightsHostInsightSummaryCollectionResult',
    'GetHostInsightsHostInsightSummaryCollectionItemResult',
    'GetImportableAgentEntitiesItemResult',
    'GetImportableAgentEntityItemResult',
    'GetImportableComputeEntitiesItemResult',
    'GetImportableComputeEntityItemResult',
    'GetNewsReportContentTypeResult',
    'GetNewsReportsFilterResult',
    'GetNewsReportsNewsReportCollectionResult',
    'GetNewsReportsNewsReportCollectionItemResult',
    'GetNewsReportsNewsReportCollectionItemContentTypeResult',
    'GetOperationsInsightsPrivateEndpointsFilterResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult',
    'GetOperationsInsightsWarehouseUsersFilterResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult',
    'GetOperationsInsightsWarehousesFilterResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult',
    'GetOpsiConfigurationConfigItemResult',
    'GetOpsiConfigurationConfigItemMetadataResult',
    'GetOpsiConfigurationConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationConfigItemMetadataValueInputDetailResult',
    'GetOpsiConfigurationConfigurationItemConfigItemResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult',
    'GetOpsiConfigurationsFilterResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult',
]

@pulumi.output_type
class DatabaseInsightConnectionCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: builtins.str,
                 credential_source_name: Optional[builtins.str] = None,
                 password_secret_id: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 user_name: Optional[builtins.str] = None):
        """
        :param builtins.str credential_type: Credential type.
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[builtins.str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[builtins.str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DatabaseInsightConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[builtins.str] = None,
                 hosts: Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']] = None,
                 port: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 service_name: Optional[builtins.str] = None):
        """
        :param builtins.str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['DatabaseInsightConnectionDetailsHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param builtins.int port: Listener port number used for connection requests.
        :param builtins.str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param builtins.str service_name: Database service name used for connection requests.
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[builtins.str]:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[builtins.str]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class DatabaseInsightConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None):
        """
        :param builtins.str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param builtins.int port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[builtins.str]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DatabaseInsightCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: builtins.str,
                 credential_source_name: Optional[builtins.str] = None,
                 password_secret_id: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 user_name: Optional[builtins.str] = None,
                 wallet_secret_id: Optional[builtins.str] = None):
        """
        :param builtins.str credential_type: Credential type.
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        :param builtins.str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[builtins.str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[builtins.str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "dbmPrivateEndpointId":
            suggest = "dbm_private_endpoint_id"
        elif key == "memberDatabaseDetails":
            suggest = "member_database_details"
        elif key == "opsiPrivateEndpointId":
            suggest = "opsi_private_endpoint_id"
        elif key == "vmClusterType":
            suggest = "vm_cluster_type"
        elif key == "vmclusterId":
            suggest = "vmcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[builtins.str] = None,
                 dbm_private_endpoint_id: Optional[builtins.str] = None,
                 member_database_details: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']] = None,
                 opsi_private_endpoint_id: Optional[builtins.str] = None,
                 vm_cluster_type: Optional[builtins.str] = None,
                 vmcluster_id: Optional[builtins.str] = None):
        """
        :param builtins.str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str dbm_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        :param Sequence['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailArgs'] member_database_details: The databases that belong to the VM Cluster
        :param builtins.str opsi_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        :param builtins.str vm_cluster_type: Exadata VMCluster type
        :param builtins.str vmcluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if member_database_details is not None:
            pulumi.set(__self__, "member_database_details", member_database_details)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if vm_cluster_type is not None:
            pulumi.set(__self__, "vm_cluster_type", vm_cluster_type)
        if vmcluster_id is not None:
            pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint
        """
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']]:
        """
        The databases that belong to the VM Cluster
        """
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmClusterType")
    def vm_cluster_type(self) -> Optional[builtins.str]:
        """
        Exadata VMCluster type
        """
        return pulumi.get(self, "vm_cluster_type")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster.
        """
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "connectionCredentialDetails":
            suggest = "connection_credential_details"
        elif key == "connectionDetails":
            suggest = "connection_details"
        elif key == "credentialDetails":
            suggest = "credential_details"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseResourceType":
            suggest = "database_resource_type"
        elif key == "dbmPrivateEndpointId":
            suggest = "dbm_private_endpoint_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "entitySource":
            suggest = "entity_source"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "managementAgentId":
            suggest = "management_agent_id"
        elif key == "opsiPrivateEndpointId":
            suggest = "opsi_private_endpoint_id"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "systemTags":
            suggest = "system_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[builtins.str] = None,
                 connection_credential_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails'] = None,
                 connection_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails'] = None,
                 credential_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails'] = None,
                 database_id: Optional[builtins.str] = None,
                 database_resource_type: Optional[builtins.str] = None,
                 dbm_private_endpoint_id: Optional[builtins.str] = None,
                 defined_tags: Optional[Mapping[str, builtins.str]] = None,
                 deployment_type: Optional[builtins.str] = None,
                 entity_source: Optional[builtins.str] = None,
                 freeform_tags: Optional[Mapping[str, builtins.str]] = None,
                 management_agent_id: Optional[builtins.str] = None,
                 opsi_private_endpoint_id: Optional[builtins.str] = None,
                 service_name: Optional[builtins.str] = None,
                 system_tags: Optional[Mapping[str, builtins.str]] = None):
        """
        :param builtins.str compartment_id: (Updatable) Compartment Identifier of database
        :param 'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailsArgs' connection_credential_details: User credential details to connect to the database.
        :param 'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsArgs' connection_details: Connection details to connect to the database. HostName, protocol, and port should be specified.
        :param 'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailsArgs' credential_details: User credential details to connect to the database.
        :param builtins.str database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        :param builtins.str database_resource_type: Oracle Cloud Infrastructure database resource type
        :param Mapping[str, builtins.str] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str deployment_type: Database Deployment Type (EXACS will be supported in the future)
        :param builtins.str entity_source: (Updatable) Source of the Exadata system.
        :param Mapping[str, builtins.str] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param builtins.str opsi_private_endpoint_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_credential_details is not None:
            pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if credential_details is not None:
            pulumi.set(__self__, "credential_details", credential_details)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_resource_type is not None:
            pulumi.set(__self__, "database_resource_type", database_resource_type)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) Compartment Identifier of database
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails']:
        """
        User credential details to connect to the database.
        """
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails']:
        """
        Connection details to connect to the database. HostName, protocol, and port should be specified.
        """
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails']:
        """
        User credential details to connect to the database.
        """
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[builtins.str]:
        """
        Oracle Cloud Infrastructure database resource type
        """
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[builtins.str]:
        """
        Database Deployment Type (EXACS will be supported in the future)
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[builtins.str]:
        """
        (Updatable) Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OPSI private endpoint
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: builtins.str,
                 credential_source_name: Optional[builtins.str] = None,
                 password_secret_id: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 user_name: Optional[builtins.str] = None,
                 wallet_secret_id: Optional[builtins.str] = None):
        """
        :param builtins.str credential_type: Credential type.
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        :param builtins.str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[builtins.str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[builtins.str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored. This is used for TCPS support in BM/VM/ExaCS cases.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[builtins.str] = None,
                 hosts: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']] = None,
                 port: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 service_name: Optional[builtins.str] = None):
        """
        :param builtins.str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param builtins.int port: Listener port number used for connection requests.
        :param builtins.str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param builtins.str service_name: Database service name used for connection requests.
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[builtins.str]:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[builtins.str]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None):
        """
        :param builtins.str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param builtins.int port: Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[builtins.str]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        """
        Listener port number used for connection requests for rivate endpoint accessed db resource.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: builtins.str,
                 credential_source_name: Optional[builtins.str] = None,
                 password_secret_id: Optional[builtins.str] = None,
                 role: Optional[builtins.str] = None,
                 user_name: Optional[builtins.str] = None,
                 wallet_secret_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class NewsReportContentTypes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionableInsightsResources":
            suggest = "actionable_insights_resources"
        elif key == "capacityPlanningResources":
            suggest = "capacity_planning_resources"
        elif key == "sqlInsightsFleetAnalysisResources":
            suggest = "sql_insights_fleet_analysis_resources"
        elif key == "sqlInsightsPerformanceDegradationResources":
            suggest = "sql_insights_performance_degradation_resources"
        elif key == "sqlInsightsPlanChangesResources":
            suggest = "sql_insights_plan_changes_resources"
        elif key == "sqlInsightsTopDatabasesResources":
            suggest = "sql_insights_top_databases_resources"
        elif key == "sqlInsightsTopSqlByInsightsResources":
            suggest = "sql_insights_top_sql_by_insights_resources"
        elif key == "sqlInsightsTopSqlResources":
            suggest = "sql_insights_top_sql_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NewsReportContentTypes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NewsReportContentTypes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NewsReportContentTypes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actionable_insights_resources: Optional[Sequence[builtins.str]] = None,
                 capacity_planning_resources: Optional[Sequence[builtins.str]] = None,
                 sql_insights_fleet_analysis_resources: Optional[Sequence[builtins.str]] = None,
                 sql_insights_performance_degradation_resources: Optional[Sequence[builtins.str]] = None,
                 sql_insights_plan_changes_resources: Optional[Sequence[builtins.str]] = None,
                 sql_insights_top_databases_resources: Optional[Sequence[builtins.str]] = None,
                 sql_insights_top_sql_by_insights_resources: Optional[Sequence[builtins.str]] = None,
                 sql_insights_top_sql_resources: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] actionable_insights_resources: (Updatable) Supported resources for actionable insights content type.
        :param Sequence[builtins.str] capacity_planning_resources: (Updatable) Supported resources for capacity planning content type.
        :param Sequence[builtins.str] sql_insights_fleet_analysis_resources: (Updatable) Supported resources for SQL insights - fleet analysis content type.
        :param Sequence[builtins.str] sql_insights_performance_degradation_resources: (Updatable) Supported resources for SQL insights - performance degradation content type.
        :param Sequence[builtins.str] sql_insights_plan_changes_resources: (Updatable) Supported resources for SQL insights - plan changes content type.
        :param Sequence[builtins.str] sql_insights_top_databases_resources: (Updatable) Supported resources for SQL insights - top databases content type.
        :param Sequence[builtins.str] sql_insights_top_sql_by_insights_resources: (Updatable) Supported resources for SQL insights - top SQL by insights content type.
        :param Sequence[builtins.str] sql_insights_top_sql_resources: (Updatable) Supported resources for SQL insights - top SQL content type.
        """
        if actionable_insights_resources is not None:
            pulumi.set(__self__, "actionable_insights_resources", actionable_insights_resources)
        if capacity_planning_resources is not None:
            pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)
        if sql_insights_fleet_analysis_resources is not None:
            pulumi.set(__self__, "sql_insights_fleet_analysis_resources", sql_insights_fleet_analysis_resources)
        if sql_insights_performance_degradation_resources is not None:
            pulumi.set(__self__, "sql_insights_performance_degradation_resources", sql_insights_performance_degradation_resources)
        if sql_insights_plan_changes_resources is not None:
            pulumi.set(__self__, "sql_insights_plan_changes_resources", sql_insights_plan_changes_resources)
        if sql_insights_top_databases_resources is not None:
            pulumi.set(__self__, "sql_insights_top_databases_resources", sql_insights_top_databases_resources)
        if sql_insights_top_sql_by_insights_resources is not None:
            pulumi.set(__self__, "sql_insights_top_sql_by_insights_resources", sql_insights_top_sql_by_insights_resources)
        if sql_insights_top_sql_resources is not None:
            pulumi.set(__self__, "sql_insights_top_sql_resources", sql_insights_top_sql_resources)

    @property
    @pulumi.getter(name="actionableInsightsResources")
    def actionable_insights_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for actionable insights content type.
        """
        return pulumi.get(self, "actionable_insights_resources")

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")

    @property
    @pulumi.getter(name="sqlInsightsFleetAnalysisResources")
    def sql_insights_fleet_analysis_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for SQL insights - fleet analysis content type.
        """
        return pulumi.get(self, "sql_insights_fleet_analysis_resources")

    @property
    @pulumi.getter(name="sqlInsightsPerformanceDegradationResources")
    def sql_insights_performance_degradation_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for SQL insights - performance degradation content type.
        """
        return pulumi.get(self, "sql_insights_performance_degradation_resources")

    @property
    @pulumi.getter(name="sqlInsightsPlanChangesResources")
    def sql_insights_plan_changes_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for SQL insights - plan changes content type.
        """
        return pulumi.get(self, "sql_insights_plan_changes_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopDatabasesResources")
    def sql_insights_top_databases_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for SQL insights - top databases content type.
        """
        return pulumi.get(self, "sql_insights_top_databases_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopSqlByInsightsResources")
    def sql_insights_top_sql_by_insights_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for SQL insights - top SQL by insights content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_by_insights_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopSqlResources")
    def sql_insights_top_sql_resources(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Supported resources for SQL insights - top SQL content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_resources")


@pulumi.output_type
class OpsiConfigurationConfigItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItemType":
            suggest = "config_item_type"
        elif key == "applicableContexts":
            suggest = "applicable_contexts"
        elif key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item_type: builtins.str,
                 applicable_contexts: Optional[Sequence[builtins.str]] = None,
                 default_value: Optional[builtins.str] = None,
                 metadatas: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']] = None,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str config_item_type: (Updatable) Type of configuration item.
        :param Sequence[builtins.str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param builtins.str default_value: Value of configuration item.
        :param Sequence['OpsiConfigurationConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param builtins.str name: (Updatable) Name of configuration item.
        :param builtins.str value: (Updatable) Value of configuration item.
        """
        pulumi.set(__self__, "config_item_type", config_item_type)
        if applicable_contexts is not None:
            pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        (Updatable) Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[Sequence[builtins.str]]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[builtins.str]:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']]:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) Value of configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItemType":
            suggest = "config_item_type"
        elif key == "dataType":
            suggest = "data_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "unitDetails":
            suggest = "unit_details"
        elif key == "valueInputDetails":
            suggest = "value_input_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item_type: Optional[builtins.str] = None,
                 data_type: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 display_name: Optional[builtins.str] = None,
                 unit_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']] = None,
                 value_input_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']] = None):
        """
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param builtins.str description: (Updatable) Description of OPSI configuration.
        :param builtins.str display_name: (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param Sequence['OpsiConfigurationConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['OpsiConfigurationConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit_details is not None:
            pulumi.set(__self__, "unit_details", unit_details)
        if value_input_details is not None:
            pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[builtins.str]:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[builtins.str]:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']]:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']]:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadataUnitDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadataUnitDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadataUnitDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadataUnitDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 unit: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param builtins.str unit: Unit of configuration item.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[builtins.str]:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadataValueInputDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedValueType":
            suggest = "allowed_value_type"
        elif key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"
        elif key == "possibleValues":
            suggest = "possible_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadataValueInputDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadataValueInputDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadataValueInputDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_value_type: Optional[builtins.str] = None,
                 max_value: Optional[builtins.str] = None,
                 min_value: Optional[builtins.str] = None,
                 possible_values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str allowed_value_type: Allowed value type of configuration item.
        :param builtins.str max_value: Maximum value limit for the configuration item.
        :param builtins.str min_value: Minimum value limit for the configuration item.
        :param Sequence[builtins.str] possible_values: Allowed values to pick for the configuration item.
        """
        if allowed_value_type is not None:
            pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[builtins.str]:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[builtins.str]:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[builtins.str]:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[builtins.str]]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetAwrHubAwrSnapshotItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: builtins.str,
                 error_count: builtins.str,
                 instance_number: builtins.int,
                 snapshot_identifier: builtins.int,
                 time_db_startup: builtins.str,
                 time_snapshot_begin: builtins.str,
                 time_snapshot_end: builtins.str):
        """
        :param builtins.str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param builtins.str error_count: The total number of errors.
        :param builtins.int instance_number: The database instance number.
        :param builtins.int snapshot_identifier: The identifier of the snapshot.
        :param builtins.str time_db_startup: The timestamp of the database startup.
        :param builtins.str time_snapshot_begin: The start time of the snapshot.
        :param builtins.str time_snapshot_end: The end time of the snapshot.
        """
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "snapshot_identifier", snapshot_identifier)
        pulumi.set(__self__, "time_db_startup", time_db_startup)
        pulumi.set(__self__, "time_snapshot_begin", time_snapshot_begin)
        pulumi.set(__self__, "time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> builtins.str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> builtins.str:
        """
        The total number of errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> builtins.int:
        """
        The database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> builtins.int:
        """
        The identifier of the snapshot.
        """
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> builtins.str:
        """
        The timestamp of the database startup.
        """
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> builtins.str:
        """
        The start time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> builtins.str:
        """
        The end time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']):
        """
        :param Sequence['GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemArgs'] items: A list of AWR snapshot summary data.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']:
        """
        A list of AWR snapshot summary data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']):
        """
        :param Sequence['GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemArgs'] items: A list of AWR snapshot summary data.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']:
        """
        A list of AWR snapshot summary data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: builtins.str,
                 error_count: builtins.str,
                 instance_number: builtins.int,
                 snapshot_identifier: builtins.int,
                 time_db_startup: builtins.str,
                 time_snapshot_begin: builtins.str,
                 time_snapshot_end: builtins.str):
        """
        :param builtins.str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param builtins.str error_count: The total number of errors.
        :param builtins.int instance_number: The database instance number.
        :param builtins.int snapshot_identifier: The identifier of the snapshot.
        :param builtins.str time_db_startup: The timestamp of the database startup.
        :param builtins.str time_snapshot_begin: The start time of the snapshot.
        :param builtins.str time_snapshot_end: The end time of the snapshot.
        """
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "snapshot_identifier", snapshot_identifier)
        pulumi.set(__self__, "time_db_startup", time_db_startup)
        pulumi.set(__self__, "time_snapshot_begin", time_snapshot_begin)
        pulumi.set(__self__, "time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> builtins.str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> builtins.str:
        """
        The total number of errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> builtins.int:
        """
        The database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> builtins.int:
        """
        The identifier of the snapshot.
        """
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> builtins.str:
        """
        The timestamp of the database startup.
        """
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> builtins.str:
        """
        The start time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> builtins.str:
        """
        The end time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAwrHubAwrSourcesSummaryItemResult(dict):
    def __init__(__self__, *,
                 awr_hub_id: builtins.str,
                 awr_source_database_id: builtins.str,
                 hours_since_last_import: builtins.float,
                 max_snapshot_identifier: builtins.float,
                 min_snapshot_identifier: builtins.float,
                 name: builtins.str,
                 snapshots_uploaded: builtins.float,
                 time_first_snapshot_generated: builtins.str,
                 time_last_snapshot_generated: builtins.str):
        """
        :param builtins.str awr_hub_id: Unique Awr Hub identifier
        :param builtins.str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param builtins.float hours_since_last_import: Number of hours since last AWR snapshots import happened from the Source database.
        :param builtins.float max_snapshot_identifier: The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param builtins.float min_snapshot_identifier: The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param builtins.str name: Name for an Awr source database
        :param builtins.float snapshots_uploaded: Number of AWR snapshots uploaded from the Source database.
        :param builtins.str time_first_snapshot_generated: The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        :param builtins.str time_last_snapshot_generated: The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "awr_hub_id", awr_hub_id)
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "hours_since_last_import", hours_since_last_import)
        pulumi.set(__self__, "max_snapshot_identifier", max_snapshot_identifier)
        pulumi.set(__self__, "min_snapshot_identifier", min_snapshot_identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "snapshots_uploaded", snapshots_uploaded)
        pulumi.set(__self__, "time_first_snapshot_generated", time_first_snapshot_generated)
        pulumi.set(__self__, "time_last_snapshot_generated", time_last_snapshot_generated)

    @property
    @pulumi.getter(name="awrHubId")
    def awr_hub_id(self) -> builtins.str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "awr_hub_id")

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> builtins.str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="hoursSinceLastImport")
    def hours_since_last_import(self) -> builtins.float:
        """
        Number of hours since last AWR snapshots import happened from the Source database.
        """
        return pulumi.get(self, "hours_since_last_import")

    @property
    @pulumi.getter(name="maxSnapshotIdentifier")
    def max_snapshot_identifier(self) -> builtins.float:
        """
        The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "max_snapshot_identifier")

    @property
    @pulumi.getter(name="minSnapshotIdentifier")
    def min_snapshot_identifier(self) -> builtins.float:
        """
        The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "min_snapshot_identifier")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name for an Awr source database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="snapshotsUploaded")
    def snapshots_uploaded(self) -> builtins.float:
        """
        Number of AWR snapshots uploaded from the Source database.
        """
        return pulumi.get(self, "snapshots_uploaded")

    @property
    @pulumi.getter(name="timeFirstSnapshotGenerated")
    def time_first_snapshot_generated(self) -> builtins.str:
        """
        The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_first_snapshot_generated")

    @property
    @pulumi.getter(name="timeLastSnapshotGenerated")
    def time_last_snapshot_generated(self) -> builtins.str:
        """
        The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_snapshot_generated")


@pulumi.output_type
class GetAwrHubSourcesAwrHubSourceSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubSourcesAwrHubSourceSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubSourcesAwrHubSourceSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubSourcesAwrHubSourceSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 associated_opsi_id: builtins.str,
                 associated_resource_id: builtins.str,
                 awr_hub_id: builtins.str,
                 awr_hub_opsi_source_id: builtins.str,
                 awr_source_database_id: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 freeform_tags: Mapping[str, builtins.str],
                 hours_since_last_import: builtins.float,
                 id: builtins.str,
                 is_registered_with_awr_hub: builtins.bool,
                 max_snapshot_identifier: builtins.float,
                 min_snapshot_identifier: builtins.float,
                 name: builtins.str,
                 source_mail_box_url: builtins.str,
                 state: builtins.str,
                 status: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_first_snapshot_generated: builtins.str,
                 time_last_snapshot_generated: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str associated_opsi_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database id.
        :param builtins.str associated_resource_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database id.
        :param builtins.str awr_hub_id: Unique Awr Hub identifier
        :param builtins.str awr_hub_opsi_source_id: The shorted string of the Awr Hub source database identifier.
        :param builtins.str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.float hours_since_last_import: Number of hours since last AWR snapshots import happened from the Source database.
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Awr Hub source database.
        :param builtins.bool is_registered_with_awr_hub: This is `true` if the source databse is registered with a Awr Hub, otherwise `false`
        :param builtins.float max_snapshot_identifier: The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param builtins.float min_snapshot_identifier: The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param builtins.str name: Awr Hub source database name
        :param builtins.str source_mail_box_url: Opsi Mailbox URL based on the Awr Hub and Awr Hub source.
        :param builtins.str state: Lifecycle states
        :param builtins.str status: Resource Status
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param builtins.str time_first_snapshot_generated: The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        :param builtins.str time_last_snapshot_generated: The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        :param builtins.str type: source type of the database
        """
        pulumi.set(__self__, "associated_opsi_id", associated_opsi_id)
        pulumi.set(__self__, "associated_resource_id", associated_resource_id)
        pulumi.set(__self__, "awr_hub_id", awr_hub_id)
        pulumi.set(__self__, "awr_hub_opsi_source_id", awr_hub_opsi_source_id)
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "hours_since_last_import", hours_since_last_import)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_registered_with_awr_hub", is_registered_with_awr_hub)
        pulumi.set(__self__, "max_snapshot_identifier", max_snapshot_identifier)
        pulumi.set(__self__, "min_snapshot_identifier", min_snapshot_identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_mail_box_url", source_mail_box_url)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_first_snapshot_generated", time_first_snapshot_generated)
        pulumi.set(__self__, "time_last_snapshot_generated", time_last_snapshot_generated)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="associatedOpsiId")
    def associated_opsi_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database id.
        """
        return pulumi.get(self, "associated_opsi_id")

    @property
    @pulumi.getter(name="associatedResourceId")
    def associated_resource_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database id.
        """
        return pulumi.get(self, "associated_resource_id")

    @property
    @pulumi.getter(name="awrHubId")
    def awr_hub_id(self) -> builtins.str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "awr_hub_id")

    @property
    @pulumi.getter(name="awrHubOpsiSourceId")
    def awr_hub_opsi_source_id(self) -> builtins.str:
        """
        The shorted string of the Awr Hub source database identifier.
        """
        return pulumi.get(self, "awr_hub_opsi_source_id")

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> builtins.str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hoursSinceLastImport")
    def hours_since_last_import(self) -> builtins.float:
        """
        Number of hours since last AWR snapshots import happened from the Source database.
        """
        return pulumi.get(self, "hours_since_last_import")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Awr Hub source database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRegisteredWithAwrHub")
    def is_registered_with_awr_hub(self) -> builtins.bool:
        """
        This is `true` if the source databse is registered with a Awr Hub, otherwise `false`
        """
        return pulumi.get(self, "is_registered_with_awr_hub")

    @property
    @pulumi.getter(name="maxSnapshotIdentifier")
    def max_snapshot_identifier(self) -> builtins.float:
        """
        The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "max_snapshot_identifier")

    @property
    @pulumi.getter(name="minSnapshotIdentifier")
    def min_snapshot_identifier(self) -> builtins.float:
        """
        The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "min_snapshot_identifier")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Awr Hub source database name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceMailBoxUrl")
    def source_mail_box_url(self) -> builtins.str:
        """
        Opsi Mailbox URL based on the Awr Hub and Awr Hub source.
        """
        return pulumi.get(self, "source_mail_box_url")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFirstSnapshotGenerated")
    def time_first_snapshot_generated(self) -> builtins.str:
        """
        The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_first_snapshot_generated")

    @property
    @pulumi.getter(name="timeLastSnapshotGenerated")
    def time_last_snapshot_generated(self) -> builtins.str:
        """
        The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_snapshot_generated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        source type of the database
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAwrHubSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Awr Hub source database name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Awr Hub source database name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 awr_mailbox_url: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 hub_dst_timezone_version: builtins.str,
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 object_storage_bucket_name: builtins.str,
                 operations_insights_warehouse_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str awr_mailbox_url: Mailbox URL required for AWR hub and AWR source setup.
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str hub_dst_timezone_version: Dst Time Zone Version of the AWR Hub
        :param builtins.str id: Unique Awr Hub identifier
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str object_storage_bucket_name: Object Storage Bucket Name
        :param builtins.str operations_insights_warehouse_id: Unique Operations Insights Warehouse identifier
        :param builtins.str state: Lifecycle states
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "awr_mailbox_url", awr_mailbox_url)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "hub_dst_timezone_version", hub_dst_timezone_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="awrMailboxUrl")
    def awr_mailbox_url(self) -> builtins.str:
        """
        Mailbox URL required for AWR hub and AWR source setup.
        """
        return pulumi.get(self, "awr_mailbox_url")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hubDstTimezoneVersion")
    def hub_dst_timezone_version(self) -> builtins.str:
        """
        Dst Time Zone Version of the AWR Hub
        """
        return pulumi.get(self, "hub_dst_timezone_version")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> builtins.str:
        """
        Object Storage Bucket Name
        """
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> builtins.str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAwrHubsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseInsightConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str):
        """
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str credential_type: CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: builtins.str,
                 hosts: Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult'],
                 port: builtins.int,
                 protocol: builtins.str,
                 service_name: builtins.str):
        """
        :param builtins.str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['GetDatabaseInsightConnectionDetailHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param builtins.int port: Listener port number used for connection requests.
        :param builtins.str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param builtins.str service_name: Database service name used for connection requests.
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult']:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: builtins.str,
                 port: builtins.int):
        """
        :param builtins.str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param builtins.int port: Listener port number used for connection requests.
        """
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> builtins.str:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str,
                 wallet_secret_id: builtins.str):
        """
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str credential_type: CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        :param builtins.str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 connection_credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult'],
                 connection_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult'],
                 connector_id: builtins.str,
                 credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult'],
                 database_connection_status_details: builtins.str,
                 database_connector_id: builtins.str,
                 database_display_name: builtins.str,
                 database_id: builtins.str,
                 database_name: builtins.str,
                 database_resource_type: builtins.str,
                 database_type: builtins.str,
                 database_version: builtins.str,
                 dbm_private_endpoint_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_type: builtins.str,
                 enterprise_manager_bridge_id: builtins.str,
                 enterprise_manager_entity_display_name: builtins.str,
                 enterprise_manager_entity_identifier: builtins.str,
                 enterprise_manager_entity_name: builtins.str,
                 enterprise_manager_entity_type: builtins.str,
                 enterprise_manager_identifier: builtins.str,
                 entity_source: builtins.str,
                 exadata_insight_id: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_advanced_features_enabled: builtins.bool,
                 is_heat_wave_cluster_attached: builtins.bool,
                 is_highly_available: builtins.bool,
                 lifecycle_details: builtins.str,
                 management_agent_id: builtins.str,
                 opsi_private_endpoint_id: builtins.str,
                 parent_id: builtins.str,
                 processor_count: builtins.int,
                 root_id: builtins.str,
                 service_name: builtins.str,
                 state: builtins.str,
                 status: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailArgs'] connection_credential_details: User credential details to connect to the database.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailArgs'] connection_details: Connection details to connect to the database. HostName, protocol, and port should be specified.
        :param builtins.str connector_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of External Database Connector
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailArgs'] credential_details: User credential details to connect to the database.
        :param builtins.str database_connection_status_details: A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
        :param builtins.str database_connector_id: (Required when entity_source=EXTERNAL_MYSQL_DATABASE_SYSTEM) (Updatable) The DBM owned database connector [OCID](https://www.terraform.io/iaas/database-management/doc/view-connector-details.html) mapping to the database credentials and connection details.
        :param builtins.str database_display_name: Display name of database
        :param builtins.str database_id: Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
        :param builtins.str database_name: Name of database
        :param builtins.str database_resource_type: Oracle Cloud Infrastructure database resource type
        :param builtins.str database_type: Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
        :param builtins.str database_version: The version of the database.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param builtins.str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param builtins.str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param builtins.str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param builtins.str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param builtins.str enterprise_manager_identifier: Enterprise Manager Unqiue Identifier
        :param builtins.str entity_source: Source of the database entity.
        :param builtins.str exadata_insight_id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param builtins.bool is_advanced_features_enabled: Flag is to identify if advanced features for autonomous database is enabled or not
        :param builtins.bool is_heat_wave_cluster_attached: Specifies if MYSQL DB System has heatwave cluster attached.
        :param builtins.bool is_highly_available: Specifies if MYSQL DB System is highly available.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str opsi_private_endpoint_id: Unique Operations Insights PrivateEndpoint identifier
        :param builtins.str parent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster or DB System ID, depending on which configuration the resource belongs to.
        :param builtins.int processor_count: Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        :param builtins.str root_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        :param builtins.str service_name: Database service name used for connection requests.
        :param builtins.str state: Lifecycle states
        :param builtins.str status: Resource Status
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time the the database insight was first enabled. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time the database insight was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        pulumi.set(__self__, "connection_details", connection_details)
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "credential_details", credential_details)
        pulumi.set(__self__, "database_connection_status_details", database_connection_status_details)
        pulumi.set(__self__, "database_connector_id", database_connector_id)
        pulumi.set(__self__, "database_display_name", database_display_name)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_resource_type", database_resource_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "exadata_insight_id", exadata_insight_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_advanced_features_enabled", is_advanced_features_enabled)
        pulumi.set(__self__, "is_heat_wave_cluster_attached", is_heat_wave_cluster_attached)
        pulumi.set(__self__, "is_highly_available", is_highly_available)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "processor_count", processor_count)
        pulumi.set(__self__, "root_id", root_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult']:
        """
        User credential details to connect to the database.
        """
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult']:
        """
        Connection details to connect to the database. HostName, protocol, and port should be specified.
        """
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of External Database Connector
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult']:
        """
        User credential details to connect to the database.
        """
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseConnectionStatusDetails")
    def database_connection_status_details(self) -> builtins.str:
        """
        A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
        """
        return pulumi.get(self, "database_connection_status_details")

    @property
    @pulumi.getter(name="databaseConnectorId")
    def database_connector_id(self) -> builtins.str:
        """
        (Required when entity_source=EXTERNAL_MYSQL_DATABASE_SYSTEM) (Updatable) The DBM owned database connector [OCID](https://www.terraform.io/iaas/database-management/doc/view-connector-details.html) mapping to the database credentials and connection details.
        """
        return pulumi.get(self, "database_connector_id")

    @property
    @pulumi.getter(name="databaseDisplayName")
    def database_display_name(self) -> builtins.str:
        """
        Display name of database
        """
        return pulumi.get(self, "database_display_name")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        """
        Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> builtins.str:
        """
        Name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> builtins.str:
        """
        Oracle Cloud Infrastructure database resource type
        """
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> builtins.str:
        """
        Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> builtins.str:
        """
        The version of the database.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> builtins.str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> builtins.str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> builtins.str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> builtins.str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> builtins.str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> builtins.str:
        """
        Enterprise Manager Unqiue Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the database entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> builtins.str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        """
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAdvancedFeaturesEnabled")
    def is_advanced_features_enabled(self) -> builtins.bool:
        """
        Flag is to identify if advanced features for autonomous database is enabled or not
        """
        return pulumi.get(self, "is_advanced_features_enabled")

    @property
    @pulumi.getter(name="isHeatWaveClusterAttached")
    def is_heat_wave_cluster_attached(self) -> builtins.bool:
        """
        Specifies if MYSQL DB System has heatwave cluster attached.
        """
        return pulumi.get(self, "is_heat_wave_cluster_attached")

    @property
    @pulumi.getter(name="isHighlyAvailable")
    def is_highly_available(self) -> builtins.bool:
        """
        Specifies if MYSQL DB System is highly available.
        """
        return pulumi.get(self, "is_highly_available")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> builtins.str:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> builtins.str:
        """
        Unique Operations Insights PrivateEndpoint identifier
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM Cluster or DB System ID, depending on which configuration the resource belongs to.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> builtins.int:
        """
        Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        """
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter(name="rootId")
    def root_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        """
        return pulumi.get(self, "root_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the the database insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the database insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str):
        """
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str credential_type: CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: builtins.str,
                 hosts: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult'],
                 port: builtins.int,
                 protocol: builtins.str,
                 service_name: builtins.str):
        """
        :param builtins.str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param builtins.int port: Listener port number used for connection requests.
        :param builtins.str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param builtins.str service_name: Database service name used for connection requests.
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult']:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: builtins.str,
                 port: builtins.int):
        """
        :param builtins.str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param builtins.int port: Listener port number used for connection requests.
        """
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> builtins.str:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str,
                 wallet_secret_id: builtins.str):
        """
        :param builtins.str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param builtins.str credential_type: CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        :param builtins.str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param builtins.str role: database user role.
        :param builtins.str user_name: database user name.
        :param builtins.str wallet_secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        """
        CREDENTIALS_BY_SOURCE is supplied via the External Database Service. CREDENTIALS_BY_VAULT is supplied by secret service to connection PE_COMANAGED_DATABASE and ADB as well. CREDENTIALS_BY_IAM is used db-token to connect only for Autonomous Database.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database keystore contents are stored.
        """
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 object_storage_bucket_name: builtins.str,
                 object_storage_bucket_status_details: builtins.str,
                 object_storage_namespace_name: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: Description of Enterprise Manager Bridge
        :param builtins.str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique Enterprise Manager bridge identifier
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str object_storage_bucket_name: Object Storage Bucket Name
        :param builtins.str object_storage_bucket_status_details: A message describing status of the object storage bucket of this resource. For example, it can be used to provide actionable information about the permission and content validity of the bucket.
        :param builtins.str object_storage_namespace_name: Object Storage Namespace Name
        :param builtins.str state: Lifecycle states
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time the the Enterprise Manager bridge was first created. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time the Enterprise Manager bridge was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        pulumi.set(__self__, "object_storage_bucket_status_details", object_storage_bucket_status_details)
        pulumi.set(__self__, "object_storage_namespace_name", object_storage_namespace_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of Enterprise Manager Bridge
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> builtins.str:
        """
        Object Storage Bucket Name
        """
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageBucketStatusDetails")
    def object_storage_bucket_status_details(self) -> builtins.str:
        """
        A message describing status of the object storage bucket of this resource. For example, it can be used to provide actionable information about the permission and content validity of the bucket.
        """
        return pulumi.get(self, "object_storage_bucket_status_details")

    @property
    @pulumi.getter(name="objectStorageNamespaceName")
    def object_storage_namespace_name(self) -> builtins.str:
        """
        Object Storage Namespace Name
        """
        return pulumi.get(self, "object_storage_namespace_name")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the the Enterprise Manager bridge was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the Enterprise Manager bridge was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnterpriseManagerBridgesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 dbm_private_endpoint_id: builtins.str,
                 member_database_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult'],
                 opsi_private_endpoint_id: builtins.str,
                 vm_cluster_type: builtins.str,
                 vmcluster_id: builtins.str):
        """
        :param builtins.str compartment_id: Compartment identifier of the Exadata insight resource
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        pulumi.set(__self__, "member_database_details", member_database_details)
        pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        pulumi.set(__self__, "vm_cluster_type", vm_cluster_type)
        pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment identifier of the Exadata insight resource
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult']:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmClusterType")
    def vm_cluster_type(self) -> builtins.str:
        return pulumi.get(self, "vm_cluster_type")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> builtins.str:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 connection_credential_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult'],
                 connection_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult'],
                 credential_details: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult'],
                 database_id: builtins.str,
                 database_resource_type: builtins.str,
                 dbm_private_endpoint_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_type: builtins.str,
                 entity_source: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 management_agent_id: builtins.str,
                 opsi_private_endpoint_id: builtins.str,
                 service_name: builtins.str,
                 system_tags: Mapping[str, builtins.str]):
        """
        :param builtins.str compartment_id: Compartment identifier of the Exadata insight resource
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str entity_source: Source of the Exadata system.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        pulumi.set(__self__, "connection_details", connection_details)
        pulumi.set(__self__, "credential_details", credential_details)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_resource_type", database_resource_type)
        pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Compartment identifier of the Exadata insight resource
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult']:
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> builtins.str:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> builtins.str:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str,
                 wallet_secret_id: builtins.str):
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: builtins.str,
                 hosts: Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult'],
                 port: builtins.int,
                 protocol: builtins.str,
                 service_name: builtins.str):
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: builtins.str,
                 port: builtins.int):
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> builtins.str:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str,
                 wallet_secret_id: builtins.str):
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 enterprise_manager_bridge_id: builtins.str,
                 enterprise_manager_entity_display_name: builtins.str,
                 enterprise_manager_entity_identifier: builtins.str,
                 enterprise_manager_entity_name: builtins.str,
                 enterprise_manager_entity_type: builtins.str,
                 enterprise_manager_identifier: builtins.str,
                 entity_source: builtins.str,
                 exadata_display_name: builtins.str,
                 exadata_infra_id: builtins.str,
                 exadata_infra_resource_type: builtins.str,
                 exadata_name: builtins.str,
                 exadata_rack_type: builtins.str,
                 exadata_shape: builtins.str,
                 exadata_type: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_auto_sync_enabled: builtins.bool,
                 is_virtualized_exadata: builtins.bool,
                 lifecycle_details: builtins.str,
                 member_vm_cluster_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult'],
                 state: builtins.str,
                 status: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param builtins.str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param builtins.str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param builtins.str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param builtins.str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param builtins.str enterprise_manager_identifier: Enterprise Manager Unique Identifier
        :param builtins.str entity_source: Source of the Exadata system.
        :param builtins.str exadata_display_name: The user-friendly name for the Exadata system. The name does not have to be unique.
        :param builtins.str exadata_infra_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        :param builtins.str exadata_infra_resource_type: Oracle Cloud Infrastructure exadata infrastructure resource type
        :param builtins.str exadata_name: The Exadata system name. If the Exadata systems managed by Enterprise Manager, the name is unique amongst the Exadata systems managed by the same Enterprise Manager.
        :param builtins.str exadata_rack_type: Exadata rack type.
        :param builtins.str exadata_shape: The shape of the Exadata Infrastructure.
        :param builtins.str exadata_type: Filter by one or more Exadata types. Possible value are DBMACHINE, EXACS, and EXACC.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Optional list of Exadata insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param builtins.bool is_virtualized_exadata: true if virtualization is used in the Exadata system
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str state: Lifecycle states
        :param builtins.str status: Resource Status
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time the the Exadata insight was first enabled. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time the Exadata insight was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "exadata_display_name", exadata_display_name)
        pulumi.set(__self__, "exadata_infra_id", exadata_infra_id)
        pulumi.set(__self__, "exadata_infra_resource_type", exadata_infra_resource_type)
        pulumi.set(__self__, "exadata_name", exadata_name)
        pulumi.set(__self__, "exadata_rack_type", exadata_rack_type)
        pulumi.set(__self__, "exadata_shape", exadata_shape)
        pulumi.set(__self__, "exadata_type", exadata_type)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_auto_sync_enabled", is_auto_sync_enabled)
        pulumi.set(__self__, "is_virtualized_exadata", is_virtualized_exadata)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "member_vm_cluster_details", member_vm_cluster_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> builtins.str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> builtins.str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> builtins.str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> builtins.str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> builtins.str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> builtins.str:
        """
        Enterprise Manager Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataDisplayName")
    def exadata_display_name(self) -> builtins.str:
        """
        The user-friendly name for the Exadata system. The name does not have to be unique.
        """
        return pulumi.get(self, "exadata_display_name")

    @property
    @pulumi.getter(name="exadataInfraId")
    def exadata_infra_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Infrastructure.
        """
        return pulumi.get(self, "exadata_infra_id")

    @property
    @pulumi.getter(name="exadataInfraResourceType")
    def exadata_infra_resource_type(self) -> builtins.str:
        """
        Oracle Cloud Infrastructure exadata infrastructure resource type
        """
        return pulumi.get(self, "exadata_infra_resource_type")

    @property
    @pulumi.getter(name="exadataName")
    def exadata_name(self) -> builtins.str:
        """
        The Exadata system name. If the Exadata systems managed by Enterprise Manager, the name is unique amongst the Exadata systems managed by the same Enterprise Manager.
        """
        return pulumi.get(self, "exadata_name")

    @property
    @pulumi.getter(name="exadataRackType")
    def exadata_rack_type(self) -> builtins.str:
        """
        Exadata rack type.
        """
        return pulumi.get(self, "exadata_rack_type")

    @property
    @pulumi.getter(name="exadataShape")
    def exadata_shape(self) -> builtins.str:
        """
        The shape of the Exadata Infrastructure.
        """
        return pulumi.get(self, "exadata_shape")

    @property
    @pulumi.getter(name="exadataType")
    def exadata_type(self) -> builtins.str:
        """
        Filter by one or more Exadata types. Possible value are DBMACHINE, EXACS, and EXACC.
        """
        return pulumi.get(self, "exadata_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Optional list of Exadata insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoSyncEnabled")
    def is_auto_sync_enabled(self) -> builtins.bool:
        return pulumi.get(self, "is_auto_sync_enabled")

    @property
    @pulumi.getter(name="isVirtualizedExadata")
    def is_virtualized_exadata(self) -> builtins.bool:
        """
        true if virtualization is used in the Exadata system
        """
        return pulumi.get(self, "is_virtualized_exadata")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="memberVmClusterDetails")
    def member_vm_cluster_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult']:
        return pulumi.get(self, "member_vm_cluster_details")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the the Exadata insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the Exadata insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 dbm_private_endpoint_id: builtins.str,
                 member_database_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult'],
                 opsi_private_endpoint_id: builtins.str,
                 vm_cluster_type: builtins.str,
                 vmcluster_id: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        pulumi.set(__self__, "member_database_details", member_database_details)
        pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        pulumi.set(__self__, "vm_cluster_type", vm_cluster_type)
        pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult']:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmClusterType")
    def vm_cluster_type(self) -> builtins.str:
        return pulumi.get(self, "vm_cluster_type")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> builtins.str:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 connection_credential_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult'],
                 connection_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult'],
                 credential_details: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult'],
                 database_id: builtins.str,
                 database_resource_type: builtins.str,
                 dbm_private_endpoint_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 deployment_type: builtins.str,
                 entity_source: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 management_agent_id: builtins.str,
                 opsi_private_endpoint_id: builtins.str,
                 service_name: builtins.str,
                 system_tags: Mapping[str, builtins.str]):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str entity_source: Source of the Exadata system.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        pulumi.set(__self__, "connection_details", connection_details)
        pulumi.set(__self__, "credential_details", credential_details)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_resource_type", database_resource_type)
        pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult']:
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> builtins.str:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> builtins.str:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> builtins.str:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str,
                 wallet_secret_id: builtins.str):
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: builtins.str,
                 hosts: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult'],
                 port: builtins.int,
                 protocol: builtins.str,
                 service_name: builtins.str):
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: builtins.str,
                 port: builtins.int):
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> builtins.str:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: builtins.str,
                 credential_type: builtins.str,
                 password_secret_id: builtins.str,
                 role: builtins.str,
                 user_name: builtins.str,
                 wallet_secret_id: builtins.str):
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> builtins.str:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> builtins.str:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> builtins.str:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compute_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 enterprise_manager_bridge_id: builtins.str,
                 enterprise_manager_entity_display_name: builtins.str,
                 enterprise_manager_entity_identifier: builtins.str,
                 enterprise_manager_entity_name: builtins.str,
                 enterprise_manager_entity_type: builtins.str,
                 enterprise_manager_identifier: builtins.str,
                 entity_source: builtins.str,
                 exadata_insight_id: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 host_display_name: builtins.str,
                 host_name: builtins.str,
                 host_type: builtins.str,
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 management_agent_id: builtins.str,
                 platform_name: builtins.str,
                 platform_type: builtins.str,
                 platform_version: builtins.str,
                 processor_count: builtins.int,
                 state: builtins.str,
                 status: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str compute_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param builtins.str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param builtins.str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param builtins.str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param builtins.str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param builtins.str enterprise_manager_identifier: Enterprise Manager Unique Identifier
        :param builtins.str entity_source: Source of the host entity.
        :param builtins.str exadata_insight_id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str host_display_name: The user-friendly name for the host. The name does not have to be unique.
        :param builtins.str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param builtins.str host_type: Filter by one or more host types. Possible values are CLOUD-HOST, EXTERNAL-HOST, COMANAGED-VM-HOST, COMANAGED-BM-HOST, COMANAGED-EXACS-HOST, COMANAGED-EXACC-HOST
        :param builtins.str id: Optional list of host insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param builtins.str platform_name: Platform name.
        :param builtins.str platform_type: Filter by one or more platform types. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        :param builtins.str platform_version: Platform version.
        :param builtins.int processor_count: Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        :param builtins.str state: Lifecycle states
        :param builtins.str status: Resource Status
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time the the host insight was first enabled. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time the host insight was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compute_id", compute_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "exadata_insight_id", exadata_insight_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host_display_name", host_display_name)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "platform_name", platform_name)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "platform_version", platform_version)
        pulumi.set(__self__, "processor_count", processor_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> builtins.str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> builtins.str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> builtins.str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> builtins.str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> builtins.str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> builtins.str:
        """
        Enterprise Manager Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the host entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> builtins.str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        """
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostDisplayName")
    def host_display_name(self) -> builtins.str:
        """
        The user-friendly name for the host. The name does not have to be unique.
        """
        return pulumi.get(self, "host_display_name")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> builtins.str:
        """
        Filter by one or more host types. Possible values are CLOUD-HOST, EXTERNAL-HOST, COMANAGED-VM-HOST, COMANAGED-BM-HOST, COMANAGED-EXACS-HOST, COMANAGED-EXACC-HOST
        """
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Optional list of host insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> builtins.str:
        """
        Platform name.
        """
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> builtins.str:
        """
        Filter by one or more platform types. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        """
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> builtins.str:
        """
        Platform version.
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> builtins.int:
        """
        Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        """
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the the host insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the host insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetImportableAgentEntitiesItemResult(dict):
    def __init__(__self__, *,
                 entity_source: builtins.str,
                 host_name: builtins.str,
                 management_agent_display_name: builtins.str,
                 management_agent_id: builtins.str,
                 platform_type: builtins.str):
        """
        :param builtins.str entity_source: Source of the importable agent entity.
        :param builtins.str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param builtins.str management_agent_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        :param builtins.str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param builtins.str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "management_agent_display_name", management_agent_display_name)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="managementAgentDisplayName")
    def management_agent_display_name(self) -> builtins.str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        """
        return pulumi.get(self, "management_agent_display_name")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> builtins.str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableAgentEntityItemResult(dict):
    def __init__(__self__, *,
                 entity_source: builtins.str,
                 host_name: builtins.str,
                 management_agent_display_name: builtins.str,
                 management_agent_id: builtins.str,
                 platform_type: builtins.str):
        """
        :param builtins.str entity_source: Source of the importable agent entity.
        :param builtins.str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param builtins.str management_agent_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        :param builtins.str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param builtins.str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "management_agent_display_name", management_agent_display_name)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="managementAgentDisplayName")
    def management_agent_display_name(self) -> builtins.str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Management Agent
        """
        return pulumi.get(self, "management_agent_display_name")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> builtins.str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableComputeEntitiesItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compute_display_name: builtins.str,
                 compute_id: builtins.str,
                 entity_source: builtins.str,
                 host_name: builtins.str,
                 platform_type: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str compute_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        :param builtins.str compute_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        :param builtins.str entity_source: Source of the importable agent entity.
        :param builtins.str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param builtins.str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compute_display_name", compute_display_name)
        pulumi.set(__self__, "compute_id", compute_id)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeDisplayName")
    def compute_display_name(self) -> builtins.str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        """
        return pulumi.get(self, "compute_display_name")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> builtins.str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS, AIX].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableComputeEntityItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compute_display_name: builtins.str,
                 compute_id: builtins.str,
                 entity_source: builtins.str,
                 host_name: builtins.str,
                 platform_type: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str compute_display_name: The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        :param builtins.str compute_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        :param builtins.str entity_source: Source of the importable agent entity.
        :param builtins.str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param builtins.str platform_type: Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS].
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compute_display_name", compute_display_name)
        pulumi.set(__self__, "compute_id", compute_id)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeDisplayName")
    def compute_display_name(self) -> builtins.str:
        """
        The [Display Name](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Display) of the Compute Instance
        """
        return pulumi.get(self, "compute_display_name")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute Instance
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> builtins.str:
        """
        Source of the importable agent entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> builtins.str:
        """
        Platform type. Supported platformType(s) for MACS-managed external host insight: [LINUX, SOLARIS, WINDOWS]. Supported platformType(s) for MACS-managed cloud host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX, WINDOWS].
        """
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetNewsReportContentTypeResult(dict):
    def __init__(__self__, *,
                 actionable_insights_resources: Sequence[builtins.str],
                 capacity_planning_resources: Sequence[builtins.str],
                 sql_insights_fleet_analysis_resources: Sequence[builtins.str],
                 sql_insights_performance_degradation_resources: Sequence[builtins.str],
                 sql_insights_plan_changes_resources: Sequence[builtins.str],
                 sql_insights_top_databases_resources: Sequence[builtins.str],
                 sql_insights_top_sql_by_insights_resources: Sequence[builtins.str],
                 sql_insights_top_sql_resources: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] actionable_insights_resources: Supported resources for actionable insights content type.
        :param Sequence[builtins.str] capacity_planning_resources: Supported resources for capacity planning content type.
        :param Sequence[builtins.str] sql_insights_fleet_analysis_resources: Supported resources for SQL insights - fleet analysis content type.
        :param Sequence[builtins.str] sql_insights_performance_degradation_resources: Supported resources for SQL insights - performance degradation content type.
        :param Sequence[builtins.str] sql_insights_plan_changes_resources: Supported resources for SQL insights - plan changes content type.
        :param Sequence[builtins.str] sql_insights_top_databases_resources: Supported resources for SQL insights - top databases content type.
        :param Sequence[builtins.str] sql_insights_top_sql_by_insights_resources: Supported resources for SQL insights - top SQL by insights content type.
        :param Sequence[builtins.str] sql_insights_top_sql_resources: Supported resources for SQL insights - top SQL content type.
        """
        pulumi.set(__self__, "actionable_insights_resources", actionable_insights_resources)
        pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)
        pulumi.set(__self__, "sql_insights_fleet_analysis_resources", sql_insights_fleet_analysis_resources)
        pulumi.set(__self__, "sql_insights_performance_degradation_resources", sql_insights_performance_degradation_resources)
        pulumi.set(__self__, "sql_insights_plan_changes_resources", sql_insights_plan_changes_resources)
        pulumi.set(__self__, "sql_insights_top_databases_resources", sql_insights_top_databases_resources)
        pulumi.set(__self__, "sql_insights_top_sql_by_insights_resources", sql_insights_top_sql_by_insights_resources)
        pulumi.set(__self__, "sql_insights_top_sql_resources", sql_insights_top_sql_resources)

    @property
    @pulumi.getter(name="actionableInsightsResources")
    def actionable_insights_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for actionable insights content type.
        """
        return pulumi.get(self, "actionable_insights_resources")

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")

    @property
    @pulumi.getter(name="sqlInsightsFleetAnalysisResources")
    def sql_insights_fleet_analysis_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - fleet analysis content type.
        """
        return pulumi.get(self, "sql_insights_fleet_analysis_resources")

    @property
    @pulumi.getter(name="sqlInsightsPerformanceDegradationResources")
    def sql_insights_performance_degradation_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - performance degradation content type.
        """
        return pulumi.get(self, "sql_insights_performance_degradation_resources")

    @property
    @pulumi.getter(name="sqlInsightsPlanChangesResources")
    def sql_insights_plan_changes_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - plan changes content type.
        """
        return pulumi.get(self, "sql_insights_plan_changes_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopDatabasesResources")
    def sql_insights_top_databases_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - top databases content type.
        """
        return pulumi.get(self, "sql_insights_top_databases_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopSqlByInsightsResources")
    def sql_insights_top_sql_by_insights_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - top SQL by insights content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_by_insights_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopSqlResources")
    def sql_insights_top_sql_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - top SQL content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_resources")


@pulumi.output_type
class GetNewsReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The news report name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The news report name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 are_child_compartments_included: builtins.bool,
                 compartment_id: builtins.str,
                 content_types: Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult'],
                 day_of_week: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 locale: builtins.str,
                 match_rule: builtins.str,
                 name: builtins.str,
                 news_frequency: builtins.str,
                 ons_topic_id: builtins.str,
                 state: builtins.str,
                 status: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 tag_filters: Sequence[builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.bool are_child_compartments_included: A flag to consider the resources within a given compartment and all sub-compartments.
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetNewsReportsNewsReportCollectionItemContentTypeArgs'] content_types: Content types that the news report can handle.
        :param builtins.str day_of_week: Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: The description of the news report.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the news report resource.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str locale: Language of the news report.
        :param builtins.str match_rule: Match rule used for tag filters.
        :param builtins.str name: The news report name.
        :param builtins.str news_frequency: News report frequency.
        :param builtins.str ons_topic_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
        :param builtins.str state: Lifecycle states
        :param builtins.str status: Resource Status
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence[builtins.str] tag_filters: List of tag filters; each filter composed by a namespace, key, and value. Example for defined tags - '<TagNamespace>.<TagKey>=<TagValue>'. Example for freeform tags - '<TagKey>=<TagValue>'.
        :param builtins.str time_created: The time the the news report was first enabled. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time the news report was updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "are_child_compartments_included", are_child_compartments_included)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "content_types", content_types)
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "locale", locale)
        pulumi.set(__self__, "match_rule", match_rule)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "news_frequency", news_frequency)
        pulumi.set(__self__, "ons_topic_id", ons_topic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "tag_filters", tag_filters)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="areChildCompartmentsIncluded")
    def are_child_compartments_included(self) -> builtins.bool:
        """
        A flag to consider the resources within a given compartment and all sub-compartments.
        """
        return pulumi.get(self, "are_child_compartments_included")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult']:
        """
        Content types that the news report can handle.
        """
        return pulumi.get(self, "content_types")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.str:
        """
        Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the news report.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the news report resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def locale(self) -> builtins.str:
        """
        Language of the news report.
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter(name="matchRule")
    def match_rule(self) -> builtins.str:
        """
        Match rule used for tag filters.
        """
        return pulumi.get(self, "match_rule")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The news report name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newsFrequency")
    def news_frequency(self) -> builtins.str:
        """
        News report frequency.
        """
        return pulumi.get(self, "news_frequency")

    @property
    @pulumi.getter(name="onsTopicId")
    def ons_topic_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
        """
        return pulumi.get(self, "ons_topic_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Sequence[builtins.str]:
        """
        List of tag filters; each filter composed by a namespace, key, and value. Example for defined tags - '<TagNamespace>.<TagKey>=<TagValue>'. Example for freeform tags - '<TagKey>=<TagValue>'.
        """
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the the news report was first enabled. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time the news report was updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionItemContentTypeResult(dict):
    def __init__(__self__, *,
                 actionable_insights_resources: Sequence[builtins.str],
                 capacity_planning_resources: Sequence[builtins.str],
                 sql_insights_fleet_analysis_resources: Sequence[builtins.str],
                 sql_insights_performance_degradation_resources: Sequence[builtins.str],
                 sql_insights_plan_changes_resources: Sequence[builtins.str],
                 sql_insights_top_databases_resources: Sequence[builtins.str],
                 sql_insights_top_sql_by_insights_resources: Sequence[builtins.str],
                 sql_insights_top_sql_resources: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] actionable_insights_resources: Supported resources for actionable insights content type.
        :param Sequence[builtins.str] capacity_planning_resources: Supported resources for capacity planning content type.
        :param Sequence[builtins.str] sql_insights_fleet_analysis_resources: Supported resources for SQL insights - fleet analysis content type.
        :param Sequence[builtins.str] sql_insights_performance_degradation_resources: Supported resources for SQL insights - performance degradation content type.
        :param Sequence[builtins.str] sql_insights_plan_changes_resources: Supported resources for SQL insights - plan changes content type.
        :param Sequence[builtins.str] sql_insights_top_databases_resources: Supported resources for SQL insights - top databases content type.
        :param Sequence[builtins.str] sql_insights_top_sql_by_insights_resources: Supported resources for SQL insights - top SQL by insights content type.
        :param Sequence[builtins.str] sql_insights_top_sql_resources: Supported resources for SQL insights - top SQL content type.
        """
        pulumi.set(__self__, "actionable_insights_resources", actionable_insights_resources)
        pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)
        pulumi.set(__self__, "sql_insights_fleet_analysis_resources", sql_insights_fleet_analysis_resources)
        pulumi.set(__self__, "sql_insights_performance_degradation_resources", sql_insights_performance_degradation_resources)
        pulumi.set(__self__, "sql_insights_plan_changes_resources", sql_insights_plan_changes_resources)
        pulumi.set(__self__, "sql_insights_top_databases_resources", sql_insights_top_databases_resources)
        pulumi.set(__self__, "sql_insights_top_sql_by_insights_resources", sql_insights_top_sql_by_insights_resources)
        pulumi.set(__self__, "sql_insights_top_sql_resources", sql_insights_top_sql_resources)

    @property
    @pulumi.getter(name="actionableInsightsResources")
    def actionable_insights_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for actionable insights content type.
        """
        return pulumi.get(self, "actionable_insights_resources")

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for capacity planning content type.
        """
        return pulumi.get(self, "capacity_planning_resources")

    @property
    @pulumi.getter(name="sqlInsightsFleetAnalysisResources")
    def sql_insights_fleet_analysis_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - fleet analysis content type.
        """
        return pulumi.get(self, "sql_insights_fleet_analysis_resources")

    @property
    @pulumi.getter(name="sqlInsightsPerformanceDegradationResources")
    def sql_insights_performance_degradation_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - performance degradation content type.
        """
        return pulumi.get(self, "sql_insights_performance_degradation_resources")

    @property
    @pulumi.getter(name="sqlInsightsPlanChangesResources")
    def sql_insights_plan_changes_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - plan changes content type.
        """
        return pulumi.get(self, "sql_insights_plan_changes_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopDatabasesResources")
    def sql_insights_top_databases_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - top databases content type.
        """
        return pulumi.get(self, "sql_insights_top_databases_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopSqlByInsightsResources")
    def sql_insights_top_sql_by_insights_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - top SQL by insights content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_by_insights_resources")

    @property
    @pulumi.getter(name="sqlInsightsTopSqlResources")
    def sql_insights_top_sql_resources(self) -> Sequence[builtins.str]:
        """
        Supported resources for SQL insights - top SQL content type.
        """
        return pulumi.get(self, "sql_insights_top_sql_resources")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_used_for_rac_dbs: builtins.bool,
                 lifecycle_details: builtins.str,
                 nsg_ids: Sequence[builtins.str],
                 private_endpoint_status_details: builtins.str,
                 private_ip: builtins.str,
                 state: builtins.str,
                 subnet_id: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 vcn_id: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: The description of the private endpoint.
        :param builtins.str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the Private service accessed database.
        :param builtins.bool is_used_for_rac_dbs: The option to filter OPSI private endpoints that can used for RAC. Should be used along with vcnId query parameter.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence[builtins.str] nsg_ids: The OCIDs of the network security groups that the private endpoint belongs to.
        :param builtins.str private_endpoint_status_details: A message describing the status of the private endpoint connection of this resource. For example, it can be used to provide actionable information about the validity of the private endpoint connection.
        :param builtins.str private_ip: The private IP addresses assigned to the private endpoint. All IP addresses will be concatenated if it is RAC DBs.
        :param builtins.str state: Lifecycle states
        :param builtins.str subnet_id: The OCID of the subnet.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str vcn_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_used_for_rac_dbs", is_used_for_rac_dbs)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "private_endpoint_status_details", private_endpoint_status_details)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the private endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the Private service accessed database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUsedForRacDbs")
    def is_used_for_rac_dbs(self) -> builtins.bool:
        """
        The option to filter OPSI private endpoints that can used for RAC. Should be used along with vcnId query parameter.
        """
        return pulumi.get(self, "is_used_for_rac_dbs")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[builtins.str]:
        """
        The OCIDs of the network security groups that the private endpoint belongs to.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointStatusDetails")
    def private_endpoint_status_details(self) -> builtins.str:
        """
        A message describing the status of the private endpoint connection of this resource. For example, it can be used to provide actionable information about the validity of the private endpoint connection.
        """
        return pulumi.get(self, "private_endpoint_status_details")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> builtins.str:
        """
        The private IP addresses assigned to the private endpoint. All IP addresses will be concatenated if it is RAC DBs.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The OCID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 connection_password: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_awr_data_access: builtins.bool,
                 is_em_data_access: builtins.bool,
                 is_opsi_data_access: builtins.bool,
                 lifecycle_details: builtins.str,
                 name: builtins.str,
                 operations_insights_warehouse_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str connection_password: User provided connection password for the AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique Operations Insights Warehouse User identifier
        :param builtins.bool is_awr_data_access: Indicate whether user has access to AWR data.
        :param builtins.bool is_em_data_access: Indicate whether user has access to EM data.
        :param builtins.bool is_opsi_data_access: Indicate whether user has access to OPSI data.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        :param builtins.str operations_insights_warehouse_id: Unique Operations Insights Warehouse identifier
        :param builtins.str state: Lifecycle states
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_password", connection_password)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_awr_data_access", is_awr_data_access)
        pulumi.set(__self__, "is_em_data_access", is_em_data_access)
        pulumi.set(__self__, "is_opsi_data_access", is_opsi_data_access)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionPassword")
    def connection_password(self) -> builtins.str:
        """
        User provided connection password for the AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        return pulumi.get(self, "connection_password")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique Operations Insights Warehouse User identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAwrDataAccess")
    def is_awr_data_access(self) -> builtins.bool:
        """
        Indicate whether user has access to AWR data.
        """
        return pulumi.get(self, "is_awr_data_access")

    @property
    @pulumi.getter(name="isEmDataAccess")
    def is_em_data_access(self) -> builtins.bool:
        """
        Indicate whether user has access to EM data.
        """
        return pulumi.get(self, "is_em_data_access")

    @property
    @pulumi.getter(name="isOpsiDataAccess")
    def is_opsi_data_access(self) -> builtins.bool:
        """
        Indicate whether user has access to OPSI data.
        """
        return pulumi.get(self, "is_opsi_data_access")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Ops Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> builtins.str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOperationsInsightsWarehousesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 cpu_allocated: builtins.float,
                 cpu_used: builtins.float,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 dynamic_group_id: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 operations_insights_tenancy_id: builtins.str,
                 state: builtins.str,
                 storage_allocated_in_gbs: builtins.float,
                 storage_used_in_gbs: builtins.float,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_last_wallet_rotated: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.float cpu_allocated: Number of OCPUs allocated to OPSI Warehouse ADW.
        :param builtins.float cpu_used: Number of OCPUs used by OPSI Warehouse ADW. Can be fractional.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name.
        :param builtins.str dynamic_group_id: OCID of the dynamic group created for the warehouse
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: Unique Ops Insights Warehouse identifier
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str operations_insights_tenancy_id: Tenancy Identifier of Ops Insights service
        :param builtins.str state: Lifecycle states
        :param builtins.float storage_allocated_in_gbs: Storage allocated to OPSI Warehouse ADW.
        :param builtins.float storage_used_in_gbs: Storage by OPSI Warehouse ADW in GB.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param builtins.str time_last_wallet_rotated: The time at which the ADW wallet was last rotated for the Ops Insights Warehouse. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpu_allocated", cpu_allocated)
        pulumi.set(__self__, "cpu_used", cpu_used)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "dynamic_group_id", dynamic_group_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "operations_insights_tenancy_id", operations_insights_tenancy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_allocated_in_gbs", storage_allocated_in_gbs)
        pulumi.set(__self__, "storage_used_in_gbs", storage_used_in_gbs)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_wallet_rotated", time_last_wallet_rotated)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuAllocated")
    def cpu_allocated(self) -> builtins.float:
        """
        Number of OCPUs allocated to OPSI Warehouse ADW.
        """
        return pulumi.get(self, "cpu_allocated")

    @property
    @pulumi.getter(name="cpuUsed")
    def cpu_used(self) -> builtins.float:
        """
        Number of OCPUs used by OPSI Warehouse ADW. Can be fractional.
        """
        return pulumi.get(self, "cpu_used")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dynamicGroupId")
    def dynamic_group_id(self) -> builtins.str:
        """
        OCID of the dynamic group created for the warehouse
        """
        return pulumi.get(self, "dynamic_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Unique Ops Insights Warehouse identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="operationsInsightsTenancyId")
    def operations_insights_tenancy_id(self) -> builtins.str:
        """
        Tenancy Identifier of Ops Insights service
        """
        return pulumi.get(self, "operations_insights_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageAllocatedInGbs")
    def storage_allocated_in_gbs(self) -> builtins.float:
        """
        Storage allocated to OPSI Warehouse ADW.
        """
        return pulumi.get(self, "storage_allocated_in_gbs")

    @property
    @pulumi.getter(name="storageUsedInGbs")
    def storage_used_in_gbs(self) -> builtins.float:
        """
        Storage by OPSI Warehouse ADW in GB.
        """
        return pulumi.get(self, "storage_used_in_gbs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastWalletRotated")
    def time_last_wallet_rotated(self) -> builtins.str:
        """
        The time at which the ADW wallet was last rotated for the Ops Insights Warehouse. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_wallet_rotated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOpsiConfigurationConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Sequence[builtins.str],
                 config_item_type: builtins.str,
                 default_value: builtins.str,
                 metadatas: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult'],
                 name: builtins.str,
                 value: builtins.str):
        """
        :param Sequence[builtins.str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str default_value: Value of configuration item.
        :param Sequence['GetOpsiConfigurationConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param builtins.str name: Name of configuration item.
        :param builtins.str value: Value of configuration item.
        """
        pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        pulumi.set(__self__, "config_item_type", config_item_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Sequence[builtins.str]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult']:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: builtins.str,
                 data_type: builtins.str,
                 description: builtins.str,
                 display_name: builtins.str,
                 unit_details: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult'],
                 value_input_details: Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult']):
        """
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param builtins.str description: Description of OPSI configuration.
        :param builtins.str display_name: User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param Sequence['GetOpsiConfigurationConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['GetOpsiConfigurationConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        pulumi.set(__self__, "config_item_type", config_item_type)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "unit_details", unit_details)
        pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> builtins.str:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult']:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult']:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 unit: builtins.str):
        """
        :param builtins.str display_name: User-friendly display name for the OPSI configuration. The name does not have to be unique.
        :param builtins.str unit: Unit of configuration item.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        User-friendly display name for the OPSI configuration. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: builtins.str,
                 max_value: builtins.str,
                 min_value: builtins.str,
                 possible_values: Sequence[builtins.str]):
        """
        :param builtins.str allowed_value_type: Allowed value type of configuration item.
        :param builtins.str max_value: Maximum value limit for the configuration item.
        :param builtins.str min_value: Minimum value limit for the configuration item.
        :param Sequence[builtins.str] possible_values: Allowed values to pick for the configuration item.
        """
        pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> builtins.str:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> builtins.str:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> builtins.str:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[builtins.str]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Sequence[builtins.str],
                 config_item_type: builtins.str,
                 default_value: builtins.str,
                 metadatas: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult'],
                 name: builtins.str,
                 value: builtins.str,
                 value_source_config: builtins.str):
        """
        :param Sequence[builtins.str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str default_value: Value of configuration item.
        :param Sequence['GetOpsiConfigurationConfigurationItemConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param builtins.str name: A filter to return only configuration items that match the entire name.
        :param builtins.str value: Value of configuration item.
        :param builtins.str value_source_config: Source configuration from where the value is taken for a configuration item.
        """
        pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        pulumi.set(__self__, "config_item_type", config_item_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_source_config", value_source_config)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Sequence[builtins.str]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult']:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only configuration items that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueSourceConfig")
    def value_source_config(self) -> builtins.str:
        """
        Source configuration from where the value is taken for a configuration item.
        """
        return pulumi.get(self, "value_source_config")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: builtins.str,
                 data_type: builtins.str,
                 description: builtins.str,
                 display_name: builtins.str,
                 unit_details: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult'],
                 value_input_details: Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult']):
        """
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param builtins.str description: Description of configuration item .
        :param builtins.str display_name: User-friendly display name for the configuration item unit.
        :param Sequence['GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        pulumi.set(__self__, "config_item_type", config_item_type)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "unit_details", unit_details)
        pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> builtins.str:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of configuration item .
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        User-friendly display name for the configuration item unit.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult']:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult']:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 unit: builtins.str):
        """
        :param builtins.str display_name: User-friendly display name for the configuration item unit.
        :param builtins.str unit: Unit of configuration item.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        User-friendly display name for the configuration item unit.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: builtins.str,
                 max_value: builtins.str,
                 min_value: builtins.str,
                 possible_values: Sequence[builtins.str]):
        """
        :param builtins.str allowed_value_type: Allowed value type of configuration item.
        :param builtins.str max_value: Maximum value limit for the configuration item.
        :param builtins.str min_value: Minimum value limit for the configuration item.
        :param Sequence[builtins.str] possible_values: Allowed values to pick for the configuration item.
        """
        pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> builtins.str:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> builtins.str:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> builtins.str:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[builtins.str]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetOpsiConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of configuration item.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 config_item_custom_statuses: Sequence[builtins.str],
                 config_item_fields: Sequence[builtins.str],
                 config_items: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult'],
                 config_items_applicable_contexts: Sequence[builtins.str],
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 opsi_config_fields: Sequence[builtins.str],
                 opsi_config_type: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemArgs'] config_items: Array of configuration item summary objects.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: Description of OPSI configuration.
        :param builtins.str display_name: Filter to return based on resources that match the entire display name.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of OPSI configuration resource.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str opsi_config_type: Filter to return based on configuration type of OPSI configuration.
        :param builtins.str state: Filter to return based on Lifecycle state of OPSI configuration.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param builtins.str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "config_item_custom_statuses", config_item_custom_statuses)
        pulumi.set(__self__, "config_item_fields", config_item_fields)
        pulumi.set(__self__, "config_items", config_items)
        pulumi.set(__self__, "config_items_applicable_contexts", config_items_applicable_contexts)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "opsi_config_fields", opsi_config_fields)
        pulumi.set(__self__, "opsi_config_type", opsi_config_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configItemCustomStatuses")
    def config_item_custom_statuses(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "config_item_custom_statuses")

    @property
    @pulumi.getter(name="configItemFields")
    def config_item_fields(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "config_item_fields")

    @property
    @pulumi.getter(name="configItems")
    def config_items(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult']:
        """
        Array of configuration item summary objects.
        """
        return pulumi.get(self, "config_items")

    @property
    @pulumi.getter(name="configItemsApplicableContexts")
    def config_items_applicable_contexts(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "config_items_applicable_contexts")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        Filter to return based on resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of OPSI configuration resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="opsiConfigFields")
    def opsi_config_fields(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "opsi_config_fields")

    @property
    @pulumi.getter(name="opsiConfigType")
    def opsi_config_type(self) -> builtins.str:
        """
        Filter to return based on configuration type of OPSI configuration.
        """
        return pulumi.get(self, "opsi_config_type")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Filter to return based on Lifecycle state of OPSI configuration.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Sequence[builtins.str],
                 config_item_type: builtins.str,
                 default_value: builtins.str,
                 metadatas: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult'],
                 name: builtins.str,
                 value: builtins.str):
        """
        :param Sequence[builtins.str] applicable_contexts: List of contexts in Operations Insights where this configuration item is applicable.
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str default_value: Value of configuration item.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataArgs'] metadatas: Configuration item metadata.
        :param builtins.str name: Name of configuration item.
        :param builtins.str value: Value of configuration item.
        """
        pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        pulumi.set(__self__, "config_item_type", config_item_type)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Sequence[builtins.str]:
        """
        List of contexts in Operations Insights where this configuration item is applicable.
        """
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult']:
        """
        Configuration item metadata.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of configuration item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of configuration item.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: builtins.str,
                 data_type: builtins.str,
                 description: builtins.str,
                 display_name: builtins.str,
                 unit_details: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult'],
                 value_input_details: Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult']):
        """
        :param builtins.str config_item_type: Type of configuration item.
        :param builtins.str data_type: Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        :param builtins.str description: Description of OPSI configuration.
        :param builtins.str display_name: Filter to return based on resources that match the entire display name.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailArgs'] unit_details: Unit details of configuration item.
        :param Sequence['GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailArgs'] value_input_details: Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        pulumi.set(__self__, "config_item_type", config_item_type)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "unit_details", unit_details)
        pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> builtins.str:
        """
        Type of configuration item.
        """
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> builtins.str:
        """
        Data type of configuration item. Examples: STRING, BOOLEAN, NUMBER
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of OPSI configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        Filter to return based on resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult']:
        """
        Unit details of configuration item.
        """
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult']:
        """
        Allowed value details of configuration item, to validate what value can be assigned to a configuration item.
        """
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 unit: builtins.str):
        """
        :param builtins.str display_name: Filter to return based on resources that match the entire display name.
        :param builtins.str unit: Unit of configuration item.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        Filter to return based on resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        """
        Unit of configuration item.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: builtins.str,
                 max_value: builtins.str,
                 min_value: builtins.str,
                 possible_values: Sequence[builtins.str]):
        """
        :param builtins.str allowed_value_type: Allowed value type of configuration item.
        :param builtins.str max_value: Maximum value limit for the configuration item.
        :param builtins.str min_value: Minimum value limit for the configuration item.
        :param Sequence[builtins.str] possible_values: Allowed values to pick for the configuration item.
        """
        pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> builtins.str:
        """
        Allowed value type of configuration item.
        """
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> builtins.str:
        """
        Maximum value limit for the configuration item.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> builtins.str:
        """
        Minimum value limit for the configuration item.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[builtins.str]:
        """
        Allowed values to pick for the configuration item.
        """
        return pulumi.get(self, "possible_values")


