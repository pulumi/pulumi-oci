# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseInsightConnectionCredentialDetails',
    'DatabaseInsightConnectionDetails',
    'DatabaseInsightConnectionDetailsHost',
    'DatabaseInsightCredentialDetails',
    'ExadataInsightMemberVmClusterDetail',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetail',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost',
    'ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails',
    'NewsReportContentTypes',
    'OpsiConfigurationConfigItem',
    'OpsiConfigurationConfigItemMetadata',
    'OpsiConfigurationConfigItemMetadataUnitDetail',
    'OpsiConfigurationConfigItemMetadataValueInputDetail',
    'GetAwrHubAwrSnapshotItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult',
    'GetAwrHubAwrSnapshotsFilterResult',
    'GetAwrHubAwrSourcesSummaryItemResult',
    'GetAwrHubsAwrHubSummaryCollectionResult',
    'GetAwrHubsAwrHubSummaryCollectionItemResult',
    'GetAwrHubsFilterResult',
    'GetDatabaseInsightConnectionCredentialDetailResult',
    'GetDatabaseInsightConnectionDetailResult',
    'GetDatabaseInsightConnectionDetailHostResult',
    'GetDatabaseInsightCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult',
    'GetDatabaseInsightsFilterResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult',
    'GetEnterpriseManagerBridgesFilterResult',
    'GetExadataInsightMemberVmClusterDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult',
    'GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult',
    'GetExadataInsightsFilterResult',
    'GetHostInsightsFilterResult',
    'GetHostInsightsHostInsightSummaryCollectionResult',
    'GetHostInsightsHostInsightSummaryCollectionItemResult',
    'GetImportableAgentEntitiesItemResult',
    'GetImportableAgentEntityItemResult',
    'GetImportableComputeEntitiesItemResult',
    'GetImportableComputeEntityItemResult',
    'GetNewsReportContentTypeResult',
    'GetNewsReportsFilterResult',
    'GetNewsReportsNewsReportCollectionResult',
    'GetNewsReportsNewsReportCollectionItemResult',
    'GetNewsReportsNewsReportCollectionItemContentTypeResult',
    'GetOperationsInsightsPrivateEndpointsFilterResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult',
    'GetOperationsInsightsWarehouseUsersFilterResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult',
    'GetOperationsInsightsWarehousesFilterResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult',
    'GetOpsiConfigurationConfigItemResult',
    'GetOpsiConfigurationConfigItemMetadataResult',
    'GetOpsiConfigurationConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationConfigItemMetadataValueInputDetailResult',
    'GetOpsiConfigurationConfigurationItemConfigItemResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult',
    'GetOpsiConfigurationsFilterResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult',
    'GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult',
]

@pulumi.output_type
class DatabaseInsightConnectionCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class DatabaseInsightConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class DatabaseInsightConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class DatabaseInsightCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 credential_source_name: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "dbmPrivateEndpointId":
            suggest = "dbm_private_endpoint_id"
        elif key == "memberDatabaseDetails":
            suggest = "member_database_details"
        elif key == "opsiPrivateEndpointId":
            suggest = "opsi_private_endpoint_id"
        elif key == "vmclusterId":
            suggest = "vmcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 member_database_details: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 vmcluster_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if member_database_details is not None:
            pulumi.set(__self__, "member_database_details", member_database_details)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if vmcluster_id is not None:
            pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetail']]:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> Optional[str]:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "connectionDetails":
            suggest = "connection_details"
        elif key == "credentialDetails":
            suggest = "credential_details"
        elif key == "databaseId":
            suggest = "database_id"
        elif key == "databaseResourceType":
            suggest = "database_resource_type"
        elif key == "dbmPrivateEndpointId":
            suggest = "dbm_private_endpoint_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "entitySource":
            suggest = "entity_source"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "opsiPrivateEndpointId":
            suggest = "opsi_private_endpoint_id"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "systemTags":
            suggest = "system_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails'] = None,
                 credential_details: Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails'] = None,
                 database_id: Optional[str] = None,
                 database_resource_type: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_type: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if credential_details is not None:
            pulumi.set(__self__, "credential_details", credential_details)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_resource_type is not None:
            pulumi.set(__self__, "database_resource_type", database_resource_type)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails']:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails']:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "walletSecretId":
            suggest = "wallet_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 credential_source_name: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class NewsReportContentTypes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityPlanningResources":
            suggest = "capacity_planning_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NewsReportContentTypes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NewsReportContentTypes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NewsReportContentTypes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_planning_resources: Sequence[str]):
        pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Sequence[str]:
        return pulumi.get(self, "capacity_planning_resources")


@pulumi.output_type
class OpsiConfigurationConfigItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItemType":
            suggest = "config_item_type"
        elif key == "applicableContexts":
            suggest = "applicable_contexts"
        elif key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item_type: str,
                 applicable_contexts: Optional[Sequence[str]] = None,
                 default_value: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "config_item_type", config_item_type)
        if applicable_contexts is not None:
            pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> str:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadata']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configItemType":
            suggest = "config_item_type"
        elif key == "dataType":
            suggest = "data_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "unitDetails":
            suggest = "unit_details"
        elif key == "valueInputDetails":
            suggest = "value_input_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_item_type: Optional[str] = None,
                 data_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 unit_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']] = None,
                 value_input_details: Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']] = None):
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit_details is not None:
            pulumi.set(__self__, "unit_details", unit_details)
        if value_input_details is not None:
            pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataUnitDetail']]:
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[Sequence['outputs.OpsiConfigurationConfigItemMetadataValueInputDetail']]:
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadataUnitDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadataUnitDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadataUnitDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadataUnitDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 unit: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class OpsiConfigurationConfigItemMetadataValueInputDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedValueType":
            suggest = "allowed_value_type"
        elif key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"
        elif key == "possibleValues":
            suggest = "possible_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OpsiConfigurationConfigItemMetadataValueInputDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OpsiConfigurationConfigItemMetadataValueInputDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OpsiConfigurationConfigItemMetadataValueInputDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_value_type: Optional[str] = None,
                 max_value: Optional[str] = None,
                 min_value: Optional[str] = None,
                 possible_values: Optional[Sequence[str]] = None):
        if allowed_value_type is not None:
            pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[str]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[str]:
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetAwrHubAwrSnapshotItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: Optional[str] = None,
                 error_count: Optional[str] = None,
                 instance_number: Optional[int] = None,
                 snapshot_identifier: Optional[int] = None,
                 time_db_startup: Optional[str] = None,
                 time_snapshot_begin: Optional[str] = None,
                 time_snapshot_end: Optional[str] = None):
        if awr_source_database_id is not None:
            pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        if error_count is not None:
            pulumi.set(__self__, "error_count", error_count)
        if instance_number is not None:
            pulumi.set(__self__, "instance_number", instance_number)
        if snapshot_identifier is not None:
            pulumi.set(__self__, "snapshot_identifier", snapshot_identifier)
        if time_db_startup is not None:
            pulumi.set(__self__, "time_db_startup", time_db_startup)
        if time_snapshot_begin is not None:
            pulumi.set(__self__, "time_snapshot_begin", time_snapshot_begin)
        if time_snapshot_end is not None:
            pulumi.set(__self__, "time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> Optional[str]:
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> Optional[str]:
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> Optional[int]:
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> Optional[int]:
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> Optional[str]:
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> Optional[str]:
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> Optional[str]:
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: Optional[str] = None,
                 error_count: Optional[str] = None,
                 instance_number: Optional[int] = None,
                 snapshot_identifier: Optional[int] = None,
                 time_db_startup: Optional[str] = None,
                 time_snapshot_begin: Optional[str] = None,
                 time_snapshot_end: Optional[str] = None):
        if awr_source_database_id is not None:
            pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        if error_count is not None:
            pulumi.set(__self__, "error_count", error_count)
        if instance_number is not None:
            pulumi.set(__self__, "instance_number", instance_number)
        if snapshot_identifier is not None:
            pulumi.set(__self__, "snapshot_identifier", snapshot_identifier)
        if time_db_startup is not None:
            pulumi.set(__self__, "time_db_startup", time_db_startup)
        if time_snapshot_begin is not None:
            pulumi.set(__self__, "time_snapshot_begin", time_snapshot_begin)
        if time_snapshot_end is not None:
            pulumi.set(__self__, "time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> Optional[str]:
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> Optional[str]:
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> Optional[int]:
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> Optional[int]:
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> Optional[str]:
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> Optional[str]:
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> Optional[str]:
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAwrHubAwrSourcesSummaryItemResult(dict):
    def __init__(__self__, *,
                 awr_hub_id: Optional[str] = None,
                 awr_source_database_id: Optional[str] = None,
                 hours_since_last_import: Optional[float] = None,
                 max_snapshot_identifier: Optional[float] = None,
                 min_snapshot_identifier: Optional[float] = None,
                 name: Optional[str] = None,
                 snapshots_uploaded: Optional[float] = None,
                 time_first_snapshot_generated: Optional[str] = None,
                 time_last_snapshot_generated: Optional[str] = None):
        if awr_hub_id is not None:
            pulumi.set(__self__, "awr_hub_id", awr_hub_id)
        if awr_source_database_id is not None:
            pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        if hours_since_last_import is not None:
            pulumi.set(__self__, "hours_since_last_import", hours_since_last_import)
        if max_snapshot_identifier is not None:
            pulumi.set(__self__, "max_snapshot_identifier", max_snapshot_identifier)
        if min_snapshot_identifier is not None:
            pulumi.set(__self__, "min_snapshot_identifier", min_snapshot_identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if snapshots_uploaded is not None:
            pulumi.set(__self__, "snapshots_uploaded", snapshots_uploaded)
        if time_first_snapshot_generated is not None:
            pulumi.set(__self__, "time_first_snapshot_generated", time_first_snapshot_generated)
        if time_last_snapshot_generated is not None:
            pulumi.set(__self__, "time_last_snapshot_generated", time_last_snapshot_generated)

    @property
    @pulumi.getter(name="awrHubId")
    def awr_hub_id(self) -> Optional[str]:
        return pulumi.get(self, "awr_hub_id")

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> Optional[str]:
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="hoursSinceLastImport")
    def hours_since_last_import(self) -> Optional[float]:
        return pulumi.get(self, "hours_since_last_import")

    @property
    @pulumi.getter(name="maxSnapshotIdentifier")
    def max_snapshot_identifier(self) -> Optional[float]:
        return pulumi.get(self, "max_snapshot_identifier")

    @property
    @pulumi.getter(name="minSnapshotIdentifier")
    def min_snapshot_identifier(self) -> Optional[float]:
        return pulumi.get(self, "min_snapshot_identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="snapshotsUploaded")
    def snapshots_uploaded(self) -> Optional[float]:
        return pulumi.get(self, "snapshots_uploaded")

    @property
    @pulumi.getter(name="timeFirstSnapshotGenerated")
    def time_first_snapshot_generated(self) -> Optional[str]:
        return pulumi.get(self, "time_first_snapshot_generated")

    @property
    @pulumi.getter(name="timeLastSnapshotGenerated")
    def time_last_snapshot_generated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_snapshot_generated")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 awr_mailbox_url: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 object_storage_bucket_name: Optional[str] = None,
                 operations_insights_warehouse_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if awr_mailbox_url is not None:
            pulumi.set(__self__, "awr_mailbox_url", awr_mailbox_url)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if operations_insights_warehouse_id is not None:
            pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="awrMailboxUrl")
    def awr_mailbox_url(self) -> Optional[str]:
        return pulumi.get(self, "awr_mailbox_url")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> Optional[str]:
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAwrHubsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseInsightConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult']] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_credential_details: Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult']] = None,
                 connection_details: Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult']] = None,
                 credential_details: Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult']] = None,
                 database_connection_status_details: Optional[str] = None,
                 database_display_name: Optional[str] = None,
                 database_id: Optional[str] = None,
                 database_name: Optional[str] = None,
                 database_resource_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 database_version: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_type: Optional[str] = None,
                 enterprise_manager_bridge_id: Optional[str] = None,
                 enterprise_manager_entity_display_name: Optional[str] = None,
                 enterprise_manager_entity_identifier: Optional[str] = None,
                 enterprise_manager_entity_name: Optional[str] = None,
                 enterprise_manager_entity_type: Optional[str] = None,
                 enterprise_manager_identifier: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 exadata_insight_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 parent_id: Optional[str] = None,
                 processor_count: Optional[int] = None,
                 root_id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_credential_details is not None:
            pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if credential_details is not None:
            pulumi.set(__self__, "credential_details", credential_details)
        if database_connection_status_details is not None:
            pulumi.set(__self__, "database_connection_status_details", database_connection_status_details)
        if database_display_name is not None:
            pulumi.set(__self__, "database_display_name", database_display_name)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_resource_type is not None:
            pulumi.set(__self__, "database_resource_type", database_resource_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if enterprise_manager_bridge_id is not None:
            pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        if enterprise_manager_entity_display_name is not None:
            pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        if enterprise_manager_entity_identifier is not None:
            pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        if enterprise_manager_entity_name is not None:
            pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        if enterprise_manager_entity_type is not None:
            pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        if enterprise_manager_identifier is not None:
            pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if exadata_insight_id is not None:
            pulumi.set(__self__, "exadata_insight_id", exadata_insight_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if processor_count is not None:
            pulumi.set(__self__, "processor_count", processor_count)
        if root_id is not None:
            pulumi.set(__self__, "root_id", root_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult']]:
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult']]:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult']]:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseConnectionStatusDetails")
    def database_connection_status_details(self) -> Optional[str]:
        return pulumi.get(self, "database_connection_status_details")

    @property
    @pulumi.getter(name="databaseDisplayName")
    def database_display_name(self) -> Optional[str]:
        return pulumi.get(self, "database_display_name")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[str]:
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> Optional[str]:
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> Optional[int]:
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter(name="rootId")
    def root_id(self) -> Optional[str]:
        return pulumi.get(self, "root_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult']] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetDatabaseInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 object_storage_bucket_name: Optional[str] = None,
                 object_storage_bucket_status_details: Optional[str] = None,
                 object_storage_namespace_name: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if object_storage_bucket_status_details is not None:
            pulumi.set(__self__, "object_storage_bucket_status_details", object_storage_bucket_status_details)
        if object_storage_namespace_name is not None:
            pulumi.set(__self__, "object_storage_namespace_name", object_storage_namespace_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageBucketStatusDetails")
    def object_storage_bucket_status_details(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_status_details")

    @property
    @pulumi.getter(name="objectStorageNamespaceName")
    def object_storage_namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnterpriseManagerBridgesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 member_database_details: Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult']] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 vmcluster_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if member_database_details is not None:
            pulumi.set(__self__, "member_database_details", member_database_details)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if vmcluster_id is not None:
            pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult']]:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> Optional[str]:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_details: Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']] = None,
                 credential_details: Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']] = None,
                 database_id: Optional[str] = None,
                 database_resource_type: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_type: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if credential_details is not None:
            pulumi.set(__self__, "credential_details", credential_details)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_resource_type is not None:
            pulumi.set(__self__, "database_resource_type", database_resource_type)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']]:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']]:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult(dict):
    def __init__(__self__, *,
                 hosts: Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 enterprise_manager_bridge_id: Optional[str] = None,
                 enterprise_manager_entity_display_name: Optional[str] = None,
                 enterprise_manager_entity_identifier: Optional[str] = None,
                 enterprise_manager_entity_name: Optional[str] = None,
                 enterprise_manager_entity_type: Optional[str] = None,
                 enterprise_manager_identifier: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 exadata_display_name: Optional[str] = None,
                 exadata_infra_id: Optional[str] = None,
                 exadata_infra_resource_type: Optional[str] = None,
                 exadata_name: Optional[str] = None,
                 exadata_rack_type: Optional[str] = None,
                 exadata_shape: Optional[str] = None,
                 exadata_type: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_sync_enabled: Optional[bool] = None,
                 is_virtualized_exadata: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 member_vm_cluster_details: Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult']] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if enterprise_manager_bridge_id is not None:
            pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        if enterprise_manager_entity_display_name is not None:
            pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        if enterprise_manager_entity_identifier is not None:
            pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        if enterprise_manager_entity_name is not None:
            pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        if enterprise_manager_entity_type is not None:
            pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        if enterprise_manager_identifier is not None:
            pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if exadata_display_name is not None:
            pulumi.set(__self__, "exadata_display_name", exadata_display_name)
        if exadata_infra_id is not None:
            pulumi.set(__self__, "exadata_infra_id", exadata_infra_id)
        if exadata_infra_resource_type is not None:
            pulumi.set(__self__, "exadata_infra_resource_type", exadata_infra_resource_type)
        if exadata_name is not None:
            pulumi.set(__self__, "exadata_name", exadata_name)
        if exadata_rack_type is not None:
            pulumi.set(__self__, "exadata_rack_type", exadata_rack_type)
        if exadata_shape is not None:
            pulumi.set(__self__, "exadata_shape", exadata_shape)
        if exadata_type is not None:
            pulumi.set(__self__, "exadata_type", exadata_type)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_sync_enabled is not None:
            pulumi.set(__self__, "is_auto_sync_enabled", is_auto_sync_enabled)
        if is_virtualized_exadata is not None:
            pulumi.set(__self__, "is_virtualized_exadata", is_virtualized_exadata)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if member_vm_cluster_details is not None:
            pulumi.set(__self__, "member_vm_cluster_details", member_vm_cluster_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataDisplayName")
    def exadata_display_name(self) -> Optional[str]:
        return pulumi.get(self, "exadata_display_name")

    @property
    @pulumi.getter(name="exadataInfraId")
    def exadata_infra_id(self) -> Optional[str]:
        return pulumi.get(self, "exadata_infra_id")

    @property
    @pulumi.getter(name="exadataInfraResourceType")
    def exadata_infra_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "exadata_infra_resource_type")

    @property
    @pulumi.getter(name="exadataName")
    def exadata_name(self) -> Optional[str]:
        return pulumi.get(self, "exadata_name")

    @property
    @pulumi.getter(name="exadataRackType")
    def exadata_rack_type(self) -> Optional[str]:
        return pulumi.get(self, "exadata_rack_type")

    @property
    @pulumi.getter(name="exadataShape")
    def exadata_shape(self) -> Optional[str]:
        return pulumi.get(self, "exadata_shape")

    @property
    @pulumi.getter(name="exadataType")
    def exadata_type(self) -> Optional[str]:
        return pulumi.get(self, "exadata_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoSyncEnabled")
    def is_auto_sync_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_sync_enabled")

    @property
    @pulumi.getter(name="isVirtualizedExadata")
    def is_virtualized_exadata(self) -> Optional[bool]:
        return pulumi.get(self, "is_virtualized_exadata")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="memberVmClusterDetails")
    def member_vm_cluster_details(self) -> Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult']]:
        return pulumi.get(self, "member_vm_cluster_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 member_database_details: Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult']] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 vmcluster_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if member_database_details is not None:
            pulumi.set(__self__, "member_database_details", member_database_details)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if vmcluster_id is not None:
            pulumi.set(__self__, "vmcluster_id", vmcluster_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="memberDatabaseDetails")
    def member_database_details(self) -> Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult']]:
        return pulumi.get(self, "member_database_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="vmclusterId")
    def vmcluster_id(self) -> Optional[str]:
        return pulumi.get(self, "vmcluster_id")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_details: Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']] = None,
                 credential_details: Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']] = None,
                 database_id: Optional[str] = None,
                 database_resource_type: Optional[str] = None,
                 dbm_private_endpoint_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deployment_type: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 opsi_private_endpoint_id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if credential_details is not None:
            pulumi.set(__self__, "credential_details", credential_details)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_resource_type is not None:
            pulumi.set(__self__, "database_resource_type", database_resource_type)
        if dbm_private_endpoint_id is not None:
            pulumi.set(__self__, "dbm_private_endpoint_id", dbm_private_endpoint_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if opsi_private_endpoint_id is not None:
            pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult']]:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult']]:
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="dbmPrivateEndpointId")
    def dbm_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "dbm_private_endpoint_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailResult(dict):
    def __init__(__self__, *,
                 hosts: Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None,
                 wallet_secret_id: Optional[str] = None):
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if wallet_secret_id is not None:
            pulumi.set(__self__, "wallet_secret_id", wallet_secret_id)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="walletSecretId")
    def wallet_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_secret_id")


@pulumi.output_type
class GetExadataInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 compute_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 enterprise_manager_bridge_id: Optional[str] = None,
                 enterprise_manager_entity_display_name: Optional[str] = None,
                 enterprise_manager_entity_identifier: Optional[str] = None,
                 enterprise_manager_entity_name: Optional[str] = None,
                 enterprise_manager_entity_type: Optional[str] = None,
                 enterprise_manager_identifier: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 exadata_insight_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host_display_name: Optional[str] = None,
                 host_name: Optional[str] = None,
                 host_type: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 management_agent_id: Optional[str] = None,
                 platform_name: Optional[str] = None,
                 platform_type: Optional[str] = None,
                 platform_version: Optional[str] = None,
                 processor_count: Optional[int] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if enterprise_manager_bridge_id is not None:
            pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        if enterprise_manager_entity_display_name is not None:
            pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        if enterprise_manager_entity_identifier is not None:
            pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        if enterprise_manager_entity_name is not None:
            pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        if enterprise_manager_entity_type is not None:
            pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        if enterprise_manager_identifier is not None:
            pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if exadata_insight_id is not None:
            pulumi.set(__self__, "exadata_insight_id", exadata_insight_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host_display_name is not None:
            pulumi.set(__self__, "host_display_name", host_display_name)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if platform_name is not None:
            pulumi.set(__self__, "platform_name", platform_name)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if processor_count is not None:
            pulumi.set(__self__, "processor_count", processor_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> Optional[str]:
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> Optional[str]:
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostDisplayName")
    def host_display_name(self) -> Optional[str]:
        return pulumi.get(self, "host_display_name")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[str]:
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> Optional[str]:
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[str]:
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> Optional[int]:
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetImportableAgentEntitiesItemResult(dict):
    def __init__(__self__, *,
                 entity_source: Optional[str] = None,
                 host_name: Optional[str] = None,
                 management_agent_display_name: Optional[str] = None,
                 management_agent_id: Optional[str] = None,
                 platform_type: Optional[str] = None):
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if management_agent_display_name is not None:
            pulumi.set(__self__, "management_agent_display_name", management_agent_display_name)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="managementAgentDisplayName")
    def management_agent_display_name(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_display_name")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableAgentEntityItemResult(dict):
    def __init__(__self__, *,
                 entity_source: Optional[str] = None,
                 host_name: Optional[str] = None,
                 management_agent_display_name: Optional[str] = None,
                 management_agent_id: Optional[str] = None,
                 platform_type: Optional[str] = None):
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if management_agent_display_name is not None:
            pulumi.set(__self__, "management_agent_display_name", management_agent_display_name)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="managementAgentDisplayName")
    def management_agent_display_name(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_display_name")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableComputeEntitiesItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 compute_display_name: Optional[str] = None,
                 compute_id: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 host_name: Optional[str] = None,
                 platform_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_display_name is not None:
            pulumi.set(__self__, "compute_display_name", compute_display_name)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeDisplayName")
    def compute_display_name(self) -> Optional[str]:
        return pulumi.get(self, "compute_display_name")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetImportableComputeEntityItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 compute_display_name: Optional[str] = None,
                 compute_id: Optional[str] = None,
                 entity_source: Optional[str] = None,
                 host_name: Optional[str] = None,
                 platform_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_display_name is not None:
            pulumi.set(__self__, "compute_display_name", compute_display_name)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if entity_source is not None:
            pulumi.set(__self__, "entity_source", entity_source)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if platform_type is not None:
            pulumi.set(__self__, "platform_type", platform_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeDisplayName")
    def compute_display_name(self) -> Optional[str]:
        return pulumi.get(self, "compute_display_name")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> Optional[str]:
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> Optional[str]:
        return pulumi.get(self, "platform_type")


@pulumi.output_type
class GetNewsReportContentTypeResult(dict):
    def __init__(__self__, *,
                 capacity_planning_resources: Optional[Sequence[str]] = None):
        if capacity_planning_resources is not None:
            pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "capacity_planning_resources")


@pulumi.output_type
class GetNewsReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNewsReportsNewsReportCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 content_types: Optional[Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 locale: Optional[str] = None,
                 name: Optional[str] = None,
                 news_frequency: Optional[str] = None,
                 ons_topic_id: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if content_types is not None:
            pulumi.set(__self__, "content_types", content_types)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if news_frequency is not None:
            pulumi.set(__self__, "news_frequency", news_frequency)
        if ons_topic_id is not None:
            pulumi.set(__self__, "ons_topic_id", ons_topic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Optional[Sequence['outputs.GetNewsReportsNewsReportCollectionItemContentTypeResult']]:
        return pulumi.get(self, "content_types")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def locale(self) -> Optional[str]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newsFrequency")
    def news_frequency(self) -> Optional[str]:
        return pulumi.get(self, "news_frequency")

    @property
    @pulumi.getter(name="onsTopicId")
    def ons_topic_id(self) -> Optional[str]:
        return pulumi.get(self, "ons_topic_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetNewsReportsNewsReportCollectionItemContentTypeResult(dict):
    def __init__(__self__, *,
                 capacity_planning_resources: Optional[Sequence[str]] = None):
        if capacity_planning_resources is not None:
            pulumi.set(__self__, "capacity_planning_resources", capacity_planning_resources)

    @property
    @pulumi.getter(name="capacityPlanningResources")
    def capacity_planning_resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "capacity_planning_resources")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_used_for_rac_dbs: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_endpoint_status_details: Optional[str] = None,
                 private_ip: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_used_for_rac_dbs is not None:
            pulumi.set(__self__, "is_used_for_rac_dbs", is_used_for_rac_dbs)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_endpoint_status_details is not None:
            pulumi.set(__self__, "private_endpoint_status_details", private_endpoint_status_details)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUsedForRacDbs")
    def is_used_for_rac_dbs(self) -> Optional[bool]:
        return pulumi.get(self, "is_used_for_rac_dbs")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointStatusDetails")
    def private_endpoint_status_details(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_status_details")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_password: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_awr_data_access: Optional[bool] = None,
                 is_em_data_access: Optional[bool] = None,
                 is_opsi_data_access: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 operations_insights_warehouse_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_password is not None:
            pulumi.set(__self__, "connection_password", connection_password)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_awr_data_access is not None:
            pulumi.set(__self__, "is_awr_data_access", is_awr_data_access)
        if is_em_data_access is not None:
            pulumi.set(__self__, "is_em_data_access", is_em_data_access)
        if is_opsi_data_access is not None:
            pulumi.set(__self__, "is_opsi_data_access", is_opsi_data_access)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operations_insights_warehouse_id is not None:
            pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionPassword")
    def connection_password(self) -> Optional[str]:
        return pulumi.get(self, "connection_password")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAwrDataAccess")
    def is_awr_data_access(self) -> Optional[bool]:
        return pulumi.get(self, "is_awr_data_access")

    @property
    @pulumi.getter(name="isEmDataAccess")
    def is_em_data_access(self) -> Optional[bool]:
        return pulumi.get(self, "is_em_data_access")

    @property
    @pulumi.getter(name="isOpsiDataAccess")
    def is_opsi_data_access(self) -> Optional[bool]:
        return pulumi.get(self, "is_opsi_data_access")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> Optional[str]:
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOperationsInsightsWarehousesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 cpu_allocated: Optional[float] = None,
                 cpu_used: Optional[float] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dynamic_group_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 operations_insights_tenancy_id: Optional[str] = None,
                 state: Optional[str] = None,
                 storage_allocated_in_gbs: Optional[float] = None,
                 storage_used_in_gbs: Optional[float] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_last_wallet_rotated: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cpu_allocated is not None:
            pulumi.set(__self__, "cpu_allocated", cpu_allocated)
        if cpu_used is not None:
            pulumi.set(__self__, "cpu_used", cpu_used)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dynamic_group_id is not None:
            pulumi.set(__self__, "dynamic_group_id", dynamic_group_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if operations_insights_tenancy_id is not None:
            pulumi.set(__self__, "operations_insights_tenancy_id", operations_insights_tenancy_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_allocated_in_gbs is not None:
            pulumi.set(__self__, "storage_allocated_in_gbs", storage_allocated_in_gbs)
        if storage_used_in_gbs is not None:
            pulumi.set(__self__, "storage_used_in_gbs", storage_used_in_gbs)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_wallet_rotated is not None:
            pulumi.set(__self__, "time_last_wallet_rotated", time_last_wallet_rotated)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuAllocated")
    def cpu_allocated(self) -> Optional[float]:
        return pulumi.get(self, "cpu_allocated")

    @property
    @pulumi.getter(name="cpuUsed")
    def cpu_used(self) -> Optional[float]:
        return pulumi.get(self, "cpu_used")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dynamicGroupId")
    def dynamic_group_id(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="operationsInsightsTenancyId")
    def operations_insights_tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "operations_insights_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageAllocatedInGbs")
    def storage_allocated_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "storage_allocated_in_gbs")

    @property
    @pulumi.getter(name="storageUsedInGbs")
    def storage_used_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "storage_used_in_gbs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastWalletRotated")
    def time_last_wallet_rotated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_wallet_rotated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOpsiConfigurationConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Optional[Sequence[str]] = None,
                 config_item_type: Optional[str] = None,
                 default_value: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult']] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if applicable_contexts is not None:
            pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetOpsiConfigurationConfigItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: Optional[str] = None,
                 data_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 unit_details: Optional[Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult']] = None,
                 value_input_details: Optional[Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult']] = None):
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit_details is not None:
            pulumi.set(__self__, "unit_details", unit_details)
        if value_input_details is not None:
            pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[Sequence['outputs.GetOpsiConfigurationConfigItemMetadataUnitDetailResult']]:
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[Sequence['outputs.GetOpsiConfigurationConfigItemMetadataValueInputDetailResult']]:
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 unit: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: Optional[str] = None,
                 max_value: Optional[str] = None,
                 min_value: Optional[str] = None,
                 possible_values: Optional[Sequence[str]] = None):
        if allowed_value_type is not None:
            pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[str]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[str]:
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Optional[Sequence[str]] = None,
                 config_item_type: Optional[str] = None,
                 default_value: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult']] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 value_source_config: Optional[str] = None):
        if applicable_contexts is not None:
            pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_source_config is not None:
            pulumi.set(__self__, "value_source_config", value_source_config)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueSourceConfig")
    def value_source_config(self) -> Optional[str]:
        return pulumi.get(self, "value_source_config")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: Optional[str] = None,
                 data_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 unit_details: Optional[Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult']] = None,
                 value_input_details: Optional[Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult']] = None):
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit_details is not None:
            pulumi.set(__self__, "unit_details", unit_details)
        if value_input_details is not None:
            pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult']]:
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[Sequence['outputs.GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult']]:
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 unit: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: Optional[str] = None,
                 max_value: Optional[str] = None,
                 min_value: Optional[str] = None,
                 possible_values: Optional[Sequence[str]] = None):
        if allowed_value_type is not None:
            pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[str]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[str]:
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "possible_values")


@pulumi.output_type
class GetOpsiConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 config_item_custom_statuses: Optional[Sequence[str]] = None,
                 config_item_fields: Optional[Sequence[str]] = None,
                 config_items: Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult']] = None,
                 config_items_applicable_contexts: Optional[Sequence[str]] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 opsi_config_fields: Optional[Sequence[str]] = None,
                 opsi_config_type: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if config_item_custom_statuses is not None:
            pulumi.set(__self__, "config_item_custom_statuses", config_item_custom_statuses)
        if config_item_fields is not None:
            pulumi.set(__self__, "config_item_fields", config_item_fields)
        if config_items is not None:
            pulumi.set(__self__, "config_items", config_items)
        if config_items_applicable_contexts is not None:
            pulumi.set(__self__, "config_items_applicable_contexts", config_items_applicable_contexts)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if opsi_config_fields is not None:
            pulumi.set(__self__, "opsi_config_fields", opsi_config_fields)
        if opsi_config_type is not None:
            pulumi.set(__self__, "opsi_config_type", opsi_config_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configItemCustomStatuses")
    def config_item_custom_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "config_item_custom_statuses")

    @property
    @pulumi.getter(name="configItemFields")
    def config_item_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "config_item_fields")

    @property
    @pulumi.getter(name="configItems")
    def config_items(self) -> Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult']]:
        return pulumi.get(self, "config_items")

    @property
    @pulumi.getter(name="configItemsApplicableContexts")
    def config_items_applicable_contexts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "config_items_applicable_contexts")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="opsiConfigFields")
    def opsi_config_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "opsi_config_fields")

    @property
    @pulumi.getter(name="opsiConfigType")
    def opsi_config_type(self) -> Optional[str]:
        return pulumi.get(self, "opsi_config_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemResult(dict):
    def __init__(__self__, *,
                 applicable_contexts: Optional[Sequence[str]] = None,
                 config_item_type: Optional[str] = None,
                 default_value: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult']] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if applicable_contexts is not None:
            pulumi.set(__self__, "applicable_contexts", applicable_contexts)
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="applicableContexts")
    def applicable_contexts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "applicable_contexts")

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataResult(dict):
    def __init__(__self__, *,
                 config_item_type: Optional[str] = None,
                 data_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 unit_details: Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult']] = None,
                 value_input_details: Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult']] = None):
        if config_item_type is not None:
            pulumi.set(__self__, "config_item_type", config_item_type)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit_details is not None:
            pulumi.set(__self__, "unit_details", unit_details)
        if value_input_details is not None:
            pulumi.set(__self__, "value_input_details", value_input_details)

    @property
    @pulumi.getter(name="configItemType")
    def config_item_type(self) -> Optional[str]:
        return pulumi.get(self, "config_item_type")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="unitDetails")
    def unit_details(self) -> Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult']]:
        return pulumi.get(self, "unit_details")

    @property
    @pulumi.getter(name="valueInputDetails")
    def value_input_details(self) -> Optional[Sequence['outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult']]:
        return pulumi.get(self, "value_input_details")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 unit: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetailResult(dict):
    def __init__(__self__, *,
                 allowed_value_type: Optional[str] = None,
                 max_value: Optional[str] = None,
                 min_value: Optional[str] = None,
                 possible_values: Optional[Sequence[str]] = None):
        if allowed_value_type is not None:
            pulumi.set(__self__, "allowed_value_type", allowed_value_type)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)

    @property
    @pulumi.getter(name="allowedValueType")
    def allowed_value_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_value_type")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[str]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[str]:
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "possible_values")


