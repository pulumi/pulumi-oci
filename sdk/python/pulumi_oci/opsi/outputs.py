# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseInsightConnectionCredentialDetails',
    'DatabaseInsightConnectionDetails',
    'DatabaseInsightConnectionDetailsHost',
    'DatabaseInsightCredentialDetails',
    'GetAwrHubAwrSnapshotItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult',
    'GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult',
    'GetAwrHubAwrSnapshotsFilterResult',
    'GetAwrHubAwrSourcesSummaryItemResult',
    'GetAwrHubsAwrHubSummaryCollectionResult',
    'GetAwrHubsAwrHubSummaryCollectionItemResult',
    'GetAwrHubsFilterResult',
    'GetDatabaseInsightConnectionCredentialDetailResult',
    'GetDatabaseInsightConnectionDetailResult',
    'GetDatabaseInsightConnectionDetailHostResult',
    'GetDatabaseInsightCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult',
    'GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult',
    'GetDatabaseInsightsFilterResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult',
    'GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult',
    'GetEnterpriseManagerBridgesFilterResult',
    'GetExadataInsightsExadataInsightSummaryCollectionResult',
    'GetExadataInsightsExadataInsightSummaryCollectionItemResult',
    'GetExadataInsightsFilterResult',
    'GetHostInsightsFilterResult',
    'GetHostInsightsHostInsightSummaryCollectionResult',
    'GetHostInsightsHostInsightSummaryCollectionItemResult',
    'GetOperationsInsightsPrivateEndpointsFilterResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult',
    'GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult',
    'GetOperationsInsightsWarehouseUsersFilterResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult',
    'GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult',
    'GetOperationsInsightsWarehousesFilterResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult',
    'GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult',
]

@pulumi.output_type
class DatabaseInsightConnectionCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_source_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        """
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DatabaseInsightConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None):
        """
        :param str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['DatabaseInsightConnectionDetailsHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param int port: Listener port number used for connection requests.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.DatabaseInsightConnectionDetailsHost']]:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class DatabaseInsightConnectionDetailsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightConnectionDetailsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightConnectionDetailsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests.
        """
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> Optional[str]:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DatabaseInsightCredentialDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialSourceName":
            suggest = "credential_source_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseInsightCredentialDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseInsightCredentialDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 credential_source_name: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str credential_type: Credential type.
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_source_name is not None:
            pulumi.set(__self__, "credential_source_name", credential_source_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> Optional[str]:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetAwrHubAwrSnapshotItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: str,
                 error_count: str,
                 instance_number: int,
                 snapshot_identifier: int,
                 time_db_startup: str,
                 time_snapshot_begin: str,
                 time_snapshot_end: str):
        """
        :param str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param str error_count: The total number of errors.
        :param int instance_number: The database instance number.
        :param int snapshot_identifier: The identifier of the snapshot.
        :param str time_db_startup: The timestamp of the database startup.
        :param str time_snapshot_begin: The start time of the snapshot.
        :param str time_snapshot_end: The end time of the snapshot.
        """
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "snapshot_identifier", snapshot_identifier)
        pulumi.set(__self__, "time_db_startup", time_db_startup)
        pulumi.set(__self__, "time_snapshot_begin", time_snapshot_begin)
        pulumi.set(__self__, "time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> str:
        """
        The total number of errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> int:
        """
        The database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> int:
        """
        The identifier of the snapshot.
        """
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> str:
        """
        The timestamp of the database startup.
        """
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> str:
        """
        The start time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> str:
        """
        The end time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']):
        """
        :param Sequence['GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemArgs'] items: A list of AWR snapshot summary data.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult']:
        """
        A list of AWR snapshot summary data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']):
        """
        :param Sequence['GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemArgs'] items: A list of AWR snapshot summary data.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult']:
        """
        A list of AWR snapshot summary data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubAwrSnapshotsAwrSnapshotCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 awr_source_database_id: str,
                 error_count: str,
                 instance_number: int,
                 snapshot_identifier: int,
                 time_db_startup: str,
                 time_snapshot_begin: str,
                 time_snapshot_end: str):
        """
        :param str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param str error_count: The total number of errors.
        :param int instance_number: The database instance number.
        :param int snapshot_identifier: The identifier of the snapshot.
        :param str time_db_startup: The timestamp of the database startup.
        :param str time_snapshot_begin: The start time of the snapshot.
        :param str time_snapshot_end: The end time of the snapshot.
        """
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "snapshot_identifier", snapshot_identifier)
        pulumi.set(__self__, "time_db_startup", time_db_startup)
        pulumi.set(__self__, "time_snapshot_begin", time_snapshot_begin)
        pulumi.set(__self__, "time_snapshot_end", time_snapshot_end)

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> str:
        """
        The total number of errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> int:
        """
        The database instance number.
        """
        return pulumi.get(self, "instance_number")

    @property
    @pulumi.getter(name="snapshotIdentifier")
    def snapshot_identifier(self) -> int:
        """
        The identifier of the snapshot.
        """
        return pulumi.get(self, "snapshot_identifier")

    @property
    @pulumi.getter(name="timeDbStartup")
    def time_db_startup(self) -> str:
        """
        The timestamp of the database startup.
        """
        return pulumi.get(self, "time_db_startup")

    @property
    @pulumi.getter(name="timeSnapshotBegin")
    def time_snapshot_begin(self) -> str:
        """
        The start time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_begin")

    @property
    @pulumi.getter(name="timeSnapshotEnd")
    def time_snapshot_end(self) -> str:
        """
        The end time of the snapshot.
        """
        return pulumi.get(self, "time_snapshot_end")


@pulumi.output_type
class GetAwrHubAwrSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAwrHubAwrSourcesSummaryItemResult(dict):
    def __init__(__self__, *,
                 awr_hub_id: str,
                 awr_source_database_id: str,
                 hours_since_last_import: float,
                 max_snapshot_identifier: float,
                 min_snapshot_identifier: float,
                 name: str,
                 snapshots_uploaded: float,
                 time_first_snapshot_generated: str,
                 time_last_snapshot_generated: str):
        """
        :param str awr_hub_id: Unique Awr Hub identifier
        :param str awr_source_database_id: DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        :param float hours_since_last_import: Number of hours since last AWR snapshots import happened from the Source database.
        :param float max_snapshot_identifier: The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param float min_snapshot_identifier: The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        :param str name: Name for an Awr source database
        :param float snapshots_uploaded: Number of AWR snapshots uploaded from the Source database.
        :param str time_first_snapshot_generated: The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        :param str time_last_snapshot_generated: The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "awr_hub_id", awr_hub_id)
        pulumi.set(__self__, "awr_source_database_id", awr_source_database_id)
        pulumi.set(__self__, "hours_since_last_import", hours_since_last_import)
        pulumi.set(__self__, "max_snapshot_identifier", max_snapshot_identifier)
        pulumi.set(__self__, "min_snapshot_identifier", min_snapshot_identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "snapshots_uploaded", snapshots_uploaded)
        pulumi.set(__self__, "time_first_snapshot_generated", time_first_snapshot_generated)
        pulumi.set(__self__, "time_last_snapshot_generated", time_last_snapshot_generated)

    @property
    @pulumi.getter(name="awrHubId")
    def awr_hub_id(self) -> str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "awr_hub_id")

    @property
    @pulumi.getter(name="awrSourceDatabaseId")
    def awr_source_database_id(self) -> str:
        """
        DatabaseId of the Source database for which AWR Data will be uploaded to AWR Hub.
        """
        return pulumi.get(self, "awr_source_database_id")

    @property
    @pulumi.getter(name="hoursSinceLastImport")
    def hours_since_last_import(self) -> float:
        """
        Number of hours since last AWR snapshots import happened from the Source database.
        """
        return pulumi.get(self, "hours_since_last_import")

    @property
    @pulumi.getter(name="maxSnapshotIdentifier")
    def max_snapshot_identifier(self) -> float:
        """
        The maximum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "max_snapshot_identifier")

    @property
    @pulumi.getter(name="minSnapshotIdentifier")
    def min_snapshot_identifier(self) -> float:
        """
        The minimum snapshot identifier of the source database for which AWR data is uploaded to AWR Hub.
        """
        return pulumi.get(self, "min_snapshot_identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name for an Awr source database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="snapshotsUploaded")
    def snapshots_uploaded(self) -> float:
        """
        Number of AWR snapshots uploaded from the Source database.
        """
        return pulumi.get(self, "snapshots_uploaded")

    @property
    @pulumi.getter(name="timeFirstSnapshotGenerated")
    def time_first_snapshot_generated(self) -> str:
        """
        The time at which the earliest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_first_snapshot_generated")

    @property
    @pulumi.getter(name="timeLastSnapshotGenerated")
    def time_last_snapshot_generated(self) -> str:
        """
        The time at which the latest snapshot was generated in the source database for which data is uploaded to AWR Hub. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_snapshot_generated")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAwrHubsAwrHubSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAwrHubsAwrHubSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 awr_mailbox_url: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 object_storage_bucket_name: str,
                 operations_insights_warehouse_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str awr_mailbox_url: Mailbox URL required for AWR hub and AWR source setup.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Awr Hub identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str object_storage_bucket_name: Object Storage Bucket Name
        :param str operations_insights_warehouse_id: Unique Operations Insights Warehouse identifier
        :param str state: Lifecycle states
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "awr_mailbox_url", awr_mailbox_url)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="awrMailboxUrl")
    def awr_mailbox_url(self) -> str:
        """
        Mailbox URL required for AWR hub and AWR source setup.
        """
        return pulumi.get(self, "awr_mailbox_url")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Awr Hub identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> str:
        """
        Object Storage Bucket Name
        """
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAwrHubsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseInsightConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: str,
                 hosts: Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult'],
                 port: int,
                 protocol: str,
                 service_name: str):
        """
        :param str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['GetDatabaseInsightConnectionDetailHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param int port: Listener port number used for connection requests.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDatabaseInsightConnectionDetailHostResult']:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: str,
                 port: int):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests.
        """
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult'],
                 connection_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult'],
                 credential_details: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult'],
                 database_connection_status_details: str,
                 database_display_name: str,
                 database_id: str,
                 database_name: str,
                 database_resource_type: str,
                 database_type: str,
                 database_version: str,
                 defined_tags: Mapping[str, Any],
                 deployment_type: str,
                 enterprise_manager_bridge_id: str,
                 enterprise_manager_entity_display_name: str,
                 enterprise_manager_entity_identifier: str,
                 enterprise_manager_entity_name: str,
                 enterprise_manager_entity_type: str,
                 enterprise_manager_identifier: str,
                 entity_source: str,
                 exadata_insight_id: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 opsi_private_endpoint_id: str,
                 processor_count: int,
                 service_name: str,
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailArgs'] connection_credential_details: User credential details to connect to the database. This is supplied via the External Database Service.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailArgs'] connection_details: Connection details to connect to the database. HostName, protocol, and port should be specified.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailArgs'] credential_details: User credential details to connect to the database. This is supplied via the External Database Service.
        :param str database_connection_status_details: A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
        :param str database_display_name: Display name of database
        :param str database_id: Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
        :param str database_name: Name of database
        :param str database_resource_type: Oracle Cloud Infrastructure database resource type
        :param str database_type: Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
        :param str database_version: The version of the database.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param str enterprise_manager_identifier: Enterprise Manager Unqiue Identifier
        :param str entity_source: Source of the database entity.
        :param str exadata_insight_id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str opsi_private_endpoint_id: Unique Operations Insights PrivateEndpoint identifier
        :param int processor_count: Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        :param str service_name: Database service name used for connection requests.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the database insight was first enabled. An RFC3339 formatted datetime string
        :param str time_updated: The time the database insight was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_credential_details", connection_credential_details)
        pulumi.set(__self__, "connection_details", connection_details)
        pulumi.set(__self__, "credential_details", credential_details)
        pulumi.set(__self__, "database_connection_status_details", database_connection_status_details)
        pulumi.set(__self__, "database_display_name", database_display_name)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_resource_type", database_resource_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "exadata_insight_id", exadata_insight_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "opsi_private_endpoint_id", opsi_private_endpoint_id)
        pulumi.set(__self__, "processor_count", processor_count)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionCredentialDetails")
    def connection_credential_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult']:
        """
        User credential details to connect to the database. This is supplied via the External Database Service.
        """
        return pulumi.get(self, "connection_credential_details")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult']:
        """
        Connection details to connect to the database. HostName, protocol, and port should be specified.
        """
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="credentialDetails")
    def credential_details(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult']:
        """
        User credential details to connect to the database. This is supplied via the External Database Service.
        """
        return pulumi.get(self, "credential_details")

    @property
    @pulumi.getter(name="databaseConnectionStatusDetails")
    def database_connection_status_details(self) -> str:
        """
        A message describing the status of the database connection of this resource. For example, it can be used to provide actionable information about the permission and content validity of the database connection.
        """
        return pulumi.get(self, "database_connection_status_details")

    @property
    @pulumi.getter(name="databaseDisplayName")
    def database_display_name(self) -> str:
        """
        Display name of database
        """
        return pulumi.get(self, "database_display_name")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        Optional list of database [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated DBaaS entity.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Name of database
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseResourceType")
    def database_resource_type(self) -> str:
        """
        Oracle Cloud Infrastructure database resource type
        """
        return pulumi.get(self, "database_resource_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        Filter by one or more database type. Possible values are ADW-S, ATP-S, ADW-D, ATP-D, EXTERNAL-PDB, EXTERNAL-NONCDB.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        The version of the database.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> str:
        """
        Enterprise Manager Unqiue Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the database entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        """
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Optional list of database insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="opsiPrivateEndpointId")
    def opsi_private_endpoint_id(self) -> str:
        """
        Unique Operations Insights PrivateEndpoint identifier
        """
        return pulumi.get(self, "opsi_private_endpoint_id")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> int:
        """
        Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        """
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the database insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the database insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailResult(dict):
    def __init__(__self__, *,
                 host_name: str,
                 hosts: Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult'],
                 port: int,
                 protocol: str,
                 service_name: str):
        """
        :param str host_name: Name of the listener host that will be used to create the connect string to the database.
        :param Sequence['GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostArgs'] hosts: List of hosts and port for private endpoint accessed database resource.
        :param int port: Listener port number used for connection requests.
        :param str protocol: Protocol used for connection requests for private endpoint accssed database resource.
        :param str service_name: Database service name used for connection requests.
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        Name of the listener host that will be used to create the connect string to the database.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult']:
        """
        List of hosts and port for private endpoint accessed database resource.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol used for connection requests for private endpoint accssed database resource.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Database service name used for connection requests.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHostResult(dict):
    def __init__(__self__, *,
                 host_ip: str,
                 port: int):
        """
        :param str host_ip: Host IP used for connection requests for Cloud DB resource.
        :param int port: Listener port number used for connection requests.
        """
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        """
        Host IP used for connection requests for Cloud DB resource.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Listener port number used for connection requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetailResult(dict):
    def __init__(__self__, *,
                 credential_source_name: str,
                 credential_type: str,
                 password_secret_id: str,
                 role: str,
                 user_name: str):
        """
        :param str credential_source_name: Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        :param str credential_type: Credential type.
        :param str password_secret_id: The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        :param str role: database user role.
        :param str user_name: database user name.
        """
        pulumi.set(__self__, "credential_source_name", credential_source_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "password_secret_id", password_secret_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialSourceName")
    def credential_source_name(self) -> str:
        """
        Credential source name that had been added in Management Agent wallet. This is supplied in the External Database Service.
        """
        return pulumi.get(self, "credential_source_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        Credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> str:
        """
        The secret [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) mapping to the database credentials.
        """
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        database user role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 object_storage_bucket_name: str,
                 object_storage_bucket_status_details: str,
                 object_storage_namespace_name: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Description of Enterprise Manager Bridge
        :param str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Enterprise Manager bridge identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str object_storage_bucket_name: Object Storage Bucket Name
        :param str object_storage_bucket_status_details: A message describing status of the object storage bucket of this resource. For example, it can be used to provide actionable information about the permission and content validity of the bucket.
        :param str object_storage_namespace_name: Object Storage Namespace Name
        :param str state: Lifecycle states
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the Enterprise Manager bridge was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time the Enterprise Manager bridge was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        pulumi.set(__self__, "object_storage_bucket_status_details", object_storage_bucket_status_details)
        pulumi.set(__self__, "object_storage_namespace_name", object_storage_namespace_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of Enterprise Manager Bridge
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> str:
        """
        Object Storage Bucket Name
        """
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageBucketStatusDetails")
    def object_storage_bucket_status_details(self) -> str:
        """
        A message describing status of the object storage bucket of this resource. For example, it can be used to provide actionable information about the permission and content validity of the bucket.
        """
        return pulumi.get(self, "object_storage_bucket_status_details")

    @property
    @pulumi.getter(name="objectStorageNamespaceName")
    def object_storage_namespace_name(self) -> str:
        """
        Object Storage Namespace Name
        """
        return pulumi.get(self, "object_storage_namespace_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the Enterprise Manager bridge was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Enterprise Manager bridge was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnterpriseManagerBridgesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetExadataInsightsExadataInsightSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExadataInsightsExadataInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 enterprise_manager_bridge_id: str,
                 enterprise_manager_entity_display_name: str,
                 enterprise_manager_entity_identifier: str,
                 enterprise_manager_entity_name: str,
                 enterprise_manager_entity_type: str,
                 enterprise_manager_identifier: str,
                 entity_source: str,
                 exadata_display_name: str,
                 exadata_name: str,
                 exadata_rack_type: str,
                 exadata_type: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_auto_sync_enabled: bool,
                 is_virtualized_exadata: bool,
                 lifecycle_details: str,
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param str enterprise_manager_identifier: Enterprise Manager Unique Identifier
        :param str entity_source: Source of the Exadata system.
        :param str exadata_display_name: The user-friendly name for the Exadata system. The name does not have to be unique.
        :param str exadata_name: The Exadata system name. If the Exadata systems managed by Enterprise Manager, the name is unique amongst the Exadata systems managed by the same Enterprise Manager.
        :param str exadata_rack_type: Exadata rack type.
        :param str exadata_type: Filter by one or more Exadata types. Possible value are DBMACHINE, EXACS, and EXACC.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Optional list of Exadata insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param bool is_virtualized_exadata: true if virtualization is used in the Exadata system
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the Exadata insight was first enabled. An RFC3339 formatted datetime string
        :param str time_updated: The time the Exadata insight was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "exadata_display_name", exadata_display_name)
        pulumi.set(__self__, "exadata_name", exadata_name)
        pulumi.set(__self__, "exadata_rack_type", exadata_rack_type)
        pulumi.set(__self__, "exadata_type", exadata_type)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_auto_sync_enabled", is_auto_sync_enabled)
        pulumi.set(__self__, "is_virtualized_exadata", is_virtualized_exadata)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> str:
        """
        Enterprise Manager Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the Exadata system.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataDisplayName")
    def exadata_display_name(self) -> str:
        """
        The user-friendly name for the Exadata system. The name does not have to be unique.
        """
        return pulumi.get(self, "exadata_display_name")

    @property
    @pulumi.getter(name="exadataName")
    def exadata_name(self) -> str:
        """
        The Exadata system name. If the Exadata systems managed by Enterprise Manager, the name is unique amongst the Exadata systems managed by the same Enterprise Manager.
        """
        return pulumi.get(self, "exadata_name")

    @property
    @pulumi.getter(name="exadataRackType")
    def exadata_rack_type(self) -> str:
        """
        Exadata rack type.
        """
        return pulumi.get(self, "exadata_rack_type")

    @property
    @pulumi.getter(name="exadataType")
    def exadata_type(self) -> str:
        """
        Filter by one or more Exadata types. Possible value are DBMACHINE, EXACS, and EXACC.
        """
        return pulumi.get(self, "exadata_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Optional list of Exadata insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoSyncEnabled")
    def is_auto_sync_enabled(self) -> bool:
        return pulumi.get(self, "is_auto_sync_enabled")

    @property
    @pulumi.getter(name="isVirtualizedExadata")
    def is_virtualized_exadata(self) -> bool:
        """
        true if virtualization is used in the Exadata system
        """
        return pulumi.get(self, "is_virtualized_exadata")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the Exadata insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Exadata insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExadataInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetHostInsightsHostInsightSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostInsightsHostInsightSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 enterprise_manager_bridge_id: str,
                 enterprise_manager_entity_display_name: str,
                 enterprise_manager_entity_identifier: str,
                 enterprise_manager_entity_name: str,
                 enterprise_manager_entity_type: str,
                 enterprise_manager_identifier: str,
                 entity_source: str,
                 exadata_insight_id: str,
                 freeform_tags: Mapping[str, Any],
                 host_display_name: str,
                 host_name: str,
                 host_type: str,
                 id: str,
                 lifecycle_details: str,
                 management_agent_id: str,
                 platform_name: str,
                 platform_type: str,
                 platform_version: str,
                 processor_count: int,
                 state: str,
                 status: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str enterprise_manager_bridge_id: Unique Enterprise Manager bridge identifier
        :param str enterprise_manager_entity_display_name: Enterprise Manager Entity Display Name
        :param str enterprise_manager_entity_identifier: Enterprise Manager Entity Unique Identifier
        :param str enterprise_manager_entity_name: Enterprise Manager Entity Name
        :param str enterprise_manager_entity_type: Enterprise Manager Entity Type
        :param str enterprise_manager_identifier: Enterprise Manager Unique Identifier
        :param str entity_source: Source of the host entity.
        :param str exadata_insight_id: [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str host_display_name: The user-friendly name for the host. The name does not have to be unique.
        :param str host_name: The host name. The host name is unique amongst the hosts managed by the same management agent.
        :param str host_type: Filter by one or more host types. Possible value is EXTERNAL-HOST.
        :param str id: Optional list of host insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str management_agent_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        :param str platform_name: Platform name.
        :param str platform_type: Filter by one or more platform types. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        :param str platform_version: Platform version.
        :param int processor_count: Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        :param str state: Lifecycle states
        :param str status: Resource Status
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the the host insight was first enabled. An RFC3339 formatted datetime string
        :param str time_updated: The time the host insight was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "enterprise_manager_bridge_id", enterprise_manager_bridge_id)
        pulumi.set(__self__, "enterprise_manager_entity_display_name", enterprise_manager_entity_display_name)
        pulumi.set(__self__, "enterprise_manager_entity_identifier", enterprise_manager_entity_identifier)
        pulumi.set(__self__, "enterprise_manager_entity_name", enterprise_manager_entity_name)
        pulumi.set(__self__, "enterprise_manager_entity_type", enterprise_manager_entity_type)
        pulumi.set(__self__, "enterprise_manager_identifier", enterprise_manager_identifier)
        pulumi.set(__self__, "entity_source", entity_source)
        pulumi.set(__self__, "exadata_insight_id", exadata_insight_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host_display_name", host_display_name)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_type", host_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "management_agent_id", management_agent_id)
        pulumi.set(__self__, "platform_name", platform_name)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "platform_version", platform_version)
        pulumi.set(__self__, "processor_count", processor_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="enterpriseManagerBridgeId")
    def enterprise_manager_bridge_id(self) -> str:
        """
        Unique Enterprise Manager bridge identifier
        """
        return pulumi.get(self, "enterprise_manager_bridge_id")

    @property
    @pulumi.getter(name="enterpriseManagerEntityDisplayName")
    def enterprise_manager_entity_display_name(self) -> str:
        """
        Enterprise Manager Entity Display Name
        """
        return pulumi.get(self, "enterprise_manager_entity_display_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityIdentifier")
    def enterprise_manager_entity_identifier(self) -> str:
        """
        Enterprise Manager Entity Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_entity_identifier")

    @property
    @pulumi.getter(name="enterpriseManagerEntityName")
    def enterprise_manager_entity_name(self) -> str:
        """
        Enterprise Manager Entity Name
        """
        return pulumi.get(self, "enterprise_manager_entity_name")

    @property
    @pulumi.getter(name="enterpriseManagerEntityType")
    def enterprise_manager_entity_type(self) -> str:
        """
        Enterprise Manager Entity Type
        """
        return pulumi.get(self, "enterprise_manager_entity_type")

    @property
    @pulumi.getter(name="enterpriseManagerIdentifier")
    def enterprise_manager_identifier(self) -> str:
        """
        Enterprise Manager Unique Identifier
        """
        return pulumi.get(self, "enterprise_manager_identifier")

    @property
    @pulumi.getter(name="entitySource")
    def entity_source(self) -> str:
        """
        Source of the host entity.
        """
        return pulumi.get(self, "entity_source")

    @property
    @pulumi.getter(name="exadataInsightId")
    def exadata_insight_id(self) -> str:
        """
        [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of exadata insight resource.
        """
        return pulumi.get(self, "exadata_insight_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostDisplayName")
    def host_display_name(self) -> str:
        """
        The user-friendly name for the host. The name does not have to be unique.
        """
        return pulumi.get(self, "host_display_name")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name. The host name is unique amongst the hosts managed by the same management agent.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        """
        Filter by one or more host types. Possible value is EXTERNAL-HOST.
        """
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Optional list of host insight resource [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> str:
        """
        Platform name.
        """
        return pulumi.get(self, "platform_name")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        """
        Filter by one or more platform types. Supported platformType(s) for MACS-managed external host insight: [LINUX]. Supported platformType(s) for EM-managed external host insight: [LINUX, SOLARIS, SUNOS, ZLINUX].
        """
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> str:
        """
        Platform version.
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> int:
        """
        Processor count. This is the OCPU count for Autonomous Database and CPU core count for other database types.
        """
        return pulumi.get(self, "processor_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the host insight was first enabled. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the host insight was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_used_for_rac_dbs: bool,
                 lifecycle_details: str,
                 nsg_ids: Sequence[str],
                 private_endpoint_status_details: str,
                 private_ip: str,
                 state: str,
                 subnet_id: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 vcn_id: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: The description of the private endpoint.
        :param str display_name: A filter to return only resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The OCID of the Private service accessed database.
        :param bool is_used_for_rac_dbs: The option to filter OPSI private endpoints that can used for RAC. Should be used along with vcnId query parameter.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence[str] nsg_ids: The OCIDs of the network security groups that the private endpoint belongs to.
        :param str private_endpoint_status_details: A message describing the status of the private endpoint connection of this resource. For example, it can be used to provide actionable information about the validity of the private endpoint connection.
        :param str private_ip: The private IP addresses assigned to the private endpoint. All IP addresses will be concatenated if it is RAC DBs.
        :param str state: Lifecycle states
        :param str subnet_id: The OCID of the subnet.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str vcn_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_used_for_rac_dbs", is_used_for_rac_dbs)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "private_endpoint_status_details", private_endpoint_status_details)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the private endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the Private service accessed database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUsedForRacDbs")
    def is_used_for_rac_dbs(self) -> bool:
        """
        The option to filter OPSI private endpoints that can used for RAC. Should be used along with vcnId query parameter.
        """
        return pulumi.get(self, "is_used_for_rac_dbs")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        """
        The OCIDs of the network security groups that the private endpoint belongs to.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointStatusDetails")
    def private_endpoint_status_details(self) -> str:
        """
        A message describing the status of the private endpoint connection of this resource. For example, it can be used to provide actionable information about the validity of the private endpoint connection.
        """
        return pulumi.get(self, "private_endpoint_status_details")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP addresses assigned to the private endpoint. All IP addresses will be concatenated if it is RAC DBs.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 connection_password: str,
                 defined_tags: Mapping[str, Any],
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_awr_data_access: bool,
                 is_em_data_access: bool,
                 is_opsi_data_access: bool,
                 lifecycle_details: str,
                 name: str,
                 operations_insights_warehouse_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str connection_password: User provided connection password for the AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Operations Insights Warehouse User identifier
        :param bool is_awr_data_access: Indicate whether user has access to AWR data.
        :param bool is_em_data_access: Indicate whether user has access to EM data.
        :param bool is_opsi_data_access: Indicate whether user has access to OPSI data.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str name: Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        :param str operations_insights_warehouse_id: Unique Operations Insights Warehouse identifier
        :param str state: Lifecycle states
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_password", connection_password)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_awr_data_access", is_awr_data_access)
        pulumi.set(__self__, "is_em_data_access", is_em_data_access)
        pulumi.set(__self__, "is_opsi_data_access", is_opsi_data_access)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionPassword")
    def connection_password(self) -> str:
        """
        User provided connection password for the AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        return pulumi.get(self, "connection_password")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Operations Insights Warehouse User identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAwrDataAccess")
    def is_awr_data_access(self) -> bool:
        """
        Indicate whether user has access to AWR data.
        """
        return pulumi.get(self, "is_awr_data_access")

    @property
    @pulumi.getter(name="isEmDataAccess")
    def is_em_data_access(self) -> bool:
        """
        Indicate whether user has access to EM data.
        """
        return pulumi.get(self, "is_em_data_access")

    @property
    @pulumi.getter(name="isOpsiDataAccess")
    def is_opsi_data_access(self) -> bool:
        """
        Indicate whether user has access to OPSI data.
        """
        return pulumi.get(self, "is_opsi_data_access")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Username for schema which would have access to AWR Data,  Enterprise Manager Data and Operations Insights OPSI Hub.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOperationsInsightsWarehousesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 cpu_allocated: float,
                 cpu_used: float,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 dynamic_group_id: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 operations_insights_tenancy_id: str,
                 state: str,
                 storage_allocated_in_gbs: float,
                 storage_used_in_gbs: float,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_last_wallet_rotated: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param float cpu_allocated: Number of OCPUs allocated to OPSI Warehouse ADW.
        :param float cpu_used: Number of OCPUs used by OPSI Warehouse ADW. Can be fractional.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name.
        :param str dynamic_group_id: OCID of the dynamic group created for the warehouse
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique Operations Insights Warehouse identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str operations_insights_tenancy_id: Tenancy Identifier of Operations Insights service
        :param str state: Lifecycle states
        :param float storage_allocated_in_gbs: Storage allocated to OPSI Warehouse ADW.
        :param float storage_used_in_gbs: Storage by OPSI Warehouse ADW in GB.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time at which the resource was first created. An RFC3339 formatted datetime string
        :param str time_last_wallet_rotated: The time at which the ADW wallet was last rotated for the Operations Insights Warehouse. An RFC3339 formatted datetime string
        :param str time_updated: The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpu_allocated", cpu_allocated)
        pulumi.set(__self__, "cpu_used", cpu_used)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "dynamic_group_id", dynamic_group_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "operations_insights_tenancy_id", operations_insights_tenancy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_allocated_in_gbs", storage_allocated_in_gbs)
        pulumi.set(__self__, "storage_used_in_gbs", storage_used_in_gbs)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_wallet_rotated", time_last_wallet_rotated)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuAllocated")
    def cpu_allocated(self) -> float:
        """
        Number of OCPUs allocated to OPSI Warehouse ADW.
        """
        return pulumi.get(self, "cpu_allocated")

    @property
    @pulumi.getter(name="cpuUsed")
    def cpu_used(self) -> float:
        """
        Number of OCPUs used by OPSI Warehouse ADW. Can be fractional.
        """
        return pulumi.get(self, "cpu_used")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dynamicGroupId")
    def dynamic_group_id(self) -> str:
        """
        OCID of the dynamic group created for the warehouse
        """
        return pulumi.get(self, "dynamic_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique Operations Insights Warehouse identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="operationsInsightsTenancyId")
    def operations_insights_tenancy_id(self) -> str:
        """
        Tenancy Identifier of Operations Insights service
        """
        return pulumi.get(self, "operations_insights_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle states
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageAllocatedInGbs")
    def storage_allocated_in_gbs(self) -> float:
        """
        Storage allocated to OPSI Warehouse ADW.
        """
        return pulumi.get(self, "storage_allocated_in_gbs")

    @property
    @pulumi.getter(name="storageUsedInGbs")
    def storage_used_in_gbs(self) -> float:
        """
        Storage by OPSI Warehouse ADW in GB.
        """
        return pulumi.get(self, "storage_used_in_gbs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time at which the resource was first created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastWalletRotated")
    def time_last_wallet_rotated(self) -> str:
        """
        The time at which the ADW wallet was last rotated for the Operations Insights Warehouse. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_last_wallet_rotated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time at which the resource was last updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


