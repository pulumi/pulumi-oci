# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProfileLevelsConfiguration',
    'ProfileLevelsConfigurationItem',
    'ProfileTargetCompartments',
    'ProfileTargetTags',
    'ProfileTargetTagsItem',
    'RecommendationResourceCount',
    'RecommendationSupportedLevel',
    'RecommendationSupportedLevelItem',
    'ResourceActionAction',
    'GetCategoriesCategoryCollectionResult',
    'GetCategoriesCategoryCollectionItemResult',
    'GetCategoriesCategoryCollectionItemRecommendationCountResult',
    'GetCategoriesCategoryCollectionItemResourceCountResult',
    'GetCategoriesFilterResult',
    'GetCategoryRecommendationCountResult',
    'GetCategoryResourceCountResult',
    'GetEnrollmentStatusesEnrollmentStatusCollectionResult',
    'GetEnrollmentStatusesEnrollmentStatusCollectionItemResult',
    'GetEnrollmentStatusesFilterResult',
    'GetHistoriesFilterResult',
    'GetHistoriesHistoryCollectionResult',
    'GetHistoriesHistoryCollectionItemResult',
    'GetHistoriesHistoryCollectionItemActionResult',
    'GetProfileLevelItemResult',
    'GetProfileLevelItemMetricResult',
    'GetProfileLevelsConfigurationResult',
    'GetProfileLevelsConfigurationItemResult',
    'GetProfileLevelsFilterResult',
    'GetProfileLevelsProfileLevelCollectionResult',
    'GetProfileLevelsProfileLevelCollectionItemResult',
    'GetProfileLevelsProfileLevelCollectionItemMetricResult',
    'GetProfileTargetCompartmentResult',
    'GetProfileTargetTagResult',
    'GetProfileTargetTagItemResult',
    'GetProfilesFilterResult',
    'GetProfilesProfileCollectionResult',
    'GetProfilesProfileCollectionItemResult',
    'GetProfilesProfileCollectionItemLevelsConfigurationResult',
    'GetProfilesProfileCollectionItemLevelsConfigurationItemResult',
    'GetProfilesProfileCollectionItemTargetCompartmentResult',
    'GetProfilesProfileCollectionItemTargetTagResult',
    'GetProfilesProfileCollectionItemTargetTagItemResult',
    'GetRecommendationResourceCountResult',
    'GetRecommendationStrategiesFilterResult',
    'GetRecommendationStrategiesRecommendationStrategyCollectionResult',
    'GetRecommendationStrategiesRecommendationStrategyCollectionItemResult',
    'GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyResult',
    'GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinitionResult',
    'GetRecommendationStrategyItemResult',
    'GetRecommendationStrategyItemStrategyResult',
    'GetRecommendationStrategyItemStrategyParametersDefinitionResult',
    'GetRecommendationSupportedLevelResult',
    'GetRecommendationSupportedLevelItemResult',
    'GetRecommendationsFilterResult',
    'GetRecommendationsRecommendationCollectionResult',
    'GetRecommendationsRecommendationCollectionItemResult',
    'GetRecommendationsRecommendationCollectionItemResourceCountResult',
    'GetRecommendationsRecommendationCollectionItemSupportedLevelResult',
    'GetRecommendationsRecommendationCollectionItemSupportedLevelItemResult',
    'GetResourceActionActionResult',
    'GetResourceActionsFilterResult',
    'GetResourceActionsResourceActionCollectionResult',
    'GetResourceActionsResourceActionCollectionItemResult',
    'GetResourceActionsResourceActionCollectionItemActionResult',
]

@pulumi.output_type
class ProfileLevelsConfiguration(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ProfileLevelsConfigurationItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ProfileLevelsConfigurationItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ProfileLevelsConfigurationItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recommendationId":
            suggest = "recommendation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileLevelsConfigurationItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileLevelsConfigurationItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileLevelsConfigurationItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 recommendation_id: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_id")


@pulumi.output_type
class ProfileTargetCompartments(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ProfileTargetTags(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.ProfileTargetTagsItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.ProfileTargetTagsItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class ProfileTargetTagsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagDefinitionName":
            suggest = "tag_definition_name"
        elif key == "tagNamespaceName":
            suggest = "tag_namespace_name"
        elif key == "tagValueType":
            suggest = "tag_value_type"
        elif key == "tagValues":
            suggest = "tag_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileTargetTagsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileTargetTagsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileTargetTagsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_definition_name: str,
                 tag_namespace_name: str,
                 tag_value_type: str,
                 tag_values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        pulumi.set(__self__, "tag_value_type", tag_value_type)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> str:
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> str:
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="tagValueType")
    def tag_value_type(self) -> str:
        return pulumi.get(self, "tag_value_type")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class RecommendationResourceCount(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RecommendationSupportedLevel(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.RecommendationSupportedLevelItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.RecommendationSupportedLevelItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class RecommendationSupportedLevelItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ResourceActionAction(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCategoriesCategoryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCategoriesCategoryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCategoriesCategoryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCategoriesCategoryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 compartment_name: Optional[str] = None,
                 description: Optional[str] = None,
                 estimated_cost_saving: Optional[float] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 recommendation_counts: Optional[Sequence['outputs.GetCategoriesCategoryCollectionItemRecommendationCountResult']] = None,
                 resource_counts: Optional[Sequence['outputs.GetCategoriesCategoryCollectionItemResourceCountResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_name is not None:
            pulumi.set(__self__, "compartment_name", compartment_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if estimated_cost_saving is not None:
            pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_counts is not None:
            pulumi.set(__self__, "recommendation_counts", recommendation_counts)
        if resource_counts is not None:
            pulumi.set(__self__, "resource_counts", resource_counts)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> Optional[float]:
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationCounts")
    def recommendation_counts(self) -> Optional[Sequence['outputs.GetCategoriesCategoryCollectionItemRecommendationCountResult']]:
        return pulumi.get(self, "recommendation_counts")

    @property
    @pulumi.getter(name="resourceCounts")
    def resource_counts(self) -> Optional[Sequence['outputs.GetCategoriesCategoryCollectionItemResourceCountResult']]:
        return pulumi.get(self, "resource_counts")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetCategoriesCategoryCollectionItemRecommendationCountResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 importance: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if importance is not None:
            pulumi.set(__self__, "importance", importance)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def importance(self) -> Optional[str]:
        return pulumi.get(self, "importance")


@pulumi.output_type
class GetCategoriesCategoryCollectionItemResourceCountResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetCategoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCategoryRecommendationCountResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 importance: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if importance is not None:
            pulumi.set(__self__, "importance", importance)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def importance(self) -> Optional[str]:
        return pulumi.get(self, "importance")


@pulumi.output_type
class GetCategoryResourceCountResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEnrollmentStatusesEnrollmentStatusCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEnrollmentStatusesEnrollmentStatusCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEnrollmentStatusesEnrollmentStatusCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnrollmentStatusesEnrollmentStatusCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 enrollment_status_id: Optional[str] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 status_reason: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if enrollment_status_id is not None:
            pulumi.set(__self__, "enrollment_status_id", enrollment_status_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reason is not None:
            pulumi.set(__self__, "status_reason", status_reason)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="enrollmentStatusId")
    def enrollment_status_id(self) -> Optional[str]:
        return pulumi.get(self, "enrollment_status_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> Optional[str]:
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnrollmentStatusesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHistoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHistoriesHistoryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetHistoriesHistoryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetHistoriesHistoryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHistoriesHistoryCollectionItemResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetHistoriesHistoryCollectionItemActionResult']] = None,
                 category_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compartment_name: Optional[str] = None,
                 estimated_cost_saving: Optional[float] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 name: Optional[str] = None,
                 recommendation_id: Optional[str] = None,
                 recommendation_name: Optional[str] = None,
                 resource_action_id: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_name is not None:
            pulumi.set(__self__, "compartment_name", compartment_name)
        if estimated_cost_saving is not None:
            pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)
        if recommendation_name is not None:
            pulumi.set(__self__, "recommendation_name", recommendation_name)
        if resource_action_id is not None:
            pulumi.set(__self__, "resource_action_id", resource_action_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetHistoriesHistoryCollectionItemActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[str]:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> Optional[float]:
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_id")

    @property
    @pulumi.getter(name="recommendationName")
    def recommendation_name(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_name")

    @property
    @pulumi.getter(name="resourceActionId")
    def resource_action_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_action_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetHistoriesHistoryCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetProfileLevelItemResult(dict):
    def __init__(__self__, *,
                 default_interval: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetProfileLevelItemMetricResult']] = None,
                 name: Optional[str] = None,
                 recommendation_name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 valid_intervals: Optional[Sequence[int]] = None):
        if default_interval is not None:
            pulumi.set(__self__, "default_interval", default_interval)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_name is not None:
            pulumi.set(__self__, "recommendation_name", recommendation_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if valid_intervals is not None:
            pulumi.set(__self__, "valid_intervals", valid_intervals)

    @property
    @pulumi.getter(name="defaultInterval")
    def default_interval(self) -> Optional[int]:
        return pulumi.get(self, "default_interval")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetProfileLevelItemMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationName")
    def recommendation_name(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="validIntervals")
    def valid_intervals(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "valid_intervals")


@pulumi.output_type
class GetProfileLevelItemMetricResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 statistic: Optional[str] = None,
                 target: Optional[float] = None,
                 threshold: Optional[float] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if statistic is not None:
            pulumi.set(__self__, "statistic", statistic)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def statistic(self) -> Optional[str]:
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter
    def target(self) -> Optional[float]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetProfileLevelsConfigurationResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfileLevelsConfigurationItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfileLevelsConfigurationItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileLevelsConfigurationItemResult(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 recommendation_id: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_id")


@pulumi.output_type
class GetProfileLevelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProfileLevelsProfileLevelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfileLevelsProfileLevelCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfileLevelsProfileLevelCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileLevelsProfileLevelCollectionItemResult(dict):
    def __init__(__self__, *,
                 default_interval: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetProfileLevelsProfileLevelCollectionItemMetricResult']] = None,
                 name: Optional[str] = None,
                 recommendation_name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 valid_intervals: Optional[Sequence[int]] = None):
        if default_interval is not None:
            pulumi.set(__self__, "default_interval", default_interval)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_name is not None:
            pulumi.set(__self__, "recommendation_name", recommendation_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if valid_intervals is not None:
            pulumi.set(__self__, "valid_intervals", valid_intervals)

    @property
    @pulumi.getter(name="defaultInterval")
    def default_interval(self) -> Optional[int]:
        return pulumi.get(self, "default_interval")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetProfileLevelsProfileLevelCollectionItemMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationName")
    def recommendation_name(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="validIntervals")
    def valid_intervals(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "valid_intervals")


@pulumi.output_type
class GetProfileLevelsProfileLevelCollectionItemMetricResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 statistic: Optional[str] = None,
                 target: Optional[float] = None,
                 threshold: Optional[float] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if statistic is not None:
            pulumi.set(__self__, "statistic", statistic)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def statistic(self) -> Optional[str]:
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter
    def target(self) -> Optional[float]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetProfileTargetCompartmentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileTargetTagResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfileTargetTagItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfileTargetTagItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfileTargetTagItemResult(dict):
    def __init__(__self__, *,
                 tag_definition_name: Optional[str] = None,
                 tag_namespace_name: Optional[str] = None,
                 tag_value_type: Optional[str] = None,
                 tag_values: Optional[Sequence[str]] = None):
        if tag_definition_name is not None:
            pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        if tag_namespace_name is not None:
            pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        if tag_value_type is not None:
            pulumi.set(__self__, "tag_value_type", tag_value_type)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="tagValueType")
    def tag_value_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_value_type")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class GetProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProfilesProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfilesProfileCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 aggregation_interval_in_days: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 levels_configurations: Optional[Sequence['outputs.GetProfilesProfileCollectionItemLevelsConfigurationResult']] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 target_compartments: Optional[Sequence['outputs.GetProfilesProfileCollectionItemTargetCompartmentResult']] = None,
                 target_tags: Optional[Sequence['outputs.GetProfilesProfileCollectionItemTargetTagResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if aggregation_interval_in_days is not None:
            pulumi.set(__self__, "aggregation_interval_in_days", aggregation_interval_in_days)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if levels_configurations is not None:
            pulumi.set(__self__, "levels_configurations", levels_configurations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_compartments is not None:
            pulumi.set(__self__, "target_compartments", target_compartments)
        if target_tags is not None:
            pulumi.set(__self__, "target_tags", target_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="aggregationIntervalInDays")
    def aggregation_interval_in_days(self) -> Optional[int]:
        return pulumi.get(self, "aggregation_interval_in_days")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="levelsConfigurations")
    def levels_configurations(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemLevelsConfigurationResult']]:
        return pulumi.get(self, "levels_configurations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetCompartments")
    def target_compartments(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemTargetCompartmentResult']]:
        return pulumi.get(self, "target_compartments")

    @property
    @pulumi.getter(name="targetTags")
    def target_tags(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemTargetTagResult']]:
        return pulumi.get(self, "target_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProfilesProfileCollectionItemLevelsConfigurationResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfilesProfileCollectionItemLevelsConfigurationItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemLevelsConfigurationItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemLevelsConfigurationItemResult(dict):
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 recommendation_id: Optional[str] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_id")


@pulumi.output_type
class GetProfilesProfileCollectionItemTargetCompartmentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemTargetTagResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfilesProfileCollectionItemTargetTagItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemTargetTagItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemTargetTagItemResult(dict):
    def __init__(__self__, *,
                 tag_definition_name: Optional[str] = None,
                 tag_namespace_name: Optional[str] = None,
                 tag_value_type: Optional[str] = None,
                 tag_values: Optional[Sequence[str]] = None):
        if tag_definition_name is not None:
            pulumi.set(__self__, "tag_definition_name", tag_definition_name)
        if tag_namespace_name is not None:
            pulumi.set(__self__, "tag_namespace_name", tag_namespace_name)
        if tag_value_type is not None:
            pulumi.set(__self__, "tag_value_type", tag_value_type)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagDefinitionName")
    def tag_definition_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_definition_name")

    @property
    @pulumi.getter(name="tagNamespaceName")
    def tag_namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_namespace_name")

    @property
    @pulumi.getter(name="tagValueType")
    def tag_value_type(self) -> Optional[str]:
        return pulumi.get(self, "tag_value_type")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class GetRecommendationResourceCountResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRecommendationStrategiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecommendationStrategiesRecommendationStrategyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRecommendationStrategiesRecommendationStrategyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRecommendationStrategiesRecommendationStrategyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationStrategiesRecommendationStrategyCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 strategies: Optional[Sequence['outputs.GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyResult']] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if strategies is not None:
            pulumi.set(__self__, "strategies", strategies)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def strategies(self) -> Optional[Sequence['outputs.GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyResult']]:
        return pulumi.get(self, "strategies")


@pulumi.output_type
class GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyResult(dict):
    def __init__(__self__, *,
                 is_default: Optional[bool] = None,
                 parameters_definitions: Optional[Sequence['outputs.GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinitionResult']] = None,
                 strategy_name: Optional[str] = None):
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if parameters_definitions is not None:
            pulumi.set(__self__, "parameters_definitions", parameters_definitions)
        if strategy_name is not None:
            pulumi.set(__self__, "strategy_name", strategy_name)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="parametersDefinitions")
    def parameters_definitions(self) -> Optional[Sequence['outputs.GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinitionResult']]:
        return pulumi.get(self, "parameters_definitions")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> Optional[str]:
        return pulumi.get(self, "strategy_name")


@pulumi.output_type
class GetRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinitionResult(dict):
    def __init__(__self__, *,
                 default_values: Optional[Sequence[Any]] = None,
                 description: Optional[str] = None,
                 is_required: Optional[bool] = None,
                 name: Optional[str] = None,
                 possible_values: Optional[Sequence[Any]] = None,
                 type: Optional[str] = None):
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRecommendationStrategyItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 strategies: Optional[Sequence['outputs.GetRecommendationStrategyItemStrategyResult']] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if strategies is not None:
            pulumi.set(__self__, "strategies", strategies)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def strategies(self) -> Optional[Sequence['outputs.GetRecommendationStrategyItemStrategyResult']]:
        return pulumi.get(self, "strategies")


@pulumi.output_type
class GetRecommendationStrategyItemStrategyResult(dict):
    def __init__(__self__, *,
                 is_default: Optional[bool] = None,
                 parameters_definitions: Optional[Sequence['outputs.GetRecommendationStrategyItemStrategyParametersDefinitionResult']] = None,
                 strategy_name: Optional[str] = None):
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if parameters_definitions is not None:
            pulumi.set(__self__, "parameters_definitions", parameters_definitions)
        if strategy_name is not None:
            pulumi.set(__self__, "strategy_name", strategy_name)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="parametersDefinitions")
    def parameters_definitions(self) -> Optional[Sequence['outputs.GetRecommendationStrategyItemStrategyParametersDefinitionResult']]:
        return pulumi.get(self, "parameters_definitions")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> Optional[str]:
        return pulumi.get(self, "strategy_name")


@pulumi.output_type
class GetRecommendationStrategyItemStrategyParametersDefinitionResult(dict):
    def __init__(__self__, *,
                 default_values: Optional[Sequence[Any]] = None,
                 description: Optional[str] = None,
                 is_required: Optional[bool] = None,
                 name: Optional[str] = None,
                 possible_values: Optional[Sequence[Any]] = None,
                 type: Optional[str] = None):
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRecommendationSupportedLevelResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRecommendationSupportedLevelItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRecommendationSupportedLevelItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationSupportedLevelItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRecommendationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemResult(dict):
    def __init__(__self__, *,
                 category_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 estimated_cost_saving: Optional[float] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 importance: Optional[str] = None,
                 name: Optional[str] = None,
                 recommendation_id: Optional[str] = None,
                 resource_counts: Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemResourceCountResult']] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 supported_levels: Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelResult']] = None,
                 time_created: Optional[str] = None,
                 time_status_begin: Optional[str] = None,
                 time_status_end: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if estimated_cost_saving is not None:
            pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if importance is not None:
            pulumi.set(__self__, "importance", importance)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)
        if resource_counts is not None:
            pulumi.set(__self__, "resource_counts", resource_counts)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if supported_levels is not None:
            pulumi.set(__self__, "supported_levels", supported_levels)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_status_begin is not None:
            pulumi.set(__self__, "time_status_begin", time_status_begin)
        if time_status_end is not None:
            pulumi.set(__self__, "time_status_end", time_status_end)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[str]:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> Optional[float]:
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def importance(self) -> Optional[str]:
        return pulumi.get(self, "importance")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_id")

    @property
    @pulumi.getter(name="resourceCounts")
    def resource_counts(self) -> Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemResourceCountResult']]:
        return pulumi.get(self, "resource_counts")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportedLevels")
    def supported_levels(self) -> Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelResult']]:
        return pulumi.get(self, "supported_levels")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStatusBegin")
    def time_status_begin(self) -> Optional[str]:
        return pulumi.get(self, "time_status_begin")

    @property
    @pulumi.getter(name="timeStatusEnd")
    def time_status_end(self) -> Optional[str]:
        return pulumi.get(self, "time_status_end")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemResourceCountResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemSupportedLevelResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRecommendationsRecommendationCollectionItemSupportedLevelItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecommendationsRecommendationCollectionItemSupportedLevelItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetResourceActionActionResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetResourceActionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResourceActionsResourceActionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetResourceActionsResourceActionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetResourceActionsResourceActionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResourceActionsResourceActionCollectionItemResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetResourceActionsResourceActionCollectionItemActionResult']] = None,
                 category_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compartment_name: Optional[str] = None,
                 estimated_cost_saving: Optional[float] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 name: Optional[str] = None,
                 recommendation_id: Optional[str] = None,
                 resource_action_id: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_status_begin: Optional[str] = None,
                 time_status_end: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_name is not None:
            pulumi.set(__self__, "compartment_name", compartment_name)
        if estimated_cost_saving is not None:
            pulumi.set(__self__, "estimated_cost_saving", estimated_cost_saving)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recommendation_id is not None:
            pulumi.set(__self__, "recommendation_id", recommendation_id)
        if resource_action_id is not None:
            pulumi.set(__self__, "resource_action_id", resource_action_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_status_begin is not None:
            pulumi.set(__self__, "time_status_begin", time_status_begin)
        if time_status_end is not None:
            pulumi.set(__self__, "time_status_end", time_status_end)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetResourceActionsResourceActionCollectionItemActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[str]:
        return pulumi.get(self, "category_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter(name="estimatedCostSaving")
    def estimated_cost_saving(self) -> Optional[float]:
        return pulumi.get(self, "estimated_cost_saving")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recommendationId")
    def recommendation_id(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_id")

    @property
    @pulumi.getter(name="resourceActionId")
    def resource_action_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_action_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStatusBegin")
    def time_status_begin(self) -> Optional[str]:
        return pulumi.get(self, "time_status_begin")

    @property
    @pulumi.getter(name="timeStatusEnd")
    def time_status_end(self) -> Optional[str]:
        return pulumi.get(self, "time_status_end")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResourceActionsResourceActionCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


