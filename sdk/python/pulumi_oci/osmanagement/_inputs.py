# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ManagedInstanceAutonomouseArgs',
    'ManagedInstanceAutonomouseArgsDict',
    'ManagedInstanceChildSoftwareSourceArgs',
    'ManagedInstanceChildSoftwareSourceArgsDict',
    'ManagedInstanceGroupManagedInstanceArgs',
    'ManagedInstanceGroupManagedInstanceArgsDict',
    'ManagedInstanceManagedInstanceGroupArgs',
    'ManagedInstanceManagedInstanceGroupArgsDict',
    'ManagedInstanceManagementChildSoftwareSourceArgs',
    'ManagedInstanceManagementChildSoftwareSourceArgsDict',
    'ManagedInstanceManagementManagedInstanceGroupArgs',
    'ManagedInstanceManagementManagedInstanceGroupArgsDict',
    'ManagedInstanceManagementParentSoftwareSourceArgs',
    'ManagedInstanceManagementParentSoftwareSourceArgsDict',
    'ManagedInstanceParentSoftwareSourceArgs',
    'ManagedInstanceParentSoftwareSourceArgsDict',
    'SoftwareSourceAssociatedManagedInstanceArgs',
    'SoftwareSourceAssociatedManagedInstanceArgsDict',
    'GetManagedInstanceGroupsFilterArgs',
    'GetManagedInstanceGroupsFilterArgsDict',
    'GetManagedInstanceModuleStreamsFilterArgs',
    'GetManagedInstanceModuleStreamsFilterArgsDict',
    'GetManagedInstanceStreamProfileFilterArgs',
    'GetManagedInstanceStreamProfileFilterArgsDict',
    'GetManagedInstancesFilterArgs',
    'GetManagedInstancesFilterArgsDict',
    'GetSoftwareSourceStreamProfileFilterArgs',
    'GetSoftwareSourceStreamProfileFilterArgsDict',
    'GetSoftwareSourcesFilterArgs',
    'GetSoftwareSourcesFilterArgsDict',
]

MYPY = False

if not MYPY:
    class ManagedInstanceAutonomouseArgsDict(TypedDict):
        is_auto_update_enabled: NotRequired[pulumi.Input[bool]]
        """
        True if daily updates are enabled
        """
elif False:
    ManagedInstanceAutonomouseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceAutonomouseArgs:
    def __init__(__self__, *,
                 is_auto_update_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_auto_update_enabled: True if daily updates are enabled
        """
        if is_auto_update_enabled is not None:
            pulumi.set(__self__, "is_auto_update_enabled", is_auto_update_enabled)

    @property
    @pulumi.getter(name="isAutoUpdateEnabled")
    def is_auto_update_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if daily updates are enabled
        """
        return pulumi.get(self, "is_auto_update_enabled")

    @is_auto_update_enabled.setter
    def is_auto_update_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auto_update_enabled", value)


if not MYPY:
    class ManagedInstanceChildSoftwareSourceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        software source identifier
        """
        name: NotRequired[pulumi.Input[str]]
        """
        software source name
        """
elif False:
    ManagedInstanceChildSoftwareSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceChildSoftwareSourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: software source identifier
        :param pulumi.Input[str] name: software source name
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        software source identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        software source name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ManagedInstanceGroupManagedInstanceArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Managed Instance Group identifier
        """
        id: NotRequired[pulumi.Input[str]]
        """
        unique identifier that is immutable on creation
        """
elif False:
    ManagedInstanceGroupManagedInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceGroupManagedInstanceArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) Managed Instance Group identifier
        :param pulumi.Input[str] id: unique identifier that is immutable on creation
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Managed Instance Group identifier
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        unique identifier that is immutable on creation
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ManagedInstanceManagedInstanceGroupArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        User friendly name
        """
        id: NotRequired[pulumi.Input[str]]
        """
        software source identifier
        """
elif False:
    ManagedInstanceManagedInstanceGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceManagedInstanceGroupArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: User friendly name
        :param pulumi.Input[str] id: software source identifier
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User friendly name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        software source identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ManagedInstanceManagementChildSoftwareSourceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        software source identifier
        """
        name: NotRequired[pulumi.Input[str]]
        """
        software source name
        """
elif False:
    ManagedInstanceManagementChildSoftwareSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceManagementChildSoftwareSourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: software source identifier
        :param pulumi.Input[str] name: software source name
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        software source identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        software source name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ManagedInstanceManagementManagedInstanceGroupArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        User friendly name
        """
        id: NotRequired[pulumi.Input[str]]
        """
        unique identifier that is immutable on creation
        """
elif False:
    ManagedInstanceManagementManagedInstanceGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceManagementManagedInstanceGroupArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: User friendly name
        :param pulumi.Input[str] id: unique identifier that is immutable on creation
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User friendly name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        unique identifier that is immutable on creation
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ManagedInstanceManagementParentSoftwareSourceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        software source identifier
        """
        name: NotRequired[pulumi.Input[str]]
        """
        software source name


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
elif False:
    ManagedInstanceManagementParentSoftwareSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceManagementParentSoftwareSourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: software source identifier
        :param pulumi.Input[str] name: software source name
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        software source identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        software source name


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class ManagedInstanceParentSoftwareSourceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        software source identifier
        """
        name: NotRequired[pulumi.Input[str]]
        """
        software source name
        """
elif False:
    ManagedInstanceParentSoftwareSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstanceParentSoftwareSourceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: software source identifier
        :param pulumi.Input[str] name: software source name
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        software source identifier
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        software source name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class SoftwareSourceAssociatedManagedInstanceArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) User friendly name for the software source
        """
        id: NotRequired[pulumi.Input[str]]
        """
        OCID for the Software Source
        """
elif False:
    SoftwareSourceAssociatedManagedInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SoftwareSourceAssociatedManagedInstanceArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) User friendly name for the software source
        :param pulumi.Input[str] id: OCID for the Software Source
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User friendly name for the software source
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        OCID for the Software Source
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class GetManagedInstanceGroupsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetManagedInstanceGroupsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetManagedInstanceGroupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetManagedInstanceModuleStreamsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetManagedInstanceModuleStreamsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetManagedInstanceModuleStreamsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetManagedInstanceStreamProfileFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetManagedInstanceStreamProfileFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetManagedInstanceStreamProfileFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetManagedInstancesFilterArgsDict(TypedDict):
        name: str
        """
        software source name
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetManagedInstancesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetManagedInstancesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: software source name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        software source name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetSoftwareSourceStreamProfileFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetSoftwareSourceStreamProfileFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSoftwareSourceStreamProfileFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetSoftwareSourcesFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetSoftwareSourcesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSoftwareSourcesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


