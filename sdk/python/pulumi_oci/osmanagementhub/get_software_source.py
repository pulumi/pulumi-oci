# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSoftwareSourceResult',
    'AwaitableGetSoftwareSourceResult',
    'get_software_source',
    'get_software_source_output',
]

@pulumi.output_type
class GetSoftwareSourceResult:
    """
    A collection of values returned by getSoftwareSource.
    """
    def __init__(__self__, arch_type=None, availability=None, checksum_type=None, compartment_id=None, custom_software_source_filters=None, defined_tags=None, description=None, display_name=None, freeform_tags=None, gpg_key_fingerprint=None, gpg_key_id=None, gpg_key_url=None, id=None, is_automatically_updated=None, os_family=None, package_count=None, repo_id=None, software_source_id=None, software_source_type=None, software_source_version=None, state=None, system_tags=None, time_created=None, url=None, vendor_name=None, vendor_software_sources=None):
        if arch_type and not isinstance(arch_type, str):
            raise TypeError("Expected argument 'arch_type' to be a str")
        pulumi.set(__self__, "arch_type", arch_type)
        if availability and not isinstance(availability, str):
            raise TypeError("Expected argument 'availability' to be a str")
        pulumi.set(__self__, "availability", availability)
        if checksum_type and not isinstance(checksum_type, str):
            raise TypeError("Expected argument 'checksum_type' to be a str")
        pulumi.set(__self__, "checksum_type", checksum_type)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if custom_software_source_filters and not isinstance(custom_software_source_filters, list):
            raise TypeError("Expected argument 'custom_software_source_filters' to be a list")
        pulumi.set(__self__, "custom_software_source_filters", custom_software_source_filters)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gpg_key_fingerprint and not isinstance(gpg_key_fingerprint, str):
            raise TypeError("Expected argument 'gpg_key_fingerprint' to be a str")
        pulumi.set(__self__, "gpg_key_fingerprint", gpg_key_fingerprint)
        if gpg_key_id and not isinstance(gpg_key_id, str):
            raise TypeError("Expected argument 'gpg_key_id' to be a str")
        pulumi.set(__self__, "gpg_key_id", gpg_key_id)
        if gpg_key_url and not isinstance(gpg_key_url, str):
            raise TypeError("Expected argument 'gpg_key_url' to be a str")
        pulumi.set(__self__, "gpg_key_url", gpg_key_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_automatically_updated and not isinstance(is_automatically_updated, bool):
            raise TypeError("Expected argument 'is_automatically_updated' to be a bool")
        pulumi.set(__self__, "is_automatically_updated", is_automatically_updated)
        if os_family and not isinstance(os_family, str):
            raise TypeError("Expected argument 'os_family' to be a str")
        pulumi.set(__self__, "os_family", os_family)
        if package_count and not isinstance(package_count, str):
            raise TypeError("Expected argument 'package_count' to be a str")
        pulumi.set(__self__, "package_count", package_count)
        if repo_id and not isinstance(repo_id, str):
            raise TypeError("Expected argument 'repo_id' to be a str")
        pulumi.set(__self__, "repo_id", repo_id)
        if software_source_id and not isinstance(software_source_id, str):
            raise TypeError("Expected argument 'software_source_id' to be a str")
        pulumi.set(__self__, "software_source_id", software_source_id)
        if software_source_type and not isinstance(software_source_type, str):
            raise TypeError("Expected argument 'software_source_type' to be a str")
        pulumi.set(__self__, "software_source_type", software_source_type)
        if software_source_version and not isinstance(software_source_version, str):
            raise TypeError("Expected argument 'software_source_version' to be a str")
        pulumi.set(__self__, "software_source_version", software_source_version)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if vendor_name and not isinstance(vendor_name, str):
            raise TypeError("Expected argument 'vendor_name' to be a str")
        pulumi.set(__self__, "vendor_name", vendor_name)
        if vendor_software_sources and not isinstance(vendor_software_sources, list):
            raise TypeError("Expected argument 'vendor_software_sources' to be a list")
        pulumi.set(__self__, "vendor_software_sources", vendor_software_sources)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        The architecture type supported by the software source.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def availability(self) -> str:
        """
        Possible availabilities of a software source.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        The yum repository checksum type used by this software source.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the tenancy containing the software source.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="customSoftwareSourceFilters")
    def custom_software_source_filters(self) -> Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterResult']:
        """
        Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
        """
        return pulumi.get(self, "custom_software_source_filters")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Information specified by the user about the software source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gpgKeyFingerprint")
    def gpg_key_fingerprint(self) -> str:
        """
        Fingerprint of the GPG key for this software source.
        """
        return pulumi.get(self, "gpg_key_fingerprint")

    @property
    @pulumi.getter(name="gpgKeyId")
    def gpg_key_id(self) -> str:
        """
        ID of the GPG key for this software source.
        """
        return pulumi.get(self, "gpg_key_id")

    @property
    @pulumi.getter(name="gpgKeyUrl")
    def gpg_key_url(self) -> str:
        """
        URL of the GPG key for this software source.
        """
        return pulumi.get(self, "gpg_key_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the resource that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutomaticallyUpdated")
    def is_automatically_updated(self) -> bool:
        """
        Indicates whether service should automatically update the custom software source for the user.
        """
        return pulumi.get(self, "is_automatically_updated")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        The OS family the software source belongs to.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> str:
        """
        Number of packages.
        """
        return pulumi.get(self, "package_count")

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> str:
        """
        The Repo ID for the software source.
        """
        return pulumi.get(self, "repo_id")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")

    @property
    @pulumi.getter(name="softwareSourceVersion")
    def software_source_version(self) -> str:
        """
        The version to assign to this custom software source.
        """
        return pulumi.get(self, "software_source_version")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the software source.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL for the repository.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        Name of the vendor providing the software source.
        """
        return pulumi.get(self, "vendor_name")

    @property
    @pulumi.getter(name="vendorSoftwareSources")
    def vendor_software_sources(self) -> Sequence['outputs.GetSoftwareSourceVendorSoftwareSourceResult']:
        """
        List of vendor software sources.
        """
        return pulumi.get(self, "vendor_software_sources")


class AwaitableGetSoftwareSourceResult(GetSoftwareSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSoftwareSourceResult(
            arch_type=self.arch_type,
            availability=self.availability,
            checksum_type=self.checksum_type,
            compartment_id=self.compartment_id,
            custom_software_source_filters=self.custom_software_source_filters,
            defined_tags=self.defined_tags,
            description=self.description,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            gpg_key_fingerprint=self.gpg_key_fingerprint,
            gpg_key_id=self.gpg_key_id,
            gpg_key_url=self.gpg_key_url,
            id=self.id,
            is_automatically_updated=self.is_automatically_updated,
            os_family=self.os_family,
            package_count=self.package_count,
            repo_id=self.repo_id,
            software_source_id=self.software_source_id,
            software_source_type=self.software_source_type,
            software_source_version=self.software_source_version,
            state=self.state,
            system_tags=self.system_tags,
            time_created=self.time_created,
            url=self.url,
            vendor_name=self.vendor_name,
            vendor_software_sources=self.vendor_software_sources)


def get_software_source(software_source_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSoftwareSourceResult:
    """
    This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.

    Gets information about the specified software source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_software_source = oci.OsManagementHub.get_software_source(software_source_id=oci_os_management_hub_software_source["test_software_source"]["id"])
    ```


    :param str software_source_id: The software source OCID.
    """
    __args__ = dict()
    __args__['softwareSourceId'] = software_source_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:OsManagementHub/getSoftwareSource:getSoftwareSource', __args__, opts=opts, typ=GetSoftwareSourceResult).value

    return AwaitableGetSoftwareSourceResult(
        arch_type=pulumi.get(__ret__, 'arch_type'),
        availability=pulumi.get(__ret__, 'availability'),
        checksum_type=pulumi.get(__ret__, 'checksum_type'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        custom_software_source_filters=pulumi.get(__ret__, 'custom_software_source_filters'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        gpg_key_fingerprint=pulumi.get(__ret__, 'gpg_key_fingerprint'),
        gpg_key_id=pulumi.get(__ret__, 'gpg_key_id'),
        gpg_key_url=pulumi.get(__ret__, 'gpg_key_url'),
        id=pulumi.get(__ret__, 'id'),
        is_automatically_updated=pulumi.get(__ret__, 'is_automatically_updated'),
        os_family=pulumi.get(__ret__, 'os_family'),
        package_count=pulumi.get(__ret__, 'package_count'),
        repo_id=pulumi.get(__ret__, 'repo_id'),
        software_source_id=pulumi.get(__ret__, 'software_source_id'),
        software_source_type=pulumi.get(__ret__, 'software_source_type'),
        software_source_version=pulumi.get(__ret__, 'software_source_version'),
        state=pulumi.get(__ret__, 'state'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        url=pulumi.get(__ret__, 'url'),
        vendor_name=pulumi.get(__ret__, 'vendor_name'),
        vendor_software_sources=pulumi.get(__ret__, 'vendor_software_sources'))


@_utilities.lift_output_func(get_software_source)
def get_software_source_output(software_source_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSoftwareSourceResult]:
    """
    This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.

    Gets information about the specified software source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_software_source = oci.OsManagementHub.get_software_source(software_source_id=oci_os_management_hub_software_source["test_software_source"]["id"])
    ```


    :param str software_source_id: The software source OCID.
    """
    ...
