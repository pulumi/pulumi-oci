# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSoftwareSourcesResult',
    'AwaitableGetSoftwareSourcesResult',
    'get_software_sources',
    'get_software_sources_output',
]

@pulumi.output_type
class GetSoftwareSourcesResult:
    """
    A collection of values returned by getSoftwareSources.
    """
    def __init__(__self__, arch_types=None, availabilities=None, compartment_id=None, display_name=None, display_name_contains=None, display_name_not_equal_tos=None, filters=None, id=None, os_families=None, software_source_collections=None, software_source_id=None, software_source_types=None, states=None, vendor_name=None):
        if arch_types and not isinstance(arch_types, list):
            raise TypeError("Expected argument 'arch_types' to be a list")
        pulumi.set(__self__, "arch_types", arch_types)
        if availabilities and not isinstance(availabilities, list):
            raise TypeError("Expected argument 'availabilities' to be a list")
        pulumi.set(__self__, "availabilities", availabilities)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if display_name_contains and not isinstance(display_name_contains, str):
            raise TypeError("Expected argument 'display_name_contains' to be a str")
        pulumi.set(__self__, "display_name_contains", display_name_contains)
        if display_name_not_equal_tos and not isinstance(display_name_not_equal_tos, list):
            raise TypeError("Expected argument 'display_name_not_equal_tos' to be a list")
        pulumi.set(__self__, "display_name_not_equal_tos", display_name_not_equal_tos)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if os_families and not isinstance(os_families, list):
            raise TypeError("Expected argument 'os_families' to be a list")
        pulumi.set(__self__, "os_families", os_families)
        if software_source_collections and not isinstance(software_source_collections, list):
            raise TypeError("Expected argument 'software_source_collections' to be a list")
        pulumi.set(__self__, "software_source_collections", software_source_collections)
        if software_source_id and not isinstance(software_source_id, str):
            raise TypeError("Expected argument 'software_source_id' to be a str")
        pulumi.set(__self__, "software_source_id", software_source_id)
        if software_source_types and not isinstance(software_source_types, list):
            raise TypeError("Expected argument 'software_source_types' to be a list")
        pulumi.set(__self__, "software_source_types", software_source_types)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)
        if vendor_name and not isinstance(vendor_name, str):
            raise TypeError("Expected argument 'vendor_name' to be a str")
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Optional[Sequence[str]]:
        """
        The architecture type supported by the software source.
        """
        return pulumi.get(self, "arch_types")

    @property
    @pulumi.getter
    def availabilities(self) -> Optional[Sequence[str]]:
        """
        Possible availabilities of a software source.
        """
        return pulumi.get(self, "availabilities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        The OCID of the tenancy containing the software source.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        User friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayNameContains")
    def display_name_contains(self) -> Optional[str]:
        return pulumi.get(self, "display_name_contains")

    @property
    @pulumi.getter(name="displayNameNotEqualTos")
    def display_name_not_equal_tos(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "display_name_not_equal_tos")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSoftwareSourcesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Optional[Sequence[str]]:
        """
        The OS family the software source belongs to.
        """
        return pulumi.get(self, "os_families")

    @property
    @pulumi.getter(name="softwareSourceCollections")
    def software_source_collections(self) -> Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionResult']:
        """
        The list of software_source_collection.
        """
        return pulumi.get(self, "software_source_collections")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="softwareSourceTypes")
    def software_source_types(self) -> Optional[Sequence[str]]:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_types")

    @property
    @pulumi.getter
    def states(self) -> Optional[Sequence[str]]:
        """
        The current state of the software source.
        """
        return pulumi.get(self, "states")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        """
        Name of the vendor providing the software source.
        """
        return pulumi.get(self, "vendor_name")


class AwaitableGetSoftwareSourcesResult(GetSoftwareSourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSoftwareSourcesResult(
            arch_types=self.arch_types,
            availabilities=self.availabilities,
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            display_name_contains=self.display_name_contains,
            display_name_not_equal_tos=self.display_name_not_equal_tos,
            filters=self.filters,
            id=self.id,
            os_families=self.os_families,
            software_source_collections=self.software_source_collections,
            software_source_id=self.software_source_id,
            software_source_types=self.software_source_types,
            states=self.states,
            vendor_name=self.vendor_name)


def get_software_sources(arch_types: Optional[Sequence[str]] = None,
                         availabilities: Optional[Sequence[str]] = None,
                         compartment_id: Optional[str] = None,
                         display_name: Optional[str] = None,
                         display_name_contains: Optional[str] = None,
                         display_name_not_equal_tos: Optional[Sequence[str]] = None,
                         filters: Optional[Sequence[pulumi.InputType['GetSoftwareSourcesFilterArgs']]] = None,
                         os_families: Optional[Sequence[str]] = None,
                         software_source_id: Optional[str] = None,
                         software_source_types: Optional[Sequence[str]] = None,
                         states: Optional[Sequence[str]] = None,
                         vendor_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSoftwareSourcesResult:
    """
    This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.

    Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
    variety of criteria including but not limited to its name, status, architecture, and OS family.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_software_sources = oci.OsManagementHub.get_software_sources(arch_types=var["software_source_arch_type"],
        availabilities=var["software_source_availability"],
        compartment_id=var["compartment_id"],
        display_name=var["software_source_display_name"],
        display_name_contains=var["software_source_display_name_contains"],
        display_name_not_equal_tos=var["software_source_display_name_not_equal_to"],
        os_families=var["software_source_os_family"],
        software_source_id=oci_os_management_hub_software_source["test_software_source"]["id"],
        software_source_types=var["software_source_software_source_type"],
        states=var["software_source_state"],
        vendor_name=var["software_source_vendor_name"])
    ```


    :param Sequence[str] arch_types: A filter to return only instances whose architecture type matches the given architecture.
    :param Sequence[str] availabilities: The availabilities of the software source for a tenant.
    :param str compartment_id: The OCID of the compartment that contains the resources to list.
    :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
    :param str display_name_contains: A filter to return resources that may partially match the given display name.
    :param Sequence[str] display_name_not_equal_tos: A multi filter to return resources that do not contains the given display names.
    :param Sequence[str] os_families: A filter to return only instances whose OS family type matches the given OS family.
    :param str software_source_id: The OCID for the software source.
    :param Sequence[str] software_source_types: The type of the software source.
    :param Sequence[str] states: A filter to return only resources whose lifecycleState matches the given lifecycleStates.
    :param str vendor_name: A filter to return only profiles that match the given vendorName.
    """
    __args__ = dict()
    __args__['archTypes'] = arch_types
    __args__['availabilities'] = availabilities
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['displayNameContains'] = display_name_contains
    __args__['displayNameNotEqualTos'] = display_name_not_equal_tos
    __args__['filters'] = filters
    __args__['osFamilies'] = os_families
    __args__['softwareSourceId'] = software_source_id
    __args__['softwareSourceTypes'] = software_source_types
    __args__['states'] = states
    __args__['vendorName'] = vendor_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:OsManagementHub/getSoftwareSources:getSoftwareSources', __args__, opts=opts, typ=GetSoftwareSourcesResult).value

    return AwaitableGetSoftwareSourcesResult(
        arch_types=pulumi.get(__ret__, 'arch_types'),
        availabilities=pulumi.get(__ret__, 'availabilities'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        display_name_contains=pulumi.get(__ret__, 'display_name_contains'),
        display_name_not_equal_tos=pulumi.get(__ret__, 'display_name_not_equal_tos'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        os_families=pulumi.get(__ret__, 'os_families'),
        software_source_collections=pulumi.get(__ret__, 'software_source_collections'),
        software_source_id=pulumi.get(__ret__, 'software_source_id'),
        software_source_types=pulumi.get(__ret__, 'software_source_types'),
        states=pulumi.get(__ret__, 'states'),
        vendor_name=pulumi.get(__ret__, 'vendor_name'))


@_utilities.lift_output_func(get_software_sources)
def get_software_sources_output(arch_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                availabilities: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                compartment_id: Optional[pulumi.Input[Optional[str]]] = None,
                                display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                display_name_contains: Optional[pulumi.Input[Optional[str]]] = None,
                                display_name_not_equal_tos: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSoftwareSourcesFilterArgs']]]]] = None,
                                os_families: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                software_source_id: Optional[pulumi.Input[Optional[str]]] = None,
                                software_source_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                vendor_name: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSoftwareSourcesResult]:
    """
    This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.

    Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
    variety of criteria including but not limited to its name, status, architecture, and OS family.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_software_sources = oci.OsManagementHub.get_software_sources(arch_types=var["software_source_arch_type"],
        availabilities=var["software_source_availability"],
        compartment_id=var["compartment_id"],
        display_name=var["software_source_display_name"],
        display_name_contains=var["software_source_display_name_contains"],
        display_name_not_equal_tos=var["software_source_display_name_not_equal_to"],
        os_families=var["software_source_os_family"],
        software_source_id=oci_os_management_hub_software_source["test_software_source"]["id"],
        software_source_types=var["software_source_software_source_type"],
        states=var["software_source_state"],
        vendor_name=var["software_source_vendor_name"])
    ```


    :param Sequence[str] arch_types: A filter to return only instances whose architecture type matches the given architecture.
    :param Sequence[str] availabilities: The availabilities of the software source for a tenant.
    :param str compartment_id: The OCID of the compartment that contains the resources to list.
    :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
    :param str display_name_contains: A filter to return resources that may partially match the given display name.
    :param Sequence[str] display_name_not_equal_tos: A multi filter to return resources that do not contains the given display names.
    :param Sequence[str] os_families: A filter to return only instances whose OS family type matches the given OS family.
    :param str software_source_id: The OCID for the software source.
    :param Sequence[str] software_source_types: The type of the software source.
    :param Sequence[str] states: A filter to return only resources whose lifecycleState matches the given lifecycleStates.
    :param str vendor_name: A filter to return only profiles that match the given vendorName.
    """
    ...
