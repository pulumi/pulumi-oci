# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManagedInstanceRebootManagementArgs', 'ManagedInstanceRebootManagement']

@pulumi.input_type
class ManagedInstanceRebootManagementArgs:
    def __init__(__self__, *,
                 managed_instance_id: pulumi.Input[str],
                 reboot_timeout_in_mins: Optional[pulumi.Input[int]] = None,
                 work_request_details: Optional[pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs']] = None):
        """
        The set of arguments for constructing a ManagedInstanceRebootManagement resource.
        :param pulumi.Input[str] managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        :param pulumi.Input[int] reboot_timeout_in_mins: The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        :param pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs'] work_request_details: Provides the name and description of the job.
        """
        pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if reboot_timeout_in_mins is not None:
            pulumi.set(__self__, "reboot_timeout_in_mins", reboot_timeout_in_mins)
        if work_request_details is not None:
            pulumi.set(__self__, "work_request_details", work_request_details)

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> pulumi.Input[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @managed_instance_id.setter
    def managed_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "managed_instance_id", value)

    @property
    @pulumi.getter(name="rebootTimeoutInMins")
    def reboot_timeout_in_mins(self) -> Optional[pulumi.Input[int]]:
        """
        The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        """
        return pulumi.get(self, "reboot_timeout_in_mins")

    @reboot_timeout_in_mins.setter
    def reboot_timeout_in_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reboot_timeout_in_mins", value)

    @property
    @pulumi.getter(name="workRequestDetails")
    def work_request_details(self) -> Optional[pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs']]:
        """
        Provides the name and description of the job.
        """
        return pulumi.get(self, "work_request_details")

    @work_request_details.setter
    def work_request_details(self, value: Optional[pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs']]):
        pulumi.set(self, "work_request_details", value)


@pulumi.input_type
class _ManagedInstanceRebootManagementState:
    def __init__(__self__, *,
                 managed_instance_id: Optional[pulumi.Input[str]] = None,
                 reboot_timeout_in_mins: Optional[pulumi.Input[int]] = None,
                 work_request_details: Optional[pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs']] = None):
        """
        Input properties used for looking up and filtering ManagedInstanceRebootManagement resources.
        :param pulumi.Input[str] managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        :param pulumi.Input[int] reboot_timeout_in_mins: The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        :param pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs'] work_request_details: Provides the name and description of the job.
        """
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if reboot_timeout_in_mins is not None:
            pulumi.set(__self__, "reboot_timeout_in_mins", reboot_timeout_in_mins)
        if work_request_details is not None:
            pulumi.set(__self__, "work_request_details", work_request_details)

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @managed_instance_id.setter
    def managed_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_instance_id", value)

    @property
    @pulumi.getter(name="rebootTimeoutInMins")
    def reboot_timeout_in_mins(self) -> Optional[pulumi.Input[int]]:
        """
        The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        """
        return pulumi.get(self, "reboot_timeout_in_mins")

    @reboot_timeout_in_mins.setter
    def reboot_timeout_in_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reboot_timeout_in_mins", value)

    @property
    @pulumi.getter(name="workRequestDetails")
    def work_request_details(self) -> Optional[pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs']]:
        """
        Provides the name and description of the job.
        """
        return pulumi.get(self, "work_request_details")

    @work_request_details.setter
    def work_request_details(self, value: Optional[pulumi.Input['ManagedInstanceRebootManagementWorkRequestDetailsArgs']]):
        pulumi.set(self, "work_request_details", value)


class ManagedInstanceRebootManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 managed_instance_id: Optional[pulumi.Input[str]] = None,
                 reboot_timeout_in_mins: Optional[pulumi.Input[int]] = None,
                 work_request_details: Optional[pulumi.Input[Union['ManagedInstanceRebootManagementWorkRequestDetailsArgs', 'ManagedInstanceRebootManagementWorkRequestDetailsArgsDict']]] = None,
                 __props__=None):
        """
        This resource provides the Managed Instance Reboot Management resource in Oracle Cloud Infrastructure Os Management Hub service.

        Initiates a reboot of the specified managed instance. You can also specify the number of minutes the service
        waits before marking the reboot operation as failed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_managed_instance_reboot_management = oci.os_management_hub.ManagedInstanceRebootManagement("test_managed_instance_reboot_management",
            managed_instance_id=test_managed_instance["id"],
            reboot_timeout_in_mins=managed_instance_reboot_management_reboot_timeout_in_mins,
            work_request_details={
                "description": managed_instance_reboot_management_work_request_details_description,
                "display_name": managed_instance_reboot_management_work_request_details_display_name,
            })
        ```

        ## Import

        ManagedInstanceRebootManagement can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:OsManagementHub/managedInstanceRebootManagement:ManagedInstanceRebootManagement test_managed_instance_reboot_management "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        :param pulumi.Input[int] reboot_timeout_in_mins: The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        :param pulumi.Input[Union['ManagedInstanceRebootManagementWorkRequestDetailsArgs', 'ManagedInstanceRebootManagementWorkRequestDetailsArgsDict']] work_request_details: Provides the name and description of the job.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedInstanceRebootManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Managed Instance Reboot Management resource in Oracle Cloud Infrastructure Os Management Hub service.

        Initiates a reboot of the specified managed instance. You can also specify the number of minutes the service
        waits before marking the reboot operation as failed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_managed_instance_reboot_management = oci.os_management_hub.ManagedInstanceRebootManagement("test_managed_instance_reboot_management",
            managed_instance_id=test_managed_instance["id"],
            reboot_timeout_in_mins=managed_instance_reboot_management_reboot_timeout_in_mins,
            work_request_details={
                "description": managed_instance_reboot_management_work_request_details_description,
                "display_name": managed_instance_reboot_management_work_request_details_display_name,
            })
        ```

        ## Import

        ManagedInstanceRebootManagement can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:OsManagementHub/managedInstanceRebootManagement:ManagedInstanceRebootManagement test_managed_instance_reboot_management "id"
        ```

        :param str resource_name: The name of the resource.
        :param ManagedInstanceRebootManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedInstanceRebootManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 managed_instance_id: Optional[pulumi.Input[str]] = None,
                 reboot_timeout_in_mins: Optional[pulumi.Input[int]] = None,
                 work_request_details: Optional[pulumi.Input[Union['ManagedInstanceRebootManagementWorkRequestDetailsArgs', 'ManagedInstanceRebootManagementWorkRequestDetailsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedInstanceRebootManagementArgs.__new__(ManagedInstanceRebootManagementArgs)

            if managed_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'managed_instance_id'")
            __props__.__dict__["managed_instance_id"] = managed_instance_id
            __props__.__dict__["reboot_timeout_in_mins"] = reboot_timeout_in_mins
            __props__.__dict__["work_request_details"] = work_request_details
        super(ManagedInstanceRebootManagement, __self__).__init__(
            'oci:OsManagementHub/managedInstanceRebootManagement:ManagedInstanceRebootManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            managed_instance_id: Optional[pulumi.Input[str]] = None,
            reboot_timeout_in_mins: Optional[pulumi.Input[int]] = None,
            work_request_details: Optional[pulumi.Input[Union['ManagedInstanceRebootManagementWorkRequestDetailsArgs', 'ManagedInstanceRebootManagementWorkRequestDetailsArgsDict']]] = None) -> 'ManagedInstanceRebootManagement':
        """
        Get an existing ManagedInstanceRebootManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        :param pulumi.Input[int] reboot_timeout_in_mins: The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        :param pulumi.Input[Union['ManagedInstanceRebootManagementWorkRequestDetailsArgs', 'ManagedInstanceRebootManagementWorkRequestDetailsArgsDict']] work_request_details: Provides the name and description of the job.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedInstanceRebootManagementState.__new__(_ManagedInstanceRebootManagementState)

        __props__.__dict__["managed_instance_id"] = managed_instance_id
        __props__.__dict__["reboot_timeout_in_mins"] = reboot_timeout_in_mins
        __props__.__dict__["work_request_details"] = work_request_details
        return ManagedInstanceRebootManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> pulumi.Output[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="rebootTimeoutInMins")
    def reboot_timeout_in_mins(self) -> pulumi.Output[int]:
        """
        The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within this  time, the reboot job status is set to failed.
        """
        return pulumi.get(self, "reboot_timeout_in_mins")

    @property
    @pulumi.getter(name="workRequestDetails")
    def work_request_details(self) -> pulumi.Output['outputs.ManagedInstanceRebootManagementWorkRequestDetails']:
        """
        Provides the name and description of the job.
        """
        return pulumi.get(self, "work_request_details")

