# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'EventData',
    'EventDataAdditionalDetail',
    'EventDataAdditionalDetailVmcore',
    'EventDataContent',
    'EventSystemDetail',
    'LifecycleEnvironmentManagedInstanceId',
    'LifecycleEnvironmentStage',
    'LifecycleEnvironmentStageManagedInstanceId',
    'LifecycleEnvironmentStageSoftwareSourceId',
    'LifecycleStageAttachManagedInstancesManagementManagedInstanceDetails',
    'LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails',
    'LifecycleStageDetachManagedInstancesManagementManagedInstanceDetails',
    'LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails',
    'LifecycleStagePromoteSoftwareSourceManagementWorkRequestDetails',
    'ManagedInstanceAutonomousSettings',
    'ManagedInstanceGroupAttachManagedInstancesManagementWorkRequestDetails',
    'ManagedInstanceGroupAttachSoftwareSourcesManagementWorkRequestDetails',
    'ManagedInstanceGroupAutonomousSettings',
    'ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails',
    'ManagedInstanceGroupInstallPackagesManagementWorkRequestDetails',
    'ManagedInstanceGroupInstallWindowsUpdatesManagementWorkRequestDetails',
    'ManagedInstanceGroupManageModuleStreamsManagementDisable',
    'ManagedInstanceGroupManageModuleStreamsManagementEnable',
    'ManagedInstanceGroupManageModuleStreamsManagementInstall',
    'ManagedInstanceGroupManageModuleStreamsManagementRemove',
    'ManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails',
    'ManagedInstanceGroupRemovePackagesManagementWorkRequestDetails',
    'ManagedInstanceGroupSoftwareSource',
    'ManagedInstanceGroupUpdateAllPackagesManagementWorkRequestDetails',
    'ManagedInstanceInstallWindowsUpdatesManagementWorkRequestDetails',
    'ManagedInstanceLifecycleEnvironment',
    'ManagedInstanceLifecycleStage',
    'ManagedInstanceManagedInstanceGroup',
    'ManagedInstanceSoftwareSource',
    'ManagedInstanceUpdatePackagesManagementWorkRequestDetails',
    'ManagementStationHealth',
    'ManagementStationMirror',
    'ManagementStationMirrorSyncStatus',
    'ManagementStationProxy',
    'ProfileLifecycleEnvironment',
    'ProfileLifecycleStage',
    'ProfileManagedInstanceGroup',
    'ProfileSoftwareSource',
    'ScheduledJobOperation',
    'ScheduledJobOperationManageModuleStreamsDetails',
    'ScheduledJobOperationManageModuleStreamsDetailsDisable',
    'ScheduledJobOperationManageModuleStreamsDetailsEnable',
    'ScheduledJobOperationManageModuleStreamsDetailsInstall',
    'ScheduledJobOperationManageModuleStreamsDetailsRemove',
    'ScheduledJobOperationSwitchModuleStreamsDetails',
    'SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability',
    'SoftwareSourceCustomSoftwareSourceFilter',
    'SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter',
    'SoftwareSourceCustomSoftwareSourceFilterPackageFilter',
    'SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter',
    'SoftwareSourceVendorSoftwareSource',
    'GetEntitlementsEntitlementCollectionResult',
    'GetEntitlementsEntitlementCollectionItemResult',
    'GetEntitlementsFilterResult',
    'GetErrataErratumCollectionResult',
    'GetErrataErratumCollectionItemResult',
    'GetErrataErratumCollectionItemPackageResult',
    'GetErrataErratumCollectionItemPackageSoftwareSourceResult',
    'GetErrataFilterResult',
    'GetErratumPackageResult',
    'GetErratumPackageSoftwareSourceResult',
    'GetEventDataResult',
    'GetEventDataAdditionalDetailResult',
    'GetEventDataAdditionalDetailVmcoreResult',
    'GetEventDataContentResult',
    'GetEventSystemDetailResult',
    'GetEventsEventCollectionResult',
    'GetEventsEventCollectionItemResult',
    'GetEventsEventCollectionItemDataResult',
    'GetEventsEventCollectionItemDataAdditionalDetailResult',
    'GetEventsEventCollectionItemDataAdditionalDetailVmcoreResult',
    'GetEventsEventCollectionItemDataContentResult',
    'GetEventsEventCollectionItemSystemDetailResult',
    'GetEventsFilterResult',
    'GetLifecycleEnvironmentManagedInstanceIdResult',
    'GetLifecycleEnvironmentStageResult',
    'GetLifecycleEnvironmentStageManagedInstanceIdResult',
    'GetLifecycleEnvironmentStageSoftwareSourceIdResult',
    'GetLifecycleEnvironmentsFilterResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult',
    'GetLifecycleStageManagedInstanceIdResult',
    'GetLifecycleStageSoftwareSourceIdResult',
    'GetLifecycleStagesFilterResult',
    'GetLifecycleStagesLifecycleStageCollectionResult',
    'GetLifecycleStagesLifecycleStageCollectionItemResult',
    'GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult',
    'GetManagedInstanceAutonomousSettingResult',
    'GetManagedInstanceAvailablePackagesAvailablePackageCollectionResult',
    'GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemResult',
    'GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSourceResult',
    'GetManagedInstanceAvailablePackagesFilterResult',
    'GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult',
    'GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult',
    'GetManagedInstanceAvailableSoftwareSourcesFilterResult',
    'GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionResult',
    'GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItemResult',
    'GetManagedInstanceAvailableWindowsUpdatesFilterResult',
    'GetManagedInstanceErrataFilterResult',
    'GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionResult',
    'GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemResult',
    'GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackageResult',
    'GetManagedInstanceGroupAutonomousSettingResult',
    'GetManagedInstanceGroupAvailableModulesFilterResult',
    'GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionResult',
    'GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult',
    'GetManagedInstanceGroupAvailablePackagesFilterResult',
    'GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionResult',
    'GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult',
    'GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult',
    'GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult',
    'GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult',
    'GetManagedInstanceGroupAvailableSoftwareSourcesFilterResult',
    'GetManagedInstanceGroupInstalledPackagesFilterResult',
    'GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionResult',
    'GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItemResult',
    'GetManagedInstanceGroupModulesFilterResult',
    'GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionResult',
    'GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItemResult',
    'GetManagedInstanceGroupSoftwareSourceResult',
    'GetManagedInstanceGroupsFilterResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSettingResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult',
    'GetManagedInstanceInstalledPackagesFilterResult',
    'GetManagedInstanceInstalledPackagesInstalledPackageCollectionResult',
    'GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemResult',
    'GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSourceResult',
    'GetManagedInstanceInstalledWindowsUpdatesFilterResult',
    'GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionResult',
    'GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItemResult',
    'GetManagedInstanceLifecycleEnvironmentResult',
    'GetManagedInstanceLifecycleStageResult',
    'GetManagedInstanceManagedInstanceGroupResult',
    'GetManagedInstanceModulesFilterResult',
    'GetManagedInstanceModulesManagedInstanceModuleCollectionResult',
    'GetManagedInstanceModulesManagedInstanceModuleCollectionItemResult',
    'GetManagedInstanceSoftwareSourceResult',
    'GetManagedInstanceUpdatablePackagesFilterResult',
    'GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionResult',
    'GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemResult',
    'GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSourceResult',
    'GetManagedInstancesFilterResult',
    'GetManagedInstancesManagedInstanceCollectionResult',
    'GetManagedInstancesManagedInstanceCollectionItemResult',
    'GetManagedInstancesManagedInstanceCollectionItemAutonomousSettingResult',
    'GetManagedInstancesManagedInstanceCollectionItemLifecycleEnvironmentResult',
    'GetManagedInstancesManagedInstanceCollectionItemLifecycleStageResult',
    'GetManagedInstancesManagedInstanceCollectionItemManagedInstanceGroupResult',
    'GetManagedInstancesManagedInstanceCollectionItemSoftwareSourceResult',
    'GetManagementStationHealthResult',
    'GetManagementStationMirrorResult',
    'GetManagementStationMirrorSyncStatusResult',
    'GetManagementStationMirrorsFilterResult',
    'GetManagementStationMirrorsMirrorsCollectionResult',
    'GetManagementStationMirrorsMirrorsCollectionItemResult',
    'GetManagementStationProxyResult',
    'GetManagementStationsFilterResult',
    'GetManagementStationsManagementStationCollectionResult',
    'GetManagementStationsManagementStationCollectionItemResult',
    'GetProfileLifecycleEnvironmentResult',
    'GetProfileLifecycleStageResult',
    'GetProfileManagedInstanceGroupResult',
    'GetProfileSoftwareSourceResult',
    'GetProfilesFilterResult',
    'GetProfilesProfileCollectionResult',
    'GetProfilesProfileCollectionItemResult',
    'GetProfilesProfileCollectionItemLifecycleEnvironmentResult',
    'GetProfilesProfileCollectionItemLifecycleStageResult',
    'GetProfilesProfileCollectionItemManagedInstanceGroupResult',
    'GetProfilesProfileCollectionItemSoftwareSourceResult',
    'GetScheduledJobOperationResult',
    'GetScheduledJobOperationManageModuleStreamsDetailResult',
    'GetScheduledJobOperationManageModuleStreamsDetailDisableResult',
    'GetScheduledJobOperationManageModuleStreamsDetailEnableResult',
    'GetScheduledJobOperationManageModuleStreamsDetailInstallResult',
    'GetScheduledJobOperationManageModuleStreamsDetailRemoveResult',
    'GetScheduledJobOperationSwitchModuleStreamsDetailResult',
    'GetScheduledJobsFilterResult',
    'GetScheduledJobsScheduledJobCollectionResult',
    'GetScheduledJobsScheduledJobCollectionItemResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisableResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnableResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstallResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemoveResult',
    'GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetailResult',
    'GetSoftwarePackageDependencyResult',
    'GetSoftwarePackageFileResult',
    'GetSoftwarePackageSoftwareSourceResult',
    'GetSoftwarePackageSoftwareSourceFilterResult',
    'GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionResult',
    'GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemResult',
    'GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSourceResult',
    'GetSoftwarePackagesFilterResult',
    'GetSoftwarePackagesSoftwarePackageCollectionResult',
    'GetSoftwarePackagesSoftwarePackageCollectionItemResult',
    'GetSoftwarePackagesSoftwarePackageCollectionItemDependencyResult',
    'GetSoftwarePackagesSoftwarePackageCollectionItemFileResult',
    'GetSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult',
    'GetSoftwareSourceModuleStreamProfilesFilterResult',
    'GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionResult',
    'GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult',
    'GetSoftwareSourceModuleStreamsFilterResult',
    'GetSoftwareSourceModuleStreamsModuleStreamCollectionResult',
    'GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult',
    'GetSoftwareSourcePackageGroupsFilterResult',
    'GetSoftwareSourcePackageGroupsPackageGroupCollectionResult',
    'GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult',
    'GetSoftwareSourceSoftwarePackageDependencyResult',
    'GetSoftwareSourceSoftwarePackageFileResult',
    'GetSoftwareSourceSoftwarePackageSoftwareSourceResult',
    'GetSoftwareSourceSoftwarePackagesFilterResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult',
    'GetSoftwareSourceVendorSoftwareSourceResult',
    'GetSoftwareSourceVendorsFilterResult',
    'GetSoftwareSourceVendorsSoftwareSourceVendorCollectionResult',
    'GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult',
    'GetSoftwareSourcesFilterResult',
    'GetSoftwareSourcesSoftwareSourceCollectionResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult',
    'GetWindowsUpdatesFilterResult',
    'GetWindowsUpdatesWindowsUpdateCollectionResult',
    'GetWindowsUpdatesWindowsUpdateCollectionItemResult',
]

@pulumi.output_type
class EventData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalDetails":
            suggest = "additional_details"
        elif key == "eventCount":
            suggest = "event_count"
        elif key == "eventFingerprint":
            suggest = "event_fingerprint"
        elif key == "operationType":
            suggest = "operation_type"
        elif key == "timeFirstOccurred":
            suggest = "time_first_occurred"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_details: Optional[Sequence['outputs.EventDataAdditionalDetail']] = None,
                 contents: Optional[Sequence['outputs.EventDataContent']] = None,
                 event_count: Optional[int] = None,
                 event_fingerprint: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 reason: Optional[str] = None,
                 status: Optional[str] = None,
                 time_first_occurred: Optional[str] = None):
        """
        :param Sequence['EventDataAdditionalDetailArgs'] additional_details: Provides additional information for the work request associated with an event.
        :param Sequence['EventDataContentArgs'] contents: Provides information collected for the exploit attempt event.
        :param int event_count: Number of times the event has occurred.
        :param str event_fingerprint: Fingerprint of the event.
        :param str operation_type: Type of management station operation.
        :param str reason: Reason for the event.
        :param str status: Status of the management station operation.
        :param str time_first_occurred: The date and time that the event first occurred.
        """
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if event_count is not None:
            pulumi.set(__self__, "event_count", event_count)
        if event_fingerprint is not None:
            pulumi.set(__self__, "event_fingerprint", event_fingerprint)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_first_occurred is not None:
            pulumi.set(__self__, "time_first_occurred", time_first_occurred)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Sequence['outputs.EventDataAdditionalDetail']]:
        """
        Provides additional information for the work request associated with an event.
        """
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.EventDataContent']]:
        """
        Provides information collected for the exploit attempt event.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="eventCount")
    def event_count(self) -> Optional[int]:
        """
        Number of times the event has occurred.
        """
        return pulumi.get(self, "event_count")

    @property
    @pulumi.getter(name="eventFingerprint")
    def event_fingerprint(self) -> Optional[str]:
        """
        Fingerprint of the event.
        """
        return pulumi.get(self, "event_fingerprint")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        """
        Type of management station operation.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason for the event.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the management station operation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeFirstOccurred")
    def time_first_occurred(self) -> Optional[str]:
        """
        The date and time that the event first occurred.
        """
        return pulumi.get(self, "time_first_occurred")


@pulumi.output_type
class EventDataAdditionalDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exploitCves":
            suggest = "exploit_cves"
        elif key == "initiatorId":
            suggest = "initiator_id"
        elif key == "workRequestIds":
            suggest = "work_request_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDataAdditionalDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDataAdditionalDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDataAdditionalDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exploit_cves: Optional[Sequence[str]] = None,
                 initiator_id: Optional[str] = None,
                 vmcores: Optional[Sequence['outputs.EventDataAdditionalDetailVmcore']] = None,
                 work_request_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exploit_cves: List of CVEs in the exploit.
        :param str initiator_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that triggered the event, such as scheduled job id.
        :param Sequence['EventDataAdditionalDetailVmcoreArgs'] vmcores: Kernel event vmcore details
        :param Sequence[str] work_request_ids: List of all work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with the event.
        """
        if exploit_cves is not None:
            pulumi.set(__self__, "exploit_cves", exploit_cves)
        if initiator_id is not None:
            pulumi.set(__self__, "initiator_id", initiator_id)
        if vmcores is not None:
            pulumi.set(__self__, "vmcores", vmcores)
        if work_request_ids is not None:
            pulumi.set(__self__, "work_request_ids", work_request_ids)

    @property
    @pulumi.getter(name="exploitCves")
    def exploit_cves(self) -> Optional[Sequence[str]]:
        """
        List of CVEs in the exploit.
        """
        return pulumi.get(self, "exploit_cves")

    @property
    @pulumi.getter(name="initiatorId")
    def initiator_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that triggered the event, such as scheduled job id.
        """
        return pulumi.get(self, "initiator_id")

    @property
    @pulumi.getter
    def vmcores(self) -> Optional[Sequence['outputs.EventDataAdditionalDetailVmcore']]:
        """
        Kernel event vmcore details
        """
        return pulumi.get(self, "vmcores")

    @property
    @pulumi.getter(name="workRequestIds")
    def work_request_ids(self) -> Optional[Sequence[str]]:
        """
        List of all work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with the event.
        """
        return pulumi.get(self, "work_request_ids")


@pulumi.output_type
class EventDataAdditionalDetailVmcore(dict):
    def __init__(__self__, *,
                 backtrace: Optional[str] = None,
                 component: Optional[str] = None):
        """
        :param str backtrace: Kernel vmcore backtrace.
        :param str component: Kernel vmcore component.
        """
        if backtrace is not None:
            pulumi.set(__self__, "backtrace", backtrace)
        if component is not None:
            pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def backtrace(self) -> Optional[str]:
        """
        Kernel vmcore backtrace.
        """
        return pulumi.get(self, "backtrace")

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        """
        Kernel vmcore component.
        """
        return pulumi.get(self, "component")


@pulumi.output_type
class EventDataContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAvailability":
            suggest = "content_availability"
        elif key == "contentLocation":
            suggest = "content_location"
        elif key == "exploitDetectionLogContent":
            suggest = "exploit_detection_log_content"
        elif key == "exploitObjectStoreLocation":
            suggest = "exploit_object_store_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventDataContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventDataContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventDataContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_availability: Optional[str] = None,
                 content_location: Optional[str] = None,
                 exploit_detection_log_content: Optional[str] = None,
                 exploit_object_store_location: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str content_availability: Crash content availability status:
               * 'NOT_AVAILABLE' indicates the content is not available on the instance nor in the service
               * 'AVAILABLE_ON_INSTANCE' indicates the content is only available on the instance.
               * 'AVAILABLE_ON_SERVICE' indicates the content is only available on the service.
               * 'AVAILABLE_ON_INSTANCE_AND_SERVICE' indicates the content is available both on the instance and the service
               * 'AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS' indicates the content is available on the instance and its upload to the service is in progress.
        :param str content_location: Location of the Kernel event content.
        :param str exploit_detection_log_content: The content of the exploit detection log.
        :param str exploit_object_store_location: The location of the exploit detection log within object storage.
        :param int size: Size of the event content.
        :param str type: Event type:
               * `KERNEL_OOPS` - Used to identify a kernel panic condition event
               * `KERNEL_CRASH` - Used to identify an internal fatal kernel error that cannot be safely recovered from
               * `EXPLOIT_ATTEMPT` - Used to identify a known exploit detection as identified by Ksplice
               * `SOFTWARE_UPDATE` - Software updates - Packages
               * `KSPLICE_UPDATE` - Ksplice updates
               * `SOFTWARE_SOURCE` - Software source
               * `AGENT` - Agent
               * `MANAGEMENT_STATION` - Management Station
        """
        if content_availability is not None:
            pulumi.set(__self__, "content_availability", content_availability)
        if content_location is not None:
            pulumi.set(__self__, "content_location", content_location)
        if exploit_detection_log_content is not None:
            pulumi.set(__self__, "exploit_detection_log_content", exploit_detection_log_content)
        if exploit_object_store_location is not None:
            pulumi.set(__self__, "exploit_object_store_location", exploit_object_store_location)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contentAvailability")
    def content_availability(self) -> Optional[str]:
        """
        Crash content availability status:
        * 'NOT_AVAILABLE' indicates the content is not available on the instance nor in the service
        * 'AVAILABLE_ON_INSTANCE' indicates the content is only available on the instance.
        * 'AVAILABLE_ON_SERVICE' indicates the content is only available on the service.
        * 'AVAILABLE_ON_INSTANCE_AND_SERVICE' indicates the content is available both on the instance and the service
        * 'AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS' indicates the content is available on the instance and its upload to the service is in progress.
        """
        return pulumi.get(self, "content_availability")

    @property
    @pulumi.getter(name="contentLocation")
    def content_location(self) -> Optional[str]:
        """
        Location of the Kernel event content.
        """
        return pulumi.get(self, "content_location")

    @property
    @pulumi.getter(name="exploitDetectionLogContent")
    def exploit_detection_log_content(self) -> Optional[str]:
        """
        The content of the exploit detection log.
        """
        return pulumi.get(self, "exploit_detection_log_content")

    @property
    @pulumi.getter(name="exploitObjectStoreLocation")
    def exploit_object_store_location(self) -> Optional[str]:
        """
        The location of the exploit detection log within object storage.
        """
        return pulumi.get(self, "exploit_object_store_location")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Size of the event content.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Event type:
        * `KERNEL_OOPS` - Used to identify a kernel panic condition event
        * `KERNEL_CRASH` - Used to identify an internal fatal kernel error that cannot be safely recovered from
        * `EXPLOIT_ATTEMPT` - Used to identify a known exploit detection as identified by Ksplice
        * `SOFTWARE_UPDATE` - Software updates - Packages
        * `KSPLICE_UPDATE` - Ksplice updates
        * `SOFTWARE_SOURCE` - Software source
        * `AGENT` - Agent
        * `MANAGEMENT_STATION` - Management Station
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EventSystemDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kspliceEffectiveKernelVersion":
            suggest = "ksplice_effective_kernel_version"
        elif key == "osFamily":
            suggest = "os_family"
        elif key == "osKernelRelease":
            suggest = "os_kernel_release"
        elif key == "osKernelVersion":
            suggest = "os_kernel_version"
        elif key == "osName":
            suggest = "os_name"
        elif key == "osSystemVersion":
            suggest = "os_system_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventSystemDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventSystemDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventSystemDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 architecture: Optional[str] = None,
                 ksplice_effective_kernel_version: Optional[str] = None,
                 os_family: Optional[str] = None,
                 os_kernel_release: Optional[str] = None,
                 os_kernel_version: Optional[str] = None,
                 os_name: Optional[str] = None,
                 os_system_version: Optional[str] = None):
        """
        :param str architecture: Architecture type.
        :param str ksplice_effective_kernel_version: Version of the Ksplice effective kernel.
        :param str os_family: Operating system type.
        :param str os_kernel_release: Release of the kernel.
        :param str os_kernel_version: Version of the kernel.
        :param str os_name: Name of the operating system.
        :param str os_system_version: Version of the operating system.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if ksplice_effective_kernel_version is not None:
            pulumi.set(__self__, "ksplice_effective_kernel_version", ksplice_effective_kernel_version)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if os_kernel_release is not None:
            pulumi.set(__self__, "os_kernel_release", os_kernel_release)
        if os_kernel_version is not None:
            pulumi.set(__self__, "os_kernel_version", os_kernel_version)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_system_version is not None:
            pulumi.set(__self__, "os_system_version", os_system_version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        """
        Architecture type.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="kspliceEffectiveKernelVersion")
    def ksplice_effective_kernel_version(self) -> Optional[str]:
        """
        Version of the Ksplice effective kernel.
        """
        return pulumi.get(self, "ksplice_effective_kernel_version")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        """
        Operating system type.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="osKernelRelease")
    def os_kernel_release(self) -> Optional[str]:
        """
        Release of the kernel.
        """
        return pulumi.get(self, "os_kernel_release")

    @property
    @pulumi.getter(name="osKernelVersion")
    def os_kernel_version(self) -> Optional[str]:
        """
        Version of the kernel.
        """
        return pulumi.get(self, "os_kernel_version")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[str]:
        """
        Name of the operating system.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osSystemVersion")
    def os_system_version(self) -> Optional[str]:
        """
        Version of the operating system.
        """
        return pulumi.get(self, "os_system_version")


@pulumi.output_type
class LifecycleEnvironmentManagedInstanceId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentManagedInstanceId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentManagedInstanceId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentManagedInstanceId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: (Updatable) A user-friendly name for the lifecycle environment. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name for the lifecycle environment. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LifecycleEnvironmentStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "archType":
            suggest = "arch_type"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "lifecycleEnvironmentId":
            suggest = "lifecycle_environment_id"
        elif key == "managedInstanceIds":
            suggest = "managed_instance_ids"
        elif key == "osFamily":
            suggest = "os_family"
        elif key == "softwareSourceIds":
            suggest = "software_source_ids"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeModified":
            suggest = "time_modified"
        elif key == "vendorName":
            suggest = "vendor_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 rank: int,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_environment_id: Optional[str] = None,
                 location: Optional[str] = None,
                 managed_instance_ids: Optional[Sequence['outputs.LifecycleEnvironmentStageManagedInstanceId']] = None,
                 os_family: Optional[str] = None,
                 software_source_ids: Optional[Sequence['outputs.LifecycleEnvironmentStageSoftwareSourceId']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        """
        :param str display_name: (Updatable) A user-friendly name for the lifecycle stage. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        :param int rank: User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        :param str arch_type: The CPU architecture of the managed instances in the lifecycle environment.
        :param str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the lifecycle stage.
        :param Mapping[str, Any] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param Mapping[str, Any] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param str lifecycle_environment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment that contains the lifecycle stage.
        :param str location: The location of managed instances attached to the lifecycle environment. If no location is provided, the default is 'ON_PREMISE.'
        :param Sequence['LifecycleEnvironmentStageManagedInstanceIdArgs'] managed_instance_ids: The list of managed instances associated with the lifecycle stage.
        :param str os_family: The operating system of the managed instances in the lifecycle environment.
        :param Sequence['LifecycleEnvironmentStageSoftwareSourceIdArgs'] software_source_ids: Provides identifying information for the specified software source.
        :param str state: The current state of the lifecycle environment.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_modified: The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: The vendor of the operating system used by the managed instances in the lifecycle environment.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "rank", rank)
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        (Updatable) A user-friendly name for the lifecycle stage. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def rank(self) -> int:
        """
        User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        """
        The CPU architecture of the managed instances in the lifecycle environment.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the lifecycle stage.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment that contains the lifecycle stage.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location of managed instances attached to the lifecycle environment. If no location is provided, the default is 'ON_PREMISE.'
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence['outputs.LifecycleEnvironmentStageManagedInstanceId']]:
        """
        The list of managed instances associated with the lifecycle stage.
        """
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        """
        The operating system of the managed instances in the lifecycle environment.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence['outputs.LifecycleEnvironmentStageSoftwareSourceId']]:
        """
        Provides identifying information for the specified software source.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the lifecycle environment.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        """
        The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        """
        The vendor of the operating system used by the managed instances in the lifecycle environment.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class LifecycleEnvironmentStageManagedInstanceId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentStageManagedInstanceId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentStageManagedInstanceId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentStageManagedInstanceId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: (Updatable) A user-friendly name for the lifecycle environment. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name for the lifecycle environment. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LifecycleEnvironmentStageSoftwareSourceId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isMandatoryForAutonomousLinux":
            suggest = "is_mandatory_for_autonomous_linux"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentStageSoftwareSourceId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentStageSoftwareSourceId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentStageSoftwareSourceId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_mandatory_for_autonomous_linux: Optional[bool] = None,
                 software_source_type: Optional[str] = None):
        """
        :param str description: (Updatable) User-specified information about the lifecycle environment. Avoid entering confidential information.
        :param str display_name: (Updatable) A user-friendly name for the lifecycle environment. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_mandatory_for_autonomous_linux is not None:
            pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-specified information about the lifecycle environment. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name for the lifecycle environment. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> Optional[bool]:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class LifecycleStageAttachManagedInstancesManagementManagedInstanceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedInstances":
            suggest = "managed_instances"
        elif key == "workRequestDetails":
            suggest = "work_request_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleStageAttachManagedInstancesManagementManagedInstanceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleStageAttachManagedInstancesManagementManagedInstanceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleStageAttachManagedInstancesManagementManagedInstanceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_instances: Sequence[str],
                 work_request_details: Optional['outputs.LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails'] = None):
        """
        :param Sequence[str] managed_instances: The list of managed instance OCIDs to be attached/detached.
        :param 'LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetailsArgs' work_request_details: Provides the name and description of the job.
        """
        pulumi.set(__self__, "managed_instances", managed_instances)
        if work_request_details is not None:
            pulumi.set(__self__, "work_request_details", work_request_details)

    @property
    @pulumi.getter(name="managedInstances")
    def managed_instances(self) -> Sequence[str]:
        """
        The list of managed instance OCIDs to be attached/detached.
        """
        return pulumi.get(self, "managed_instances")

    @property
    @pulumi.getter(name="workRequestDetails")
    def work_request_details(self) -> Optional['outputs.LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails']:
        """
        Provides the name and description of the job.
        """
        return pulumi.get(self, "work_request_details")


@pulumi.output_type
class LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class LifecycleStageDetachManagedInstancesManagementManagedInstanceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedInstances":
            suggest = "managed_instances"
        elif key == "workRequestDetails":
            suggest = "work_request_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleStageDetachManagedInstancesManagementManagedInstanceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleStageDetachManagedInstancesManagementManagedInstanceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleStageDetachManagedInstancesManagementManagedInstanceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_instances: Sequence[str],
                 work_request_details: Optional['outputs.LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails'] = None):
        """
        :param Sequence[str] managed_instances: The list of managed instance OCIDs to be attached/detached.
        :param 'LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetailsArgs' work_request_details: Provides the name and description of the job.
        """
        pulumi.set(__self__, "managed_instances", managed_instances)
        if work_request_details is not None:
            pulumi.set(__self__, "work_request_details", work_request_details)

    @property
    @pulumi.getter(name="managedInstances")
    def managed_instances(self) -> Sequence[str]:
        """
        The list of managed instance OCIDs to be attached/detached.
        """
        return pulumi.get(self, "managed_instances")

    @property
    @pulumi.getter(name="workRequestDetails")
    def work_request_details(self) -> Optional['outputs.LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails']:
        """
        Provides the name and description of the job.
        """
        return pulumi.get(self, "work_request_details")


@pulumi.output_type
class LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class LifecycleStagePromoteSoftwareSourceManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleStagePromoteSoftwareSourceManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleStagePromoteSoftwareSourceManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleStagePromoteSoftwareSourceManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceAutonomousSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDataCollectionAuthorized":
            suggest = "is_data_collection_authorized"
        elif key == "scheduledJobId":
            suggest = "scheduled_job_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceAutonomousSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceAutonomousSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceAutonomousSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_data_collection_authorized: Optional[bool] = None,
                 scheduled_job_id: Optional[str] = None):
        """
        :param bool is_data_collection_authorized: (Updatable) Indicates whether Autonomous Linux will collect crash files.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        if is_data_collection_authorized is not None:
            pulumi.set(__self__, "is_data_collection_authorized", is_data_collection_authorized)
        if scheduled_job_id is not None:
            pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)

    @property
    @pulumi.getter(name="isDataCollectionAuthorized")
    def is_data_collection_authorized(self) -> Optional[bool]:
        """
        (Updatable) Indicates whether Autonomous Linux will collect crash files.
        """
        return pulumi.get(self, "is_data_collection_authorized")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        return pulumi.get(self, "scheduled_job_id")


@pulumi.output_type
class ManagedInstanceGroupAttachManagedInstancesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupAttachManagedInstancesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupAttachManagedInstancesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupAttachManagedInstancesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupAttachSoftwareSourcesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupAttachSoftwareSourcesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupAttachSoftwareSourcesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupAttachSoftwareSourcesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupAutonomousSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDataCollectionAuthorized":
            suggest = "is_data_collection_authorized"
        elif key == "scheduledJobId":
            suggest = "scheduled_job_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupAutonomousSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupAutonomousSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupAutonomousSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_data_collection_authorized: Optional[bool] = None,
                 scheduled_job_id: Optional[str] = None):
        """
        :param bool is_data_collection_authorized: (Updatable) Indicates whether Autonomous Linux will collect crash files.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        if is_data_collection_authorized is not None:
            pulumi.set(__self__, "is_data_collection_authorized", is_data_collection_authorized)
        if scheduled_job_id is not None:
            pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)

    @property
    @pulumi.getter(name="isDataCollectionAuthorized")
    def is_data_collection_authorized(self) -> Optional[bool]:
        """
        (Updatable) Indicates whether Autonomous Linux will collect crash files.
        """
        return pulumi.get(self, "is_data_collection_authorized")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        return pulumi.get(self, "scheduled_job_id")


@pulumi.output_type
class ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupInstallPackagesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupInstallPackagesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupInstallPackagesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupInstallPackagesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupInstallWindowsUpdatesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupInstallWindowsUpdatesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupInstallWindowsUpdatesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupInstallWindowsUpdatesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupManageModuleStreamsManagementDisable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupManageModuleStreamsManagementDisable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementDisable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementDisable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: The name of a module.
        :param str stream_name: The name of a stream of the specified module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ManagedInstanceGroupManageModuleStreamsManagementEnable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupManageModuleStreamsManagementEnable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementEnable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementEnable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: The name of a module.
        :param str stream_name: The name of a stream of the specified module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ManagedInstanceGroupManageModuleStreamsManagementInstall(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "profileName":
            suggest = "profile_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupManageModuleStreamsManagementInstall. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementInstall.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementInstall.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: The name of a module.
        :param str profile_name: The name of a profile of the specified module stream.
        :param str stream_name: The name of a stream of the specified module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ManagedInstanceGroupManageModuleStreamsManagementRemove(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "profileName":
            suggest = "profile_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupManageModuleStreamsManagementRemove. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementRemove.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementRemove.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: The name of a module.
        :param str profile_name: The name of a profile of the specified module stream.
        :param str stream_name: The name of a stream of the specified module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupRemovePackagesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupRemovePackagesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupRemovePackagesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupRemovePackagesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceGroupSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isMandatoryForAutonomousLinux":
            suggest = "is_mandatory_for_autonomous_linux"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_mandatory_for_autonomous_linux: Optional[bool] = None,
                 software_source_type: Optional[str] = None):
        """
        :param str description: (Updatable) User-specified description of the managed instance group. Avoid entering confidential information.
        :param str display_name: (Updatable) A user-friendly name for the managed instance group. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_mandatory_for_autonomous_linux is not None:
            pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-specified description of the managed instance group. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name for the managed instance group. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> Optional[bool]:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class ManagedInstanceGroupUpdateAllPackagesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupUpdateAllPackagesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupUpdateAllPackagesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupUpdateAllPackagesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceInstallWindowsUpdatesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceInstallWindowsUpdatesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceInstallWindowsUpdatesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceInstallWindowsUpdatesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagedInstanceLifecycleEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceLifecycleEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceLifecycleEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceLifecycleEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ManagedInstanceLifecycleStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceLifecycleStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceLifecycleStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceLifecycleStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ManagedInstanceManagedInstanceGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceManagedInstanceGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceManagedInstanceGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceManagedInstanceGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ManagedInstanceSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isMandatoryForAutonomousLinux":
            suggest = "is_mandatory_for_autonomous_linux"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_mandatory_for_autonomous_linux: Optional[bool] = None,
                 software_source_type: Optional[str] = None):
        """
        :param str description: (Updatable) User-specified description of the managed instance. Avoid entering confidential information.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_mandatory_for_autonomous_linux is not None:
            pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-specified description of the managed instance. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> Optional[bool]:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class ManagedInstanceUpdatePackagesManagementWorkRequestDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceUpdatePackagesManagementWorkRequestDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceUpdatePackagesManagementWorkRequestDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceUpdatePackagesManagementWorkRequestDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None):
        """
        :param str description: User-specified information about the job. Avoid entering confidential information.
        :param str display_name: A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-specified information about the job. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name for the job. The name does not have to be unique. Avoid entering confidential information.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ManagementStationHealth(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 state: Optional[str] = None):
        """
        :param str description: (Updatable) User-specified description of the management station. Avoid entering confidential information.
        :param str state: The current state of the management station.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-specified description of the management station. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the management station.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ManagementStationMirror(dict):
    def __init__(__self__, *,
                 directory: str,
                 port: str,
                 sslport: str,
                 sslcert: Optional[str] = None):
        """
        :param str directory: (Updatable) Path to the data volume on the management station where software source mirrors are stored.
        :param str port: (Updatable) Default mirror listening port for http.
        :param str sslport: (Updatable) Default mirror listening port for https.
        :param str sslcert: (Updatable) Path to the SSL cerfificate.
        """
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sslport", sslport)
        if sslcert is not None:
            pulumi.set(__self__, "sslcert", sslcert)

    @property
    @pulumi.getter
    def directory(self) -> str:
        """
        (Updatable) Path to the data volume on the management station where software source mirrors are stored.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        (Updatable) Default mirror listening port for http.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sslport(self) -> str:
        """
        (Updatable) Default mirror listening port for https.
        """
        return pulumi.get(self, "sslport")

    @property
    @pulumi.getter
    def sslcert(self) -> Optional[str]:
        """
        (Updatable) Path to the SSL cerfificate.
        """
        return pulumi.get(self, "sslcert")


@pulumi.output_type
class ManagementStationMirrorSyncStatus(dict):
    def __init__(__self__, *,
                 failed: Optional[int] = None,
                 queued: Optional[int] = None,
                 synced: Optional[int] = None,
                 syncing: Optional[int] = None,
                 unsynced: Optional[int] = None):
        """
        :param int failed: Total number of software sources that failed to sync.
        :param int queued: Total number of software sources that are queued for sync.
        :param int synced: Total number of software sources that successfully synced.
        :param int syncing: Total number of software sources currently syncing.
        :param int unsynced: Total number of software sources that have not yet been synced.
        """
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if queued is not None:
            pulumi.set(__self__, "queued", queued)
        if synced is not None:
            pulumi.set(__self__, "synced", synced)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if unsynced is not None:
            pulumi.set(__self__, "unsynced", unsynced)

    @property
    @pulumi.getter
    def failed(self) -> Optional[int]:
        """
        Total number of software sources that failed to sync.
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def queued(self) -> Optional[int]:
        """
        Total number of software sources that are queued for sync.
        """
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def synced(self) -> Optional[int]:
        """
        Total number of software sources that successfully synced.
        """
        return pulumi.get(self, "synced")

    @property
    @pulumi.getter
    def syncing(self) -> Optional[int]:
        """
        Total number of software sources currently syncing.
        """
        return pulumi.get(self, "syncing")

    @property
    @pulumi.getter
    def unsynced(self) -> Optional[int]:
        """
        Total number of software sources that have not yet been synced.
        """
        return pulumi.get(self, "unsynced")


@pulumi.output_type
class ManagementStationProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementStationProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementStationProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementStationProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 forward: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[str] = None):
        """
        :param bool is_enabled: (Updatable) Indicates if the proxy should be enabled or disabled. Default is enabled.
        :param str forward: (Updatable) The URL the proxy will forward to.
        :param Sequence[str] hosts: (Updatable) List of hosts.
        :param str port: (Updatable) Listening port used for the proxy.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        (Updatable) Indicates if the proxy should be enabled or disabled. Default is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def forward(self) -> Optional[str]:
        """
        (Updatable) The URL the proxy will forward to.
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        (Updatable) List of hosts.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        (Updatable) Listening port used for the proxy.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ProfileLifecycleEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileLifecycleEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileLifecycleEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileLifecycleEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileLifecycleStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileLifecycleStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileLifecycleStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileLifecycleStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileManagedInstanceGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileManagedInstanceGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileManagedInstanceGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileManagedInstanceGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isMandatoryForAutonomousLinux":
            suggest = "is_mandatory_for_autonomous_linux"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_mandatory_for_autonomous_linux: Optional[bool] = None,
                 software_source_type: Optional[str] = None):
        """
        :param str description: (Updatable) User-specified description of the registration profile.
        :param str display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_mandatory_for_autonomous_linux is not None:
            pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-specified description of the registration profile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> Optional[bool]:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class ScheduledJobOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationType":
            suggest = "operation_type"
        elif key == "manageModuleStreamsDetails":
            suggest = "manage_module_streams_details"
        elif key == "packageNames":
            suggest = "package_names"
        elif key == "softwareSourceIds":
            suggest = "software_source_ids"
        elif key == "switchModuleStreamsDetails":
            suggest = "switch_module_streams_details"
        elif key == "windowsUpdateNames":
            suggest = "windows_update_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledJobOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledJobOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledJobOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_type: str,
                 manage_module_streams_details: Optional['outputs.ScheduledJobOperationManageModuleStreamsDetails'] = None,
                 package_names: Optional[Sequence[str]] = None,
                 software_source_ids: Optional[Sequence[str]] = None,
                 switch_module_streams_details: Optional['outputs.ScheduledJobOperationSwitchModuleStreamsDetails'] = None,
                 windows_update_names: Optional[Sequence[str]] = None):
        """
        :param str operation_type: (Updatable) The type of operation this scheduled job performs.
        :param 'ScheduledJobOperationManageModuleStreamsDetailsArgs' manage_module_streams_details: (Updatable) The set of changes to make to the state of the modules, streams, and profiles on the managed target.
        :param Sequence[str] package_names: (Updatable) The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
        :param Sequence[str] software_source_ids: (Updatable) The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
        :param 'ScheduledJobOperationSwitchModuleStreamsDetailsArgs' switch_module_streams_details: (Updatable) Provides the information used to update a module stream.
        :param Sequence[str] windows_update_names: (Updatable) Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
        """
        pulumi.set(__self__, "operation_type", operation_type)
        if manage_module_streams_details is not None:
            pulumi.set(__self__, "manage_module_streams_details", manage_module_streams_details)
        if package_names is not None:
            pulumi.set(__self__, "package_names", package_names)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if switch_module_streams_details is not None:
            pulumi.set(__self__, "switch_module_streams_details", switch_module_streams_details)
        if windows_update_names is not None:
            pulumi.set(__self__, "windows_update_names", windows_update_names)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        (Updatable) The type of operation this scheduled job performs.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="manageModuleStreamsDetails")
    def manage_module_streams_details(self) -> Optional['outputs.ScheduledJobOperationManageModuleStreamsDetails']:
        """
        (Updatable) The set of changes to make to the state of the modules, streams, and profiles on the managed target.
        """
        return pulumi.get(self, "manage_module_streams_details")

    @property
    @pulumi.getter(name="packageNames")
    def package_names(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
        """
        return pulumi.get(self, "package_names")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="switchModuleStreamsDetails")
    def switch_module_streams_details(self) -> Optional['outputs.ScheduledJobOperationSwitchModuleStreamsDetails']:
        """
        (Updatable) Provides the information used to update a module stream.
        """
        return pulumi.get(self, "switch_module_streams_details")

    @property
    @pulumi.getter(name="windowsUpdateNames")
    def windows_update_names(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
        """
        return pulumi.get(self, "windows_update_names")


@pulumi.output_type
class ScheduledJobOperationManageModuleStreamsDetails(dict):
    def __init__(__self__, *,
                 disables: Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsDisable']] = None,
                 enables: Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsEnable']] = None,
                 installs: Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsInstall']] = None,
                 removes: Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsRemove']] = None):
        """
        :param Sequence['ScheduledJobOperationManageModuleStreamsDetailsDisableArgs'] disables: (Updatable) The set of module streams to disable.
        :param Sequence['ScheduledJobOperationManageModuleStreamsDetailsEnableArgs'] enables: (Updatable) The set of module streams to enable.
        :param Sequence['ScheduledJobOperationManageModuleStreamsDetailsInstallArgs'] installs: (Updatable) The set of module stream profiles to install.
        :param Sequence['ScheduledJobOperationManageModuleStreamsDetailsRemoveArgs'] removes: (Updatable) The set of module stream profiles to remove.
        """
        if disables is not None:
            pulumi.set(__self__, "disables", disables)
        if enables is not None:
            pulumi.set(__self__, "enables", enables)
        if installs is not None:
            pulumi.set(__self__, "installs", installs)
        if removes is not None:
            pulumi.set(__self__, "removes", removes)

    @property
    @pulumi.getter
    def disables(self) -> Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsDisable']]:
        """
        (Updatable) The set of module streams to disable.
        """
        return pulumi.get(self, "disables")

    @property
    @pulumi.getter
    def enables(self) -> Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsEnable']]:
        """
        (Updatable) The set of module streams to enable.
        """
        return pulumi.get(self, "enables")

    @property
    @pulumi.getter
    def installs(self) -> Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsInstall']]:
        """
        (Updatable) The set of module stream profiles to install.
        """
        return pulumi.get(self, "installs")

    @property
    @pulumi.getter
    def removes(self) -> Optional[Sequence['outputs.ScheduledJobOperationManageModuleStreamsDetailsRemove']]:
        """
        (Updatable) The set of module stream profiles to remove.
        """
        return pulumi.get(self, "removes")


@pulumi.output_type
class ScheduledJobOperationManageModuleStreamsDetailsDisable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledJobOperationManageModuleStreamsDetailsDisable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsDisable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsDisable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: (Updatable) The name of a module.
        :param str stream_name: (Updatable) The name of a stream of the specified module.
        :param str software_source_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        (Updatable) The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        (Updatable) The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ScheduledJobOperationManageModuleStreamsDetailsEnable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledJobOperationManageModuleStreamsDetailsEnable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsEnable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsEnable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: (Updatable) The name of a module.
        :param str stream_name: (Updatable) The name of a stream of the specified module.
        :param str software_source_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        (Updatable) The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        (Updatable) The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ScheduledJobOperationManageModuleStreamsDetailsInstall(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "profileName":
            suggest = "profile_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledJobOperationManageModuleStreamsDetailsInstall. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsInstall.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsInstall.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: (Updatable) The name of a module.
        :param str profile_name: (Updatable) The name of a profile of the specified module stream.
        :param str stream_name: (Updatable) The name of a stream of the specified module.
        :param str software_source_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        (Updatable) The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        (Updatable) The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        (Updatable) The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ScheduledJobOperationManageModuleStreamsDetailsRemove(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "profileName":
            suggest = "profile_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledJobOperationManageModuleStreamsDetailsRemove. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsRemove.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledJobOperationManageModuleStreamsDetailsRemove.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: (Updatable) The name of a module.
        :param str profile_name: (Updatable) The name of a profile of the specified module stream.
        :param str stream_name: (Updatable) The name of a stream of the specified module.
        :param str software_source_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        (Updatable) The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        (Updatable) The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        (Updatable) The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class ScheduledJobOperationSwitchModuleStreamsDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleName":
            suggest = "module_name"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "softwareSourceId":
            suggest = "software_source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledJobOperationSwitchModuleStreamsDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledJobOperationSwitchModuleStreamsDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledJobOperationSwitchModuleStreamsDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_name: str,
                 stream_name: str,
                 software_source_id: Optional[str] = None):
        """
        :param str module_name: (Updatable) The name of a module.
        :param str stream_name: (Updatable) The name of a stream of the specified module.
        :param str software_source_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "stream_name", stream_name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        (Updatable) The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        (Updatable) The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "softwareSourceId":
            suggest = "software_source_id"
        elif key == "availabilityAtOci":
            suggest = "availability_at_oci"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 software_source_id: str,
                 availability: Optional[str] = None,
                 availability_at_oci: Optional[str] = None):
        """
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param str availability: Availability of the software source to instances in private data centers or third-party clouds.
        :param str availability_at_oci: Availability of the software source to Oracle Cloud Infrastructure instances.
        """
        pulumi.set(__self__, "software_source_id", software_source_id)
        if availability is not None:
            pulumi.set(__self__, "availability", availability)
        if availability_at_oci is not None:
            pulumi.set(__self__, "availability_at_oci", availability_at_oci)

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        """
        Availability of the software source to instances in private data centers or third-party clouds.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="availabilityAtOci")
    def availability_at_oci(self) -> Optional[str]:
        """
        Availability of the software source to Oracle Cloud Infrastructure instances.
        """
        return pulumi.get(self, "availability_at_oci")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleStreamProfileFilters":
            suggest = "module_stream_profile_filters"
        elif key == "packageFilters":
            suggest = "package_filters"
        elif key == "packageGroupFilters":
            suggest = "package_group_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_stream_profile_filters: Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter']] = None,
                 package_filters: Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageFilter']] = None,
                 package_group_filters: Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter']] = None):
        """
        :param Sequence['SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterArgs'] module_stream_profile_filters: (Updatable) The list of module stream/profile filters.
        :param Sequence['SoftwareSourceCustomSoftwareSourceFilterPackageFilterArgs'] package_filters: (Updatable) The list of package filters.
        :param Sequence['SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterArgs'] package_group_filters: (Updatable) The list of group filters.
        """
        if module_stream_profile_filters is not None:
            pulumi.set(__self__, "module_stream_profile_filters", module_stream_profile_filters)
        if package_filters is not None:
            pulumi.set(__self__, "package_filters", package_filters)
        if package_group_filters is not None:
            pulumi.set(__self__, "package_group_filters", package_group_filters)

    @property
    @pulumi.getter(name="moduleStreamProfileFilters")
    def module_stream_profile_filters(self) -> Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter']]:
        """
        (Updatable) The list of module stream/profile filters.
        """
        return pulumi.get(self, "module_stream_profile_filters")

    @property
    @pulumi.getter(name="packageFilters")
    def package_filters(self) -> Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageFilter']]:
        """
        (Updatable) The list of package filters.
        """
        return pulumi.get(self, "package_filters")

    @property
    @pulumi.getter(name="packageGroupFilters")
    def package_group_filters(self) -> Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter']]:
        """
        (Updatable) The list of group filters.
        """
        return pulumi.get(self, "package_group_filters")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "moduleName":
            suggest = "module_name"
        elif key == "profileName":
            suggest = "profile_name"
        elif key == "streamName":
            suggest = "stream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 module_name: Optional[str] = None,
                 profile_name: Optional[str] = None,
                 stream_name: Optional[str] = None):
        """
        :param str filter_type: (Updatable) The type of the filter.
        :param str module_name: (Updatable) Module name.
        :param str profile_name: (Updatable) Profile name.
        :param str stream_name: (Updatable) Stream name.
        """
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if module_name is not None:
            pulumi.set(__self__, "module_name", module_name)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        (Updatable) The type of the filter.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> Optional[str]:
        """
        (Updatable) Module name.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        """
        (Updatable) Profile name.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[str]:
        """
        (Updatable) Stream name.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilterPackageFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "packageName":
            suggest = "package_name"
        elif key == "packageNamePattern":
            suggest = "package_name_pattern"
        elif key == "packageVersion":
            suggest = "package_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilterPackageFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 package_name: Optional[str] = None,
                 package_name_pattern: Optional[str] = None,
                 package_version: Optional[str] = None):
        """
        :param str filter_type: (Updatable) The type of the filter.
        :param str package_name: (Updatable) The package name.
        :param str package_name_pattern: (Updatable) The package name pattern.
        :param str package_version: (Updatable) The package version, which is denoted by 'version-release', or 'epoch:version-release'.
        """
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_name_pattern is not None:
            pulumi.set(__self__, "package_name_pattern", package_name_pattern)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        (Updatable) The type of the filter.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        """
        (Updatable) The package name.
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageNamePattern")
    def package_name_pattern(self) -> Optional[str]:
        """
        (Updatable) The package name pattern.
        """
        return pulumi.get(self, "package_name_pattern")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[str]:
        """
        (Updatable) The package version, which is denoted by 'version-release', or 'epoch:version-release'.
        """
        return pulumi.get(self, "package_version")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "packageGroups":
            suggest = "package_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 package_groups: Optional[Sequence[str]] = None):
        """
        :param str filter_type: (Updatable) The type of the filter.
        :param Sequence[str] package_groups: (Updatable) List of package group names.
        """
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if package_groups is not None:
            pulumi.set(__self__, "package_groups", package_groups)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        (Updatable) The type of the filter.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageGroups")
    def package_groups(self) -> Optional[Sequence[str]]:
        """
        (Updatable) List of package group names.
        """
        return pulumi.get(self, "package_groups")


@pulumi.output_type
class SoftwareSourceVendorSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceVendorSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceVendorSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceVendorSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str display_name: (Updatable) User-friendly name.
        :param str id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) User-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetEntitlementsEntitlementCollectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 csi: str,
                 items: Sequence['outputs.GetEntitlementsEntitlementCollectionItemResult']):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        :param str csi: A filter to return entitlements that match the given CSI.
        :param Sequence['GetEntitlementsEntitlementCollectionItemArgs'] items: List of entitlements.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "csi", csi)
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def csi(self) -> str:
        """
        A filter to return entitlements that match the given CSI.
        """
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEntitlementsEntitlementCollectionItemResult']:
        """
        List of entitlements.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEntitlementsEntitlementCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 csi: str,
                 vendor_name: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        :param str csi: A filter to return entitlements that match the given CSI.
        :param str vendor_name: A filter to return only resources that match the given vendor name.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "csi", csi)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def csi(self) -> str:
        """
        A filter to return entitlements that match the given CSI.
        """
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        A filter to return only resources that match the given vendor name.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetEntitlementsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetErrataErratumCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetErrataErratumCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetErrataErratumCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetErrataErratumCollectionItemResult(dict):
    def __init__(__self__, *,
                 advisory_severity: str,
                 advisory_type: str,
                 classification_type: str,
                 description: str,
                 from_: str,
                 name: str,
                 os_families: Sequence[str],
                 packages: Sequence['outputs.GetErrataErratumCollectionItemPackageResult'],
                 references: str,
                 related_cves: Sequence[str],
                 repositories: Sequence[str],
                 solution: str,
                 synopsis: str,
                 time_issued: str,
                 time_updated: str):
        """
        :param str advisory_severity: The advisory severity.
        :param str advisory_type: A filter to return only errata that match the given advisory types.
        :param str classification_type: A filter to return only packages that match the given update classification type.
        :param str description: Software source description.
        :param str from_: Information specifying from where the erratum was release.
        :param str name: The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        :param Sequence[str] os_families: The OS families the package belongs to.
        :param Sequence['GetErrataErratumCollectionItemPackageArgs'] packages: List of packages affected by this erratum.
        :param str references: Information describing how to find more information about. the erratum.
        :param Sequence[str] related_cves: List of CVEs applicable to this erratum.
        :param Sequence[str] repositories: List of repository identifiers.
        :param str solution: Information describing how the erratum can be resolved.
        :param str synopsis: Summary description of the erratum.
        :param str time_issued: The date and time the erratum was issued (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_updated: The date and time the erratum was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        pulumi.set(__self__, "advisory_severity", advisory_severity)
        pulumi.set(__self__, "advisory_type", advisory_type)
        pulumi.set(__self__, "classification_type", classification_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_families", os_families)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "related_cves", related_cves)
        pulumi.set(__self__, "repositories", repositories)
        pulumi.set(__self__, "solution", solution)
        pulumi.set(__self__, "synopsis", synopsis)
        pulumi.set(__self__, "time_issued", time_issued)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="advisorySeverity")
    def advisory_severity(self) -> str:
        """
        The advisory severity.
        """
        return pulumi.get(self, "advisory_severity")

    @property
    @pulumi.getter(name="advisoryType")
    def advisory_type(self) -> str:
        """
        A filter to return only errata that match the given advisory types.
        """
        return pulumi.get(self, "advisory_type")

    @property
    @pulumi.getter(name="classificationType")
    def classification_type(self) -> str:
        """
        A filter to return only packages that match the given update classification type.
        """
        return pulumi.get(self, "classification_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        Information specifying from where the erratum was release.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Sequence[str]:
        """
        The OS families the package belongs to.
        """
        return pulumi.get(self, "os_families")

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetErrataErratumCollectionItemPackageResult']:
        """
        List of packages affected by this erratum.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def references(self) -> str:
        """
        Information describing how to find more information about. the erratum.
        """
        return pulumi.get(self, "references")

    @property
    @pulumi.getter(name="relatedCves")
    def related_cves(self) -> Sequence[str]:
        """
        List of CVEs applicable to this erratum.
        """
        return pulumi.get(self, "related_cves")

    @property
    @pulumi.getter
    def repositories(self) -> Sequence[str]:
        """
        List of repository identifiers.
        """
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        Information describing how the erratum can be resolved.
        """
        return pulumi.get(self, "solution")

    @property
    @pulumi.getter
    def synopsis(self) -> str:
        """
        Summary description of the erratum.
        """
        return pulumi.get(self, "synopsis")

    @property
    @pulumi.getter(name="timeIssued")
    def time_issued(self) -> str:
        """
        The date and time the erratum was issued (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_issued")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the erratum was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetErrataErratumCollectionItemPackageResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 checksum: str,
                 checksum_type: str,
                 display_name: str,
                 is_latest: bool,
                 name: str,
                 os_families: Sequence[str],
                 software_sources: Sequence['outputs.GetErrataErratumCollectionItemPackageSoftwareSourceResult'],
                 type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this software was built.
        :param str checksum: Checksum of the package.
        :param str checksum_type: Type of the checksum.
        :param str display_name: Software source name.
        :param bool is_latest: Indicates whether this package is the latest version.
        :param str name: The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        :param Sequence[str] os_families: The OS families the package belongs to.
        :param Sequence['GetErrataErratumCollectionItemPackageSoftwareSourceArgs'] software_sources: List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        :param str type: Type of the package.
        :param str version: Version of the package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_families", os_families)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this software was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the package.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Indicates whether this package is the latest version.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Sequence[str]:
        """
        The OS families the package belongs to.
        """
        return pulumi.get(self, "os_families")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetErrataErratumCollectionItemPackageSoftwareSourceResult']:
        """
        List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetErrataErratumCollectionItemPackageSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetErrataFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetErratumPackageResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 checksum: str,
                 checksum_type: str,
                 display_name: str,
                 is_latest: bool,
                 name: str,
                 os_families: Sequence[str],
                 software_sources: Sequence['outputs.GetErratumPackageSoftwareSourceResult'],
                 type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this software was built.
        :param str checksum: Checksum of the package.
        :param str checksum_type: Type of the checksum.
        :param str display_name: Software source name.
        :param bool is_latest: Indicates whether this package is the latest version.
        :param str name: The erratum name (such as ELSA-2023-34678).
        :param Sequence[str] os_families: The OS families the package belongs to.
        :param Sequence['GetErratumPackageSoftwareSourceArgs'] software_sources: List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        :param str type: Type of the package.
        :param str version: Version of the package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_families", os_families)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this software was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the package.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Indicates whether this package is the latest version.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The erratum name (such as ELSA-2023-34678).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Sequence[str]:
        """
        The OS families the package belongs to.
        """
        return pulumi.get(self, "os_families")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetErratumPackageSoftwareSourceResult']:
        """
        List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetErratumPackageSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetEventDataResult(dict):
    def __init__(__self__, *,
                 additional_details: Sequence['outputs.GetEventDataAdditionalDetailResult'],
                 contents: Sequence['outputs.GetEventDataContentResult'],
                 event_count: int,
                 event_fingerprint: str,
                 operation_type: str,
                 reason: str,
                 status: str,
                 time_first_occurred: str):
        """
        :param Sequence['GetEventDataAdditionalDetailArgs'] additional_details: Provides additional information for the work request associated with an event.
        :param Sequence['GetEventDataContentArgs'] contents: Provides information collected for the exploit attempt event.
        :param int event_count: Number of times the event has occurred.
        :param str event_fingerprint: Fingerprint of the event.
        :param str operation_type: Type of management station operation.
        :param str reason: Reason for the event.
        :param str status: Status of the management station operation.
        :param str time_first_occurred: The date and time that the event first occurred.
        """
        pulumi.set(__self__, "additional_details", additional_details)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "event_count", event_count)
        pulumi.set(__self__, "event_fingerprint", event_fingerprint)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_first_occurred", time_first_occurred)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Sequence['outputs.GetEventDataAdditionalDetailResult']:
        """
        Provides additional information for the work request associated with an event.
        """
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetEventDataContentResult']:
        """
        Provides information collected for the exploit attempt event.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="eventCount")
    def event_count(self) -> int:
        """
        Number of times the event has occurred.
        """
        return pulumi.get(self, "event_count")

    @property
    @pulumi.getter(name="eventFingerprint")
    def event_fingerprint(self) -> str:
        """
        Fingerprint of the event.
        """
        return pulumi.get(self, "event_fingerprint")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        Type of management station operation.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the event.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the management station operation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeFirstOccurred")
    def time_first_occurred(self) -> str:
        """
        The date and time that the event first occurred.
        """
        return pulumi.get(self, "time_first_occurred")


@pulumi.output_type
class GetEventDataAdditionalDetailResult(dict):
    def __init__(__self__, *,
                 exploit_cves: Sequence[str],
                 initiator_id: str,
                 vmcores: Sequence['outputs.GetEventDataAdditionalDetailVmcoreResult'],
                 work_request_ids: Sequence[str]):
        """
        :param Sequence[str] exploit_cves: List of CVEs in the exploit.
        :param str initiator_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that triggered the event, such as scheduled job id.
        :param Sequence['GetEventDataAdditionalDetailVmcoreArgs'] vmcores: Kernel event vmcore details
        :param Sequence[str] work_request_ids: List of all work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with the event.
        """
        pulumi.set(__self__, "exploit_cves", exploit_cves)
        pulumi.set(__self__, "initiator_id", initiator_id)
        pulumi.set(__self__, "vmcores", vmcores)
        pulumi.set(__self__, "work_request_ids", work_request_ids)

    @property
    @pulumi.getter(name="exploitCves")
    def exploit_cves(self) -> Sequence[str]:
        """
        List of CVEs in the exploit.
        """
        return pulumi.get(self, "exploit_cves")

    @property
    @pulumi.getter(name="initiatorId")
    def initiator_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that triggered the event, such as scheduled job id.
        """
        return pulumi.get(self, "initiator_id")

    @property
    @pulumi.getter
    def vmcores(self) -> Sequence['outputs.GetEventDataAdditionalDetailVmcoreResult']:
        """
        Kernel event vmcore details
        """
        return pulumi.get(self, "vmcores")

    @property
    @pulumi.getter(name="workRequestIds")
    def work_request_ids(self) -> Sequence[str]:
        """
        List of all work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with the event.
        """
        return pulumi.get(self, "work_request_ids")


@pulumi.output_type
class GetEventDataAdditionalDetailVmcoreResult(dict):
    def __init__(__self__, *,
                 backtrace: str,
                 component: str):
        """
        :param str backtrace: Kernel vmcore backtrace.
        :param str component: Kernel vmcore component.
        """
        pulumi.set(__self__, "backtrace", backtrace)
        pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def backtrace(self) -> str:
        """
        Kernel vmcore backtrace.
        """
        return pulumi.get(self, "backtrace")

    @property
    @pulumi.getter
    def component(self) -> str:
        """
        Kernel vmcore component.
        """
        return pulumi.get(self, "component")


@pulumi.output_type
class GetEventDataContentResult(dict):
    def __init__(__self__, *,
                 content_availability: str,
                 content_location: str,
                 exploit_detection_log_content: str,
                 exploit_object_store_location: str,
                 size: int,
                 type: str):
        """
        :param str content_availability: Crash content availability status:
               * 'NOT_AVAILABLE' indicates the content is not available on the instance nor in the service
               * 'AVAILABLE_ON_INSTANCE' indicates the content is only available on the instance.
               * 'AVAILABLE_ON_SERVICE' indicates the content is only available on the service.
               * 'AVAILABLE_ON_INSTANCE_AND_SERVICE' indicates the content is available both on the instance and the service
               * 'AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS' indicates the content is available on the instance and its upload to the service is in progress.
        :param str content_location: Location of the Kernel event content.
        :param str exploit_detection_log_content: The content of the exploit detection log.
        :param str exploit_object_store_location: The location of the exploit detection log within object storage.
        :param int size: Size of the event content.
        :param str type: Event type:
               * `KERNEL_OOPS` - Used to identify a kernel panic condition event
               * `KERNEL_CRASH` - Used to identify an internal fatal kernel error that cannot be safely recovered from
               * `EXPLOIT_ATTEMPT` - Used to identify a known exploit detection as identified by Ksplice
               * `SOFTWARE_UPDATE` - Software updates - Packages
               * `KSPLICE_UPDATE` - Ksplice updates
               * `SOFTWARE_SOURCE` - Software source
               * `AGENT` - Agent
               * `MANAGEMENT_STATION` - Management Station
        """
        pulumi.set(__self__, "content_availability", content_availability)
        pulumi.set(__self__, "content_location", content_location)
        pulumi.set(__self__, "exploit_detection_log_content", exploit_detection_log_content)
        pulumi.set(__self__, "exploit_object_store_location", exploit_object_store_location)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contentAvailability")
    def content_availability(self) -> str:
        """
        Crash content availability status:
        * 'NOT_AVAILABLE' indicates the content is not available on the instance nor in the service
        * 'AVAILABLE_ON_INSTANCE' indicates the content is only available on the instance.
        * 'AVAILABLE_ON_SERVICE' indicates the content is only available on the service.
        * 'AVAILABLE_ON_INSTANCE_AND_SERVICE' indicates the content is available both on the instance and the service
        * 'AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS' indicates the content is available on the instance and its upload to the service is in progress.
        """
        return pulumi.get(self, "content_availability")

    @property
    @pulumi.getter(name="contentLocation")
    def content_location(self) -> str:
        """
        Location of the Kernel event content.
        """
        return pulumi.get(self, "content_location")

    @property
    @pulumi.getter(name="exploitDetectionLogContent")
    def exploit_detection_log_content(self) -> str:
        """
        The content of the exploit detection log.
        """
        return pulumi.get(self, "exploit_detection_log_content")

    @property
    @pulumi.getter(name="exploitObjectStoreLocation")
    def exploit_object_store_location(self) -> str:
        """
        The location of the exploit detection log within object storage.
        """
        return pulumi.get(self, "exploit_object_store_location")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size of the event content.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Event type:
        * `KERNEL_OOPS` - Used to identify a kernel panic condition event
        * `KERNEL_CRASH` - Used to identify an internal fatal kernel error that cannot be safely recovered from
        * `EXPLOIT_ATTEMPT` - Used to identify a known exploit detection as identified by Ksplice
        * `SOFTWARE_UPDATE` - Software updates - Packages
        * `KSPLICE_UPDATE` - Ksplice updates
        * `SOFTWARE_SOURCE` - Software source
        * `AGENT` - Agent
        * `MANAGEMENT_STATION` - Management Station
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEventSystemDetailResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 ksplice_effective_kernel_version: str,
                 os_family: str,
                 os_kernel_release: str,
                 os_kernel_version: str,
                 os_name: str,
                 os_system_version: str):
        """
        :param str architecture: Architecture type.
        :param str ksplice_effective_kernel_version: Version of the Ksplice effective kernel.
        :param str os_family: Operating system type.
        :param str os_kernel_release: Release of the kernel.
        :param str os_kernel_version: Version of the kernel.
        :param str os_name: Name of the operating system.
        :param str os_system_version: Version of the operating system.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "ksplice_effective_kernel_version", ksplice_effective_kernel_version)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "os_kernel_release", os_kernel_release)
        pulumi.set(__self__, "os_kernel_version", os_kernel_version)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_system_version", os_system_version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        Architecture type.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="kspliceEffectiveKernelVersion")
    def ksplice_effective_kernel_version(self) -> str:
        """
        Version of the Ksplice effective kernel.
        """
        return pulumi.get(self, "ksplice_effective_kernel_version")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        Operating system type.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="osKernelRelease")
    def os_kernel_release(self) -> str:
        """
        Release of the kernel.
        """
        return pulumi.get(self, "os_kernel_release")

    @property
    @pulumi.getter(name="osKernelVersion")
    def os_kernel_version(self) -> str:
        """
        Version of the kernel.
        """
        return pulumi.get(self, "os_kernel_version")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Name of the operating system.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osSystemVersion")
    def os_system_version(self) -> str:
        """
        Version of the operating system.
        """
        return pulumi.get(self, "os_system_version")


@pulumi.output_type
class GetEventsEventCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetEventsEventCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetEventsEventCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEventsEventCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 datas: Sequence['outputs.GetEventsEventCollectionItemDataResult'],
                 defined_tags: Mapping[str, Any],
                 event_details: str,
                 event_id: str,
                 event_summary: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_managed_by_autonomous_linux: bool,
                 lifecycle_details: str,
                 resource_id: str,
                 state: str,
                 system_details: Sequence['outputs.GetEventsEventCollectionItemSystemDetailResult'],
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_occurred: str,
                 time_updated: str,
                 type: str):
        """
        :param str compartment_id: The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Sequence['GetEventsEventCollectionItemDataArgs'] datas: Provides additional information for a management station event.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str event_details: Details of an event.
        :param str event_summary: A filter to return only events whose summary matches the given value.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the event.
        :param bool is_managed_by_autonomous_linux: Indicates whether to list only resources managed by the Autonomous Linux service.
        :param str lifecycle_details: Describes the current state of the event in more detail. For example, the  message can provide actionable information for a resource in the 'FAILED' state.
        :param str resource_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource. This filter returns resources associated with the specified resource.
        :param str state: A filter to return only events that match the state provided. The state value is case-insensitive.
        :param Sequence['GetEventsEventCollectionItemSystemDetailArgs'] system_details: Provides information about the system architecture and operating system.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the Event was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_occurred: The date and time that the event occurred.
        :param str time_updated: The date and time that the event was updated (in [RFC 3339](https://tools.ietf.org/html/rfc3339) format). Example: `2016-08-25T21:10:29.600Z`
        :param str type: A filter to return only resources whose type matches the given value.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "datas", datas)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "event_details", event_details)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_summary", event_summary)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_managed_by_autonomous_linux", is_managed_by_autonomous_linux)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_details", system_details)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_occurred", time_occurred)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetEventsEventCollectionItemDataResult']:
        """
        Provides additional information for a management station event.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="eventDetails")
    def event_details(self) -> str:
        """
        Details of an event.
        """
        return pulumi.get(self, "event_details")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> str:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventSummary")
    def event_summary(self) -> str:
        """
        A filter to return only events whose summary matches the given value.
        """
        return pulumi.get(self, "event_summary")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the event.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManagedByAutonomousLinux")
    def is_managed_by_autonomous_linux(self) -> bool:
        """
        Indicates whether to list only resources managed by the Autonomous Linux service.
        """
        return pulumi.get(self, "is_managed_by_autonomous_linux")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Describes the current state of the event in more detail. For example, the  message can provide actionable information for a resource in the 'FAILED' state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource. This filter returns resources associated with the specified resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only events that match the state provided. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemDetails")
    def system_details(self) -> Sequence['outputs.GetEventsEventCollectionItemSystemDetailResult']:
        """
        Provides information about the system architecture and operating system.
        """
        return pulumi.get(self, "system_details")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Event was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOccurred")
    def time_occurred(self) -> str:
        """
        The date and time that the event occurred.
        """
        return pulumi.get(self, "time_occurred")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the event was updated (in [RFC 3339](https://tools.ietf.org/html/rfc3339) format). Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A filter to return only resources whose type matches the given value.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEventsEventCollectionItemDataResult(dict):
    def __init__(__self__, *,
                 additional_details: Sequence['outputs.GetEventsEventCollectionItemDataAdditionalDetailResult'],
                 contents: Sequence['outputs.GetEventsEventCollectionItemDataContentResult'],
                 event_count: int,
                 event_fingerprint: str,
                 operation_type: str,
                 reason: str,
                 status: str,
                 time_first_occurred: str):
        """
        :param Sequence['GetEventsEventCollectionItemDataAdditionalDetailArgs'] additional_details: Provides additional information for the work request associated with an event.
        :param Sequence['GetEventsEventCollectionItemDataContentArgs'] contents: Provides information collected for the exploit attempt event.
        :param int event_count: Number of times the event has occurred.
        :param str event_fingerprint: The eventFingerprint of the KernelEventData.
        :param str operation_type: Type of management station operation.
        :param str reason: Reason for the event.
        :param str status: Status of the management station operation.
        :param str time_first_occurred: The date and time that the event first occurred.
        """
        pulumi.set(__self__, "additional_details", additional_details)
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "event_count", event_count)
        pulumi.set(__self__, "event_fingerprint", event_fingerprint)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_first_occurred", time_first_occurred)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Sequence['outputs.GetEventsEventCollectionItemDataAdditionalDetailResult']:
        """
        Provides additional information for the work request associated with an event.
        """
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetEventsEventCollectionItemDataContentResult']:
        """
        Provides information collected for the exploit attempt event.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="eventCount")
    def event_count(self) -> int:
        """
        Number of times the event has occurred.
        """
        return pulumi.get(self, "event_count")

    @property
    @pulumi.getter(name="eventFingerprint")
    def event_fingerprint(self) -> str:
        """
        The eventFingerprint of the KernelEventData.
        """
        return pulumi.get(self, "event_fingerprint")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        Type of management station operation.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        Reason for the event.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the management station operation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeFirstOccurred")
    def time_first_occurred(self) -> str:
        """
        The date and time that the event first occurred.
        """
        return pulumi.get(self, "time_first_occurred")


@pulumi.output_type
class GetEventsEventCollectionItemDataAdditionalDetailResult(dict):
    def __init__(__self__, *,
                 exploit_cves: Sequence[str],
                 initiator_id: str,
                 vmcores: Sequence['outputs.GetEventsEventCollectionItemDataAdditionalDetailVmcoreResult'],
                 work_request_ids: Sequence[str]):
        """
        :param Sequence[str] exploit_cves: List of CVEs in the exploit.
        :param str initiator_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that triggered the event, such as scheduled job id.
        :param Sequence['GetEventsEventCollectionItemDataAdditionalDetailVmcoreArgs'] vmcores: Kernel event vmcore details
        :param Sequence[str] work_request_ids: List of all work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with the event.
        """
        pulumi.set(__self__, "exploit_cves", exploit_cves)
        pulumi.set(__self__, "initiator_id", initiator_id)
        pulumi.set(__self__, "vmcores", vmcores)
        pulumi.set(__self__, "work_request_ids", work_request_ids)

    @property
    @pulumi.getter(name="exploitCves")
    def exploit_cves(self) -> Sequence[str]:
        """
        List of CVEs in the exploit.
        """
        return pulumi.get(self, "exploit_cves")

    @property
    @pulumi.getter(name="initiatorId")
    def initiator_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that triggered the event, such as scheduled job id.
        """
        return pulumi.get(self, "initiator_id")

    @property
    @pulumi.getter
    def vmcores(self) -> Sequence['outputs.GetEventsEventCollectionItemDataAdditionalDetailVmcoreResult']:
        """
        Kernel event vmcore details
        """
        return pulumi.get(self, "vmcores")

    @property
    @pulumi.getter(name="workRequestIds")
    def work_request_ids(self) -> Sequence[str]:
        """
        List of all work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with the event.
        """
        return pulumi.get(self, "work_request_ids")


@pulumi.output_type
class GetEventsEventCollectionItemDataAdditionalDetailVmcoreResult(dict):
    def __init__(__self__, *,
                 backtrace: str,
                 component: str):
        """
        :param str backtrace: Kernel vmcore backtrace.
        :param str component: Kernel vmcore component.
        """
        pulumi.set(__self__, "backtrace", backtrace)
        pulumi.set(__self__, "component", component)

    @property
    @pulumi.getter
    def backtrace(self) -> str:
        """
        Kernel vmcore backtrace.
        """
        return pulumi.get(self, "backtrace")

    @property
    @pulumi.getter
    def component(self) -> str:
        """
        Kernel vmcore component.
        """
        return pulumi.get(self, "component")


@pulumi.output_type
class GetEventsEventCollectionItemDataContentResult(dict):
    def __init__(__self__, *,
                 content_availability: str,
                 content_location: str,
                 exploit_detection_log_content: str,
                 exploit_object_store_location: str,
                 size: int,
                 type: str):
        """
        :param str content_availability: Crash content availability status:
               * 'NOT_AVAILABLE' indicates the content is not available on the instance nor in the service
               * 'AVAILABLE_ON_INSTANCE' indicates the content is only available on the instance.
               * 'AVAILABLE_ON_SERVICE' indicates the content is only available on the service.
               * 'AVAILABLE_ON_INSTANCE_AND_SERVICE' indicates the content is available both on the instance and the service
               * 'AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS' indicates the content is available on the instance and its upload to the service is in progress.
        :param str content_location: Location of the Kernel event content.
        :param str exploit_detection_log_content: The content of the exploit detection log.
        :param str exploit_object_store_location: The location of the exploit detection log within object storage.
        :param int size: Size of the event content.
        :param str type: A filter to return only resources whose type matches the given value.
        """
        pulumi.set(__self__, "content_availability", content_availability)
        pulumi.set(__self__, "content_location", content_location)
        pulumi.set(__self__, "exploit_detection_log_content", exploit_detection_log_content)
        pulumi.set(__self__, "exploit_object_store_location", exploit_object_store_location)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contentAvailability")
    def content_availability(self) -> str:
        """
        Crash content availability status:
        * 'NOT_AVAILABLE' indicates the content is not available on the instance nor in the service
        * 'AVAILABLE_ON_INSTANCE' indicates the content is only available on the instance.
        * 'AVAILABLE_ON_SERVICE' indicates the content is only available on the service.
        * 'AVAILABLE_ON_INSTANCE_AND_SERVICE' indicates the content is available both on the instance and the service
        * 'AVAILABLE_ON_INSTANCE_UPLOAD_IN_PROGRESS' indicates the content is available on the instance and its upload to the service is in progress.
        """
        return pulumi.get(self, "content_availability")

    @property
    @pulumi.getter(name="contentLocation")
    def content_location(self) -> str:
        """
        Location of the Kernel event content.
        """
        return pulumi.get(self, "content_location")

    @property
    @pulumi.getter(name="exploitDetectionLogContent")
    def exploit_detection_log_content(self) -> str:
        """
        The content of the exploit detection log.
        """
        return pulumi.get(self, "exploit_detection_log_content")

    @property
    @pulumi.getter(name="exploitObjectStoreLocation")
    def exploit_object_store_location(self) -> str:
        """
        The location of the exploit detection log within object storage.
        """
        return pulumi.get(self, "exploit_object_store_location")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size of the event content.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A filter to return only resources whose type matches the given value.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEventsEventCollectionItemSystemDetailResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 ksplice_effective_kernel_version: str,
                 os_family: str,
                 os_kernel_release: str,
                 os_kernel_version: str,
                 os_name: str,
                 os_system_version: str):
        """
        :param str architecture: Architecture type.
        :param str ksplice_effective_kernel_version: Version of the Ksplice effective kernel.
        :param str os_family: Operating system type.
        :param str os_kernel_release: Release of the kernel.
        :param str os_kernel_version: Version of the kernel.
        :param str os_name: Name of the operating system.
        :param str os_system_version: Version of the operating system.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "ksplice_effective_kernel_version", ksplice_effective_kernel_version)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "os_kernel_release", os_kernel_release)
        pulumi.set(__self__, "os_kernel_version", os_kernel_version)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_system_version", os_system_version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        Architecture type.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="kspliceEffectiveKernelVersion")
    def ksplice_effective_kernel_version(self) -> str:
        """
        Version of the Ksplice effective kernel.
        """
        return pulumi.get(self, "ksplice_effective_kernel_version")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        Operating system type.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="osKernelRelease")
    def os_kernel_release(self) -> str:
        """
        Release of the kernel.
        """
        return pulumi.get(self, "os_kernel_release")

    @property
    @pulumi.getter(name="osKernelVersion")
    def os_kernel_version(self) -> str:
        """
        Version of the kernel.
        """
        return pulumi.get(self, "os_kernel_version")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Name of the operating system.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osSystemVersion")
    def os_system_version(self) -> str:
        """
        Version of the operating system.
        """
        return pulumi.get(self, "os_system_version")


@pulumi.output_type
class GetEventsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLifecycleEnvironmentManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentStageResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_environment_id: str,
                 location: str,
                 managed_instance_ids: Sequence['outputs.GetLifecycleEnvironmentStageManagedInstanceIdResult'],
                 os_family: str,
                 rank: int,
                 software_source_ids: Sequence['outputs.GetLifecycleEnvironmentStageSoftwareSourceIdResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_modified: str,
                 vendor_name: str):
        """
        :param str arch_type: The CPU architecture of the managed instances in the lifecycle stage.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the lifecycle stage.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: Software source name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param str lifecycle_environment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment.
        :param str location: The location of managed instances associated with the lifecycle stage.
        :param Sequence['GetLifecycleEnvironmentStageManagedInstanceIdArgs'] managed_instance_ids: The list of managed instances associated with the lifecycle stage.
        :param str os_family: The operating system of the managed instances in the lifecycle stage.
        :param int rank: User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        :param Sequence['GetLifecycleEnvironmentStageSoftwareSourceIdArgs'] software_source_ids: Provides identifying information for the specified software source.
        :param str state: The current state of the lifecycle environment.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_modified: The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: The vendor of the operating system used by the managed instances in the lifecycle environment.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "rank", rank)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        The CPU architecture of the managed instances in the lifecycle stage.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the lifecycle stage.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of managed instances associated with the lifecycle stage.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Sequence['outputs.GetLifecycleEnvironmentStageManagedInstanceIdResult']:
        """
        The list of managed instances associated with the lifecycle stage.
        """
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        The operating system of the managed instances in the lifecycle stage.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def rank(self) -> int:
        """
        User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence['outputs.GetLifecycleEnvironmentStageSoftwareSourceIdResult']:
        """
        Provides identifying information for the specified software source.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the lifecycle environment.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        The vendor of the operating system used by the managed instances in the lifecycle environment.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleEnvironmentStageManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentStageSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetLifecycleEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 location: str,
                 os_family: str,
                 stages: Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_modified: str,
                 vendor_name: str):
        """
        :param str arch_type: A filter to return only profiles that match the given archType.
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param str location: A filter to return only resources whose location matches the given value.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param Sequence['GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageArgs'] stages: User-specified list of lifecycle stages used within the lifecycle environment.
        :param str state: A filter to return only the lifecycle environments that match the display name given.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_modified: The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: The vendor of the operating system used by the managed instances in the lifecycle environment.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "stages", stages)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only profiles that match the given archType.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        A filter to return only resources whose location matches the given value.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def stages(self) -> Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult']:
        """
        User-specified list of lifecycle stages used within the lifecycle environment.
        """
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only the lifecycle environments that match the display name given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        The vendor of the operating system used by the managed instances in the lifecycle environment.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_environment_display_name: str,
                 lifecycle_environment_id: str,
                 location: str,
                 managed_instances: int,
                 os_family: str,
                 rank: int,
                 software_source_ids: Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_modified: str,
                 vendor_name: str):
        """
        :param str arch_type: A filter to return only profiles that match the given archType.
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A filter to return resources that match the given display names.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param str lifecycle_environment_display_name: The user-friendly name for the lifecycle environment. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str lifecycle_environment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment.
        :param str location: A filter to return only resources whose location matches the given value.
        :param int managed_instances: The number of managed instances associated with the lifecycle stage.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param int rank: User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        :param Sequence['GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdArgs'] software_source_ids: Provides identifying information for the specified software source.
        :param str state: A filter to return only the lifecycle environments that match the display name given.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_modified: The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: The vendor of the operating system used by the managed instances in the lifecycle environment.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_environment_display_name", lifecycle_environment_display_name)
        pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "managed_instances", managed_instances)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "rank", rank)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only profiles that match the given archType.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentDisplayName")
    def lifecycle_environment_display_name(self) -> str:
        """
        The user-friendly name for the lifecycle environment. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "lifecycle_environment_display_name")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        A filter to return only resources whose location matches the given value.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedInstances")
    def managed_instances(self) -> int:
        """
        The number of managed instances associated with the lifecycle stage.
        """
        return pulumi.get(self, "managed_instances")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def rank(self) -> int:
        """
        User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult']:
        """
        Provides identifying information for the specified software source.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only the lifecycle environments that match the display name given.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the lifecycle environment was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The time the lifecycle environment was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        The vendor of the operating system used by the managed instances in the lifecycle environment.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetLifecycleStageManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleStageSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetLifecycleStagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_environment_display_name: str,
                 lifecycle_environment_id: str,
                 location: str,
                 managed_instances: int,
                 os_family: str,
                 rank: int,
                 software_source_ids: Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_modified: str,
                 vendor_name: str):
        """
        :param str arch_type: A filter to return only profiles that match the given archType.
        :param str compartment_id: The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A filter to return resources that match the given display names.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param str lifecycle_environment_display_name: The user-friendly name for the lifecycle environment. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str lifecycle_environment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment that contains the lifecycle stage.
        :param str location: A filter to return only resources whose location matches the given value.
        :param int managed_instances: The number of managed instances associated with the lifecycle stage.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param int rank: User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        :param Sequence['GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdArgs'] software_source_ids: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
        :param str state: A filter to return only lifecycle stages whose lifecycle state matches the given lifecycle state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the lifecycle stage was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_modified: The time the lifecycle stage was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: The vendor of the operating system used by the managed instances in the lifecycle stage.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_environment_display_name", lifecycle_environment_display_name)
        pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "managed_instances", managed_instances)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "rank", rank)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only profiles that match the given archType.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentDisplayName")
    def lifecycle_environment_display_name(self) -> str:
        """
        The user-friendly name for the lifecycle environment. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "lifecycle_environment_display_name")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment that contains the lifecycle stage.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        A filter to return only resources whose location matches the given value.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedInstances")
    def managed_instances(self) -> int:
        """
        The number of managed instances associated with the lifecycle stage.
        """
        return pulumi.get(self, "managed_instances")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def rank(self) -> int:
        """
        User-specified rank for the lifecycle stage. Rank determines the hierarchy of the lifecycle stages within the lifecycle environment.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult']:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only lifecycle stages whose lifecycle state matches the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the lifecycle stage was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The time the lifecycle stage was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        The vendor of the operating system used by the managed instances in the lifecycle stage.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceAutonomousSettingResult(dict):
    def __init__(__self__, *,
                 is_data_collection_authorized: bool,
                 scheduled_job_id: str):
        """
        :param bool is_data_collection_authorized: Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        pulumi.set(__self__, "is_data_collection_authorized", is_data_collection_authorized)
        pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)

    @property
    @pulumi.getter(name="isDataCollectionAuthorized")
    def is_data_collection_authorized(self) -> bool:
        """
        Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        """
        return pulumi.get(self, "is_data_collection_authorized")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        return pulumi.get(self, "scheduled_job_id")


@pulumi.output_type
class GetManagedInstanceAvailablePackagesAvailablePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemArgs'] items: List of available packages.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemResult']:
        """
        List of available packages.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 display_name: str,
                 name: str,
                 package_classification: str,
                 software_sources: Sequence['outputs.GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSourceResult'],
                 type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this package was built.
        :param str display_name: A filter to return resources that match the given display names.
        :param str name: Unique identifier for the package.
        :param str package_classification: Status of the software package.
        :param Sequence['GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSourceArgs'] software_sources: List of software sources that provide the software package.
        :param str type: Type of the package.
        :param str version: Version of the installed package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_classification", package_classification)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this package was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageClassification")
    def package_classification(self) -> str:
        """
        Status of the software package.
        """
        return pulumi.get(self, "package_classification")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSourceResult']:
        """
        List of software sources that provide the software package.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the installed package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceAvailablePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Unique identifier for the package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemArgs'] items: List of available software sources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult']:
        """
        List of available software sources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 display_name: str,
                 id: str):
        """
        :param str compartment_id: The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstanceAvailableSoftwareSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItemArgs'] items: List of available Windows updates.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItemResult']:
        """
        List of available Windows updates.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItemResult(dict):
    def __init__(__self__, *,
                 installable: str,
                 is_reboot_required_for_installation: bool,
                 name: str,
                 update_id: str,
                 update_type: str):
        """
        :param str installable: Indicates whether the update can be installed using the service.
        :param bool is_reboot_required_for_installation: Indicates whether a reboot is required to complete the installation of this update.
        :param str name: A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        :param str update_id: Unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        :param str update_type: The type of Windows update.
        """
        pulumi.set(__self__, "installable", installable)
        pulumi.set(__self__, "is_reboot_required_for_installation", is_reboot_required_for_installation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_id", update_id)
        pulumi.set(__self__, "update_type", update_type)

    @property
    @pulumi.getter
    def installable(self) -> str:
        """
        Indicates whether the update can be installed using the service.
        """
        return pulumi.get(self, "installable")

    @property
    @pulumi.getter(name="isRebootRequiredForInstallation")
    def is_reboot_required_for_installation(self) -> bool:
        """
        Indicates whether a reboot is required to complete the installation of this update.
        """
        return pulumi.get(self, "is_reboot_required_for_installation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateId")
    def update_id(self) -> str:
        """
        Unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "update_id")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> str:
        """
        The type of Windows update.
        """
        return pulumi.get(self, "update_type")


@pulumi.output_type
class GetManagedInstanceAvailableWindowsUpdatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceErrataFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemArgs'] items: List of errata.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemResult']:
        """
        List of errata.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 advisory_type: str,
                 name: str,
                 packages: Sequence['outputs.GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackageResult'],
                 related_cves: Sequence[str],
                 synopsis: str,
                 time_issued: str):
        """
        :param str advisory_type: The advisory type of the erratum.
        :param str name: The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        :param Sequence['GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackageArgs'] packages: The list of packages affected by this erratum.
        :param Sequence[str] related_cves: The list of CVEs applicable to this erratum.
        :param str synopsis: A summary description of the erratum.
        :param str time_issued: The date and time the package was issued by a providing erratum (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        pulumi.set(__self__, "advisory_type", advisory_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "related_cves", related_cves)
        pulumi.set(__self__, "synopsis", synopsis)
        pulumi.set(__self__, "time_issued", time_issued)

    @property
    @pulumi.getter(name="advisoryType")
    def advisory_type(self) -> str:
        """
        The advisory type of the erratum.
        """
        return pulumi.get(self, "advisory_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackageResult']:
        """
        The list of packages affected by this erratum.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="relatedCves")
    def related_cves(self) -> Sequence[str]:
        """
        The list of CVEs applicable to this erratum.
        """
        return pulumi.get(self, "related_cves")

    @property
    @pulumi.getter
    def synopsis(self) -> str:
        """
        A summary description of the erratum.
        """
        return pulumi.get(self, "synopsis")

    @property
    @pulumi.getter(name="timeIssued")
    def time_issued(self) -> str:
        """
        The date and time the package was issued by a providing erratum (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_issued")


@pulumi.output_type
class GetManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackageResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 display_name: str,
                 name: str,
                 type: str,
                 version: str):
        """
        :param str architecture: The CPU architecture type for which this package was built.
        :param str display_name: Full package name in NERVA format. This value should be unique.
        :param str name: The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        :param str type: Type of the package.
        :param str version: The version of the software package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The CPU architecture type for which this package was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Full package name in NERVA format. This value should be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the software package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagedInstanceGroupAutonomousSettingResult(dict):
    def __init__(__self__, *,
                 is_data_collection_authorized: bool,
                 scheduled_job_id: str):
        """
        :param bool is_data_collection_authorized: Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        pulumi.set(__self__, "is_data_collection_authorized", is_data_collection_authorized)
        pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)

    @property
    @pulumi.getter(name="isDataCollectionAuthorized")
    def is_data_collection_authorized(self) -> bool:
        """
        Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        """
        return pulumi.get(self, "is_data_collection_authorized")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        return pulumi.get(self, "scheduled_job_id")


@pulumi.output_type
class GetManagedInstanceGroupAvailableModulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The resource name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemArgs'] items: List of available modules.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult']:
        """
        List of available modules.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 software_source_id: str):
        """
        :param str name: The resource name.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that provides the module.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that provides the module.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Unique identifier for the package. Note that this is not an OCID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package. Note that this is not an OCID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemArgs'] items: List of available packages.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult']:
        """
        List of available packages.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 display_name: str,
                 is_latest: bool,
                 name: str,
                 software_sources: Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult'],
                 type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this package was built.
        :param str display_name: A filter to return resources that match the given display names.
        :param bool is_latest: Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        :param str name: Unique identifier for the package. Note that this is not an OCID.
        :param Sequence['GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceArgs'] software_sources: List of software sources that provide the software package.
        :param str type: Type of the package.
        :param str version: Version of the available package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this package was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package. Note that this is not an OCID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult']:
        """
        List of software sources that provide the software package.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the available package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemArgs'] items: List of available software sources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult']:
        """
        List of available software sources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 display_name: str,
                 id: str):
        """
        :param str compartment_id: The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstanceGroupAvailableSoftwareSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupInstalledPackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the package that is installed on the managed instance group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the package that is installed on the managed instance group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItemArgs'] items: List of installed packages.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItemResult']:
        """
        List of installed packages.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 name: str):
        """
        :param str architecture: The architecture of the package that is installed on the managed instance group.
        :param str name: The name of the package that is installed on the managed instance group.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture of the package that is installed on the managed instance group.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the package that is installed on the managed instance group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedInstanceGroupModulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The resource name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItemArgs'] items: List of module streams.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItemResult']:
        """
        List of module streams.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 enabled_stream: str,
                 installed_profiles: Sequence[str],
                 name: str,
                 software_source_id: str):
        """
        :param str enabled_stream: The name of the module stream that is enabled for the group.
        :param Sequence[str] installed_profiles: The list of installed profiles under the currently enabled module stream.
        :param str name: The resource name.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that provides this module stream.
        """
        pulumi.set(__self__, "enabled_stream", enabled_stream)
        pulumi.set(__self__, "installed_profiles", installed_profiles)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="enabledStream")
    def enabled_stream(self) -> str:
        """
        The name of the module stream that is enabled for the group.
        """
        return pulumi.get(self, "enabled_stream")

    @property
    @pulumi.getter(name="installedProfiles")
    def installed_profiles(self) -> Sequence[str]:
        """
        The list of installed profiles under the currently enabled module stream.
        """
        return pulumi.get(self, "installed_profiles")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that provides this module stream.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class GetManagedInstanceGroupSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 autonomous_settings: Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSettingResult'],
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_managed_by_autonomous_linux: bool,
                 location: str,
                 managed_instance_count: int,
                 managed_instance_ids: Sequence[str],
                 notification_topic_id: str,
                 os_family: str,
                 pending_job_count: int,
                 software_source_ids: Sequence[str],
                 software_sources: Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_modified: str,
                 vendor_name: str):
        """
        :param str arch_type: A filter to return only profiles that match the given archType.
        :param Sequence['GetManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSettingArgs'] autonomous_settings: Settings for the Autonomous Linux service.
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_managed_by_autonomous_linux: Indicates whether to list only resources managed by the Autonomous Linux service.
        :param str location: A filter to return only resources whose location matches the given value.
        :param int managed_instance_count: The number of managed instances in the group.
        :param Sequence[str] managed_instance_ids: The list of managed instance [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) attached to the managed instance group.
        :param str notification_topic_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Oracle Notifications service (ONS) topic. ONS is the channel used to send notifications to the customer.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param int pending_job_count: The number of scheduled jobs pending against the managed instance group.
        :param Sequence[str] software_source_ids: The list of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that the managed instance group will use.
        :param Sequence['GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceArgs'] software_sources: The list of software sources that the managed instance group will use.
        :param str state: A filter to return only managed instance groups that are in the specified state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the managed instance group was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_modified: The time the managed instance group was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: The vendor of the operating system used by the managed instances in the group.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "autonomous_settings", autonomous_settings)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_managed_by_autonomous_linux", is_managed_by_autonomous_linux)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "managed_instance_count", managed_instance_count)
        pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        pulumi.set(__self__, "notification_topic_id", notification_topic_id)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "pending_job_count", pending_job_count)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only profiles that match the given archType.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="autonomousSettings")
    def autonomous_settings(self) -> Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSettingResult']:
        """
        Settings for the Autonomous Linux service.
        """
        return pulumi.get(self, "autonomous_settings")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManagedByAutonomousLinux")
    def is_managed_by_autonomous_linux(self) -> bool:
        """
        Indicates whether to list only resources managed by the Autonomous Linux service.
        """
        return pulumi.get(self, "is_managed_by_autonomous_linux")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        A filter to return only resources whose location matches the given value.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> int:
        """
        The number of managed instances in the group.
        """
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Sequence[str]:
        """
        The list of managed instance [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) attached to the managed instance group.
        """
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="notificationTopicId")
    def notification_topic_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Oracle Notifications service (ONS) topic. ONS is the channel used to send notifications to the customer.
        """
        return pulumi.get(self, "notification_topic_id")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="pendingJobCount")
    def pending_job_count(self) -> int:
        """
        The number of scheduled jobs pending against the managed instance group.
        """
        return pulumi.get(self, "pending_job_count")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence[str]:
        """
        The list of software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that the managed instance group will use.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult']:
        """
        The list of software sources that the managed instance group will use.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only managed instance groups that are in the specified state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the managed instance group was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The time the managed instance group was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        The vendor of the operating system used by the managed instances in the group.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSettingResult(dict):
    def __init__(__self__, *,
                 is_data_collection_authorized: bool,
                 scheduled_job_id: str):
        """
        :param bool is_data_collection_authorized: Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        pulumi.set(__self__, "is_data_collection_authorized", is_data_collection_authorized)
        pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)

    @property
    @pulumi.getter(name="isDataCollectionAuthorized")
    def is_data_collection_authorized(self) -> bool:
        """
        Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        """
        return pulumi.get(self, "is_data_collection_authorized")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        return pulumi.get(self, "scheduled_job_id")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceInstalledPackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Unique identifier for the package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceInstalledPackagesInstalledPackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemArgs'] items: List of installed packages.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemResult']:
        """
        List of installed packages.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 display_name: str,
                 name: str,
                 package_classification: str,
                 software_sources: Sequence['outputs.GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSourceResult'],
                 time_installed: str,
                 time_issued: str,
                 type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this package was built.
        :param str display_name: A filter to return resources that match the given display names.
        :param str name: Unique identifier for the package.
        :param str package_classification: Status of the software package.
        :param Sequence['GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSourceArgs'] software_sources: List of software sources that provide the software package.
        :param str time_installed: The date and time the package was installed, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        :param str time_issued: The date and time the package was issued by a providing erratum (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str type: Type of the package.
        :param str version: Version of the installed package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_classification", package_classification)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "time_installed", time_installed)
        pulumi.set(__self__, "time_issued", time_issued)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this package was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageClassification")
    def package_classification(self) -> str:
        """
        Status of the software package.
        """
        return pulumi.get(self, "package_classification")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSourceResult']:
        """
        List of software sources that provide the software package.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter(name="timeInstalled")
    def time_installed(self) -> str:
        """
        The date and time the package was installed, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_installed")

    @property
    @pulumi.getter(name="timeIssued")
    def time_issued(self) -> str:
        """
        The date and time the package was issued by a providing erratum (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_issued")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the installed package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceInstalledWindowsUpdatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItemArgs'] items: List of installed Windows updates.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItemResult']:
        """
        List of installed Windows updates.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 update_id: str,
                 update_type: str):
        """
        :param str name: A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        :param str update_id: Unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        :param str update_type: The type of Windows update.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "update_id", update_id)
        pulumi.set(__self__, "update_type", update_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateId")
    def update_id(self) -> str:
        """
        Unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "update_id")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> str:
        """
        The type of Windows update.
        """
        return pulumi.get(self, "update_type")


@pulumi.output_type
class GetManagedInstanceLifecycleEnvironmentResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstanceLifecycleStageResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstanceManagedInstanceGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstanceModulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The resource name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceModulesManagedInstanceModuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceModulesManagedInstanceModuleCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceModulesManagedInstanceModuleCollectionItemArgs'] items: List of module streams.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceModulesManagedInstanceModuleCollectionItemResult']:
        """
        List of module streams.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceModulesManagedInstanceModuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 active_streams: Sequence[str],
                 disabled_streams: Sequence[str],
                 enabled_stream: str,
                 installed_profiles: Sequence[str],
                 name: str,
                 software_source_id: str):
        """
        :param Sequence[str] active_streams: List of streams that are active in the module.
        :param Sequence[str] disabled_streams: List of streams that are disabled in the module.
        :param str enabled_stream: The stream that is enabled in the module.
        :param Sequence[str] installed_profiles: List of installed profiles in the enabled stream of the module.
        :param str name: The resource name.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that provides this module and the associated streams.
        """
        pulumi.set(__self__, "active_streams", active_streams)
        pulumi.set(__self__, "disabled_streams", disabled_streams)
        pulumi.set(__self__, "enabled_stream", enabled_stream)
        pulumi.set(__self__, "installed_profiles", installed_profiles)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="activeStreams")
    def active_streams(self) -> Sequence[str]:
        """
        List of streams that are active in the module.
        """
        return pulumi.get(self, "active_streams")

    @property
    @pulumi.getter(name="disabledStreams")
    def disabled_streams(self) -> Sequence[str]:
        """
        List of streams that are disabled in the module.
        """
        return pulumi.get(self, "disabled_streams")

    @property
    @pulumi.getter(name="enabledStream")
    def enabled_stream(self) -> str:
        """
        The stream that is enabled in the module.
        """
        return pulumi.get(self, "enabled_stream")

    @property
    @pulumi.getter(name="installedProfiles")
    def installed_profiles(self) -> Sequence[str]:
        """
        List of installed profiles in the enabled stream of the module.
        """
        return pulumi.get(self, "installed_profiles")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that provides this module and the associated streams.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class GetManagedInstanceSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceUpdatablePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Unique identifier for the package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemResult']):
        """
        :param Sequence['GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemArgs'] items: List of updatable packages.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemResult']:
        """
        List of updatable packages.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 display_name: str,
                 erratas: Sequence[str],
                 installed_version: str,
                 name: str,
                 package_classification: str,
                 related_cves: Sequence[str],
                 software_sources: Sequence['outputs.GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSourceResult'],
                 type: str,
                 update_type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this package was built.
        :param str display_name: A filter to return resources that match the given display names.
        :param Sequence[str] erratas: List of errata applicable to this update.
        :param str installed_version: The version of the package that is currently installed on the instance.
        :param str name: Unique identifier for the package.
        :param str package_classification: Status of the software package.
        :param Sequence[str] related_cves: List of CVEs applicable to this erratum.
        :param Sequence['GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSourceArgs'] software_sources: List of software sources that provide the software package.
        :param str type: Type of the package.
        :param str update_type: The type of update.
        :param str version: Version of the installed package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "erratas", erratas)
        pulumi.set(__self__, "installed_version", installed_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_classification", package_classification)
        pulumi.set(__self__, "related_cves", related_cves)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_type", update_type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this package was built.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def erratas(self) -> Sequence[str]:
        """
        List of errata applicable to this update.
        """
        return pulumi.get(self, "erratas")

    @property
    @pulumi.getter(name="installedVersion")
    def installed_version(self) -> str:
        """
        The version of the package that is currently installed on the instance.
        """
        return pulumi.get(self, "installed_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageClassification")
    def package_classification(self) -> str:
        """
        Status of the software package.
        """
        return pulumi.get(self, "package_classification")

    @property
    @pulumi.getter(name="relatedCves")
    def related_cves(self) -> Sequence[str]:
        """
        List of CVEs applicable to this erratum.
        """
        return pulumi.get(self, "related_cves")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSourceResult']:
        """
        List of software sources that provide the software package.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> str:
        """
        The type of update.
        """
        return pulumi.get(self, "update_type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the installed package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 autonomous_settings: Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemAutonomousSettingResult'],
                 bug_updates_available: int,
                 compartment_id: str,
                 description: str,
                 display_name: str,
                 enhancement_updates_available: int,
                 id: str,
                 installed_packages: int,
                 installed_windows_updates: int,
                 is_managed_by_autonomous_linux: bool,
                 is_management_station: bool,
                 is_reboot_required: bool,
                 ksplice_effective_kernel_version: str,
                 lifecycle_environments: Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemLifecycleEnvironmentResult'],
                 lifecycle_stages: Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemLifecycleStageResult'],
                 location: str,
                 managed_instance_groups: Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemManagedInstanceGroupResult'],
                 managed_instance_id: str,
                 notification_topic_id: str,
                 os_family: str,
                 os_kernel_version: str,
                 os_name: str,
                 os_version: str,
                 other_updates_available: int,
                 primary_management_station_id: str,
                 profile: str,
                 scheduled_job_count: int,
                 secondary_management_station_id: str,
                 security_updates_available: int,
                 software_sources: Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemSoftwareSourceResult'],
                 status: str,
                 tenancy_id: str,
                 time_created: str,
                 time_last_boot: str,
                 time_last_checkin: str,
                 time_updated: str,
                 updates_available: int,
                 work_request_count: int):
        """
        :param str architecture: The CPU architecture type of the managed instance.
        :param Sequence['GetManagedInstancesManagedInstanceCollectionItemAutonomousSettingArgs'] autonomous_settings: Settings for the Autonomous Linux service.
        :param int bug_updates_available: Number of bug fix type updates available for installation.
        :param str compartment_id: The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param int enhancement_updates_available: Number of enhancement type updates available for installation.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param int installed_packages: Number of packages installed on the instance.
        :param int installed_windows_updates: Number of Windows updates installed on the instance.
        :param bool is_managed_by_autonomous_linux: Indicates whether to list only resources managed by the Autonomous Linux service.
        :param bool is_management_station: A filter to return only managed instances that are acting as management stations.
        :param bool is_reboot_required: Indicates whether a reboot is required to complete installation of updates.
        :param str ksplice_effective_kernel_version: The ksplice effective kernel version.
        :param Sequence['GetManagedInstancesManagedInstanceCollectionItemLifecycleEnvironmentArgs'] lifecycle_environments: A filter to return only managed instances in a specific lifecycle environment.
        :param Sequence['GetManagedInstancesManagedInstanceCollectionItemLifecycleStageArgs'] lifecycle_stages: A filter to return only managed instances that are associated with the specified lifecycle environment.
        :param str location: A filter to return only resources whose location matches the given value.
        :param Sequence['GetManagedInstancesManagedInstanceCollectionItemManagedInstanceGroupArgs'] managed_instance_groups: Id and name of a resource to simplify the display for the user.
        :param str managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
        :param str notification_topic_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Oracle Notifications service (ONS) topic. ONS is the channel used to send notifications to the customer.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param str os_kernel_version: Operating system kernel version.
        :param str os_name: Operating system name.
        :param str os_version: Operating system version.
        :param int other_updates_available: Number of non-classified (other) updates available for installation.
        :param str primary_management_station_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as primary management station.
        :param str profile: A multi filter to return only managed instances that match the given profile ids.
        :param int scheduled_job_count: Number of scheduled jobs associated with this instance.
        :param str secondary_management_station_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as secondary managment station.
        :param int security_updates_available: Number of security type updates available for installation.
        :param Sequence['GetManagedInstancesManagedInstanceCollectionItemSoftwareSourceArgs'] software_sources: The list of software sources currently attached to the managed instance.
        :param str status: A filter to return only managed instances whose status matches the status provided.
        :param str tenancy_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy that the managed instance resides in.
        :param str time_created: The date and time the instance was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_last_boot: Time that the instance last booted (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_last_checkin: Time that the instance last checked in with the service (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_updated: The date and time the instance was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param int updates_available: Number of updates available for installation.
        :param int work_request_count: Number of work requests associated with this instance.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "autonomous_settings", autonomous_settings)
        pulumi.set(__self__, "bug_updates_available", bug_updates_available)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enhancement_updates_available", enhancement_updates_available)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "installed_packages", installed_packages)
        pulumi.set(__self__, "installed_windows_updates", installed_windows_updates)
        pulumi.set(__self__, "is_managed_by_autonomous_linux", is_managed_by_autonomous_linux)
        pulumi.set(__self__, "is_management_station", is_management_station)
        pulumi.set(__self__, "is_reboot_required", is_reboot_required)
        pulumi.set(__self__, "ksplice_effective_kernel_version", ksplice_effective_kernel_version)
        pulumi.set(__self__, "lifecycle_environments", lifecycle_environments)
        pulumi.set(__self__, "lifecycle_stages", lifecycle_stages)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "managed_instance_groups", managed_instance_groups)
        pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        pulumi.set(__self__, "notification_topic_id", notification_topic_id)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "os_kernel_version", os_kernel_version)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "other_updates_available", other_updates_available)
        pulumi.set(__self__, "primary_management_station_id", primary_management_station_id)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "scheduled_job_count", scheduled_job_count)
        pulumi.set(__self__, "secondary_management_station_id", secondary_management_station_id)
        pulumi.set(__self__, "security_updates_available", security_updates_available)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_boot", time_last_boot)
        pulumi.set(__self__, "time_last_checkin", time_last_checkin)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updates_available", updates_available)
        pulumi.set(__self__, "work_request_count", work_request_count)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The CPU architecture type of the managed instance.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="autonomousSettings")
    def autonomous_settings(self) -> Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemAutonomousSettingResult']:
        """
        Settings for the Autonomous Linux service.
        """
        return pulumi.get(self, "autonomous_settings")

    @property
    @pulumi.getter(name="bugUpdatesAvailable")
    def bug_updates_available(self) -> int:
        """
        Number of bug fix type updates available for installation.
        """
        return pulumi.get(self, "bug_updates_available")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enhancementUpdatesAvailable")
    def enhancement_updates_available(self) -> int:
        """
        Number of enhancement type updates available for installation.
        """
        return pulumi.get(self, "enhancement_updates_available")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="installedPackages")
    def installed_packages(self) -> int:
        """
        Number of packages installed on the instance.
        """
        return pulumi.get(self, "installed_packages")

    @property
    @pulumi.getter(name="installedWindowsUpdates")
    def installed_windows_updates(self) -> int:
        """
        Number of Windows updates installed on the instance.
        """
        return pulumi.get(self, "installed_windows_updates")

    @property
    @pulumi.getter(name="isManagedByAutonomousLinux")
    def is_managed_by_autonomous_linux(self) -> bool:
        """
        Indicates whether to list only resources managed by the Autonomous Linux service.
        """
        return pulumi.get(self, "is_managed_by_autonomous_linux")

    @property
    @pulumi.getter(name="isManagementStation")
    def is_management_station(self) -> bool:
        """
        A filter to return only managed instances that are acting as management stations.
        """
        return pulumi.get(self, "is_management_station")

    @property
    @pulumi.getter(name="isRebootRequired")
    def is_reboot_required(self) -> bool:
        """
        Indicates whether a reboot is required to complete installation of updates.
        """
        return pulumi.get(self, "is_reboot_required")

    @property
    @pulumi.getter(name="kspliceEffectiveKernelVersion")
    def ksplice_effective_kernel_version(self) -> str:
        """
        The ksplice effective kernel version.
        """
        return pulumi.get(self, "ksplice_effective_kernel_version")

    @property
    @pulumi.getter(name="lifecycleEnvironments")
    def lifecycle_environments(self) -> Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemLifecycleEnvironmentResult']:
        """
        A filter to return only managed instances in a specific lifecycle environment.
        """
        return pulumi.get(self, "lifecycle_environments")

    @property
    @pulumi.getter(name="lifecycleStages")
    def lifecycle_stages(self) -> Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemLifecycleStageResult']:
        """
        A filter to return only managed instances that are associated with the specified lifecycle environment.
        """
        return pulumi.get(self, "lifecycle_stages")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        A filter to return only resources whose location matches the given value.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managedInstanceGroups")
    def managed_instance_groups(self) -> Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemManagedInstanceGroupResult']:
        """
        Id and name of a resource to simplify the display for the user.
        """
        return pulumi.get(self, "managed_instance_groups")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="notificationTopicId")
    def notification_topic_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Oracle Notifications service (ONS) topic. ONS is the channel used to send notifications to the customer.
        """
        return pulumi.get(self, "notification_topic_id")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="osKernelVersion")
    def os_kernel_version(self) -> str:
        """
        Operating system kernel version.
        """
        return pulumi.get(self, "os_kernel_version")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Operating system name.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        Operating system version.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="otherUpdatesAvailable")
    def other_updates_available(self) -> int:
        """
        Number of non-classified (other) updates available for installation.
        """
        return pulumi.get(self, "other_updates_available")

    @property
    @pulumi.getter(name="primaryManagementStationId")
    def primary_management_station_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as primary management station.
        """
        return pulumi.get(self, "primary_management_station_id")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        A multi filter to return only managed instances that match the given profile ids.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="scheduledJobCount")
    def scheduled_job_count(self) -> int:
        """
        Number of scheduled jobs associated with this instance.
        """
        return pulumi.get(self, "scheduled_job_count")

    @property
    @pulumi.getter(name="secondaryManagementStationId")
    def secondary_management_station_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station for the instance to use as secondary managment station.
        """
        return pulumi.get(self, "secondary_management_station_id")

    @property
    @pulumi.getter(name="securityUpdatesAvailable")
    def security_updates_available(self) -> int:
        """
        Number of security type updates available for installation.
        """
        return pulumi.get(self, "security_updates_available")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetManagedInstancesManagedInstanceCollectionItemSoftwareSourceResult']:
        """
        The list of software sources currently attached to the managed instance.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter to return only managed instances whose status matches the status provided.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tenancy that the managed instance resides in.
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the instance was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastBoot")
    def time_last_boot(self) -> str:
        """
        Time that the instance last booted (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_last_boot")

    @property
    @pulumi.getter(name="timeLastCheckin")
    def time_last_checkin(self) -> str:
        """
        Time that the instance last checked in with the service (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_last_checkin")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the instance was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatesAvailable")
    def updates_available(self) -> int:
        """
        Number of updates available for installation.
        """
        return pulumi.get(self, "updates_available")

    @property
    @pulumi.getter(name="workRequestCount")
    def work_request_count(self) -> int:
        """
        Number of work requests associated with this instance.
        """
        return pulumi.get(self, "work_request_count")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionItemAutonomousSettingResult(dict):
    def __init__(__self__, *,
                 is_data_collection_authorized: bool,
                 scheduled_job_id: str):
        """
        :param bool is_data_collection_authorized: Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        pulumi.set(__self__, "is_data_collection_authorized", is_data_collection_authorized)
        pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)

    @property
    @pulumi.getter(name="isDataCollectionAuthorized")
    def is_data_collection_authorized(self) -> bool:
        """
        Indicates whether Autonomous Linux will collect crash files. This setting can be changed by the user.
        """
        return pulumi.get(self, "is_data_collection_authorized")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the restricted scheduled job associated with this instance. This value cannot be deleted by the user.
        """
        return pulumi.get(self, "scheduled_job_id")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionItemLifecycleEnvironmentResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionItemLifecycleStageResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionItemManagedInstanceGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstancesManagedInstanceCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagementStationHealthResult(dict):
    def __init__(__self__, *,
                 description: str,
                 state: str):
        """
        :param str description: Explanation of the health status.
        :param str state: The current state of the management station.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Explanation of the health status.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the management station.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetManagementStationMirrorResult(dict):
    def __init__(__self__, *,
                 directory: str,
                 port: str,
                 sslcert: str,
                 sslport: str):
        """
        :param str directory: Path to the data volume on the management station where software source mirrors are stored.
        :param str port: Listening port used for the proxy.
        :param str sslcert: Path to the SSL cerfificate.
        :param str sslport: Default mirror listening port for https.
        """
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sslcert", sslcert)
        pulumi.set(__self__, "sslport", sslport)

    @property
    @pulumi.getter
    def directory(self) -> str:
        """
        Path to the data volume on the management station where software source mirrors are stored.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Listening port used for the proxy.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sslcert(self) -> str:
        """
        Path to the SSL cerfificate.
        """
        return pulumi.get(self, "sslcert")

    @property
    @pulumi.getter
    def sslport(self) -> str:
        """
        Default mirror listening port for https.
        """
        return pulumi.get(self, "sslport")


@pulumi.output_type
class GetManagementStationMirrorSyncStatusResult(dict):
    def __init__(__self__, *,
                 failed: int,
                 queued: int,
                 synced: int,
                 syncing: int,
                 unsynced: int):
        """
        :param int failed: Total number of software sources that failed to sync.
        :param int queued: Total number of software sources that are queued for sync.
        :param int synced: Total number of software sources that successfully synced.
        :param int syncing: Total number of software sources currently syncing.
        :param int unsynced: Total number of software sources that have not yet been synced.
        """
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "queued", queued)
        pulumi.set(__self__, "synced", synced)
        pulumi.set(__self__, "syncing", syncing)
        pulumi.set(__self__, "unsynced", unsynced)

    @property
    @pulumi.getter
    def failed(self) -> int:
        """
        Total number of software sources that failed to sync.
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def queued(self) -> int:
        """
        Total number of software sources that are queued for sync.
        """
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def synced(self) -> int:
        """
        Total number of software sources that successfully synced.
        """
        return pulumi.get(self, "synced")

    @property
    @pulumi.getter
    def syncing(self) -> int:
        """
        Total number of software sources currently syncing.
        """
        return pulumi.get(self, "syncing")

    @property
    @pulumi.getter
    def unsynced(self) -> int:
        """
        Total number of software sources that have not yet been synced.
        """
        return pulumi.get(self, "unsynced")


@pulumi.output_type
class GetManagementStationMirrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementStationMirrorsMirrorsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagementStationMirrorsMirrorsCollectionItemResult']):
        """
        :param Sequence['GetManagementStationMirrorsMirrorsCollectionItemArgs'] items: List of mirrors
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagementStationMirrorsMirrorsCollectionItemResult']:
        """
        List of mirrors
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagementStationMirrorsMirrorsCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 display_name: str,
                 id: str,
                 log: str,
                 os_family: str,
                 percentage: int,
                 state: str,
                 time_last_synced: str,
                 type: str):
        """
        :param str arch_type: The architecture type supported by the Software Source
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param str id: OCID of a software source
        :param str log: The current log from the management station plugin.
        :param str os_family: The OS family the Software Source belongs to
        :param int percentage: A decimal number representing the completness percentage
        :param str state: Current state of the mirror
        :param str time_last_synced: Timestamp of the last time the mirror was sync
        :param str type: Type of the mirror
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_last_synced", time_last_synced)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        The architecture type supported by the Software Source
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        OCID of a software source
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> str:
        """
        The current log from the management station plugin.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        The OS family the Software Source belongs to
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        A decimal number representing the completness percentage
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the mirror
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> str:
        """
        Timestamp of the last time the mirror was sync
        """
        return pulumi.get(self, "time_last_synced")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the mirror
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetManagementStationProxyResult(dict):
    def __init__(__self__, *,
                 forward: str,
                 hosts: Sequence[str],
                 is_enabled: bool,
                 port: str):
        """
        :param str forward: The URL the proxy will forward to.
        :param Sequence[str] hosts: List of hosts.
        :param bool is_enabled: Indicates if the proxy should be enabled or disabled. Default is enabled.
        :param str port: Listening port used for the proxy.
        """
        pulumi.set(__self__, "forward", forward)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def forward(self) -> str:
        """
        The URL the proxy will forward to.
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence[str]:
        """
        List of hosts.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Indicates if the proxy should be enabled or disabled. Default is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Listening port used for the proxy.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetManagementStationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagementStationsManagementStationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagementStationsManagementStationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 health_state: str,
                 hostname: str,
                 id: str,
                 managed_instance_id: str,
                 mirror_capacity: int,
                 overall_percentage: int,
                 overall_state: str,
                 profile_id: str,
                 scheduled_job_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_next_execution: Optional[str] = None):
        """
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: Explanation of the health status.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str hostname: Hostname of the management station.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station. A filter that returns information about the specified management station.
        :param str managed_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
        :param int mirror_capacity: A decimal number representing the amount of mirror capacity used by the sync.
        :param int overall_percentage: A decimal number representing the progress of the current mirror sync.
        :param str overall_state: Current state of the mirror sync for the management station.
        :param str profile_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile used for the management station.
        :param str scheduled_job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job for the mirror sync.
        :param str state: A filter that returns information for management stations in the specified state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "health_state", health_state)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        pulumi.set(__self__, "mirror_capacity", mirror_capacity)
        pulumi.set(__self__, "overall_percentage", overall_percentage)
        pulumi.set(__self__, "overall_state", overall_state)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        if time_next_execution is not None:
            pulumi.set(__self__, "time_next_execution", time_next_execution)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Explanation of the health status.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="healthState")
    def health_state(self) -> str:
        return pulumi.get(self, "health_state")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname of the management station.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station. A filter that returns information about the specified management station.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
        """
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="mirrorCapacity")
    def mirror_capacity(self) -> int:
        """
        A decimal number representing the amount of mirror capacity used by the sync.
        """
        return pulumi.get(self, "mirror_capacity")

    @property
    @pulumi.getter(name="overallPercentage")
    def overall_percentage(self) -> int:
        """
        A decimal number representing the progress of the current mirror sync.
        """
        return pulumi.get(self, "overall_percentage")

    @property
    @pulumi.getter(name="overallState")
    def overall_state(self) -> str:
        """
        Current state of the mirror sync for the management station.
        """
        return pulumi.get(self, "overall_state")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile used for the management station.
        """
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job for the mirror sync.
        """
        return pulumi.get(self, "scheduled_job_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns information for management stations in the specified state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeNextExecution")
    def time_next_execution(self) -> Optional[str]:
        return pulumi.get(self, "time_next_execution")


@pulumi.output_type
class GetProfileLifecycleEnvironmentResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfileLifecycleStageResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfileManagedInstanceGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfileSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProfilesProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProfilesProfileCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProfilesProfileCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_default_profile: bool,
                 is_service_provided_profile: bool,
                 lifecycle_environments: Sequence['outputs.GetProfilesProfileCollectionItemLifecycleEnvironmentResult'],
                 lifecycle_stage_id: str,
                 lifecycle_stages: Sequence['outputs.GetProfilesProfileCollectionItemLifecycleStageResult'],
                 managed_instance_group_id: str,
                 managed_instance_groups: Sequence['outputs.GetProfilesProfileCollectionItemManagedInstanceGroupResult'],
                 management_station_id: str,
                 os_family: str,
                 profile_type: str,
                 registration_type: str,
                 software_source_ids: Sequence[str],
                 software_sources: Sequence['outputs.GetProfilesProfileCollectionItemSoftwareSourceResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 vendor_name: str):
        """
        :param str arch_type: A filter to return only profiles that match the given archType.
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_default_profile: A boolean variable that is used to list only the default profile resources.
        :param bool is_service_provided_profile: A filter to return only service-provided profiles.
        :param Sequence['GetProfilesProfileCollectionItemLifecycleEnvironmentArgs'] lifecycle_environments: Provides identifying information for the specified lifecycle environment.
        :param Sequence['GetProfilesProfileCollectionItemLifecycleStageArgs'] lifecycle_stages: Provides identifying information for the specified lifecycle stage.
        :param Sequence['GetProfilesProfileCollectionItemManagedInstanceGroupArgs'] managed_instance_groups: Provides identifying information for the specified managed instance group.
        :param str management_station_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station to associate with an instance once registered. Associating with a management station applies only to non-OCI instances.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param str profile_type: A filter to return registration profiles that match the given profile type.
        :param str registration_type: A filter to return profiles that match the given instance type.
        :param Sequence['GetProfilesProfileCollectionItemSoftwareSourceArgs'] software_sources: The list of software sources that the registration profile will use.
        :param str state: A filter to return only registration profiles in the given state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the registration profile was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str vendor_name: A filter to return only resources that match the given vendor name.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default_profile", is_default_profile)
        pulumi.set(__self__, "is_service_provided_profile", is_service_provided_profile)
        pulumi.set(__self__, "lifecycle_environments", lifecycle_environments)
        pulumi.set(__self__, "lifecycle_stage_id", lifecycle_stage_id)
        pulumi.set(__self__, "lifecycle_stages", lifecycle_stages)
        pulumi.set(__self__, "managed_instance_group_id", managed_instance_group_id)
        pulumi.set(__self__, "managed_instance_groups", managed_instance_groups)
        pulumi.set(__self__, "management_station_id", management_station_id)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "profile_type", profile_type)
        pulumi.set(__self__, "registration_type", registration_type)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only profiles that match the given archType.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefaultProfile")
    def is_default_profile(self) -> bool:
        """
        A boolean variable that is used to list only the default profile resources.
        """
        return pulumi.get(self, "is_default_profile")

    @property
    @pulumi.getter(name="isServiceProvidedProfile")
    def is_service_provided_profile(self) -> bool:
        """
        A filter to return only service-provided profiles.
        """
        return pulumi.get(self, "is_service_provided_profile")

    @property
    @pulumi.getter(name="lifecycleEnvironments")
    def lifecycle_environments(self) -> Sequence['outputs.GetProfilesProfileCollectionItemLifecycleEnvironmentResult']:
        """
        Provides identifying information for the specified lifecycle environment.
        """
        return pulumi.get(self, "lifecycle_environments")

    @property
    @pulumi.getter(name="lifecycleStageId")
    def lifecycle_stage_id(self) -> str:
        return pulumi.get(self, "lifecycle_stage_id")

    @property
    @pulumi.getter(name="lifecycleStages")
    def lifecycle_stages(self) -> Sequence['outputs.GetProfilesProfileCollectionItemLifecycleStageResult']:
        """
        Provides identifying information for the specified lifecycle stage.
        """
        return pulumi.get(self, "lifecycle_stages")

    @property
    @pulumi.getter(name="managedInstanceGroupId")
    def managed_instance_group_id(self) -> str:
        return pulumi.get(self, "managed_instance_group_id")

    @property
    @pulumi.getter(name="managedInstanceGroups")
    def managed_instance_groups(self) -> Sequence['outputs.GetProfilesProfileCollectionItemManagedInstanceGroupResult']:
        """
        Provides identifying information for the specified managed instance group.
        """
        return pulumi.get(self, "managed_instance_groups")

    @property
    @pulumi.getter(name="managementStationId")
    def management_station_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station to associate with an instance once registered. Associating with a management station applies only to non-OCI instances.
        """
        return pulumi.get(self, "management_station_id")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> str:
        """
        A filter to return registration profiles that match the given profile type.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="registrationType")
    def registration_type(self) -> str:
        """
        A filter to return profiles that match the given instance type.
        """
        return pulumi.get(self, "registration_type")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence[str]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetProfilesProfileCollectionItemSoftwareSourceResult']:
        """
        The list of software sources that the registration profile will use.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only registration profiles in the given state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the registration profile was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        A filter to return only resources that match the given vendor name.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetProfilesProfileCollectionItemLifecycleEnvironmentResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfilesProfileCollectionItemLifecycleStageResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfilesProfileCollectionItemManagedInstanceGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfilesProfileCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given display names.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given display names.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetScheduledJobOperationResult(dict):
    def __init__(__self__, *,
                 manage_module_streams_details: Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailResult'],
                 operation_type: str,
                 package_names: Sequence[str],
                 software_source_ids: Sequence[str],
                 switch_module_streams_details: Sequence['outputs.GetScheduledJobOperationSwitchModuleStreamsDetailResult'],
                 windows_update_names: Sequence[str]):
        """
        :param Sequence['GetScheduledJobOperationManageModuleStreamsDetailArgs'] manage_module_streams_details: The set of changes to make to the state of the modules, streams, and profiles on the managed target.
        :param str operation_type: The type of operation this scheduled job performs.
        :param Sequence[str] package_names: The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
        :param Sequence[str] software_source_ids: The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
        :param Sequence['GetScheduledJobOperationSwitchModuleStreamsDetailArgs'] switch_module_streams_details: Provides the information used to update a module stream.
        :param Sequence[str] windows_update_names: Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
        """
        pulumi.set(__self__, "manage_module_streams_details", manage_module_streams_details)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "package_names", package_names)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "switch_module_streams_details", switch_module_streams_details)
        pulumi.set(__self__, "windows_update_names", windows_update_names)

    @property
    @pulumi.getter(name="manageModuleStreamsDetails")
    def manage_module_streams_details(self) -> Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailResult']:
        """
        The set of changes to make to the state of the modules, streams, and profiles on the managed target.
        """
        return pulumi.get(self, "manage_module_streams_details")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        The type of operation this scheduled job performs.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="packageNames")
    def package_names(self) -> Sequence[str]:
        """
        The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
        """
        return pulumi.get(self, "package_names")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence[str]:
        """
        The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="switchModuleStreamsDetails")
    def switch_module_streams_details(self) -> Sequence['outputs.GetScheduledJobOperationSwitchModuleStreamsDetailResult']:
        """
        Provides the information used to update a module stream.
        """
        return pulumi.get(self, "switch_module_streams_details")

    @property
    @pulumi.getter(name="windowsUpdateNames")
    def windows_update_names(self) -> Sequence[str]:
        """
        Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
        """
        return pulumi.get(self, "windows_update_names")


@pulumi.output_type
class GetScheduledJobOperationManageModuleStreamsDetailResult(dict):
    def __init__(__self__, *,
                 disables: Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailDisableResult'],
                 enables: Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailEnableResult'],
                 installs: Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailInstallResult'],
                 removes: Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailRemoveResult']):
        """
        :param Sequence['GetScheduledJobOperationManageModuleStreamsDetailDisableArgs'] disables: The set of module streams to disable.
        :param Sequence['GetScheduledJobOperationManageModuleStreamsDetailEnableArgs'] enables: The set of module streams to enable.
        :param Sequence['GetScheduledJobOperationManageModuleStreamsDetailInstallArgs'] installs: The set of module stream profiles to install.
        :param Sequence['GetScheduledJobOperationManageModuleStreamsDetailRemoveArgs'] removes: The set of module stream profiles to remove.
        """
        pulumi.set(__self__, "disables", disables)
        pulumi.set(__self__, "enables", enables)
        pulumi.set(__self__, "installs", installs)
        pulumi.set(__self__, "removes", removes)

    @property
    @pulumi.getter
    def disables(self) -> Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailDisableResult']:
        """
        The set of module streams to disable.
        """
        return pulumi.get(self, "disables")

    @property
    @pulumi.getter
    def enables(self) -> Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailEnableResult']:
        """
        The set of module streams to enable.
        """
        return pulumi.get(self, "enables")

    @property
    @pulumi.getter
    def installs(self) -> Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailInstallResult']:
        """
        The set of module stream profiles to install.
        """
        return pulumi.get(self, "installs")

    @property
    @pulumi.getter
    def removes(self) -> Sequence['outputs.GetScheduledJobOperationManageModuleStreamsDetailRemoveResult']:
        """
        The set of module stream profiles to remove.
        """
        return pulumi.get(self, "removes")


@pulumi.output_type
class GetScheduledJobOperationManageModuleStreamsDetailDisableResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobOperationManageModuleStreamsDetailEnableResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobOperationManageModuleStreamsDetailInstallResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str profile_name: The name of a profile of the specified module stream.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobOperationManageModuleStreamsDetailRemoveResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str profile_name: The name of a profile of the specified module stream.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobOperationSwitchModuleStreamsDetailResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_managed_by_autonomous_linux: bool,
                 is_restricted: bool,
                 is_subcompartment_included: bool,
                 lifecycle_stage_ids: Sequence[str],
                 locations: Sequence[str],
                 managed_compartment_ids: Sequence[str],
                 managed_instance_group_ids: Sequence[str],
                 managed_instance_ids: Sequence[str],
                 operations: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationResult'],
                 recurring_rule: str,
                 retry_intervals: Sequence[int],
                 schedule_type: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_last_execution: str,
                 time_next_execution: str,
                 time_updated: str,
                 work_request_ids: Sequence[str]):
        """
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: User-specified description for the scheduled job.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job. A filter to return the specified job.
        :param bool is_managed_by_autonomous_linux: Indicates whether to list only resources managed by the Autonomous Linux service.
        :param bool is_restricted: A filter to return only restricted scheduled jobs.
        :param bool is_subcompartment_included: Indicates whether to apply the scheduled job to all compartments in the tenancy when managedCompartmentIds specifies the tenancy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) (root compartment).
        :param Sequence[str] lifecycle_stage_ids: The lifecycle stage [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceIds, managedInstanceGroupIds, and managedCompartmentIds.
        :param Sequence[str] locations: The list of locations this scheduled job should operate on for a job targeting on compartments. (Empty list means apply to all locations). This can only be set when managedCompartmentIds is not empty.
        :param Sequence[str] managed_compartment_ids: The compartment [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedInstanceGroupIds, and lifecycleStageIds.
        :param Sequence[str] managed_instance_group_ids: The managed instance group [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedCompartmentIds, and lifecycleStageIds.
        :param Sequence[str] managed_instance_ids: The managed instance [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceGroupIds, managedCompartmentIds, and lifecycleStageIds.
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationArgs'] operations: The list of operations this scheduled job needs to perform. A scheduled job supports only one operation type, unless it is one of the following:
               * UPDATE_PACKAGES
               * UPDATE_ALL
               * UPDATE_SECURITY
               * UPDATE_BUGFIX
               * UPDATE_ENHANCEMENT
               * UPDATE_OTHER
               * UPDATE_KSPLICE_USERSPACE
               * UPDATE_KSPLICE_KERNEL
        :param str recurring_rule: The frequency schedule for a recurring scheduled job.
        :param Sequence[int] retry_intervals: The amount of time in minutes to wait until retrying the scheduled job. If set, the service will automatically retry  a failed scheduled job after the interval. For example, you could set the interval to [2,5,10]. If the initial  execution of the job fails, the service waits 2 minutes and then retries. If that fails, the service waits 5 minutes  and then retries. If that fails, the service waits 10 minutes and then retries.
        :param str schedule_type: A filter to return only scheduled jobs of the given scheduling type (one-time or recurring).
        :param str state: A filter to return only scheduled jobs currently in the given state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time this scheduled job was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_last_execution: The time of the last execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_next_execution: The time of the next execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_updated: The time this scheduled job was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param Sequence[str] work_request_ids: The list of work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with this scheduled job.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_managed_by_autonomous_linux", is_managed_by_autonomous_linux)
        pulumi.set(__self__, "is_restricted", is_restricted)
        pulumi.set(__self__, "is_subcompartment_included", is_subcompartment_included)
        pulumi.set(__self__, "lifecycle_stage_ids", lifecycle_stage_ids)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "managed_compartment_ids", managed_compartment_ids)
        pulumi.set(__self__, "managed_instance_group_ids", managed_instance_group_ids)
        pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "recurring_rule", recurring_rule)
        pulumi.set(__self__, "retry_intervals", retry_intervals)
        pulumi.set(__self__, "schedule_type", schedule_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_execution", time_last_execution)
        pulumi.set(__self__, "time_next_execution", time_next_execution)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "work_request_ids", work_request_ids)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-specified description for the scheduled job.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled job. A filter to return the specified job.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManagedByAutonomousLinux")
    def is_managed_by_autonomous_linux(self) -> bool:
        """
        Indicates whether to list only resources managed by the Autonomous Linux service.
        """
        return pulumi.get(self, "is_managed_by_autonomous_linux")

    @property
    @pulumi.getter(name="isRestricted")
    def is_restricted(self) -> bool:
        """
        A filter to return only restricted scheduled jobs.
        """
        return pulumi.get(self, "is_restricted")

    @property
    @pulumi.getter(name="isSubcompartmentIncluded")
    def is_subcompartment_included(self) -> bool:
        """
        Indicates whether to apply the scheduled job to all compartments in the tenancy when managedCompartmentIds specifies the tenancy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) (root compartment).
        """
        return pulumi.get(self, "is_subcompartment_included")

    @property
    @pulumi.getter(name="lifecycleStageIds")
    def lifecycle_stage_ids(self) -> Sequence[str]:
        """
        The lifecycle stage [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceIds, managedInstanceGroupIds, and managedCompartmentIds.
        """
        return pulumi.get(self, "lifecycle_stage_ids")

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        """
        The list of locations this scheduled job should operate on for a job targeting on compartments. (Empty list means apply to all locations). This can only be set when managedCompartmentIds is not empty.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="managedCompartmentIds")
    def managed_compartment_ids(self) -> Sequence[str]:
        """
        The compartment [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedInstanceGroupIds, and lifecycleStageIds.
        """
        return pulumi.get(self, "managed_compartment_ids")

    @property
    @pulumi.getter(name="managedInstanceGroupIds")
    def managed_instance_group_ids(self) -> Sequence[str]:
        """
        The managed instance group [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on. A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with managedInstanceIds, managedCompartmentIds, and lifecycleStageIds.
        """
        return pulumi.get(self, "managed_instance_group_ids")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Sequence[str]:
        """
        The managed instance [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that this scheduled job operates on.  A scheduled job can only operate on one type of target, therefore this parameter is mutually exclusive with  managedInstanceGroupIds, managedCompartmentIds, and lifecycleStageIds.
        """
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationResult']:
        """
        The list of operations this scheduled job needs to perform. A scheduled job supports only one operation type, unless it is one of the following:
        * UPDATE_PACKAGES
        * UPDATE_ALL
        * UPDATE_SECURITY
        * UPDATE_BUGFIX
        * UPDATE_ENHANCEMENT
        * UPDATE_OTHER
        * UPDATE_KSPLICE_USERSPACE
        * UPDATE_KSPLICE_KERNEL
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter(name="recurringRule")
    def recurring_rule(self) -> str:
        """
        The frequency schedule for a recurring scheduled job.
        """
        return pulumi.get(self, "recurring_rule")

    @property
    @pulumi.getter(name="retryIntervals")
    def retry_intervals(self) -> Sequence[int]:
        """
        The amount of time in minutes to wait until retrying the scheduled job. If set, the service will automatically retry  a failed scheduled job after the interval. For example, you could set the interval to [2,5,10]. If the initial  execution of the job fails, the service waits 2 minutes and then retries. If that fails, the service waits 5 minutes  and then retries. If that fails, the service waits 10 minutes and then retries.
        """
        return pulumi.get(self, "retry_intervals")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        """
        A filter to return only scheduled jobs of the given scheduling type (one-time or recurring).
        """
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only scheduled jobs currently in the given state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time this scheduled job was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastExecution")
    def time_last_execution(self) -> str:
        """
        The time of the last execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_last_execution")

    @property
    @pulumi.getter(name="timeNextExecution")
    def time_next_execution(self) -> str:
        """
        The time of the next execution of this scheduled job (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_next_execution")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time this scheduled job was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="workRequestIds")
    def work_request_ids(self) -> Sequence[str]:
        """
        The list of work request [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) associated with this scheduled job.
        """
        return pulumi.get(self, "work_request_ids")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationResult(dict):
    def __init__(__self__, *,
                 manage_module_streams_details: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailResult'],
                 operation_type: str,
                 package_names: Sequence[str],
                 software_source_ids: Sequence[str],
                 switch_module_streams_details: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetailResult'],
                 windows_update_names: Sequence[str]):
        """
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailArgs'] manage_module_streams_details: The set of changes to make to the state of the modules, streams, and profiles on the managed target.
        :param str operation_type: A filter to return only scheduled jobs with the given operation type.
        :param Sequence[str] package_names: The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
        :param Sequence[str] software_source_ids: The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetailArgs'] switch_module_streams_details: Provides the information used to update a module stream.
        :param Sequence[str] windows_update_names: Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
        """
        pulumi.set(__self__, "manage_module_streams_details", manage_module_streams_details)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "package_names", package_names)
        pulumi.set(__self__, "software_source_ids", software_source_ids)
        pulumi.set(__self__, "switch_module_streams_details", switch_module_streams_details)
        pulumi.set(__self__, "windows_update_names", windows_update_names)

    @property
    @pulumi.getter(name="manageModuleStreamsDetails")
    def manage_module_streams_details(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailResult']:
        """
        The set of changes to make to the state of the modules, streams, and profiles on the managed target.
        """
        return pulumi.get(self, "manage_module_streams_details")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        """
        A filter to return only scheduled jobs with the given operation type.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="packageNames")
    def package_names(self) -> Sequence[str]:
        """
        The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
        """
        return pulumi.get(self, "package_names")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Sequence[str]:
        """
        The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).  This parameter only applies when the scheduled job is for attaching or detaching software sources.
        """
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="switchModuleStreamsDetails")
    def switch_module_streams_details(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetailResult']:
        """
        Provides the information used to update a module stream.
        """
        return pulumi.get(self, "switch_module_streams_details")

    @property
    @pulumi.getter(name="windowsUpdateNames")
    def windows_update_names(self) -> Sequence[str]:
        """
        Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates. Note that this is not an OCID, but is a unique identifier assigned by Microsoft. For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
        """
        return pulumi.get(self, "windows_update_names")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailResult(dict):
    def __init__(__self__, *,
                 disables: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisableResult'],
                 enables: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnableResult'],
                 installs: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstallResult'],
                 removes: Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemoveResult']):
        """
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisableArgs'] disables: The set of module streams to disable.
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnableArgs'] enables: The set of module streams to enable.
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstallArgs'] installs: The set of module stream profiles to install.
        :param Sequence['GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemoveArgs'] removes: The set of module stream profiles to remove.
        """
        pulumi.set(__self__, "disables", disables)
        pulumi.set(__self__, "enables", enables)
        pulumi.set(__self__, "installs", installs)
        pulumi.set(__self__, "removes", removes)

    @property
    @pulumi.getter
    def disables(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisableResult']:
        """
        The set of module streams to disable.
        """
        return pulumi.get(self, "disables")

    @property
    @pulumi.getter
    def enables(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnableResult']:
        """
        The set of module streams to enable.
        """
        return pulumi.get(self, "enables")

    @property
    @pulumi.getter
    def installs(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstallResult']:
        """
        The set of module stream profiles to install.
        """
        return pulumi.get(self, "installs")

    @property
    @pulumi.getter
    def removes(self) -> Sequence['outputs.GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemoveResult']:
        """
        The set of module stream profiles to remove.
        """
        return pulumi.get(self, "removes")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisableResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnableResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstallResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str profile_name: The name of a profile of the specified module stream.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemoveResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 profile_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str profile_name: The name of a profile of the specified module stream.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of a profile of the specified module stream.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetailResult(dict):
    def __init__(__self__, *,
                 module_name: str,
                 software_source_id: str,
                 stream_name: str):
        """
        :param str module_name: The name of a module.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        :param str stream_name: The name of a stream of the specified module.
        """
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "software_source_id", software_source_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source that contains the module stream.
        """
        return pulumi.get(self, "software_source_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of a stream of the specified module.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetSoftwarePackageDependencyResult(dict):
    def __init__(__self__, *,
                 dependency: str,
                 dependency_modifier: str,
                 dependency_type: str):
        """
        :param str dependency: The software package's dependency.
        :param str dependency_modifier: The modifier for the dependency.
        :param str dependency_type: The type of the dependency.
        """
        pulumi.set(__self__, "dependency", dependency)
        pulumi.set(__self__, "dependency_modifier", dependency_modifier)
        pulumi.set(__self__, "dependency_type", dependency_type)

    @property
    @pulumi.getter
    def dependency(self) -> str:
        """
        The software package's dependency.
        """
        return pulumi.get(self, "dependency")

    @property
    @pulumi.getter(name="dependencyModifier")
    def dependency_modifier(self) -> str:
        """
        The modifier for the dependency.
        """
        return pulumi.get(self, "dependency_modifier")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> str:
        """
        The type of the dependency.
        """
        return pulumi.get(self, "dependency_type")


@pulumi.output_type
class GetSoftwarePackageFileResult(dict):
    def __init__(__self__, *,
                 checksum: str,
                 checksum_type: str,
                 path: str,
                 size_in_bytes: str,
                 time_modified: str,
                 type: str):
        """
        :param str checksum: Checksum of the file.
        :param str checksum_type: Type of the checksum.
        :param str path: File path.
        :param str size_in_bytes: Size of the package in bytes.
        :param str time_modified: The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str type: Type of the package.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the file.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        File path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        Size of the package in bytes.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSoftwarePackageSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwarePackageSoftwareSourceFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemResult']):
        """
        :param Sequence['GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemArgs'] items: List of software sources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemResult']:
        """
        List of software sources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 availability: str,
                 availability_at_oci: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 os_family: str,
                 package_count: str,
                 repo_id: str,
                 size: float,
                 software_source_type: str,
                 software_source_version: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 url: str,
                 vendor_name: str,
                 vendor_software_sources: Sequence['outputs.GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSourceResult']):
        """
        :param str arch_type: A filter to return only instances whose architecture type matches the given architecture.
        :param str availability: The availabilities of the software source in a non-OCI environment for a tenancy.
        :param str availability_at_oci: The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: Description of the software source. For custom software sources, this is user-specified.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether the software source is required for the Autonomous Linux service.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param str package_count: Number of packages the software source contains.
        :param str repo_id: The repository ID for the software source.
        :param float size: The size of the software source in gigabytes (GB).
        :param str software_source_type: The type of the software source.
        :param str software_source_version: The version to assign to this custom software source.
        :param str state: A filter to return only software sources whose state matches the given state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str time_updated: The date and time the software source was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str url: URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
        :param str vendor_name: Name of the vendor providing the software source.
        :param Sequence['GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSourceArgs'] vendor_software_sources: List of vendor software sources that are used for the basis of the versioned custom software source.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "availability", availability)
        pulumi.set(__self__, "availability_at_oci", availability_at_oci)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "package_count", package_count)
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "software_source_type", software_source_type)
        pulumi.set(__self__, "software_source_version", software_source_version)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vendor_name", vendor_name)
        pulumi.set(__self__, "vendor_software_sources", vendor_software_sources)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only instances whose architecture type matches the given architecture.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def availability(self) -> str:
        """
        The availabilities of the software source in a non-OCI environment for a tenancy.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="availabilityAtOci")
    def availability_at_oci(self) -> str:
        """
        The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
        """
        return pulumi.get(self, "availability_at_oci")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the software source. For custom software sources, this is user-specified.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether the software source is required for the Autonomous Linux service.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> str:
        """
        Number of packages the software source contains.
        """
        return pulumi.get(self, "package_count")

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> str:
        """
        The repository ID for the software source.
        """
        return pulumi.get(self, "repo_id")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        The size of the software source in gigabytes (GB).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        The type of the software source.
        """
        return pulumi.get(self, "software_source_type")

    @property
    @pulumi.getter(name="softwareSourceVersion")
    def software_source_version(self) -> str:
        """
        The version to assign to this custom software source.
        """
        return pulumi.get(self, "software_source_version")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only software sources whose state matches the given state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the software source was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        Name of the vendor providing the software source.
        """
        return pulumi.get(self, "vendor_name")

    @property
    @pulumi.getter(name="vendorSoftwareSources")
    def vendor_software_sources(self) -> Sequence['outputs.GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSourceResult']:
        """
        List of vendor software sources that are used for the basis of the versioned custom software source.
        """
        return pulumi.get(self, "vendor_software_sources")


@pulumi.output_type
class GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSoftwarePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Unique identifier for the package. Note that this is not an OCID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package. Note that this is not an OCID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwarePackagesSoftwarePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwarePackagesSoftwarePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 checksum: str,
                 checksum_type: str,
                 dependencies: Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemDependencyResult'],
                 description: str,
                 display_name: str,
                 files: Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemFileResult'],
                 is_latest: bool,
                 last_modified_date: str,
                 name: str,
                 os_families: Sequence[str],
                 size_in_bytes: str,
                 software_sources: Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult'],
                 type: str,
                 version: str):
        """
        :param str architecture: A filter to return software packages that match the given architecture.
        :param str checksum: Checksum of the file.
        :param str checksum_type: Type of the checksum.
        :param Sequence['GetSoftwarePackagesSoftwarePackageCollectionItemDependencyArgs'] dependencies: List of dependencies for the software package.
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param Sequence['GetSoftwarePackagesSoftwarePackageCollectionItemFileArgs'] files: List of files for the software package.
        :param bool is_latest: Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        :param str last_modified_date: The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str name: Unique identifier for the package. Note that this is not an OCID.
        :param Sequence[str] os_families: The OS families the package belongs to.
        :param str size_in_bytes: Size of the package in bytes.
        :param Sequence['GetSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceArgs'] software_sources: List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        :param str type: Type of the package.
        :param str version: A filter to return software packages that match the given version.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "dependencies", dependencies)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "files", files)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "last_modified_date", last_modified_date)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_families", os_families)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        A filter to return software packages that match the given architecture.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the file.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def dependencies(self) -> Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemDependencyResult']:
        """
        List of dependencies for the software package.
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def files(self) -> Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemFileResult']:
        """
        List of files for the software package.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> str:
        """
        The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "last_modified_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package. Note that this is not an OCID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Sequence[str]:
        """
        The OS families the package belongs to.
        """
        return pulumi.get(self, "os_families")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        Size of the package in bytes.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult']:
        """
        List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        A filter to return software packages that match the given version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSoftwarePackagesSoftwarePackageCollectionItemDependencyResult(dict):
    def __init__(__self__, *,
                 dependency: str,
                 dependency_modifier: str,
                 dependency_type: str):
        """
        :param str dependency: The software package's dependency.
        :param str dependency_modifier: The modifier for the dependency.
        :param str dependency_type: The type of the dependency.
        """
        pulumi.set(__self__, "dependency", dependency)
        pulumi.set(__self__, "dependency_modifier", dependency_modifier)
        pulumi.set(__self__, "dependency_type", dependency_type)

    @property
    @pulumi.getter
    def dependency(self) -> str:
        """
        The software package's dependency.
        """
        return pulumi.get(self, "dependency")

    @property
    @pulumi.getter(name="dependencyModifier")
    def dependency_modifier(self) -> str:
        """
        The modifier for the dependency.
        """
        return pulumi.get(self, "dependency_modifier")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> str:
        """
        The type of the dependency.
        """
        return pulumi.get(self, "dependency_type")


@pulumi.output_type
class GetSoftwarePackagesSoftwarePackageCollectionItemFileResult(dict):
    def __init__(__self__, *,
                 checksum: str,
                 checksum_type: str,
                 path: str,
                 size_in_bytes: str,
                 time_modified: str,
                 type: str):
        """
        :param str checksum: Checksum of the file.
        :param str checksum_type: Type of the checksum.
        :param str path: File path.
        :param str size_in_bytes: Size of the package in bytes.
        :param str time_modified: The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str type: Type of the package.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the file.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        File path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        Size of the package in bytes.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterResult(dict):
    def __init__(__self__, *,
                 module_stream_profile_filters: Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult'],
                 package_filters: Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult'],
                 package_group_filters: Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult']):
        """
        :param Sequence['GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterArgs'] module_stream_profile_filters: The list of module stream/profile filters.
        :param Sequence['GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterArgs'] package_filters: The list of package filters.
        :param Sequence['GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterArgs'] package_group_filters: The list of group filters.
        """
        pulumi.set(__self__, "module_stream_profile_filters", module_stream_profile_filters)
        pulumi.set(__self__, "package_filters", package_filters)
        pulumi.set(__self__, "package_group_filters", package_group_filters)

    @property
    @pulumi.getter(name="moduleStreamProfileFilters")
    def module_stream_profile_filters(self) -> Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult']:
        """
        The list of module stream/profile filters.
        """
        return pulumi.get(self, "module_stream_profile_filters")

    @property
    @pulumi.getter(name="packageFilters")
    def package_filters(self) -> Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult']:
        """
        The list of package filters.
        """
        return pulumi.get(self, "package_filters")

    @property
    @pulumi.getter(name="packageGroupFilters")
    def package_group_filters(self) -> Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult']:
        """
        The list of group filters.
        """
        return pulumi.get(self, "package_group_filters")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: str,
                 module_name: str,
                 profile_name: str,
                 stream_name: str):
        """
        :param str filter_type: The type of the filter.
        :param str module_name: Module name.
        :param str profile_name: Profile name.
        :param str stream_name: Stream name.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        The type of the filter.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        Module name.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        Profile name.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        Stream name.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: str,
                 package_name: str,
                 package_name_pattern: str,
                 package_version: str):
        """
        :param str filter_type: The type of the filter.
        :param str package_name: The package name.
        :param str package_name_pattern: The package name pattern.
        :param str package_version: The package version, which is denoted by 'version-release', or 'epoch:version-release'.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "package_name_pattern", package_name_pattern)
        pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        The type of the filter.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> str:
        """
        The package name.
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageNamePattern")
    def package_name_pattern(self) -> str:
        """
        The package name pattern.
        """
        return pulumi.get(self, "package_name_pattern")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        """
        The package version, which is denoted by 'version-release', or 'epoch:version-release'.
        """
        return pulumi.get(self, "package_version")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: str,
                 package_groups: Sequence[str]):
        """
        :param str filter_type: The type of the filter.
        :param Sequence[str] package_groups: List of package group names.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "package_groups", package_groups)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        The type of the filter.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageGroups")
    def package_groups(self) -> Sequence[str]:
        """
        List of package group names.
        """
        return pulumi.get(self, "package_groups")


@pulumi.output_type
class GetSoftwareSourceModuleStreamProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the entity to be queried.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 is_default: bool,
                 module_name: str,
                 name: str,
                 packages: Sequence[str],
                 stream_name: str):
        """
        :param str description: A description of the contents of the module stream profile.
        :param bool is_default: Indicates if this profile is the default for its module stream.
        :param str module_name: The name of a module. This parameter is required if a streamName is specified.
        :param str name: The name of the entity to be queried.
        :param Sequence[str] packages: A list of packages that constitute the profile.  Each element in the list is the name of a package.  The name is suitable to use as an argument to other OS Management Hub APIs that interact directly with packages.
        :param str stream_name: The name of the module stream. This parameter is required if a profile name is specified.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the contents of the module stream profile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates if this profile is the default for its module stream.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module. This parameter is required if a streamName is specified.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Sequence[str]:
        """
        A list of packages that constitute the profile.  Each element in the list is the name of a package.  The name is suitable to use as an argument to other OS Management Hub APIs that interact directly with packages.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        The name of the module stream. This parameter is required if a profile name is specified.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetSoftwareSourceModuleStreamsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the entity to be queried.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceModuleStreamsModuleStreamCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 description: str,
                 is_default: bool,
                 is_latest: bool,
                 module_name: str,
                 name: str,
                 packages: Sequence[str],
                 profiles: Sequence[str],
                 software_source_id: str):
        """
        :param str arch_type: The architecture for which the packages in this module stream were built.
        :param str description: A description of the contents of the module stream.
        :param bool is_default: Indicates if this stream is the default for its module.
        :param bool is_latest: Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        :param str module_name: The name of a module. This parameter is required if a streamName is specified.
        :param str name: The name of the entity to be queried.
        :param Sequence[str] packages: A list of packages that are contained by the stream.  Each element in the list is the name of a package.  The name is suitable to use as an argument to other OS Management Hub APIs that interact directly with packages.
        :param Sequence[str] profiles: A list of profiles that are part of the stream.  Each element in the list is the name of a profile.  The name is suitable to use as an argument to other OS Management Hub APIs that interact directly with module stream profiles.  However, it is not URL encoded.
        :param str software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "module_name", module_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "profiles", profiles)
        pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        The architecture for which the packages in this module stream were built.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the contents of the module stream.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates if this stream is the default for its module.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        """
        The name of a module. This parameter is required if a streamName is specified.
        """
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Sequence[str]:
        """
        A list of packages that are contained by the stream.  Each element in the list is the name of a package.  The name is suitable to use as an argument to other OS Management Hub APIs that interact directly with packages.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def profiles(self) -> Sequence[str]:
        """
        A list of profiles that are part of the stream.  Each element in the list is the name of a profile.  The name is suitable to use as an argument to other OS Management Hub APIs that interact directly with module stream profiles.  However, it is not URL encoded.
        """
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class GetSoftwareSourcePackageGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the entity to be queried.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourcePackageGroupsPackageGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_order: int,
                 group_type: str,
                 id: str,
                 is_default: bool,
                 is_user_visible: bool,
                 name: str,
                 packages: Sequence[str],
                 repositories: Sequence[str]):
        """
        :param str description: Description of the package group.
        :param int display_order: Indicates the order to display category or environment.
        :param str group_type: A filter to return only package groups of the specified type.
        :param str id: Package group identifier.
        :param bool is_default: Indicates if this package group is the default.
        :param bool is_user_visible: Indicates if this package group is visible to users.
        :param str name: The name of the entity to be queried.
        :param Sequence[str] packages: The list of packages in the package group.
        :param Sequence[str] repositories: The repository IDs of the package group's repositories.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_user_visible", is_user_visible)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packages", packages)
        pulumi.set(__self__, "repositories", repositories)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the package group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> int:
        """
        Indicates the order to display category or environment.
        """
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        """
        A filter to return only package groups of the specified type.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Package group identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates if this package group is the default.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isUserVisible")
    def is_user_visible(self) -> bool:
        """
        Indicates if this package group is visible to users.
        """
        return pulumi.get(self, "is_user_visible")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Sequence[str]:
        """
        The list of packages in the package group.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def repositories(self) -> Sequence[str]:
        """
        The repository IDs of the package group's repositories.
        """
        return pulumi.get(self, "repositories")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackageDependencyResult(dict):
    def __init__(__self__, *,
                 dependency: str,
                 dependency_modifier: str,
                 dependency_type: str):
        """
        :param str dependency: The software package's dependency.
        :param str dependency_modifier: The modifier for the dependency.
        :param str dependency_type: The type of the dependency.
        """
        pulumi.set(__self__, "dependency", dependency)
        pulumi.set(__self__, "dependency_modifier", dependency_modifier)
        pulumi.set(__self__, "dependency_type", dependency_type)

    @property
    @pulumi.getter
    def dependency(self) -> str:
        """
        The software package's dependency.
        """
        return pulumi.get(self, "dependency")

    @property
    @pulumi.getter(name="dependencyModifier")
    def dependency_modifier(self) -> str:
        """
        The modifier for the dependency.
        """
        return pulumi.get(self, "dependency_modifier")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> str:
        """
        The type of the dependency.
        """
        return pulumi.get(self, "dependency_type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackageFileResult(dict):
    def __init__(__self__, *,
                 checksum: str,
                 checksum_type: str,
                 path: str,
                 size_in_bytes: str,
                 time_modified: str,
                 type: str):
        """
        :param str checksum: Checksum of the file.
        :param str checksum_type: Type of the checksum.
        :param str path: File path.
        :param str size_in_bytes: Size of the package in bytes.
        :param str time_modified: The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str type: Type of the package.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the file.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        File path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        Size of the package in bytes.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackageSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: Software source name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Software source name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Unique identifier for the package. Note that this is not an OCID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package. Note that this is not an OCID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 checksum: str,
                 checksum_type: str,
                 dependencies: Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult'],
                 description: str,
                 display_name: str,
                 files: Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult'],
                 is_latest: bool,
                 last_modified_date: str,
                 name: str,
                 os_families: Sequence[str],
                 size_in_bytes: str,
                 software_sources: Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult'],
                 type: str,
                 version: str):
        """
        :param str architecture: The architecture for which this software was built
        :param str checksum: Checksum of the file.
        :param str checksum_type: Type of the checksum.
        :param Sequence['GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyArgs'] dependencies: List of dependencies for the software package.
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param Sequence['GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileArgs'] files: List of files for the software package.
        :param bool is_latest: Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        :param str last_modified_date: The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str name: Unique identifier for the package. Note that this is not an OCID.
        :param Sequence[str] os_families: The OS families the package belongs to.
        :param str size_in_bytes: Size of the package in bytes.
        :param Sequence['GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceArgs'] software_sources: List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        :param str type: Type of the package.
        :param str version: Version of the package.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "dependencies", dependencies)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "files", files)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "last_modified_date", last_modified_date)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_families", os_families)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "software_sources", software_sources)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture for which this software was built
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the file.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def dependencies(self) -> Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult']:
        """
        List of dependencies for the software package.
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def files(self) -> Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult']:
        """
        List of files for the software package.
        """
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> bool:
        """
        Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> str:
        """
        The date and time the package was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "last_modified_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Unique identifier for the package. Note that this is not an OCID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Sequence[str]:
        """
        The OS families the package belongs to.
        """
        return pulumi.get(self, "os_families")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        Size of the package in bytes.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult']:
        """
        List of software sources that provide the software package. This property is deprecated and it will be removed in a future API release.
        """
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult(dict):
    def __init__(__self__, *,
                 dependency: str,
                 dependency_modifier: str,
                 dependency_type: str):
        """
        :param str dependency: The software package's dependency.
        :param str dependency_modifier: The modifier for the dependency.
        :param str dependency_type: The type of the dependency.
        """
        pulumi.set(__self__, "dependency", dependency)
        pulumi.set(__self__, "dependency_modifier", dependency_modifier)
        pulumi.set(__self__, "dependency_type", dependency_type)

    @property
    @pulumi.getter
    def dependency(self) -> str:
        """
        The software package's dependency.
        """
        return pulumi.get(self, "dependency")

    @property
    @pulumi.getter(name="dependencyModifier")
    def dependency_modifier(self) -> str:
        """
        The modifier for the dependency.
        """
        return pulumi.get(self, "dependency_modifier")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> str:
        """
        The type of the dependency.
        """
        return pulumi.get(self, "dependency_type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult(dict):
    def __init__(__self__, *,
                 checksum: str,
                 checksum_type: str,
                 path: str,
                 size_in_bytes: str,
                 time_modified: str,
                 type: str):
        """
        :param str checksum: Checksum of the file.
        :param str checksum_type: Type of the checksum.
        :param str path: File path.
        :param str size_in_bytes: Size of the package in bytes.
        :param str time_modified: The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str type: Type of the package.
        """
        pulumi.set(__self__, "checksum", checksum)
        pulumi.set(__self__, "checksum_type", checksum_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def checksum(self) -> str:
        """
        Checksum of the file.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> str:
        """
        Type of the checksum.
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        File path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        Size of the package in bytes.
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        """
        The date and time the file was last modified (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the package.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 software_source_type: str):
        """
        :param str description: Software source description.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        :param str software_source_type: Type of the software source.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Software source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether this is a required software source for Autonomous Linux instances. If true, the user can't unselect it.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        Type of the software source.
        """
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwareSourceVendorSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: User-friendly name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSoftwareSourceVendorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the entity to be queried.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceVendorsSoftwareSourceVendorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult']):
        """
        :param Sequence['GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemArgs'] items: List of software source vendors.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult']:
        """
        List of software source vendors.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_types: Sequence[str],
                 name: str,
                 os_families: Sequence[str]):
        """
        :param Sequence[str] arch_types: List of corresponding architecture types.
        :param str name: The name of the entity to be queried.
        :param Sequence[str] os_families: List of corresponding operating system families.
        """
        pulumi.set(__self__, "arch_types", arch_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os_families", os_families)

    @property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Sequence[str]:
        """
        List of corresponding architecture types.
        """
        return pulumi.get(self, "arch_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the entity to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Sequence[str]:
        """
        List of corresponding operating system families.
        """
        return pulumi.get(self, "os_families")


@pulumi.output_type
class GetSoftwareSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: str,
                 availability: str,
                 availability_at_oci: str,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_mandatory_for_autonomous_linux: bool,
                 os_family: str,
                 package_count: str,
                 repo_id: str,
                 size: float,
                 software_source_type: str,
                 software_source_version: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 url: str,
                 vendor_name: str,
                 vendor_software_sources: Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult']):
        """
        :param str arch_type: A filter to return only instances whose architecture type matches the given architecture.
        :param str availability: The availabilities of the software source in a non-OCI environment for a tenancy.
        :param str availability_at_oci: The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
        :param str compartment_id: (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: User-specified description for the software source.
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        :param bool is_mandatory_for_autonomous_linux: Indicates whether the software source is mandatory for the Autonomous Linux service.
        :param str os_family: A filter to return only resources that match the given operating system family.
        :param str package_count: Number of packages the software source contains.
        :param str repo_id: The repository ID for the software source.
        :param float size: The size of the software source in gigabytes (GB).
        :param str software_source_type: The type of the software source.
        :param str software_source_version: The version to assign to this custom software source.
        :param str state: A filter to return only software sources whose state matches the given state.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        :param str url: URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
        :param str vendor_name: A filter to return only resources that match the given vendor name.
        :param Sequence['GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceArgs'] vendor_software_sources: List of vendor software sources that are used for the basis of the versioned custom software source.
        """
        pulumi.set(__self__, "arch_type", arch_type)
        pulumi.set(__self__, "availability", availability)
        pulumi.set(__self__, "availability_at_oci", availability_at_oci)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_mandatory_for_autonomous_linux", is_mandatory_for_autonomous_linux)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "package_count", package_count)
        pulumi.set(__self__, "repo_id", repo_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "software_source_type", software_source_type)
        pulumi.set(__self__, "software_source_version", software_source_version)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vendor_name", vendor_name)
        pulumi.set(__self__, "vendor_software_sources", vendor_software_sources)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> str:
        """
        A filter to return only instances whose architecture type matches the given architecture.
        """
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def availability(self) -> str:
        """
        The availabilities of the software source in a non-OCI environment for a tenancy.
        """
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="availabilityAtOci")
    def availability_at_oci(self) -> str:
        """
        The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
        """
        return pulumi.get(self, "availability_at_oci")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-specified description for the software source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMandatoryForAutonomousLinux")
    def is_mandatory_for_autonomous_linux(self) -> bool:
        """
        Indicates whether the software source is mandatory for the Autonomous Linux service.
        """
        return pulumi.get(self, "is_mandatory_for_autonomous_linux")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        """
        A filter to return only resources that match the given operating system family.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> str:
        """
        Number of packages the software source contains.
        """
        return pulumi.get(self, "package_count")

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> str:
        """
        The repository ID for the software source.
        """
        return pulumi.get(self, "repo_id")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        The size of the software source in gigabytes (GB).
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> str:
        """
        The type of the software source.
        """
        return pulumi.get(self, "software_source_type")

    @property
    @pulumi.getter(name="softwareSourceVersion")
    def software_source_version(self) -> str:
        """
        The version to assign to this custom software source.
        """
        return pulumi.get(self, "software_source_version")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only software sources whose state matches the given state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        A filter to return only resources that match the given vendor name.
        """
        return pulumi.get(self, "vendor_name")

    @property
    @pulumi.getter(name="vendorSoftwareSources")
    def vendor_software_sources(self) -> Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult']:
        """
        List of vendor software sources that are used for the basis of the versioned custom software source.
        """
        return pulumi.get(self, "vendor_software_sources")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: A filter to return resources that match the given user-friendly name.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return resources that match the given user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWindowsUpdatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWindowsUpdatesWindowsUpdateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetWindowsUpdatesWindowsUpdateCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetWindowsUpdatesWindowsUpdateCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWindowsUpdatesWindowsUpdateCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 installable: str,
                 installation_requirements: Sequence[str],
                 is_reboot_required_for_installation: bool,
                 kb_article_ids: Sequence[str],
                 name: str,
                 size_in_bytes: str,
                 update_id: str,
                 update_type: str):
        """
        :param str description: Description of the update.
        :param str installable: Indicates whether the update can be installed using the service.
        :param Sequence[str] installation_requirements: List of requirements for installing the update on the managed instance.
        :param bool is_reboot_required_for_installation: Indicates whether a reboot is required to complete the installation of this update.
        :param Sequence[str] kb_article_ids: List of the Microsoft Knowledge Base Article Ids related to this Windows Update.
        :param str name: A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        :param str size_in_bytes: size of the package in bytes
        :param str update_id: Unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        :param str update_type: The type of Windows update.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "installable", installable)
        pulumi.set(__self__, "installation_requirements", installation_requirements)
        pulumi.set(__self__, "is_reboot_required_for_installation", is_reboot_required_for_installation)
        pulumi.set(__self__, "kb_article_ids", kb_article_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        pulumi.set(__self__, "update_id", update_id)
        pulumi.set(__self__, "update_type", update_type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the update.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def installable(self) -> str:
        """
        Indicates whether the update can be installed using the service.
        """
        return pulumi.get(self, "installable")

    @property
    @pulumi.getter(name="installationRequirements")
    def installation_requirements(self) -> Sequence[str]:
        """
        List of requirements for installing the update on the managed instance.
        """
        return pulumi.get(self, "installation_requirements")

    @property
    @pulumi.getter(name="isRebootRequiredForInstallation")
    def is_reboot_required_for_installation(self) -> bool:
        """
        Indicates whether a reboot is required to complete the installation of this update.
        """
        return pulumi.get(self, "is_reboot_required_for_installation")

    @property
    @pulumi.getter(name="kbArticleIds")
    def kb_article_ids(self) -> Sequence[str]:
        """
        List of the Microsoft Knowledge Base Article Ids related to this Windows Update.
        """
        return pulumi.get(self, "kb_article_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter based on the unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> str:
        """
        size of the package in bytes
        """
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="updateId")
    def update_id(self) -> str:
        """
        Unique identifier for the Windows update. Note that this is not an OCID, but is a unique identifier assigned by Microsoft.  Example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'
        """
        return pulumi.get(self, "update_id")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> str:
        """
        The type of Windows update.
        """
        return pulumi.get(self, "update_type")


