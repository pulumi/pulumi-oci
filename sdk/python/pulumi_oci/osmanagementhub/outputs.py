# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'LifecycleEnvironmentManagedInstanceId',
    'LifecycleEnvironmentStage',
    'LifecycleEnvironmentStageManagedInstanceId',
    'LifecycleEnvironmentStageSoftwareSourceId',
    'ManagedInstanceGroupSoftwareSource',
    'ManagementStationMirror',
    'ManagementStationMirrorSyncStatus',
    'ManagementStationProxy',
    'ProfileLifecycleEnvironment',
    'ProfileLifecycleStage',
    'ProfileManagedInstanceGroup',
    'ProfileSoftwareSource',
    'SoftwareSourceCustomSoftwareSourceFilter',
    'SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter',
    'SoftwareSourceCustomSoftwareSourceFilterPackageFilter',
    'SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter',
    'SoftwareSourceVendorSoftwareSource',
    'GetLifecycleEnvironmentManagedInstanceIdResult',
    'GetLifecycleEnvironmentStageResult',
    'GetLifecycleEnvironmentStageManagedInstanceIdResult',
    'GetLifecycleEnvironmentStageSoftwareSourceIdResult',
    'GetLifecycleEnvironmentsFilterResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemManagedInstanceIdResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageManagedInstanceIdResult',
    'GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult',
    'GetLifecycleStageManagedInstanceIdResult',
    'GetLifecycleStageSoftwareSourceIdResult',
    'GetLifecycleStagesFilterResult',
    'GetLifecycleStagesLifecycleStageCollectionResult',
    'GetLifecycleStagesLifecycleStageCollectionItemResult',
    'GetLifecycleStagesLifecycleStageCollectionItemManagedInstanceIdResult',
    'GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult',
    'GetManagedInstanceGroupAvailableModulesFilterResult',
    'GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionResult',
    'GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult',
    'GetManagedInstanceGroupAvailablePackagesFilterResult',
    'GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionResult',
    'GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult',
    'GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult',
    'GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult',
    'GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult',
    'GetManagedInstanceGroupAvailableSoftwareSourcesFilterResult',
    'GetManagedInstanceGroupSoftwareSourceResult',
    'GetManagedInstanceGroupsFilterResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult',
    'GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult',
    'GetManagementStationMirrorResult',
    'GetManagementStationMirrorSyncStatusResult',
    'GetManagementStationMirrorsFilterResult',
    'GetManagementStationMirrorsMirrorsCollectionResult',
    'GetManagementStationMirrorsMirrorsCollectionItemResult',
    'GetManagementStationProxyResult',
    'GetManagementStationsFilterResult',
    'GetManagementStationsManagementStationCollectionResult',
    'GetManagementStationsManagementStationCollectionItemResult',
    'GetManagementStationsManagementStationCollectionItemMirrorResult',
    'GetManagementStationsManagementStationCollectionItemMirrorSyncStatusResult',
    'GetManagementStationsManagementStationCollectionItemProxyResult',
    'GetProfileLifecycleEnvironmentResult',
    'GetProfileLifecycleStageResult',
    'GetProfileManagedInstanceGroupResult',
    'GetProfileSoftwareSourceResult',
    'GetProfilesFilterResult',
    'GetProfilesProfileCollectionResult',
    'GetProfilesProfileCollectionItemResult',
    'GetProfilesProfileCollectionItemLifecycleEnvironmentResult',
    'GetProfilesProfileCollectionItemLifecycleStageResult',
    'GetProfilesProfileCollectionItemManagedInstanceGroupResult',
    'GetProfilesProfileCollectionItemSoftwareSourceResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult',
    'GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult',
    'GetSoftwareSourceModuleStreamProfilesFilterResult',
    'GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionResult',
    'GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult',
    'GetSoftwareSourceModuleStreamsFilterResult',
    'GetSoftwareSourceModuleStreamsModuleStreamCollectionResult',
    'GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult',
    'GetSoftwareSourcePackageGroupsFilterResult',
    'GetSoftwareSourcePackageGroupsPackageGroupCollectionResult',
    'GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult',
    'GetSoftwareSourceSoftwarePackageDependencyResult',
    'GetSoftwareSourceSoftwarePackageFileResult',
    'GetSoftwareSourceSoftwarePackageSoftwareSourceResult',
    'GetSoftwareSourceSoftwarePackagesFilterResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult',
    'GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult',
    'GetSoftwareSourceVendorSoftwareSourceResult',
    'GetSoftwareSourceVendorsFilterResult',
    'GetSoftwareSourceVendorsSoftwareSourceVendorCollectionResult',
    'GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult',
    'GetSoftwareSourcesFilterResult',
    'GetSoftwareSourcesSoftwareSourceCollectionResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterModuleStreamProfileFilterResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageFilterResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageGroupFilterResult',
    'GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult',
]

@pulumi.output_type
class LifecycleEnvironmentManagedInstanceId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentManagedInstanceId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentManagedInstanceId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentManagedInstanceId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LifecycleEnvironmentStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "archType":
            suggest = "arch_type"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "lifecycleEnvironmentId":
            suggest = "lifecycle_environment_id"
        elif key == "managedInstanceIds":
            suggest = "managed_instance_ids"
        elif key == "osFamily":
            suggest = "os_family"
        elif key == "softwareSourceIds":
            suggest = "software_source_ids"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeModified":
            suggest = "time_modified"
        elif key == "vendorName":
            suggest = "vendor_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 rank: int,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_environment_id: Optional[str] = None,
                 managed_instance_ids: Optional[Sequence['outputs.LifecycleEnvironmentStageManagedInstanceId']] = None,
                 os_family: Optional[str] = None,
                 software_source_ids: Optional[Sequence['outputs.LifecycleEnvironmentStageSoftwareSourceId']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "rank", rank)
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def rank(self) -> int:
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence['outputs.LifecycleEnvironmentStageManagedInstanceId']]:
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence['outputs.LifecycleEnvironmentStageSoftwareSourceId']]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class LifecycleEnvironmentStageManagedInstanceId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentStageManagedInstanceId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentStageManagedInstanceId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentStageManagedInstanceId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LifecycleEnvironmentStageSoftwareSourceId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleEnvironmentStageSoftwareSourceId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleEnvironmentStageSoftwareSourceId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleEnvironmentStageSoftwareSourceId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class ManagedInstanceGroupSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceGroupSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceGroupSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceGroupSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class ManagementStationMirror(dict):
    def __init__(__self__, *,
                 directory: str,
                 port: str,
                 sslport: str,
                 sslcert: Optional[str] = None):
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sslport", sslport)
        if sslcert is not None:
            pulumi.set(__self__, "sslcert", sslcert)

    @property
    @pulumi.getter
    def directory(self) -> str:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sslport(self) -> str:
        return pulumi.get(self, "sslport")

    @property
    @pulumi.getter
    def sslcert(self) -> Optional[str]:
        return pulumi.get(self, "sslcert")


@pulumi.output_type
class ManagementStationMirrorSyncStatus(dict):
    def __init__(__self__, *,
                 failed: Optional[int] = None,
                 queued: Optional[int] = None,
                 synced: Optional[int] = None,
                 syncing: Optional[int] = None,
                 unsynced: Optional[int] = None):
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if queued is not None:
            pulumi.set(__self__, "queued", queued)
        if synced is not None:
            pulumi.set(__self__, "synced", synced)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if unsynced is not None:
            pulumi.set(__self__, "unsynced", unsynced)

    @property
    @pulumi.getter
    def failed(self) -> Optional[int]:
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def queued(self) -> Optional[int]:
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def synced(self) -> Optional[int]:
        return pulumi.get(self, "synced")

    @property
    @pulumi.getter
    def syncing(self) -> Optional[int]:
        return pulumi.get(self, "syncing")

    @property
    @pulumi.getter
    def unsynced(self) -> Optional[int]:
        return pulumi.get(self, "unsynced")


@pulumi.output_type
class ManagementStationProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementStationProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementStationProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementStationProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 forward: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def forward(self) -> Optional[str]:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class ProfileLifecycleEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileLifecycleEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileLifecycleEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileLifecycleEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileLifecycleStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileLifecycleStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileLifecycleStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileLifecycleStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileManagedInstanceGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileManagedInstanceGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileManagedInstanceGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileManagedInstanceGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ProfileSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "softwareSourceType":
            suggest = "software_source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleStreamProfileFilters":
            suggest = "module_stream_profile_filters"
        elif key == "packageFilters":
            suggest = "package_filters"
        elif key == "packageGroupFilters":
            suggest = "package_group_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 module_stream_profile_filters: Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter']] = None,
                 package_filters: Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageFilter']] = None,
                 package_group_filters: Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter']] = None):
        if module_stream_profile_filters is not None:
            pulumi.set(__self__, "module_stream_profile_filters", module_stream_profile_filters)
        if package_filters is not None:
            pulumi.set(__self__, "package_filters", package_filters)
        if package_group_filters is not None:
            pulumi.set(__self__, "package_group_filters", package_group_filters)

    @property
    @pulumi.getter(name="moduleStreamProfileFilters")
    def module_stream_profile_filters(self) -> Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter']]:
        return pulumi.get(self, "module_stream_profile_filters")

    @property
    @pulumi.getter(name="packageFilters")
    def package_filters(self) -> Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageFilter']]:
        return pulumi.get(self, "package_filters")

    @property
    @pulumi.getter(name="packageGroupFilters")
    def package_group_filters(self) -> Optional[Sequence['outputs.SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter']]:
        return pulumi.get(self, "package_group_filters")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "moduleName":
            suggest = "module_name"
        elif key == "profileName":
            suggest = "profile_name"
        elif key == "streamName":
            suggest = "stream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 module_name: str,
                 profile_name: Optional[str] = None,
                 stream_name: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "module_name", module_name)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[str]:
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilterPackageFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "packageName":
            suggest = "package_name"
        elif key == "packageNamePattern":
            suggest = "package_name_pattern"
        elif key == "packageVersion":
            suggest = "package_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilterPackageFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 package_name: Optional[str] = None,
                 package_name_pattern: Optional[str] = None,
                 package_version: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_name_pattern is not None:
            pulumi.set(__self__, "package_name_pattern", package_name_pattern)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageNamePattern")
    def package_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "package_name_pattern")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[str]:
        return pulumi.get(self, "package_version")


@pulumi.output_type
class SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "packageGroups":
            suggest = "package_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 package_groups: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        if package_groups is not None:
            pulumi.set(__self__, "package_groups", package_groups)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageGroups")
    def package_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "package_groups")


@pulumi.output_type
class SoftwareSourceVendorSoftwareSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SoftwareSourceVendorSoftwareSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SoftwareSourceVendorSoftwareSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SoftwareSourceVendorSoftwareSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentStageResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_environment_id: Optional[str] = None,
                 managed_instance_ids: Optional[Sequence['outputs.GetLifecycleEnvironmentStageManagedInstanceIdResult']] = None,
                 os_family: Optional[str] = None,
                 rank: Optional[int] = None,
                 software_source_ids: Optional[Sequence['outputs.GetLifecycleEnvironmentStageSoftwareSourceIdResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentStageManagedInstanceIdResult']]:
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def rank(self) -> Optional[int]:
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentStageSoftwareSourceIdResult']]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleEnvironmentStageManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentStageSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetLifecycleEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 managed_instance_ids: Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemManagedInstanceIdResult']] = None,
                 os_family: Optional[str] = None,
                 stages: Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemManagedInstanceIdResult']]:
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult']]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_environment_id: Optional[str] = None,
                 managed_instance_ids: Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageManagedInstanceIdResult']] = None,
                 os_family: Optional[str] = None,
                 rank: Optional[int] = None,
                 software_source_ids: Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageManagedInstanceIdResult']]:
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def rank(self) -> Optional[int]:
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence['outputs.GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult']]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetLifecycleStageManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleStageSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetLifecycleStagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_environment_id: Optional[str] = None,
                 managed_instance_ids: Optional[Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemManagedInstanceIdResult']] = None,
                 os_family: Optional[str] = None,
                 rank: Optional[int] = None,
                 software_source_ids: Optional[Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemManagedInstanceIdResult']]:
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def rank(self) -> Optional[int]:
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence['outputs.GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult']]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionItemManagedInstanceIdResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLifecycleStagesLifecycleStageCollectionItemSoftwareSourceIdResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceGroupAvailableModulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 software_source_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_latest: Optional[bool] = None,
                 name: Optional[str] = None,
                 software_sources: Optional[Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult']] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_latest is not None:
            pulumi.set(__self__, "is_latest", is_latest)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if software_sources is not None:
            pulumi.set(__self__, "software_sources", software_sources)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> Optional[bool]:
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Optional[Sequence['outputs.GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult']]:
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetManagedInstanceGroupAvailableSoftwareSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagedInstanceGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 managed_instance_count: Optional[int] = None,
                 managed_instance_ids: Optional[Sequence[str]] = None,
                 os_family: Optional[str] = None,
                 pending_job_count: Optional[int] = None,
                 software_source_ids: Optional[Sequence[str]] = None,
                 software_sources: Optional[Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_count is not None:
            pulumi.set(__self__, "managed_instance_count", managed_instance_count)
        if managed_instance_ids is not None:
            pulumi.set(__self__, "managed_instance_ids", managed_instance_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if pending_job_count is not None:
            pulumi.set(__self__, "pending_job_count", pending_job_count)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if software_sources is not None:
            pulumi.set(__self__, "software_sources", software_sources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceCount")
    def managed_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "managed_instance_count")

    @property
    @pulumi.getter(name="managedInstanceIds")
    def managed_instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_instance_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="pendingJobCount")
    def pending_job_count(self) -> Optional[int]:
        return pulumi.get(self, "pending_job_count")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Optional[Sequence['outputs.GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult']]:
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetManagementStationMirrorResult(dict):
    def __init__(__self__, *,
                 directory: Optional[str] = None,
                 port: Optional[str] = None,
                 sslcert: Optional[str] = None,
                 sslport: Optional[str] = None):
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sslcert is not None:
            pulumi.set(__self__, "sslcert", sslcert)
        if sslport is not None:
            pulumi.set(__self__, "sslport", sslport)

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sslcert(self) -> Optional[str]:
        return pulumi.get(self, "sslcert")

    @property
    @pulumi.getter
    def sslport(self) -> Optional[str]:
        return pulumi.get(self, "sslport")


@pulumi.output_type
class GetManagementStationMirrorSyncStatusResult(dict):
    def __init__(__self__, *,
                 failed: Optional[int] = None,
                 queued: Optional[int] = None,
                 synced: Optional[int] = None,
                 syncing: Optional[int] = None,
                 unsynced: Optional[int] = None):
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if queued is not None:
            pulumi.set(__self__, "queued", queued)
        if synced is not None:
            pulumi.set(__self__, "synced", synced)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if unsynced is not None:
            pulumi.set(__self__, "unsynced", unsynced)

    @property
    @pulumi.getter
    def failed(self) -> Optional[int]:
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def queued(self) -> Optional[int]:
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def synced(self) -> Optional[int]:
        return pulumi.get(self, "synced")

    @property
    @pulumi.getter
    def syncing(self) -> Optional[int]:
        return pulumi.get(self, "syncing")

    @property
    @pulumi.getter
    def unsynced(self) -> Optional[int]:
        return pulumi.get(self, "unsynced")


@pulumi.output_type
class GetManagementStationMirrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementStationMirrorsMirrorsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagementStationMirrorsMirrorsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagementStationMirrorsMirrorsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagementStationMirrorsMirrorsCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 log: Optional[str] = None,
                 os_family: Optional[str] = None,
                 percentage: Optional[int] = None,
                 state: Optional[str] = None,
                 time_last_synced: Optional[str] = None,
                 type: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_last_synced is not None:
            pulumi.set(__self__, "time_last_synced", time_last_synced)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> Optional[str]:
        return pulumi.get(self, "time_last_synced")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetManagementStationProxyResult(dict):
    def __init__(__self__, *,
                 forward: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 port: Optional[str] = None):
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def forward(self) -> Optional[str]:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetManagementStationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 managed_instance_id: Optional[str] = None,
                 mirror_capacity: Optional[int] = None,
                 mirror_sync_statuses: Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemMirrorSyncStatusResult']] = None,
                 mirrors: Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemMirrorResult']] = None,
                 overall_percentage: Optional[int] = None,
                 overall_state: Optional[str] = None,
                 profile_id: Optional[str] = None,
                 proxies: Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemProxyResult']] = None,
                 scheduled_job_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 total_mirrors: Optional[int] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_instance_id is not None:
            pulumi.set(__self__, "managed_instance_id", managed_instance_id)
        if mirror_capacity is not None:
            pulumi.set(__self__, "mirror_capacity", mirror_capacity)
        if mirror_sync_statuses is not None:
            pulumi.set(__self__, "mirror_sync_statuses", mirror_sync_statuses)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if overall_percentage is not None:
            pulumi.set(__self__, "overall_percentage", overall_percentage)
        if overall_state is not None:
            pulumi.set(__self__, "overall_state", overall_state)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if proxies is not None:
            pulumi.set(__self__, "proxies", proxies)
        if scheduled_job_id is not None:
            pulumi.set(__self__, "scheduled_job_id", scheduled_job_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if total_mirrors is not None:
            pulumi.set(__self__, "total_mirrors", total_mirrors)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedInstanceId")
    def managed_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_id")

    @property
    @pulumi.getter(name="mirrorCapacity")
    def mirror_capacity(self) -> Optional[int]:
        return pulumi.get(self, "mirror_capacity")

    @property
    @pulumi.getter(name="mirrorSyncStatuses")
    def mirror_sync_statuses(self) -> Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemMirrorSyncStatusResult']]:
        return pulumi.get(self, "mirror_sync_statuses")

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemMirrorResult']]:
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="overallPercentage")
    def overall_percentage(self) -> Optional[int]:
        return pulumi.get(self, "overall_percentage")

    @property
    @pulumi.getter(name="overallState")
    def overall_state(self) -> Optional[str]:
        return pulumi.get(self, "overall_state")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[str]:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def proxies(self) -> Optional[Sequence['outputs.GetManagementStationsManagementStationCollectionItemProxyResult']]:
        return pulumi.get(self, "proxies")

    @property
    @pulumi.getter(name="scheduledJobId")
    def scheduled_job_id(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_job_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="totalMirrors")
    def total_mirrors(self) -> Optional[int]:
        return pulumi.get(self, "total_mirrors")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionItemMirrorResult(dict):
    def __init__(__self__, *,
                 directory: Optional[str] = None,
                 port: Optional[str] = None,
                 sslcert: Optional[str] = None,
                 sslport: Optional[str] = None):
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sslcert is not None:
            pulumi.set(__self__, "sslcert", sslcert)
        if sslport is not None:
            pulumi.set(__self__, "sslport", sslport)

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sslcert(self) -> Optional[str]:
        return pulumi.get(self, "sslcert")

    @property
    @pulumi.getter
    def sslport(self) -> Optional[str]:
        return pulumi.get(self, "sslport")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionItemMirrorSyncStatusResult(dict):
    def __init__(__self__, *,
                 failed: Optional[int] = None,
                 queued: Optional[int] = None,
                 synced: Optional[int] = None,
                 syncing: Optional[int] = None,
                 unsynced: Optional[int] = None):
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if queued is not None:
            pulumi.set(__self__, "queued", queued)
        if synced is not None:
            pulumi.set(__self__, "synced", synced)
        if syncing is not None:
            pulumi.set(__self__, "syncing", syncing)
        if unsynced is not None:
            pulumi.set(__self__, "unsynced", unsynced)

    @property
    @pulumi.getter
    def failed(self) -> Optional[int]:
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter
    def queued(self) -> Optional[int]:
        return pulumi.get(self, "queued")

    @property
    @pulumi.getter
    def synced(self) -> Optional[int]:
        return pulumi.get(self, "synced")

    @property
    @pulumi.getter
    def syncing(self) -> Optional[int]:
        return pulumi.get(self, "syncing")

    @property
    @pulumi.getter
    def unsynced(self) -> Optional[int]:
        return pulumi.get(self, "unsynced")


@pulumi.output_type
class GetManagementStationsManagementStationCollectionItemProxyResult(dict):
    def __init__(__self__, *,
                 forward: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 port: Optional[str] = None):
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def forward(self) -> Optional[str]:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetProfileLifecycleEnvironmentResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfileLifecycleStageResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfileManagedInstanceGroupResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfileSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProfilesProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProfilesProfileCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProfilesProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_environments: Optional[Sequence['outputs.GetProfilesProfileCollectionItemLifecycleEnvironmentResult']] = None,
                 lifecycle_stage_id: Optional[str] = None,
                 lifecycle_stages: Optional[Sequence['outputs.GetProfilesProfileCollectionItemLifecycleStageResult']] = None,
                 managed_instance_group_id: Optional[str] = None,
                 managed_instance_groups: Optional[Sequence['outputs.GetProfilesProfileCollectionItemManagedInstanceGroupResult']] = None,
                 management_station_id: Optional[str] = None,
                 os_family: Optional[str] = None,
                 profile_type: Optional[str] = None,
                 software_source_ids: Optional[Sequence[str]] = None,
                 software_sources: Optional[Sequence['outputs.GetProfilesProfileCollectionItemSoftwareSourceResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 vendor_name: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_environments is not None:
            pulumi.set(__self__, "lifecycle_environments", lifecycle_environments)
        if lifecycle_stage_id is not None:
            pulumi.set(__self__, "lifecycle_stage_id", lifecycle_stage_id)
        if lifecycle_stages is not None:
            pulumi.set(__self__, "lifecycle_stages", lifecycle_stages)
        if managed_instance_group_id is not None:
            pulumi.set(__self__, "managed_instance_group_id", managed_instance_group_id)
        if managed_instance_groups is not None:
            pulumi.set(__self__, "managed_instance_groups", managed_instance_groups)
        if management_station_id is not None:
            pulumi.set(__self__, "management_station_id", management_station_id)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if software_source_ids is not None:
            pulumi.set(__self__, "software_source_ids", software_source_ids)
        if software_sources is not None:
            pulumi.set(__self__, "software_sources", software_sources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironments")
    def lifecycle_environments(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemLifecycleEnvironmentResult']]:
        return pulumi.get(self, "lifecycle_environments")

    @property
    @pulumi.getter(name="lifecycleStageId")
    def lifecycle_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_stage_id")

    @property
    @pulumi.getter(name="lifecycleStages")
    def lifecycle_stages(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemLifecycleStageResult']]:
        return pulumi.get(self, "lifecycle_stages")

    @property
    @pulumi.getter(name="managedInstanceGroupId")
    def managed_instance_group_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_instance_group_id")

    @property
    @pulumi.getter(name="managedInstanceGroups")
    def managed_instance_groups(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemManagedInstanceGroupResult']]:
        return pulumi.get(self, "managed_instance_groups")

    @property
    @pulumi.getter(name="managementStationId")
    def management_station_id(self) -> Optional[str]:
        return pulumi.get(self, "management_station_id")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[str]:
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="softwareSourceIds")
    def software_source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "software_source_ids")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Optional[Sequence['outputs.GetProfilesProfileCollectionItemSoftwareSourceResult']]:
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetProfilesProfileCollectionItemLifecycleEnvironmentResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfilesProfileCollectionItemLifecycleStageResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfilesProfileCollectionItemManagedInstanceGroupResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetProfilesProfileCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterResult(dict):
    def __init__(__self__, *,
                 module_stream_profile_filters: Optional[Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult']] = None,
                 package_filters: Optional[Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult']] = None,
                 package_group_filters: Optional[Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult']] = None):
        if module_stream_profile_filters is not None:
            pulumi.set(__self__, "module_stream_profile_filters", module_stream_profile_filters)
        if package_filters is not None:
            pulumi.set(__self__, "package_filters", package_filters)
        if package_group_filters is not None:
            pulumi.set(__self__, "package_group_filters", package_group_filters)

    @property
    @pulumi.getter(name="moduleStreamProfileFilters")
    def module_stream_profile_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult']]:
        return pulumi.get(self, "module_stream_profile_filters")

    @property
    @pulumi.getter(name="packageFilters")
    def package_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult']]:
        return pulumi.get(self, "package_filters")

    @property
    @pulumi.getter(name="packageGroupFilters")
    def package_group_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult']]:
        return pulumi.get(self, "package_group_filters")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 module_name: Optional[str] = None,
                 profile_name: Optional[str] = None,
                 stream_name: Optional[str] = None):
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if module_name is not None:
            pulumi.set(__self__, "module_name", module_name)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> Optional[str]:
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[str]:
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterPackageFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 package_name: Optional[str] = None,
                 package_name_pattern: Optional[str] = None,
                 package_version: Optional[str] = None):
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_name_pattern is not None:
            pulumi.set(__self__, "package_name_pattern", package_name_pattern)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageNamePattern")
    def package_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "package_name_pattern")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[str]:
        return pulumi.get(self, "package_version")


@pulumi.output_type
class GetSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 package_groups: Optional[Sequence[str]] = None):
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if package_groups is not None:
            pulumi.set(__self__, "package_groups", package_groups)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageGroups")
    def package_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "package_groups")


@pulumi.output_type
class GetSoftwareSourceModuleStreamProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 module_name: Optional[str] = None,
                 name: Optional[str] = None,
                 packages: Optional[Sequence[str]] = None,
                 stream_name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if module_name is not None:
            pulumi.set(__self__, "module_name", module_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> Optional[str]:
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[str]:
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetSoftwareSourceModuleStreamsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceModuleStreamsModuleStreamCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceModuleStreamsModuleStreamCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 description: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 is_latest: Optional[bool] = None,
                 module_name: Optional[str] = None,
                 name: Optional[str] = None,
                 packages: Optional[Sequence[str]] = None,
                 profiles: Optional[Sequence[str]] = None,
                 software_source_id: Optional[str] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_latest is not None:
            pulumi.set(__self__, "is_latest", is_latest)
        if module_name is not None:
            pulumi.set(__self__, "module_name", module_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> Optional[bool]:
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> Optional[str]:
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[str]:
        return pulumi.get(self, "software_source_id")


@pulumi.output_type
class GetSoftwareSourcePackageGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourcePackageGroupsPackageGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourcePackageGroupsPackageGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_order: Optional[int] = None,
                 group_type: Optional[str] = None,
                 id: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 is_user_visible: Optional[bool] = None,
                 name: Optional[str] = None,
                 packages: Optional[Sequence[str]] = None,
                 repositories: Optional[Sequence[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_user_visible is not None:
            pulumi.set(__self__, "is_user_visible", is_user_visible)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[str]:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isUserVisible")
    def is_user_visible(self) -> Optional[bool]:
        return pulumi.get(self, "is_user_visible")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repositories")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackageDependencyResult(dict):
    def __init__(__self__, *,
                 dependency: Optional[str] = None,
                 dependency_modifier: Optional[str] = None,
                 dependency_type: Optional[str] = None):
        if dependency is not None:
            pulumi.set(__self__, "dependency", dependency)
        if dependency_modifier is not None:
            pulumi.set(__self__, "dependency_modifier", dependency_modifier)
        if dependency_type is not None:
            pulumi.set(__self__, "dependency_type", dependency_type)

    @property
    @pulumi.getter
    def dependency(self) -> Optional[str]:
        return pulumi.get(self, "dependency")

    @property
    @pulumi.getter(name="dependencyModifier")
    def dependency_modifier(self) -> Optional[str]:
        return pulumi.get(self, "dependency_modifier")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> Optional[str]:
        return pulumi.get(self, "dependency_type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackageFileResult(dict):
    def __init__(__self__, *,
                 checksum: Optional[str] = None,
                 checksum_type: Optional[str] = None,
                 path: Optional[str] = None,
                 size_in_bytes: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 type: Optional[str] = None):
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[str]:
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackageSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemResult(dict):
    def __init__(__self__, *,
                 architecture: Optional[str] = None,
                 checksum: Optional[str] = None,
                 checksum_type: Optional[str] = None,
                 dependencies: Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult']] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 files: Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult']] = None,
                 is_latest: Optional[bool] = None,
                 last_modified_date: Optional[str] = None,
                 name: Optional[str] = None,
                 size_in_bytes: Optional[str] = None,
                 software_sources: Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult']] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if is_latest is not None:
            pulumi.set(__self__, "is_latest", is_latest)
        if last_modified_date is not None:
            pulumi.set(__self__, "last_modified_date", last_modified_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if software_sources is not None:
            pulumi.set(__self__, "software_sources", software_sources)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[str]:
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult']]:
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult']]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> Optional[bool]:
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> Optional[str]:
        return pulumi.get(self, "last_modified_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="softwareSources")
    def software_sources(self) -> Optional[Sequence['outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult']]:
        return pulumi.get(self, "software_sources")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependencyResult(dict):
    def __init__(__self__, *,
                 dependency: Optional[str] = None,
                 dependency_modifier: Optional[str] = None,
                 dependency_type: Optional[str] = None):
        if dependency is not None:
            pulumi.set(__self__, "dependency", dependency)
        if dependency_modifier is not None:
            pulumi.set(__self__, "dependency_modifier", dependency_modifier)
        if dependency_type is not None:
            pulumi.set(__self__, "dependency_type", dependency_type)

    @property
    @pulumi.getter
    def dependency(self) -> Optional[str]:
        return pulumi.get(self, "dependency")

    @property
    @pulumi.getter(name="dependencyModifier")
    def dependency_modifier(self) -> Optional[str]:
        return pulumi.get(self, "dependency_modifier")

    @property
    @pulumi.getter(name="dependencyType")
    def dependency_type(self) -> Optional[str]:
        return pulumi.get(self, "dependency_type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFileResult(dict):
    def __init__(__self__, *,
                 checksum: Optional[str] = None,
                 checksum_type: Optional[str] = None,
                 path: Optional[str] = None,
                 size_in_bytes: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 type: Optional[str] = None):
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[str]:
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 software_source_type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")


@pulumi.output_type
class GetSoftwareSourceVendorSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSoftwareSourceVendorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourceVendorsSoftwareSourceVendorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourceVendorsSoftwareSourceVendorCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_types: Optional[Sequence[str]] = None,
                 name: Optional[str] = None,
                 os_families: Optional[Sequence[str]] = None):
        if arch_types is not None:
            pulumi.set(__self__, "arch_types", arch_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_families is not None:
            pulumi.set(__self__, "os_families", os_families)

    @property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "arch_types")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osFamilies")
    def os_families(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "os_families")


@pulumi.output_type
class GetSoftwareSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 arch_type: Optional[str] = None,
                 availability: Optional[str] = None,
                 checksum_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 custom_software_source_filters: Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 gpg_key_fingerprint: Optional[str] = None,
                 gpg_key_id: Optional[str] = None,
                 gpg_key_url: Optional[str] = None,
                 id: Optional[str] = None,
                 is_automatically_updated: Optional[bool] = None,
                 os_family: Optional[str] = None,
                 package_count: Optional[str] = None,
                 repo_id: Optional[str] = None,
                 software_source_type: Optional[str] = None,
                 software_source_version: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 url: Optional[str] = None,
                 vendor_name: Optional[str] = None,
                 vendor_software_sources: Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult']] = None):
        if arch_type is not None:
            pulumi.set(__self__, "arch_type", arch_type)
        if availability is not None:
            pulumi.set(__self__, "availability", availability)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if custom_software_source_filters is not None:
            pulumi.set(__self__, "custom_software_source_filters", custom_software_source_filters)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gpg_key_fingerprint is not None:
            pulumi.set(__self__, "gpg_key_fingerprint", gpg_key_fingerprint)
        if gpg_key_id is not None:
            pulumi.set(__self__, "gpg_key_id", gpg_key_id)
        if gpg_key_url is not None:
            pulumi.set(__self__, "gpg_key_url", gpg_key_url)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_automatically_updated is not None:
            pulumi.set(__self__, "is_automatically_updated", is_automatically_updated)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if package_count is not None:
            pulumi.set(__self__, "package_count", package_count)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if software_source_type is not None:
            pulumi.set(__self__, "software_source_type", software_source_type)
        if software_source_version is not None:
            pulumi.set(__self__, "software_source_version", software_source_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)
        if vendor_software_sources is not None:
            pulumi.set(__self__, "vendor_software_sources", vendor_software_sources)

    @property
    @pulumi.getter(name="archType")
    def arch_type(self) -> Optional[str]:
        return pulumi.get(self, "arch_type")

    @property
    @pulumi.getter
    def availability(self) -> Optional[str]:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[str]:
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="customSoftwareSourceFilters")
    def custom_software_source_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterResult']]:
        return pulumi.get(self, "custom_software_source_filters")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gpgKeyFingerprint")
    def gpg_key_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "gpg_key_fingerprint")

    @property
    @pulumi.getter(name="gpgKeyId")
    def gpg_key_id(self) -> Optional[str]:
        return pulumi.get(self, "gpg_key_id")

    @property
    @pulumi.getter(name="gpgKeyUrl")
    def gpg_key_url(self) -> Optional[str]:
        return pulumi.get(self, "gpg_key_url")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutomaticallyUpdated")
    def is_automatically_updated(self) -> Optional[bool]:
        return pulumi.get(self, "is_automatically_updated")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> Optional[str]:
        return pulumi.get(self, "package_count")

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[str]:
        return pulumi.get(self, "repo_id")

    @property
    @pulumi.getter(name="softwareSourceType")
    def software_source_type(self) -> Optional[str]:
        return pulumi.get(self, "software_source_type")

    @property
    @pulumi.getter(name="softwareSourceVersion")
    def software_source_version(self) -> Optional[str]:
        return pulumi.get(self, "software_source_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[str]:
        return pulumi.get(self, "vendor_name")

    @property
    @pulumi.getter(name="vendorSoftwareSources")
    def vendor_software_sources(self) -> Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult']]:
        return pulumi.get(self, "vendor_software_sources")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterResult(dict):
    def __init__(__self__, *,
                 module_stream_profile_filters: Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterModuleStreamProfileFilterResult']] = None,
                 package_filters: Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageFilterResult']] = None,
                 package_group_filters: Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageGroupFilterResult']] = None):
        if module_stream_profile_filters is not None:
            pulumi.set(__self__, "module_stream_profile_filters", module_stream_profile_filters)
        if package_filters is not None:
            pulumi.set(__self__, "package_filters", package_filters)
        if package_group_filters is not None:
            pulumi.set(__self__, "package_group_filters", package_group_filters)

    @property
    @pulumi.getter(name="moduleStreamProfileFilters")
    def module_stream_profile_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterModuleStreamProfileFilterResult']]:
        return pulumi.get(self, "module_stream_profile_filters")

    @property
    @pulumi.getter(name="packageFilters")
    def package_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageFilterResult']]:
        return pulumi.get(self, "package_filters")

    @property
    @pulumi.getter(name="packageGroupFilters")
    def package_group_filters(self) -> Optional[Sequence['outputs.GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageGroupFilterResult']]:
        return pulumi.get(self, "package_group_filters")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterModuleStreamProfileFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 module_name: Optional[str] = None,
                 profile_name: Optional[str] = None,
                 stream_name: Optional[str] = None):
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if module_name is not None:
            pulumi.set(__self__, "module_name", module_name)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> Optional[str]:
        return pulumi.get(self, "module_name")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[str]:
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 package_name: Optional[str] = None,
                 package_name_pattern: Optional[str] = None,
                 package_version: Optional[str] = None):
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_name_pattern is not None:
            pulumi.set(__self__, "package_name_pattern", package_name_pattern)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageNamePattern")
    def package_name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "package_name_pattern")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[str]:
        return pulumi.get(self, "package_version")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemCustomSoftwareSourceFilterPackageGroupFilterResult(dict):
    def __init__(__self__, *,
                 filter_type: Optional[str] = None,
                 package_groups: Optional[Sequence[str]] = None):
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if package_groups is not None:
            pulumi.set(__self__, "package_groups", package_groups)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="packageGroups")
    def package_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "package_groups")


@pulumi.output_type
class GetSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSourceResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


