# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SoftwareSourceChangeAvailabilityManagementArgs', 'SoftwareSourceChangeAvailabilityManagement']

@pulumi.input_type
class SoftwareSourceChangeAvailabilityManagementArgs:
    def __init__(__self__, *,
                 software_source_availabilities: pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]):
        """
        The set of arguments for constructing a SoftwareSourceChangeAvailabilityManagement resource.
        :param pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]] software_source_availabilities: List of vendor software sources and their availability statuses.
        """
        pulumi.set(__self__, "software_source_availabilities", software_source_availabilities)

    @property
    @pulumi.getter(name="softwareSourceAvailabilities")
    def software_source_availabilities(self) -> pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]:
        """
        List of vendor software sources and their availability statuses.
        """
        return pulumi.get(self, "software_source_availabilities")

    @software_source_availabilities.setter
    def software_source_availabilities(self, value: pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]):
        pulumi.set(self, "software_source_availabilities", value)


@pulumi.input_type
class _SoftwareSourceChangeAvailabilityManagementState:
    def __init__(__self__, *,
                 software_source_availabilities: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]] = None):
        """
        Input properties used for looking up and filtering SoftwareSourceChangeAvailabilityManagement resources.
        :param pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]] software_source_availabilities: List of vendor software sources and their availability statuses.
        """
        if software_source_availabilities is not None:
            pulumi.set(__self__, "software_source_availabilities", software_source_availabilities)

    @property
    @pulumi.getter(name="softwareSourceAvailabilities")
    def software_source_availabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]]:
        """
        List of vendor software sources and their availability statuses.
        """
        return pulumi.get(self, "software_source_availabilities")

    @software_source_availabilities.setter
    def software_source_availabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]]):
        pulumi.set(self, "software_source_availabilities", value)


class SoftwareSourceChangeAvailabilityManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 software_source_availabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]]] = None,
                 __props__=None):
        """
        This resource provides the Software Source Change Availability Management resource in Oracle Cloud Infrastructure Os Management Hub service.

        Updates the availability for a list of specified software sources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_software_source_change_availability_management = oci.os_management_hub.SoftwareSourceChangeAvailabilityManagement("test_software_source_change_availability_management", software_source_availabilities=[oci.os_management_hub.SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs(
            software_source_id=test_software_source["id"],
            availability=software_source_change_availability_management_software_source_availabilities_availability,
            availability_at_oci=software_source_change_availability_management_software_source_availabilities_availability_at_oci,
        )])
        ```

        ## Import

        SoftwareSourceChangeAvailabilityManagement can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:OsManagementHub/softwareSourceChangeAvailabilityManagement:SoftwareSourceChangeAvailabilityManagement test_software_source_change_availability_management "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]] software_source_availabilities: List of vendor software sources and their availability statuses.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SoftwareSourceChangeAvailabilityManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Software Source Change Availability Management resource in Oracle Cloud Infrastructure Os Management Hub service.

        Updates the availability for a list of specified software sources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_software_source_change_availability_management = oci.os_management_hub.SoftwareSourceChangeAvailabilityManagement("test_software_source_change_availability_management", software_source_availabilities=[oci.os_management_hub.SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs(
            software_source_id=test_software_source["id"],
            availability=software_source_change_availability_management_software_source_availabilities_availability,
            availability_at_oci=software_source_change_availability_management_software_source_availabilities_availability_at_oci,
        )])
        ```

        ## Import

        SoftwareSourceChangeAvailabilityManagement can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:OsManagementHub/softwareSourceChangeAvailabilityManagement:SoftwareSourceChangeAvailabilityManagement test_software_source_change_availability_management "id"
        ```

        :param str resource_name: The name of the resource.
        :param SoftwareSourceChangeAvailabilityManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SoftwareSourceChangeAvailabilityManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 software_source_availabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SoftwareSourceChangeAvailabilityManagementArgs.__new__(SoftwareSourceChangeAvailabilityManagementArgs)

            if software_source_availabilities is None and not opts.urn:
                raise TypeError("Missing required property 'software_source_availabilities'")
            __props__.__dict__["software_source_availabilities"] = software_source_availabilities
        super(SoftwareSourceChangeAvailabilityManagement, __self__).__init__(
            'oci:OsManagementHub/softwareSourceChangeAvailabilityManagement:SoftwareSourceChangeAvailabilityManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            software_source_availabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]]] = None) -> 'SoftwareSourceChangeAvailabilityManagement':
        """
        Get an existing SoftwareSourceChangeAvailabilityManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailabilityArgs']]]] software_source_availabilities: List of vendor software sources and their availability statuses.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SoftwareSourceChangeAvailabilityManagementState.__new__(_SoftwareSourceChangeAvailabilityManagementState)

        __props__.__dict__["software_source_availabilities"] = software_source_availabilities
        return SoftwareSourceChangeAvailabilityManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="softwareSourceAvailabilities")
    def software_source_availabilities(self) -> pulumi.Output[Sequence['outputs.SoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability']]:
        """
        List of vendor software sources and their availability statuses.
        """
        return pulumi.get(self, "software_source_availabilities")

