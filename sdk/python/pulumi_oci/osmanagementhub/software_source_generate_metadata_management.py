# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SoftwareSourceGenerateMetadataManagementArgs', 'SoftwareSourceGenerateMetadataManagement']

@pulumi.input_type
class SoftwareSourceGenerateMetadataManagementArgs:
    def __init__(__self__, *,
                 software_source_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a SoftwareSourceGenerateMetadataManagement resource.
        :param pulumi.Input[str] software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> pulumi.Input[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "software_source_id")

    @software_source_id.setter
    def software_source_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "software_source_id", value)


@pulumi.input_type
class _SoftwareSourceGenerateMetadataManagementState:
    def __init__(__self__, *,
                 software_source_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SoftwareSourceGenerateMetadataManagement resources.
        :param pulumi.Input[str] software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if software_source_id is not None:
            pulumi.set(__self__, "software_source_id", software_source_id)

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "software_source_id")

    @software_source_id.setter
    def software_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "software_source_id", value)


class SoftwareSourceGenerateMetadataManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 software_source_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Software Source Generate Metadata Management resource in Oracle Cloud Infrastructure Os Management Hub service.

        Regenerates metadata for the specified custom software source.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_software_source_generate_metadata_management = oci.os_management_hub.SoftwareSourceGenerateMetadataManagement("test_software_source_generate_metadata_management", software_source_id=test_software_source["id"])
        ```

        ## Import

        SoftwareSourceGenerateMetadataManagement can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:OsManagementHub/softwareSourceGenerateMetadataManagement:SoftwareSourceGenerateMetadataManagement test_software_source_generate_metadata_management "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SoftwareSourceGenerateMetadataManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Software Source Generate Metadata Management resource in Oracle Cloud Infrastructure Os Management Hub service.

        Regenerates metadata for the specified custom software source.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_software_source_generate_metadata_management = oci.os_management_hub.SoftwareSourceGenerateMetadataManagement("test_software_source_generate_metadata_management", software_source_id=test_software_source["id"])
        ```

        ## Import

        SoftwareSourceGenerateMetadataManagement can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:OsManagementHub/softwareSourceGenerateMetadataManagement:SoftwareSourceGenerateMetadataManagement test_software_source_generate_metadata_management "id"
        ```

        :param str resource_name: The name of the resource.
        :param SoftwareSourceGenerateMetadataManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SoftwareSourceGenerateMetadataManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 software_source_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SoftwareSourceGenerateMetadataManagementArgs.__new__(SoftwareSourceGenerateMetadataManagementArgs)

            if software_source_id is None and not opts.urn:
                raise TypeError("Missing required property 'software_source_id'")
            __props__.__dict__["software_source_id"] = software_source_id
        super(SoftwareSourceGenerateMetadataManagement, __self__).__init__(
            'oci:OsManagementHub/softwareSourceGenerateMetadataManagement:SoftwareSourceGenerateMetadataManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            software_source_id: Optional[pulumi.Input[str]] = None) -> 'SoftwareSourceGenerateMetadataManagement':
        """
        Get an existing SoftwareSourceGenerateMetadataManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] software_source_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SoftwareSourceGenerateMetadataManagementState.__new__(_SoftwareSourceGenerateMetadataManagementState)

        __props__.__dict__["software_source_id"] = software_source_id
        return SoftwareSourceGenerateMetadataManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="softwareSourceId")
    def software_source_id(self) -> pulumi.Output[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "software_source_id")

