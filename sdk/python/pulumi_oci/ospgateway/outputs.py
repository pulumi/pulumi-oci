# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AddressActionVerificationAddress',
    'SubscriptionBillingAddress',
    'SubscriptionPaymentGateway',
    'SubscriptionPaymentGatewayMerchantDefinedData',
    'SubscriptionPaymentOption',
    'SubscriptionSubscription',
    'SubscriptionSubscriptionBillingAddress',
    'SubscriptionSubscriptionPaymentGateway',
    'SubscriptionSubscriptionPaymentGatewayMerchantDefinedData',
    'SubscriptionSubscriptionPaymentOption',
    'SubscriptionSubscriptionTaxInfo',
    'SubscriptionTaxInfo',
    'GetAddressRuleAddressResult',
    'GetAddressRuleAddressFieldResult',
    'GetAddressRuleAddressFieldFormatResult',
    'GetAddressRuleAddressFieldLabelResult',
    'GetAddressRuleContactResult',
    'GetAddressRuleContactFieldResult',
    'GetAddressRuleContactFieldFormatResult',
    'GetAddressRuleContactFieldLabelResult',
    'GetAddressRuleTaxResult',
    'GetAddressRuleTaxFieldResult',
    'GetAddressRuleTaxFieldFormatResult',
    'GetAddressRuleTaxFieldLabelResult',
    'GetInvoiceBillToAddressResult',
    'GetInvoiceBillToAddressCountryResult',
    'GetInvoiceCurrencyResult',
    'GetInvoiceLastPaymentDetailResult',
    'GetInvoicesFilterResult',
    'GetInvoicesInvoiceCollectionResult',
    'GetInvoicesInvoiceCollectionItemResult',
    'GetInvoicesInvoiceCollectionItemBillToAddressResult',
    'GetInvoicesInvoiceCollectionItemBillToAddressCountryResult',
    'GetInvoicesInvoiceCollectionItemCurrencyResult',
    'GetInvoicesInvoiceCollectionItemLastPaymentDetailResult',
    'GetInvoicesInvoiceLineItemResult',
    'GetInvoicesInvoiceLineItemCurrencyResult',
    'GetInvoicesInvoiceLinesFilterResult',
    'GetInvoicesInvoiceLinesInvoiceLineCollectionResult',
    'GetInvoicesInvoiceLinesInvoiceLineCollectionItemResult',
    'GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrencyResult',
    'GetSubscriptionBillingAddressResult',
    'GetSubscriptionPaymentGatewayResult',
    'GetSubscriptionPaymentGatewayMerchantDefinedDataResult',
    'GetSubscriptionPaymentOptionResult',
    'GetSubscriptionSubscriptionResult',
    'GetSubscriptionSubscriptionBillingAddressResult',
    'GetSubscriptionSubscriptionPaymentGatewayResult',
    'GetSubscriptionSubscriptionPaymentGatewayMerchantDefinedDataResult',
    'GetSubscriptionSubscriptionPaymentOptionResult',
    'GetSubscriptionSubscriptionTaxInfoResult',
    'GetSubscriptionTaxInfoResult',
    'GetSubscriptionsFilterResult',
    'GetSubscriptionsSubscriptionCollectionResult',
    'GetSubscriptionsSubscriptionCollectionItemResult',
    'GetSubscriptionsSubscriptionCollectionItemBillingAddressResult',
    'GetSubscriptionsSubscriptionCollectionItemPaymentGatewayResult',
    'GetSubscriptionsSubscriptionCollectionItemPaymentGatewayMerchantDefinedDataResult',
    'GetSubscriptionsSubscriptionCollectionItemPaymentOptionResult',
    'GetSubscriptionsSubscriptionCollectionItemSubscriptionResult',
    'GetSubscriptionsSubscriptionCollectionItemSubscriptionBillingAddressResult',
    'GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayResult',
    'GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayMerchantDefinedDataResult',
    'GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentOptionResult',
    'GetSubscriptionsSubscriptionCollectionItemSubscriptionTaxInfoResult',
    'GetSubscriptionsSubscriptionCollectionItemTaxInfoResult',
]

@pulumi.output_type
class AddressActionVerificationAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressKey":
            suggest = "address_key"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "contributorClass":
            suggest = "contributor_class"
        elif key == "departmentName":
            suggest = "department_name"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "internalNumber":
            suggest = "internal_number"
        elif key == "jobTitle":
            suggest = "job_title"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "municipalInscription":
            suggest = "municipal_inscription"
        elif key == "phoneCountryCode":
            suggest = "phone_country_code"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "stateInscription":
            suggest = "state_inscription"
        elif key == "streetName":
            suggest = "street_name"
        elif key == "streetNumber":
            suggest = "street_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressActionVerificationAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressActionVerificationAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressActionVerificationAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class SubscriptionBillingAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressKey":
            suggest = "address_key"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "contributorClass":
            suggest = "contributor_class"
        elif key == "departmentName":
            suggest = "department_name"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "internalNumber":
            suggest = "internal_number"
        elif key == "jobTitle":
            suggest = "job_title"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "municipalInscription":
            suggest = "municipal_inscription"
        elif key == "phoneCountryCode":
            suggest = "phone_country_code"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "stateInscription":
            suggest = "state_inscription"
        elif key == "streetName":
            suggest = "street_name"
        elif key == "streetNumber":
            suggest = "street_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionBillingAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionBillingAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionBillingAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class SubscriptionPaymentGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "merchantDefinedDatas":
            suggest = "merchant_defined_datas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPaymentGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPaymentGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPaymentGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 merchant_defined_datas: Optional[Sequence['outputs.SubscriptionPaymentGatewayMerchantDefinedData']] = None):
        if merchant_defined_datas is not None:
            pulumi.set(__self__, "merchant_defined_datas", merchant_defined_datas)

    @property
    @pulumi.getter(name="merchantDefinedDatas")
    def merchant_defined_datas(self) -> Optional[Sequence['outputs.SubscriptionPaymentGatewayMerchantDefinedData']]:
        return pulumi.get(self, "merchant_defined_datas")


@pulumi.output_type
class SubscriptionPaymentGatewayMerchantDefinedData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudAccountName":
            suggest = "cloud_account_name"
        elif key == "promoType":
            suggest = "promo_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPaymentGatewayMerchantDefinedData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPaymentGatewayMerchantDefinedData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPaymentGatewayMerchantDefinedData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_account_name: Optional[str] = None,
                 promo_type: Optional[str] = None):
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")


@pulumi.output_type
class SubscriptionPaymentOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creditCardType":
            suggest = "credit_card_type"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "extBillingAgreementId":
            suggest = "ext_billing_agreement_id"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastDigits":
            suggest = "last_digits"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "nameOnCard":
            suggest = "name_on_card"
        elif key == "paymentMethod":
            suggest = "payment_method"
        elif key == "timeExpiration":
            suggest = "time_expiration"
        elif key == "walletInstrumentId":
            suggest = "wallet_instrument_id"
        elif key == "walletTransactionId":
            suggest = "wallet_transaction_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionPaymentOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionPaymentOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionPaymentOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credit_card_type: Optional[str] = None,
                 email_address: Optional[str] = None,
                 ext_billing_agreement_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 wallet_instrument_id: Optional[str] = None,
                 wallet_transaction_id: Optional[str] = None):
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if ext_billing_agreement_id is not None:
            pulumi.set(__self__, "ext_billing_agreement_id", ext_billing_agreement_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if wallet_instrument_id is not None:
            pulumi.set(__self__, "wallet_instrument_id", wallet_instrument_id)
        if wallet_transaction_id is not None:
            pulumi.set(__self__, "wallet_transaction_id", wallet_transaction_id)

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="extBillingAgreementId")
    def ext_billing_agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "ext_billing_agreement_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="walletInstrumentId")
    def wallet_instrument_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_instrument_id")

    @property
    @pulumi.getter(name="walletTransactionId")
    def wallet_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_transaction_id")


@pulumi.output_type
class SubscriptionSubscription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subscriptionPlanNumber":
            suggest = "subscription_plan_number"
        elif key == "accountType":
            suggest = "account_type"
        elif key == "billToCustAccountId":
            suggest = "bill_to_cust_account_id"
        elif key == "billingAddresses":
            suggest = "billing_addresses"
        elif key == "currencyCode":
            suggest = "currency_code"
        elif key == "gsiOrgCode":
            suggest = "gsi_org_code"
        elif key == "isIntentToPay":
            suggest = "is_intent_to_pay"
        elif key == "languageCode":
            suggest = "language_code"
        elif key == "organizationId":
            suggest = "organization_id"
        elif key == "paymentGateway":
            suggest = "payment_gateway"
        elif key == "paymentOptions":
            suggest = "payment_options"
        elif key == "planType":
            suggest = "plan_type"
        elif key == "shipToCustAcctRoleId":
            suggest = "ship_to_cust_acct_role_id"
        elif key == "shipToCustAcctSiteId":
            suggest = "ship_to_cust_acct_site_id"
        elif key == "taxInfo":
            suggest = "tax_info"
        elif key == "timePersonalToCorporateConv":
            suggest = "time_personal_to_corporate_conv"
        elif key == "timePlanUpgrade":
            suggest = "time_plan_upgrade"
        elif key == "timeStart":
            suggest = "time_start"
        elif key == "upgradeState":
            suggest = "upgrade_state"
        elif key == "upgradeStateDetails":
            suggest = "upgrade_state_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionSubscription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionSubscription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionSubscription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subscription_plan_number: str,
                 account_type: Optional[str] = None,
                 bill_to_cust_account_id: Optional[str] = None,
                 billing_addresses: Optional[Sequence['outputs.SubscriptionSubscriptionBillingAddress']] = None,
                 currency_code: Optional[str] = None,
                 gsi_org_code: Optional[str] = None,
                 id: Optional[str] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 language_code: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 payment_gateway: Optional['outputs.SubscriptionSubscriptionPaymentGateway'] = None,
                 payment_options: Optional[Sequence['outputs.SubscriptionSubscriptionPaymentOption']] = None,
                 plan_type: Optional[str] = None,
                 ship_to_cust_acct_role_id: Optional[str] = None,
                 ship_to_cust_acct_site_id: Optional[str] = None,
                 tax_info: Optional['outputs.SubscriptionSubscriptionTaxInfo'] = None,
                 time_personal_to_corporate_conv: Optional[str] = None,
                 time_plan_upgrade: Optional[str] = None,
                 time_start: Optional[str] = None,
                 upgrade_state: Optional[str] = None,
                 upgrade_state_details: Optional[str] = None):
        pulumi.set(__self__, "subscription_plan_number", subscription_plan_number)
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if bill_to_cust_account_id is not None:
            pulumi.set(__self__, "bill_to_cust_account_id", bill_to_cust_account_id)
        if billing_addresses is not None:
            pulumi.set(__self__, "billing_addresses", billing_addresses)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if gsi_org_code is not None:
            pulumi.set(__self__, "gsi_org_code", gsi_org_code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if payment_gateway is not None:
            pulumi.set(__self__, "payment_gateway", payment_gateway)
        if payment_options is not None:
            pulumi.set(__self__, "payment_options", payment_options)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)
        if ship_to_cust_acct_role_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_role_id", ship_to_cust_acct_role_id)
        if ship_to_cust_acct_site_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_site_id", ship_to_cust_acct_site_id)
        if tax_info is not None:
            pulumi.set(__self__, "tax_info", tax_info)
        if time_personal_to_corporate_conv is not None:
            pulumi.set(__self__, "time_personal_to_corporate_conv", time_personal_to_corporate_conv)
        if time_plan_upgrade is not None:
            pulumi.set(__self__, "time_plan_upgrade", time_plan_upgrade)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if upgrade_state is not None:
            pulumi.set(__self__, "upgrade_state", upgrade_state)
        if upgrade_state_details is not None:
            pulumi.set(__self__, "upgrade_state_details", upgrade_state_details)

    @property
    @pulumi.getter(name="subscriptionPlanNumber")
    def subscription_plan_number(self) -> str:
        return pulumi.get(self, "subscription_plan_number")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[str]:
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="billToCustAccountId")
    def bill_to_cust_account_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_to_cust_account_id")

    @property
    @pulumi.getter(name="billingAddresses")
    def billing_addresses(self) -> Optional[Sequence['outputs.SubscriptionSubscriptionBillingAddress']]:
        return pulumi.get(self, "billing_addresses")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="gsiOrgCode")
    def gsi_org_code(self) -> Optional[str]:
        return pulumi.get(self, "gsi_org_code")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="paymentGateway")
    def payment_gateway(self) -> Optional['outputs.SubscriptionSubscriptionPaymentGateway']:
        return pulumi.get(self, "payment_gateway")

    @property
    @pulumi.getter(name="paymentOptions")
    def payment_options(self) -> Optional[Sequence['outputs.SubscriptionSubscriptionPaymentOption']]:
        return pulumi.get(self, "payment_options")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter(name="shipToCustAcctRoleId")
    def ship_to_cust_acct_role_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_role_id")

    @property
    @pulumi.getter(name="shipToCustAcctSiteId")
    def ship_to_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_site_id")

    @property
    @pulumi.getter(name="taxInfo")
    def tax_info(self) -> Optional['outputs.SubscriptionSubscriptionTaxInfo']:
        return pulumi.get(self, "tax_info")

    @property
    @pulumi.getter(name="timePersonalToCorporateConv")
    def time_personal_to_corporate_conv(self) -> Optional[str]:
        return pulumi.get(self, "time_personal_to_corporate_conv")

    @property
    @pulumi.getter(name="timePlanUpgrade")
    def time_plan_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_plan_upgrade")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="upgradeState")
    def upgrade_state(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state")

    @property
    @pulumi.getter(name="upgradeStateDetails")
    def upgrade_state_details(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state_details")


@pulumi.output_type
class SubscriptionSubscriptionBillingAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressKey":
            suggest = "address_key"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "contributorClass":
            suggest = "contributor_class"
        elif key == "departmentName":
            suggest = "department_name"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "internalNumber":
            suggest = "internal_number"
        elif key == "jobTitle":
            suggest = "job_title"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "middleName":
            suggest = "middle_name"
        elif key == "municipalInscription":
            suggest = "municipal_inscription"
        elif key == "phoneCountryCode":
            suggest = "phone_country_code"
        elif key == "phoneNumber":
            suggest = "phone_number"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "stateInscription":
            suggest = "state_inscription"
        elif key == "streetName":
            suggest = "street_name"
        elif key == "streetNumber":
            suggest = "street_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionSubscriptionBillingAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionSubscriptionBillingAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionSubscriptionBillingAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class SubscriptionSubscriptionPaymentGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "merchantDefinedData":
            suggest = "merchant_defined_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionSubscriptionPaymentGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionSubscriptionPaymentGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionSubscriptionPaymentGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 merchant_defined_data: Optional['outputs.SubscriptionSubscriptionPaymentGatewayMerchantDefinedData'] = None):
        if merchant_defined_data is not None:
            pulumi.set(__self__, "merchant_defined_data", merchant_defined_data)

    @property
    @pulumi.getter(name="merchantDefinedData")
    def merchant_defined_data(self) -> Optional['outputs.SubscriptionSubscriptionPaymentGatewayMerchantDefinedData']:
        return pulumi.get(self, "merchant_defined_data")


@pulumi.output_type
class SubscriptionSubscriptionPaymentGatewayMerchantDefinedData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudAccountName":
            suggest = "cloud_account_name"
        elif key == "promoType":
            suggest = "promo_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionSubscriptionPaymentGatewayMerchantDefinedData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionSubscriptionPaymentGatewayMerchantDefinedData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionSubscriptionPaymentGatewayMerchantDefinedData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_account_name: Optional[str] = None,
                 promo_type: Optional[str] = None):
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")


@pulumi.output_type
class SubscriptionSubscriptionPaymentOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paymentMethod":
            suggest = "payment_method"
        elif key == "creditCardType":
            suggest = "credit_card_type"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "extBillingAgreementId":
            suggest = "ext_billing_agreement_id"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastDigits":
            suggest = "last_digits"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "nameOnCard":
            suggest = "name_on_card"
        elif key == "timeExpiration":
            suggest = "time_expiration"
        elif key == "walletInstrumentId":
            suggest = "wallet_instrument_id"
        elif key == "walletTransactionId":
            suggest = "wallet_transaction_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionSubscriptionPaymentOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionSubscriptionPaymentOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionSubscriptionPaymentOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 payment_method: str,
                 credit_card_type: Optional[str] = None,
                 email_address: Optional[str] = None,
                 ext_billing_agreement_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 wallet_instrument_id: Optional[str] = None,
                 wallet_transaction_id: Optional[str] = None):
        pulumi.set(__self__, "payment_method", payment_method)
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if ext_billing_agreement_id is not None:
            pulumi.set(__self__, "ext_billing_agreement_id", ext_billing_agreement_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if wallet_instrument_id is not None:
            pulumi.set(__self__, "wallet_instrument_id", wallet_instrument_id)
        if wallet_transaction_id is not None:
            pulumi.set(__self__, "wallet_transaction_id", wallet_transaction_id)

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> str:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="extBillingAgreementId")
    def ext_billing_agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "ext_billing_agreement_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="walletInstrumentId")
    def wallet_instrument_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_instrument_id")

    @property
    @pulumi.getter(name="walletTransactionId")
    def wallet_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_transaction_id")


@pulumi.output_type
class SubscriptionSubscriptionTaxInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noTaxReasonCode":
            suggest = "no_tax_reason_code"
        elif key == "noTaxReasonCodeDetails":
            suggest = "no_tax_reason_code_details"
        elif key == "taxCnpj":
            suggest = "tax_cnpj"
        elif key == "taxPayerId":
            suggest = "tax_payer_id"
        elif key == "taxRegNumber":
            suggest = "tax_reg_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionSubscriptionTaxInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionSubscriptionTaxInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionSubscriptionTaxInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_tax_reason_code: Optional[str] = None,
                 no_tax_reason_code_details: Optional[str] = None,
                 tax_cnpj: Optional[str] = None,
                 tax_payer_id: Optional[str] = None,
                 tax_reg_number: Optional[str] = None):
        if no_tax_reason_code is not None:
            pulumi.set(__self__, "no_tax_reason_code", no_tax_reason_code)
        if no_tax_reason_code_details is not None:
            pulumi.set(__self__, "no_tax_reason_code_details", no_tax_reason_code_details)
        if tax_cnpj is not None:
            pulumi.set(__self__, "tax_cnpj", tax_cnpj)
        if tax_payer_id is not None:
            pulumi.set(__self__, "tax_payer_id", tax_payer_id)
        if tax_reg_number is not None:
            pulumi.set(__self__, "tax_reg_number", tax_reg_number)

    @property
    @pulumi.getter(name="noTaxReasonCode")
    def no_tax_reason_code(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code")

    @property
    @pulumi.getter(name="noTaxReasonCodeDetails")
    def no_tax_reason_code_details(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code_details")

    @property
    @pulumi.getter(name="taxCnpj")
    def tax_cnpj(self) -> Optional[str]:
        return pulumi.get(self, "tax_cnpj")

    @property
    @pulumi.getter(name="taxPayerId")
    def tax_payer_id(self) -> Optional[str]:
        return pulumi.get(self, "tax_payer_id")

    @property
    @pulumi.getter(name="taxRegNumber")
    def tax_reg_number(self) -> Optional[str]:
        return pulumi.get(self, "tax_reg_number")


@pulumi.output_type
class SubscriptionTaxInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noTaxReasonCode":
            suggest = "no_tax_reason_code"
        elif key == "noTaxReasonCodeDetails":
            suggest = "no_tax_reason_code_details"
        elif key == "taxCnpj":
            suggest = "tax_cnpj"
        elif key == "taxPayerId":
            suggest = "tax_payer_id"
        elif key == "taxRegNumber":
            suggest = "tax_reg_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionTaxInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionTaxInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionTaxInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_tax_reason_code: Optional[str] = None,
                 no_tax_reason_code_details: Optional[str] = None,
                 tax_cnpj: Optional[str] = None,
                 tax_payer_id: Optional[str] = None,
                 tax_reg_number: Optional[str] = None):
        if no_tax_reason_code is not None:
            pulumi.set(__self__, "no_tax_reason_code", no_tax_reason_code)
        if no_tax_reason_code_details is not None:
            pulumi.set(__self__, "no_tax_reason_code_details", no_tax_reason_code_details)
        if tax_cnpj is not None:
            pulumi.set(__self__, "tax_cnpj", tax_cnpj)
        if tax_payer_id is not None:
            pulumi.set(__self__, "tax_payer_id", tax_payer_id)
        if tax_reg_number is not None:
            pulumi.set(__self__, "tax_reg_number", tax_reg_number)

    @property
    @pulumi.getter(name="noTaxReasonCode")
    def no_tax_reason_code(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code")

    @property
    @pulumi.getter(name="noTaxReasonCodeDetails")
    def no_tax_reason_code_details(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code_details")

    @property
    @pulumi.getter(name="taxCnpj")
    def tax_cnpj(self) -> Optional[str]:
        return pulumi.get(self, "tax_cnpj")

    @property
    @pulumi.getter(name="taxPayerId")
    def tax_payer_id(self) -> Optional[str]:
        return pulumi.get(self, "tax_payer_id")

    @property
    @pulumi.getter(name="taxRegNumber")
    def tax_reg_number(self) -> Optional[str]:
        return pulumi.get(self, "tax_reg_number")


@pulumi.output_type
class GetAddressRuleAddressResult(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.GetAddressRuleAddressFieldResult']] = None,
                 third_party_validation: Optional[str] = None):
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if third_party_validation is not None:
            pulumi.set(__self__, "third_party_validation", third_party_validation)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.GetAddressRuleAddressFieldResult']]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="thirdPartyValidation")
    def third_party_validation(self) -> Optional[str]:
        return pulumi.get(self, "third_party_validation")


@pulumi.output_type
class GetAddressRuleAddressFieldResult(dict):
    def __init__(__self__, *,
                 formats: Optional[Sequence['outputs.GetAddressRuleAddressFieldFormatResult']] = None,
                 is_required: Optional[bool] = None,
                 labels: Optional[Sequence['outputs.GetAddressRuleAddressFieldLabelResult']] = None,
                 language: Optional[str] = None,
                 name: Optional[str] = None):
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence['outputs.GetAddressRuleAddressFieldFormatResult']]:
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.GetAddressRuleAddressFieldLabelResult']]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAddressRuleAddressFieldFormatResult(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 value: Optional[str] = None):
        if example is not None:
            pulumi.set(__self__, "example", example)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddressRuleAddressFieldLabelResult(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 value: Optional[str] = None):
        if example is not None:
            pulumi.set(__self__, "example", example)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddressRuleContactResult(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.GetAddressRuleContactFieldResult']] = None):
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.GetAddressRuleContactFieldResult']]:
        return pulumi.get(self, "fields")


@pulumi.output_type
class GetAddressRuleContactFieldResult(dict):
    def __init__(__self__, *,
                 formats: Optional[Sequence['outputs.GetAddressRuleContactFieldFormatResult']] = None,
                 is_required: Optional[bool] = None,
                 labels: Optional[Sequence['outputs.GetAddressRuleContactFieldLabelResult']] = None,
                 language: Optional[str] = None,
                 name: Optional[str] = None):
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence['outputs.GetAddressRuleContactFieldFormatResult']]:
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.GetAddressRuleContactFieldLabelResult']]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAddressRuleContactFieldFormatResult(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 value: Optional[str] = None):
        if example is not None:
            pulumi.set(__self__, "example", example)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddressRuleContactFieldLabelResult(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 value: Optional[str] = None):
        if example is not None:
            pulumi.set(__self__, "example", example)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddressRuleTaxResult(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.GetAddressRuleTaxFieldResult']] = None):
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.GetAddressRuleTaxFieldResult']]:
        return pulumi.get(self, "fields")


@pulumi.output_type
class GetAddressRuleTaxFieldResult(dict):
    def __init__(__self__, *,
                 formats: Optional[Sequence['outputs.GetAddressRuleTaxFieldFormatResult']] = None,
                 is_required: Optional[bool] = None,
                 labels: Optional[Sequence['outputs.GetAddressRuleTaxFieldLabelResult']] = None,
                 language: Optional[str] = None,
                 name: Optional[str] = None):
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence['outputs.GetAddressRuleTaxFieldFormatResult']]:
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.GetAddressRuleTaxFieldLabelResult']]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAddressRuleTaxFieldFormatResult(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 value: Optional[str] = None):
        if example is not None:
            pulumi.set(__self__, "example", example)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddressRuleTaxFieldLabelResult(dict):
    def __init__(__self__, *,
                 example: Optional[str] = None,
                 value: Optional[str] = None):
        if example is not None:
            pulumi.set(__self__, "example", example)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[str]:
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInvoiceBillToAddressResult(dict):
    def __init__(__self__, *,
                 address_line1: Optional[str] = None,
                 address_line2: Optional[str] = None,
                 address_line3: Optional[str] = None,
                 address_line4: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contact_name: Optional[str] = None,
                 countries: Optional[Sequence['outputs.GetInvoiceBillToAddressCountryResult']] = None,
                 county: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_line1 is not None:
            pulumi.set(__self__, "address_line1", address_line1)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if address_line4 is not None:
            pulumi.set(__self__, "address_line4", address_line4)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> Optional[str]:
        return pulumi.get(self, "address_line1")

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[str]:
        return pulumi.get(self, "address_line2")

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[str]:
        return pulumi.get(self, "address_line3")

    @property
    @pulumi.getter(name="addressLine4")
    def address_line4(self) -> Optional[str]:
        return pulumi.get(self, "address_line4")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[str]:
        return pulumi.get(self, "contact_name")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence['outputs.GetInvoiceBillToAddressCountryResult']]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class GetInvoiceBillToAddressCountryResult(dict):
    def __init__(__self__, *,
                 ascii3country_code: Optional[str] = None,
                 country_code: Optional[str] = None,
                 country_id: Optional[float] = None,
                 country_name: Optional[str] = None,
                 language_id: Optional[float] = None):
        if ascii3country_code is not None:
            pulumi.set(__self__, "ascii3country_code", ascii3country_code)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if country_id is not None:
            pulumi.set(__self__, "country_id", country_id)
        if country_name is not None:
            pulumi.set(__self__, "country_name", country_name)
        if language_id is not None:
            pulumi.set(__self__, "language_id", language_id)

    @property
    @pulumi.getter(name="ascii3countryCode")
    def ascii3country_code(self) -> Optional[str]:
        return pulumi.get(self, "ascii3country_code")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryId")
    def country_id(self) -> Optional[float]:
        return pulumi.get(self, "country_id")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> Optional[str]:
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter(name="languageId")
    def language_id(self) -> Optional[float]:
        return pulumi.get(self, "language_id")


@pulumi.output_type
class GetInvoiceCurrencyResult(dict):
    def __init__(__self__, *,
                 currency_code: Optional[str] = None,
                 currency_symbol: Optional[str] = None,
                 name: Optional[str] = None,
                 round_decimal_point: Optional[float] = None,
                 usd_conversion: Optional[float] = None):
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if currency_symbol is not None:
            pulumi.set(__self__, "currency_symbol", currency_symbol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if round_decimal_point is not None:
            pulumi.set(__self__, "round_decimal_point", round_decimal_point)
        if usd_conversion is not None:
            pulumi.set(__self__, "usd_conversion", usd_conversion)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="currencySymbol")
    def currency_symbol(self) -> Optional[str]:
        return pulumi.get(self, "currency_symbol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roundDecimalPoint")
    def round_decimal_point(self) -> Optional[float]:
        return pulumi.get(self, "round_decimal_point")

    @property
    @pulumi.getter(name="usdConversion")
    def usd_conversion(self) -> Optional[float]:
        return pulumi.get(self, "usd_conversion")


@pulumi.output_type
class GetInvoiceLastPaymentDetailResult(dict):
    def __init__(__self__, *,
                 account_number: Optional[str] = None,
                 amount_paid: Optional[float] = None,
                 card_type: Optional[str] = None,
                 credit_card_type: Optional[str] = None,
                 echeck_routing: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 paid_by: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 paypal_id: Optional[str] = None,
                 paypal_reference: Optional[str] = None,
                 routing_number: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 time_paid_on: Optional[str] = None):
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if amount_paid is not None:
            pulumi.set(__self__, "amount_paid", amount_paid)
        if card_type is not None:
            pulumi.set(__self__, "card_type", card_type)
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if echeck_routing is not None:
            pulumi.set(__self__, "echeck_routing", echeck_routing)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if paid_by is not None:
            pulumi.set(__self__, "paid_by", paid_by)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if paypal_id is not None:
            pulumi.set(__self__, "paypal_id", paypal_id)
        if paypal_reference is not None:
            pulumi.set(__self__, "paypal_reference", paypal_reference)
        if routing_number is not None:
            pulumi.set(__self__, "routing_number", routing_number)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if time_paid_on is not None:
            pulumi.set(__self__, "time_paid_on", time_paid_on)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[str]:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="amountPaid")
    def amount_paid(self) -> Optional[float]:
        return pulumi.get(self, "amount_paid")

    @property
    @pulumi.getter(name="cardType")
    def card_type(self) -> Optional[str]:
        return pulumi.get(self, "card_type")

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="echeckRouting")
    def echeck_routing(self) -> Optional[str]:
        return pulumi.get(self, "echeck_routing")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paidBy")
    def paid_by(self) -> Optional[str]:
        return pulumi.get(self, "paid_by")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="paypalId")
    def paypal_id(self) -> Optional[str]:
        return pulumi.get(self, "paypal_id")

    @property
    @pulumi.getter(name="paypalReference")
    def paypal_reference(self) -> Optional[str]:
        return pulumi.get(self, "paypal_reference")

    @property
    @pulumi.getter(name="routingNumber")
    def routing_number(self) -> Optional[str]:
        return pulumi.get(self, "routing_number")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="timePaidOn")
    def time_paid_on(self) -> Optional[str]:
        return pulumi.get(self, "time_paid_on")


@pulumi.output_type
class GetInvoicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInvoicesInvoiceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInvoicesInvoiceCollectionItemResult(dict):
    def __init__(__self__, *,
                 bill_to_addresses: Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemBillToAddressResult']] = None,
                 currencies: Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemCurrencyResult']] = None,
                 internal_invoice_id: Optional[str] = None,
                 invoice_amount: Optional[float] = None,
                 invoice_amount_adjusted: Optional[float] = None,
                 invoice_amount_applied: Optional[float] = None,
                 invoice_amount_credited: Optional[float] = None,
                 invoice_amount_due: Optional[float] = None,
                 invoice_amount_in_dispute: Optional[float] = None,
                 invoice_id: Optional[str] = None,
                 invoice_number: Optional[str] = None,
                 invoice_po_number: Optional[str] = None,
                 invoice_ref_number: Optional[str] = None,
                 invoice_status: Optional[str] = None,
                 invoice_type: Optional[str] = None,
                 is_credit_card_payable: Optional[bool] = None,
                 is_display_download_pdf: Optional[bool] = None,
                 is_display_view_pdf: Optional[bool] = None,
                 is_paid: Optional[bool] = None,
                 is_payable: Optional[bool] = None,
                 is_payment_failed: Optional[bool] = None,
                 is_pdf_email_available: Optional[bool] = None,
                 last_payment_details: Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemLastPaymentDetailResult']] = None,
                 party_name: Optional[str] = None,
                 payment_terms: Optional[str] = None,
                 preferred_email: Optional[str] = None,
                 subscription_ids: Optional[Sequence[str]] = None,
                 tax: Optional[float] = None,
                 time_invoice: Optional[str] = None,
                 time_invoice_due: Optional[str] = None):
        if bill_to_addresses is not None:
            pulumi.set(__self__, "bill_to_addresses", bill_to_addresses)
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if internal_invoice_id is not None:
            pulumi.set(__self__, "internal_invoice_id", internal_invoice_id)
        if invoice_amount is not None:
            pulumi.set(__self__, "invoice_amount", invoice_amount)
        if invoice_amount_adjusted is not None:
            pulumi.set(__self__, "invoice_amount_adjusted", invoice_amount_adjusted)
        if invoice_amount_applied is not None:
            pulumi.set(__self__, "invoice_amount_applied", invoice_amount_applied)
        if invoice_amount_credited is not None:
            pulumi.set(__self__, "invoice_amount_credited", invoice_amount_credited)
        if invoice_amount_due is not None:
            pulumi.set(__self__, "invoice_amount_due", invoice_amount_due)
        if invoice_amount_in_dispute is not None:
            pulumi.set(__self__, "invoice_amount_in_dispute", invoice_amount_in_dispute)
        if invoice_id is not None:
            pulumi.set(__self__, "invoice_id", invoice_id)
        if invoice_number is not None:
            pulumi.set(__self__, "invoice_number", invoice_number)
        if invoice_po_number is not None:
            pulumi.set(__self__, "invoice_po_number", invoice_po_number)
        if invoice_ref_number is not None:
            pulumi.set(__self__, "invoice_ref_number", invoice_ref_number)
        if invoice_status is not None:
            pulumi.set(__self__, "invoice_status", invoice_status)
        if invoice_type is not None:
            pulumi.set(__self__, "invoice_type", invoice_type)
        if is_credit_card_payable is not None:
            pulumi.set(__self__, "is_credit_card_payable", is_credit_card_payable)
        if is_display_download_pdf is not None:
            pulumi.set(__self__, "is_display_download_pdf", is_display_download_pdf)
        if is_display_view_pdf is not None:
            pulumi.set(__self__, "is_display_view_pdf", is_display_view_pdf)
        if is_paid is not None:
            pulumi.set(__self__, "is_paid", is_paid)
        if is_payable is not None:
            pulumi.set(__self__, "is_payable", is_payable)
        if is_payment_failed is not None:
            pulumi.set(__self__, "is_payment_failed", is_payment_failed)
        if is_pdf_email_available is not None:
            pulumi.set(__self__, "is_pdf_email_available", is_pdf_email_available)
        if last_payment_details is not None:
            pulumi.set(__self__, "last_payment_details", last_payment_details)
        if party_name is not None:
            pulumi.set(__self__, "party_name", party_name)
        if payment_terms is not None:
            pulumi.set(__self__, "payment_terms", payment_terms)
        if preferred_email is not None:
            pulumi.set(__self__, "preferred_email", preferred_email)
        if subscription_ids is not None:
            pulumi.set(__self__, "subscription_ids", subscription_ids)
        if tax is not None:
            pulumi.set(__self__, "tax", tax)
        if time_invoice is not None:
            pulumi.set(__self__, "time_invoice", time_invoice)
        if time_invoice_due is not None:
            pulumi.set(__self__, "time_invoice_due", time_invoice_due)

    @property
    @pulumi.getter(name="billToAddresses")
    def bill_to_addresses(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemBillToAddressResult']]:
        return pulumi.get(self, "bill_to_addresses")

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="internalInvoiceId")
    def internal_invoice_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_invoice_id")

    @property
    @pulumi.getter(name="invoiceAmount")
    def invoice_amount(self) -> Optional[float]:
        return pulumi.get(self, "invoice_amount")

    @property
    @pulumi.getter(name="invoiceAmountAdjusted")
    def invoice_amount_adjusted(self) -> Optional[float]:
        return pulumi.get(self, "invoice_amount_adjusted")

    @property
    @pulumi.getter(name="invoiceAmountApplied")
    def invoice_amount_applied(self) -> Optional[float]:
        return pulumi.get(self, "invoice_amount_applied")

    @property
    @pulumi.getter(name="invoiceAmountCredited")
    def invoice_amount_credited(self) -> Optional[float]:
        return pulumi.get(self, "invoice_amount_credited")

    @property
    @pulumi.getter(name="invoiceAmountDue")
    def invoice_amount_due(self) -> Optional[float]:
        return pulumi.get(self, "invoice_amount_due")

    @property
    @pulumi.getter(name="invoiceAmountInDispute")
    def invoice_amount_in_dispute(self) -> Optional[float]:
        return pulumi.get(self, "invoice_amount_in_dispute")

    @property
    @pulumi.getter(name="invoiceId")
    def invoice_id(self) -> Optional[str]:
        return pulumi.get(self, "invoice_id")

    @property
    @pulumi.getter(name="invoiceNumber")
    def invoice_number(self) -> Optional[str]:
        return pulumi.get(self, "invoice_number")

    @property
    @pulumi.getter(name="invoicePoNumber")
    def invoice_po_number(self) -> Optional[str]:
        return pulumi.get(self, "invoice_po_number")

    @property
    @pulumi.getter(name="invoiceRefNumber")
    def invoice_ref_number(self) -> Optional[str]:
        return pulumi.get(self, "invoice_ref_number")

    @property
    @pulumi.getter(name="invoiceStatus")
    def invoice_status(self) -> Optional[str]:
        return pulumi.get(self, "invoice_status")

    @property
    @pulumi.getter(name="invoiceType")
    def invoice_type(self) -> Optional[str]:
        return pulumi.get(self, "invoice_type")

    @property
    @pulumi.getter(name="isCreditCardPayable")
    def is_credit_card_payable(self) -> Optional[bool]:
        return pulumi.get(self, "is_credit_card_payable")

    @property
    @pulumi.getter(name="isDisplayDownloadPdf")
    def is_display_download_pdf(self) -> Optional[bool]:
        return pulumi.get(self, "is_display_download_pdf")

    @property
    @pulumi.getter(name="isDisplayViewPdf")
    def is_display_view_pdf(self) -> Optional[bool]:
        return pulumi.get(self, "is_display_view_pdf")

    @property
    @pulumi.getter(name="isPaid")
    def is_paid(self) -> Optional[bool]:
        return pulumi.get(self, "is_paid")

    @property
    @pulumi.getter(name="isPayable")
    def is_payable(self) -> Optional[bool]:
        return pulumi.get(self, "is_payable")

    @property
    @pulumi.getter(name="isPaymentFailed")
    def is_payment_failed(self) -> Optional[bool]:
        return pulumi.get(self, "is_payment_failed")

    @property
    @pulumi.getter(name="isPdfEmailAvailable")
    def is_pdf_email_available(self) -> Optional[bool]:
        return pulumi.get(self, "is_pdf_email_available")

    @property
    @pulumi.getter(name="lastPaymentDetails")
    def last_payment_details(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemLastPaymentDetailResult']]:
        return pulumi.get(self, "last_payment_details")

    @property
    @pulumi.getter(name="partyName")
    def party_name(self) -> Optional[str]:
        return pulumi.get(self, "party_name")

    @property
    @pulumi.getter(name="paymentTerms")
    def payment_terms(self) -> Optional[str]:
        return pulumi.get(self, "payment_terms")

    @property
    @pulumi.getter(name="preferredEmail")
    def preferred_email(self) -> Optional[str]:
        return pulumi.get(self, "preferred_email")

    @property
    @pulumi.getter(name="subscriptionIds")
    def subscription_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subscription_ids")

    @property
    @pulumi.getter
    def tax(self) -> Optional[float]:
        return pulumi.get(self, "tax")

    @property
    @pulumi.getter(name="timeInvoice")
    def time_invoice(self) -> Optional[str]:
        return pulumi.get(self, "time_invoice")

    @property
    @pulumi.getter(name="timeInvoiceDue")
    def time_invoice_due(self) -> Optional[str]:
        return pulumi.get(self, "time_invoice_due")


@pulumi.output_type
class GetInvoicesInvoiceCollectionItemBillToAddressResult(dict):
    def __init__(__self__, *,
                 address_line1: Optional[str] = None,
                 address_line2: Optional[str] = None,
                 address_line3: Optional[str] = None,
                 address_line4: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contact_name: Optional[str] = None,
                 countries: Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemBillToAddressCountryResult']] = None,
                 county: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_line1 is not None:
            pulumi.set(__self__, "address_line1", address_line1)
        if address_line2 is not None:
            pulumi.set(__self__, "address_line2", address_line2)
        if address_line3 is not None:
            pulumi.set(__self__, "address_line3", address_line3)
        if address_line4 is not None:
            pulumi.set(__self__, "address_line4", address_line4)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contact_name is not None:
            pulumi.set(__self__, "contact_name", contact_name)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressLine1")
    def address_line1(self) -> Optional[str]:
        return pulumi.get(self, "address_line1")

    @property
    @pulumi.getter(name="addressLine2")
    def address_line2(self) -> Optional[str]:
        return pulumi.get(self, "address_line2")

    @property
    @pulumi.getter(name="addressLine3")
    def address_line3(self) -> Optional[str]:
        return pulumi.get(self, "address_line3")

    @property
    @pulumi.getter(name="addressLine4")
    def address_line4(self) -> Optional[str]:
        return pulumi.get(self, "address_line4")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> Optional[str]:
        return pulumi.get(self, "contact_name")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceCollectionItemBillToAddressCountryResult']]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class GetInvoicesInvoiceCollectionItemBillToAddressCountryResult(dict):
    def __init__(__self__, *,
                 ascii3country_code: Optional[str] = None,
                 country_code: Optional[str] = None,
                 country_id: Optional[float] = None,
                 country_name: Optional[str] = None,
                 language_id: Optional[float] = None):
        if ascii3country_code is not None:
            pulumi.set(__self__, "ascii3country_code", ascii3country_code)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if country_id is not None:
            pulumi.set(__self__, "country_id", country_id)
        if country_name is not None:
            pulumi.set(__self__, "country_name", country_name)
        if language_id is not None:
            pulumi.set(__self__, "language_id", language_id)

    @property
    @pulumi.getter(name="ascii3countryCode")
    def ascii3country_code(self) -> Optional[str]:
        return pulumi.get(self, "ascii3country_code")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryId")
    def country_id(self) -> Optional[float]:
        return pulumi.get(self, "country_id")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> Optional[str]:
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter(name="languageId")
    def language_id(self) -> Optional[float]:
        return pulumi.get(self, "language_id")


@pulumi.output_type
class GetInvoicesInvoiceCollectionItemCurrencyResult(dict):
    def __init__(__self__, *,
                 currency_code: Optional[str] = None,
                 currency_symbol: Optional[str] = None,
                 name: Optional[str] = None,
                 round_decimal_point: Optional[float] = None,
                 usd_conversion: Optional[float] = None):
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if currency_symbol is not None:
            pulumi.set(__self__, "currency_symbol", currency_symbol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if round_decimal_point is not None:
            pulumi.set(__self__, "round_decimal_point", round_decimal_point)
        if usd_conversion is not None:
            pulumi.set(__self__, "usd_conversion", usd_conversion)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="currencySymbol")
    def currency_symbol(self) -> Optional[str]:
        return pulumi.get(self, "currency_symbol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roundDecimalPoint")
    def round_decimal_point(self) -> Optional[float]:
        return pulumi.get(self, "round_decimal_point")

    @property
    @pulumi.getter(name="usdConversion")
    def usd_conversion(self) -> Optional[float]:
        return pulumi.get(self, "usd_conversion")


@pulumi.output_type
class GetInvoicesInvoiceCollectionItemLastPaymentDetailResult(dict):
    def __init__(__self__, *,
                 account_number: Optional[str] = None,
                 amount_paid: Optional[float] = None,
                 card_type: Optional[str] = None,
                 credit_card_type: Optional[str] = None,
                 echeck_routing: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 paid_by: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 paypal_id: Optional[str] = None,
                 paypal_reference: Optional[str] = None,
                 routing_number: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 time_paid_on: Optional[str] = None):
        if account_number is not None:
            pulumi.set(__self__, "account_number", account_number)
        if amount_paid is not None:
            pulumi.set(__self__, "amount_paid", amount_paid)
        if card_type is not None:
            pulumi.set(__self__, "card_type", card_type)
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if echeck_routing is not None:
            pulumi.set(__self__, "echeck_routing", echeck_routing)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if paid_by is not None:
            pulumi.set(__self__, "paid_by", paid_by)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if paypal_id is not None:
            pulumi.set(__self__, "paypal_id", paypal_id)
        if paypal_reference is not None:
            pulumi.set(__self__, "paypal_reference", paypal_reference)
        if routing_number is not None:
            pulumi.set(__self__, "routing_number", routing_number)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if time_paid_on is not None:
            pulumi.set(__self__, "time_paid_on", time_paid_on)

    @property
    @pulumi.getter(name="accountNumber")
    def account_number(self) -> Optional[str]:
        return pulumi.get(self, "account_number")

    @property
    @pulumi.getter(name="amountPaid")
    def amount_paid(self) -> Optional[float]:
        return pulumi.get(self, "amount_paid")

    @property
    @pulumi.getter(name="cardType")
    def card_type(self) -> Optional[str]:
        return pulumi.get(self, "card_type")

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="echeckRouting")
    def echeck_routing(self) -> Optional[str]:
        return pulumi.get(self, "echeck_routing")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paidBy")
    def paid_by(self) -> Optional[str]:
        return pulumi.get(self, "paid_by")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="paypalId")
    def paypal_id(self) -> Optional[str]:
        return pulumi.get(self, "paypal_id")

    @property
    @pulumi.getter(name="paypalReference")
    def paypal_reference(self) -> Optional[str]:
        return pulumi.get(self, "paypal_reference")

    @property
    @pulumi.getter(name="routingNumber")
    def routing_number(self) -> Optional[str]:
        return pulumi.get(self, "routing_number")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="timePaidOn")
    def time_paid_on(self) -> Optional[str]:
        return pulumi.get(self, "time_paid_on")


@pulumi.output_type
class GetInvoicesInvoiceLineItemResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetInvoicesInvoiceLineItemCurrencyResult']] = None,
                 net_unit_price: Optional[float] = None,
                 order_no: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product: Optional[str] = None,
                 quantity: Optional[float] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 total_price: Optional[float] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if order_no is not None:
            pulumi.set(__self__, "order_no", order_no)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if total_price is not None:
            pulumi.set(__self__, "total_price", total_price)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceLineItemCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[float]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="orderNo")
    def order_no(self) -> Optional[str]:
        return pulumi.get(self, "order_no")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[float]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="totalPrice")
    def total_price(self) -> Optional[float]:
        return pulumi.get(self, "total_price")


@pulumi.output_type
class GetInvoicesInvoiceLineItemCurrencyResult(dict):
    def __init__(__self__, *,
                 currency_code: Optional[str] = None,
                 currency_symbol: Optional[str] = None,
                 name: Optional[str] = None,
                 round_decimal_point: Optional[float] = None,
                 usd_conversion: Optional[float] = None):
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if currency_symbol is not None:
            pulumi.set(__self__, "currency_symbol", currency_symbol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if round_decimal_point is not None:
            pulumi.set(__self__, "round_decimal_point", round_decimal_point)
        if usd_conversion is not None:
            pulumi.set(__self__, "usd_conversion", usd_conversion)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="currencySymbol")
    def currency_symbol(self) -> Optional[str]:
        return pulumi.get(self, "currency_symbol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roundDecimalPoint")
    def round_decimal_point(self) -> Optional[float]:
        return pulumi.get(self, "round_decimal_point")

    @property
    @pulumi.getter(name="usdConversion")
    def usd_conversion(self) -> Optional[float]:
        return pulumi.get(self, "usd_conversion")


@pulumi.output_type
class GetInvoicesInvoiceLinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInvoicesInvoiceLinesInvoiceLineCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetInvoicesInvoiceLinesInvoiceLineCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceLinesInvoiceLineCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInvoicesInvoiceLinesInvoiceLineCollectionItemResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrencyResult']] = None,
                 net_unit_price: Optional[float] = None,
                 order_no: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product: Optional[str] = None,
                 quantity: Optional[float] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 total_price: Optional[float] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if order_no is not None:
            pulumi.set(__self__, "order_no", order_no)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if total_price is not None:
            pulumi.set(__self__, "total_price", total_price)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[float]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="orderNo")
    def order_no(self) -> Optional[str]:
        return pulumi.get(self, "order_no")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[float]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="totalPrice")
    def total_price(self) -> Optional[float]:
        return pulumi.get(self, "total_price")


@pulumi.output_type
class GetInvoicesInvoiceLinesInvoiceLineCollectionItemCurrencyResult(dict):
    def __init__(__self__, *,
                 currency_code: Optional[str] = None,
                 currency_symbol: Optional[str] = None,
                 name: Optional[str] = None,
                 round_decimal_point: Optional[float] = None,
                 usd_conversion: Optional[float] = None):
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if currency_symbol is not None:
            pulumi.set(__self__, "currency_symbol", currency_symbol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if round_decimal_point is not None:
            pulumi.set(__self__, "round_decimal_point", round_decimal_point)
        if usd_conversion is not None:
            pulumi.set(__self__, "usd_conversion", usd_conversion)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="currencySymbol")
    def currency_symbol(self) -> Optional[str]:
        return pulumi.get(self, "currency_symbol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roundDecimalPoint")
    def round_decimal_point(self) -> Optional[float]:
        return pulumi.get(self, "round_decimal_point")

    @property
    @pulumi.getter(name="usdConversion")
    def usd_conversion(self) -> Optional[float]:
        return pulumi.get(self, "usd_conversion")


@pulumi.output_type
class GetSubscriptionBillingAddressResult(dict):
    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class GetSubscriptionPaymentGatewayResult(dict):
    def __init__(__self__, *,
                 merchant_defined_datas: Optional[Sequence['outputs.GetSubscriptionPaymentGatewayMerchantDefinedDataResult']] = None):
        if merchant_defined_datas is not None:
            pulumi.set(__self__, "merchant_defined_datas", merchant_defined_datas)

    @property
    @pulumi.getter(name="merchantDefinedDatas")
    def merchant_defined_datas(self) -> Optional[Sequence['outputs.GetSubscriptionPaymentGatewayMerchantDefinedDataResult']]:
        return pulumi.get(self, "merchant_defined_datas")


@pulumi.output_type
class GetSubscriptionPaymentGatewayMerchantDefinedDataResult(dict):
    def __init__(__self__, *,
                 cloud_account_name: Optional[str] = None,
                 promo_type: Optional[str] = None):
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")


@pulumi.output_type
class GetSubscriptionPaymentOptionResult(dict):
    def __init__(__self__, *,
                 credit_card_type: Optional[str] = None,
                 email_address: Optional[str] = None,
                 ext_billing_agreement_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 wallet_instrument_id: Optional[str] = None,
                 wallet_transaction_id: Optional[str] = None):
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if ext_billing_agreement_id is not None:
            pulumi.set(__self__, "ext_billing_agreement_id", ext_billing_agreement_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if wallet_instrument_id is not None:
            pulumi.set(__self__, "wallet_instrument_id", wallet_instrument_id)
        if wallet_transaction_id is not None:
            pulumi.set(__self__, "wallet_transaction_id", wallet_transaction_id)

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="extBillingAgreementId")
    def ext_billing_agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "ext_billing_agreement_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="walletInstrumentId")
    def wallet_instrument_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_instrument_id")

    @property
    @pulumi.getter(name="walletTransactionId")
    def wallet_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_transaction_id")


@pulumi.output_type
class GetSubscriptionSubscriptionResult(dict):
    def __init__(__self__, *,
                 account_type: Optional[str] = None,
                 bill_to_cust_account_id: Optional[str] = None,
                 billing_addresses: Optional[Sequence['outputs.GetSubscriptionSubscriptionBillingAddressResult']] = None,
                 currency_code: Optional[str] = None,
                 gsi_org_code: Optional[str] = None,
                 id: Optional[str] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 language_code: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 payment_gateways: Optional[Sequence['outputs.GetSubscriptionSubscriptionPaymentGatewayResult']] = None,
                 payment_options: Optional[Sequence['outputs.GetSubscriptionSubscriptionPaymentOptionResult']] = None,
                 plan_type: Optional[str] = None,
                 ship_to_cust_acct_role_id: Optional[str] = None,
                 ship_to_cust_acct_site_id: Optional[str] = None,
                 subscription_plan_number: Optional[str] = None,
                 tax_infos: Optional[Sequence['outputs.GetSubscriptionSubscriptionTaxInfoResult']] = None,
                 time_personal_to_corporate_conv: Optional[str] = None,
                 time_plan_upgrade: Optional[str] = None,
                 time_start: Optional[str] = None,
                 upgrade_state: Optional[str] = None,
                 upgrade_state_details: Optional[str] = None):
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if bill_to_cust_account_id is not None:
            pulumi.set(__self__, "bill_to_cust_account_id", bill_to_cust_account_id)
        if billing_addresses is not None:
            pulumi.set(__self__, "billing_addresses", billing_addresses)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if gsi_org_code is not None:
            pulumi.set(__self__, "gsi_org_code", gsi_org_code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if payment_gateways is not None:
            pulumi.set(__self__, "payment_gateways", payment_gateways)
        if payment_options is not None:
            pulumi.set(__self__, "payment_options", payment_options)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)
        if ship_to_cust_acct_role_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_role_id", ship_to_cust_acct_role_id)
        if ship_to_cust_acct_site_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_site_id", ship_to_cust_acct_site_id)
        if subscription_plan_number is not None:
            pulumi.set(__self__, "subscription_plan_number", subscription_plan_number)
        if tax_infos is not None:
            pulumi.set(__self__, "tax_infos", tax_infos)
        if time_personal_to_corporate_conv is not None:
            pulumi.set(__self__, "time_personal_to_corporate_conv", time_personal_to_corporate_conv)
        if time_plan_upgrade is not None:
            pulumi.set(__self__, "time_plan_upgrade", time_plan_upgrade)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if upgrade_state is not None:
            pulumi.set(__self__, "upgrade_state", upgrade_state)
        if upgrade_state_details is not None:
            pulumi.set(__self__, "upgrade_state_details", upgrade_state_details)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[str]:
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="billToCustAccountId")
    def bill_to_cust_account_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_to_cust_account_id")

    @property
    @pulumi.getter(name="billingAddresses")
    def billing_addresses(self) -> Optional[Sequence['outputs.GetSubscriptionSubscriptionBillingAddressResult']]:
        return pulumi.get(self, "billing_addresses")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="gsiOrgCode")
    def gsi_org_code(self) -> Optional[str]:
        return pulumi.get(self, "gsi_org_code")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="paymentGateways")
    def payment_gateways(self) -> Optional[Sequence['outputs.GetSubscriptionSubscriptionPaymentGatewayResult']]:
        return pulumi.get(self, "payment_gateways")

    @property
    @pulumi.getter(name="paymentOptions")
    def payment_options(self) -> Optional[Sequence['outputs.GetSubscriptionSubscriptionPaymentOptionResult']]:
        return pulumi.get(self, "payment_options")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter(name="shipToCustAcctRoleId")
    def ship_to_cust_acct_role_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_role_id")

    @property
    @pulumi.getter(name="shipToCustAcctSiteId")
    def ship_to_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_site_id")

    @property
    @pulumi.getter(name="subscriptionPlanNumber")
    def subscription_plan_number(self) -> Optional[str]:
        return pulumi.get(self, "subscription_plan_number")

    @property
    @pulumi.getter(name="taxInfos")
    def tax_infos(self) -> Optional[Sequence['outputs.GetSubscriptionSubscriptionTaxInfoResult']]:
        return pulumi.get(self, "tax_infos")

    @property
    @pulumi.getter(name="timePersonalToCorporateConv")
    def time_personal_to_corporate_conv(self) -> Optional[str]:
        return pulumi.get(self, "time_personal_to_corporate_conv")

    @property
    @pulumi.getter(name="timePlanUpgrade")
    def time_plan_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_plan_upgrade")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="upgradeState")
    def upgrade_state(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state")

    @property
    @pulumi.getter(name="upgradeStateDetails")
    def upgrade_state_details(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state_details")


@pulumi.output_type
class GetSubscriptionSubscriptionBillingAddressResult(dict):
    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class GetSubscriptionSubscriptionPaymentGatewayResult(dict):
    def __init__(__self__, *,
                 merchant_defined_datas: Optional[Sequence['outputs.GetSubscriptionSubscriptionPaymentGatewayMerchantDefinedDataResult']] = None):
        if merchant_defined_datas is not None:
            pulumi.set(__self__, "merchant_defined_datas", merchant_defined_datas)

    @property
    @pulumi.getter(name="merchantDefinedDatas")
    def merchant_defined_datas(self) -> Optional[Sequence['outputs.GetSubscriptionSubscriptionPaymentGatewayMerchantDefinedDataResult']]:
        return pulumi.get(self, "merchant_defined_datas")


@pulumi.output_type
class GetSubscriptionSubscriptionPaymentGatewayMerchantDefinedDataResult(dict):
    def __init__(__self__, *,
                 cloud_account_name: Optional[str] = None,
                 promo_type: Optional[str] = None):
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")


@pulumi.output_type
class GetSubscriptionSubscriptionPaymentOptionResult(dict):
    def __init__(__self__, *,
                 credit_card_type: Optional[str] = None,
                 email_address: Optional[str] = None,
                 ext_billing_agreement_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 wallet_instrument_id: Optional[str] = None,
                 wallet_transaction_id: Optional[str] = None):
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if ext_billing_agreement_id is not None:
            pulumi.set(__self__, "ext_billing_agreement_id", ext_billing_agreement_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if wallet_instrument_id is not None:
            pulumi.set(__self__, "wallet_instrument_id", wallet_instrument_id)
        if wallet_transaction_id is not None:
            pulumi.set(__self__, "wallet_transaction_id", wallet_transaction_id)

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="extBillingAgreementId")
    def ext_billing_agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "ext_billing_agreement_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="walletInstrumentId")
    def wallet_instrument_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_instrument_id")

    @property
    @pulumi.getter(name="walletTransactionId")
    def wallet_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_transaction_id")


@pulumi.output_type
class GetSubscriptionSubscriptionTaxInfoResult(dict):
    def __init__(__self__, *,
                 no_tax_reason_code: Optional[str] = None,
                 no_tax_reason_code_details: Optional[str] = None,
                 tax_cnpj: Optional[str] = None,
                 tax_payer_id: Optional[str] = None,
                 tax_reg_number: Optional[str] = None):
        if no_tax_reason_code is not None:
            pulumi.set(__self__, "no_tax_reason_code", no_tax_reason_code)
        if no_tax_reason_code_details is not None:
            pulumi.set(__self__, "no_tax_reason_code_details", no_tax_reason_code_details)
        if tax_cnpj is not None:
            pulumi.set(__self__, "tax_cnpj", tax_cnpj)
        if tax_payer_id is not None:
            pulumi.set(__self__, "tax_payer_id", tax_payer_id)
        if tax_reg_number is not None:
            pulumi.set(__self__, "tax_reg_number", tax_reg_number)

    @property
    @pulumi.getter(name="noTaxReasonCode")
    def no_tax_reason_code(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code")

    @property
    @pulumi.getter(name="noTaxReasonCodeDetails")
    def no_tax_reason_code_details(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code_details")

    @property
    @pulumi.getter(name="taxCnpj")
    def tax_cnpj(self) -> Optional[str]:
        return pulumi.get(self, "tax_cnpj")

    @property
    @pulumi.getter(name="taxPayerId")
    def tax_payer_id(self) -> Optional[str]:
        return pulumi.get(self, "tax_payer_id")

    @property
    @pulumi.getter(name="taxRegNumber")
    def tax_reg_number(self) -> Optional[str]:
        return pulumi.get(self, "tax_reg_number")


@pulumi.output_type
class GetSubscriptionTaxInfoResult(dict):
    def __init__(__self__, *,
                 no_tax_reason_code: Optional[str] = None,
                 no_tax_reason_code_details: Optional[str] = None,
                 tax_cnpj: Optional[str] = None,
                 tax_payer_id: Optional[str] = None,
                 tax_reg_number: Optional[str] = None):
        if no_tax_reason_code is not None:
            pulumi.set(__self__, "no_tax_reason_code", no_tax_reason_code)
        if no_tax_reason_code_details is not None:
            pulumi.set(__self__, "no_tax_reason_code_details", no_tax_reason_code_details)
        if tax_cnpj is not None:
            pulumi.set(__self__, "tax_cnpj", tax_cnpj)
        if tax_payer_id is not None:
            pulumi.set(__self__, "tax_payer_id", tax_payer_id)
        if tax_reg_number is not None:
            pulumi.set(__self__, "tax_reg_number", tax_reg_number)

    @property
    @pulumi.getter(name="noTaxReasonCode")
    def no_tax_reason_code(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code")

    @property
    @pulumi.getter(name="noTaxReasonCodeDetails")
    def no_tax_reason_code_details(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code_details")

    @property
    @pulumi.getter(name="taxCnpj")
    def tax_cnpj(self) -> Optional[str]:
        return pulumi.get(self, "tax_cnpj")

    @property
    @pulumi.getter(name="taxPayerId")
    def tax_payer_id(self) -> Optional[str]:
        return pulumi.get(self, "tax_payer_id")

    @property
    @pulumi.getter(name="taxRegNumber")
    def tax_reg_number(self) -> Optional[str]:
        return pulumi.get(self, "tax_reg_number")


@pulumi.output_type
class GetSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemResult(dict):
    def __init__(__self__, *,
                 account_type: Optional[str] = None,
                 bill_to_cust_account_id: Optional[str] = None,
                 billing_addresses: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemBillingAddressResult']] = None,
                 compartment_id: Optional[str] = None,
                 currency_code: Optional[str] = None,
                 email: Optional[str] = None,
                 gsi_org_code: Optional[str] = None,
                 id: Optional[str] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 language_code: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 osp_home_region: Optional[str] = None,
                 payment_gateways: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPaymentGatewayResult']] = None,
                 payment_options: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPaymentOptionResult']] = None,
                 plan_type: Optional[str] = None,
                 ship_to_cust_acct_role_id: Optional[str] = None,
                 ship_to_cust_acct_site_id: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 subscription_plan_number: Optional[str] = None,
                 subscriptions: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionResult']] = None,
                 tax_infos: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemTaxInfoResult']] = None,
                 time_personal_to_corporate_conv: Optional[str] = None,
                 time_plan_upgrade: Optional[str] = None,
                 time_start: Optional[str] = None,
                 upgrade_state: Optional[str] = None,
                 upgrade_state_details: Optional[str] = None):
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if bill_to_cust_account_id is not None:
            pulumi.set(__self__, "bill_to_cust_account_id", bill_to_cust_account_id)
        if billing_addresses is not None:
            pulumi.set(__self__, "billing_addresses", billing_addresses)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if gsi_org_code is not None:
            pulumi.set(__self__, "gsi_org_code", gsi_org_code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if osp_home_region is not None:
            pulumi.set(__self__, "osp_home_region", osp_home_region)
        if payment_gateways is not None:
            pulumi.set(__self__, "payment_gateways", payment_gateways)
        if payment_options is not None:
            pulumi.set(__self__, "payment_options", payment_options)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)
        if ship_to_cust_acct_role_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_role_id", ship_to_cust_acct_role_id)
        if ship_to_cust_acct_site_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_site_id", ship_to_cust_acct_site_id)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if subscription_plan_number is not None:
            pulumi.set(__self__, "subscription_plan_number", subscription_plan_number)
        if subscriptions is not None:
            pulumi.set(__self__, "subscriptions", subscriptions)
        if tax_infos is not None:
            pulumi.set(__self__, "tax_infos", tax_infos)
        if time_personal_to_corporate_conv is not None:
            pulumi.set(__self__, "time_personal_to_corporate_conv", time_personal_to_corporate_conv)
        if time_plan_upgrade is not None:
            pulumi.set(__self__, "time_plan_upgrade", time_plan_upgrade)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if upgrade_state is not None:
            pulumi.set(__self__, "upgrade_state", upgrade_state)
        if upgrade_state_details is not None:
            pulumi.set(__self__, "upgrade_state_details", upgrade_state_details)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[str]:
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="billToCustAccountId")
    def bill_to_cust_account_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_to_cust_account_id")

    @property
    @pulumi.getter(name="billingAddresses")
    def billing_addresses(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemBillingAddressResult']]:
        return pulumi.get(self, "billing_addresses")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="gsiOrgCode")
    def gsi_org_code(self) -> Optional[str]:
        return pulumi.get(self, "gsi_org_code")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="ospHomeRegion")
    def osp_home_region(self) -> Optional[str]:
        return pulumi.get(self, "osp_home_region")

    @property
    @pulumi.getter(name="paymentGateways")
    def payment_gateways(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPaymentGatewayResult']]:
        return pulumi.get(self, "payment_gateways")

    @property
    @pulumi.getter(name="paymentOptions")
    def payment_options(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPaymentOptionResult']]:
        return pulumi.get(self, "payment_options")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter(name="shipToCustAcctRoleId")
    def ship_to_cust_acct_role_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_role_id")

    @property
    @pulumi.getter(name="shipToCustAcctSiteId")
    def ship_to_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_site_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="subscriptionPlanNumber")
    def subscription_plan_number(self) -> Optional[str]:
        return pulumi.get(self, "subscription_plan_number")

    @property
    @pulumi.getter
    def subscriptions(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionResult']]:
        return pulumi.get(self, "subscriptions")

    @property
    @pulumi.getter(name="taxInfos")
    def tax_infos(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemTaxInfoResult']]:
        return pulumi.get(self, "tax_infos")

    @property
    @pulumi.getter(name="timePersonalToCorporateConv")
    def time_personal_to_corporate_conv(self) -> Optional[str]:
        return pulumi.get(self, "time_personal_to_corporate_conv")

    @property
    @pulumi.getter(name="timePlanUpgrade")
    def time_plan_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_plan_upgrade")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="upgradeState")
    def upgrade_state(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state")

    @property
    @pulumi.getter(name="upgradeStateDetails")
    def upgrade_state_details(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state_details")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemBillingAddressResult(dict):
    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemPaymentGatewayResult(dict):
    def __init__(__self__, *,
                 merchant_defined_datas: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPaymentGatewayMerchantDefinedDataResult']] = None):
        if merchant_defined_datas is not None:
            pulumi.set(__self__, "merchant_defined_datas", merchant_defined_datas)

    @property
    @pulumi.getter(name="merchantDefinedDatas")
    def merchant_defined_datas(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPaymentGatewayMerchantDefinedDataResult']]:
        return pulumi.get(self, "merchant_defined_datas")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemPaymentGatewayMerchantDefinedDataResult(dict):
    def __init__(__self__, *,
                 cloud_account_name: Optional[str] = None,
                 promo_type: Optional[str] = None):
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemPaymentOptionResult(dict):
    def __init__(__self__, *,
                 credit_card_type: Optional[str] = None,
                 email_address: Optional[str] = None,
                 ext_billing_agreement_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 wallet_instrument_id: Optional[str] = None,
                 wallet_transaction_id: Optional[str] = None):
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if ext_billing_agreement_id is not None:
            pulumi.set(__self__, "ext_billing_agreement_id", ext_billing_agreement_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if wallet_instrument_id is not None:
            pulumi.set(__self__, "wallet_instrument_id", wallet_instrument_id)
        if wallet_transaction_id is not None:
            pulumi.set(__self__, "wallet_transaction_id", wallet_transaction_id)

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="extBillingAgreementId")
    def ext_billing_agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "ext_billing_agreement_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="walletInstrumentId")
    def wallet_instrument_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_instrument_id")

    @property
    @pulumi.getter(name="walletTransactionId")
    def wallet_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_transaction_id")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSubscriptionResult(dict):
    def __init__(__self__, *,
                 account_type: Optional[str] = None,
                 bill_to_cust_account_id: Optional[str] = None,
                 billing_addresses: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionBillingAddressResult']] = None,
                 currency_code: Optional[str] = None,
                 gsi_org_code: Optional[str] = None,
                 id: Optional[str] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 language_code: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 payment_gateways: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayResult']] = None,
                 payment_options: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentOptionResult']] = None,
                 plan_type: Optional[str] = None,
                 ship_to_cust_acct_role_id: Optional[str] = None,
                 ship_to_cust_acct_site_id: Optional[str] = None,
                 subscription_plan_number: Optional[str] = None,
                 tax_infos: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionTaxInfoResult']] = None,
                 time_personal_to_corporate_conv: Optional[str] = None,
                 time_plan_upgrade: Optional[str] = None,
                 time_start: Optional[str] = None,
                 upgrade_state: Optional[str] = None,
                 upgrade_state_details: Optional[str] = None):
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if bill_to_cust_account_id is not None:
            pulumi.set(__self__, "bill_to_cust_account_id", bill_to_cust_account_id)
        if billing_addresses is not None:
            pulumi.set(__self__, "billing_addresses", billing_addresses)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if gsi_org_code is not None:
            pulumi.set(__self__, "gsi_org_code", gsi_org_code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if payment_gateways is not None:
            pulumi.set(__self__, "payment_gateways", payment_gateways)
        if payment_options is not None:
            pulumi.set(__self__, "payment_options", payment_options)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)
        if ship_to_cust_acct_role_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_role_id", ship_to_cust_acct_role_id)
        if ship_to_cust_acct_site_id is not None:
            pulumi.set(__self__, "ship_to_cust_acct_site_id", ship_to_cust_acct_site_id)
        if subscription_plan_number is not None:
            pulumi.set(__self__, "subscription_plan_number", subscription_plan_number)
        if tax_infos is not None:
            pulumi.set(__self__, "tax_infos", tax_infos)
        if time_personal_to_corporate_conv is not None:
            pulumi.set(__self__, "time_personal_to_corporate_conv", time_personal_to_corporate_conv)
        if time_plan_upgrade is not None:
            pulumi.set(__self__, "time_plan_upgrade", time_plan_upgrade)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if upgrade_state is not None:
            pulumi.set(__self__, "upgrade_state", upgrade_state)
        if upgrade_state_details is not None:
            pulumi.set(__self__, "upgrade_state_details", upgrade_state_details)

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[str]:
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="billToCustAccountId")
    def bill_to_cust_account_id(self) -> Optional[str]:
        return pulumi.get(self, "bill_to_cust_account_id")

    @property
    @pulumi.getter(name="billingAddresses")
    def billing_addresses(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionBillingAddressResult']]:
        return pulumi.get(self, "billing_addresses")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="gsiOrgCode")
    def gsi_org_code(self) -> Optional[str]:
        return pulumi.get(self, "gsi_org_code")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="paymentGateways")
    def payment_gateways(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayResult']]:
        return pulumi.get(self, "payment_gateways")

    @property
    @pulumi.getter(name="paymentOptions")
    def payment_options(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentOptionResult']]:
        return pulumi.get(self, "payment_options")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter(name="shipToCustAcctRoleId")
    def ship_to_cust_acct_role_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_role_id")

    @property
    @pulumi.getter(name="shipToCustAcctSiteId")
    def ship_to_cust_acct_site_id(self) -> Optional[str]:
        return pulumi.get(self, "ship_to_cust_acct_site_id")

    @property
    @pulumi.getter(name="subscriptionPlanNumber")
    def subscription_plan_number(self) -> Optional[str]:
        return pulumi.get(self, "subscription_plan_number")

    @property
    @pulumi.getter(name="taxInfos")
    def tax_infos(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionTaxInfoResult']]:
        return pulumi.get(self, "tax_infos")

    @property
    @pulumi.getter(name="timePersonalToCorporateConv")
    def time_personal_to_corporate_conv(self) -> Optional[str]:
        return pulumi.get(self, "time_personal_to_corporate_conv")

    @property
    @pulumi.getter(name="timePlanUpgrade")
    def time_plan_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_plan_upgrade")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="upgradeState")
    def upgrade_state(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state")

    @property
    @pulumi.getter(name="upgradeStateDetails")
    def upgrade_state_details(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_state_details")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSubscriptionBillingAddressResult(dict):
    def __init__(__self__, *,
                 address_key: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 contributor_class: Optional[str] = None,
                 country: Optional[str] = None,
                 county: Optional[str] = None,
                 department_name: Optional[str] = None,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 internal_number: Optional[str] = None,
                 job_title: Optional[str] = None,
                 last_name: Optional[str] = None,
                 line1: Optional[str] = None,
                 line2: Optional[str] = None,
                 line3: Optional[str] = None,
                 line4: Optional[str] = None,
                 middle_name: Optional[str] = None,
                 municipal_inscription: Optional[str] = None,
                 phone_country_code: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 province: Optional[str] = None,
                 state: Optional[str] = None,
                 state_inscription: Optional[str] = None,
                 street_name: Optional[str] = None,
                 street_number: Optional[str] = None):
        if address_key is not None:
            pulumi.set(__self__, "address_key", address_key)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if contributor_class is not None:
            pulumi.set(__self__, "contributor_class", contributor_class)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if department_name is not None:
            pulumi.set(__self__, "department_name", department_name)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if internal_number is not None:
            pulumi.set(__self__, "internal_number", internal_number)
        if job_title is not None:
            pulumi.set(__self__, "job_title", job_title)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if line1 is not None:
            pulumi.set(__self__, "line1", line1)
        if line2 is not None:
            pulumi.set(__self__, "line2", line2)
        if line3 is not None:
            pulumi.set(__self__, "line3", line3)
        if line4 is not None:
            pulumi.set(__self__, "line4", line4)
        if middle_name is not None:
            pulumi.set(__self__, "middle_name", middle_name)
        if municipal_inscription is not None:
            pulumi.set(__self__, "municipal_inscription", municipal_inscription)
        if phone_country_code is not None:
            pulumi.set(__self__, "phone_country_code", phone_country_code)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_inscription is not None:
            pulumi.set(__self__, "state_inscription", state_inscription)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)

    @property
    @pulumi.getter(name="addressKey")
    def address_key(self) -> Optional[str]:
        return pulumi.get(self, "address_key")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="contributorClass")
    def contributor_class(self) -> Optional[str]:
        return pulumi.get(self, "contributor_class")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def county(self) -> Optional[str]:
        return pulumi.get(self, "county")

    @property
    @pulumi.getter(name="departmentName")
    def department_name(self) -> Optional[str]:
        return pulumi.get(self, "department_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="internalNumber")
    def internal_number(self) -> Optional[str]:
        return pulumi.get(self, "internal_number")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> Optional[str]:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def line1(self) -> Optional[str]:
        return pulumi.get(self, "line1")

    @property
    @pulumi.getter
    def line2(self) -> Optional[str]:
        return pulumi.get(self, "line2")

    @property
    @pulumi.getter
    def line3(self) -> Optional[str]:
        return pulumi.get(self, "line3")

    @property
    @pulumi.getter
    def line4(self) -> Optional[str]:
        return pulumi.get(self, "line4")

    @property
    @pulumi.getter(name="middleName")
    def middle_name(self) -> Optional[str]:
        return pulumi.get(self, "middle_name")

    @property
    @pulumi.getter(name="municipalInscription")
    def municipal_inscription(self) -> Optional[str]:
        return pulumi.get(self, "municipal_inscription")

    @property
    @pulumi.getter(name="phoneCountryCode")
    def phone_country_code(self) -> Optional[str]:
        return pulumi.get(self, "phone_country_code")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def province(self) -> Optional[str]:
        return pulumi.get(self, "province")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInscription")
    def state_inscription(self) -> Optional[str]:
        return pulumi.get(self, "state_inscription")

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[str]:
        return pulumi.get(self, "street_name")

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[str]:
        return pulumi.get(self, "street_number")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayResult(dict):
    def __init__(__self__, *,
                 merchant_defined_datas: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayMerchantDefinedDataResult']] = None):
        if merchant_defined_datas is not None:
            pulumi.set(__self__, "merchant_defined_datas", merchant_defined_datas)

    @property
    @pulumi.getter(name="merchantDefinedDatas")
    def merchant_defined_datas(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayMerchantDefinedDataResult']]:
        return pulumi.get(self, "merchant_defined_datas")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayMerchantDefinedDataResult(dict):
    def __init__(__self__, *,
                 cloud_account_name: Optional[str] = None,
                 promo_type: Optional[str] = None):
        if cloud_account_name is not None:
            pulumi.set(__self__, "cloud_account_name", cloud_account_name)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)

    @property
    @pulumi.getter(name="cloudAccountName")
    def cloud_account_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_account_name")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSubscriptionPaymentOptionResult(dict):
    def __init__(__self__, *,
                 credit_card_type: Optional[str] = None,
                 email_address: Optional[str] = None,
                 ext_billing_agreement_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_digits: Optional[str] = None,
                 last_name: Optional[str] = None,
                 name_on_card: Optional[str] = None,
                 payment_method: Optional[str] = None,
                 time_expiration: Optional[str] = None,
                 wallet_instrument_id: Optional[str] = None,
                 wallet_transaction_id: Optional[str] = None):
        if credit_card_type is not None:
            pulumi.set(__self__, "credit_card_type", credit_card_type)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if ext_billing_agreement_id is not None:
            pulumi.set(__self__, "ext_billing_agreement_id", ext_billing_agreement_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_digits is not None:
            pulumi.set(__self__, "last_digits", last_digits)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name_on_card is not None:
            pulumi.set(__self__, "name_on_card", name_on_card)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if time_expiration is not None:
            pulumi.set(__self__, "time_expiration", time_expiration)
        if wallet_instrument_id is not None:
            pulumi.set(__self__, "wallet_instrument_id", wallet_instrument_id)
        if wallet_transaction_id is not None:
            pulumi.set(__self__, "wallet_transaction_id", wallet_transaction_id)

    @property
    @pulumi.getter(name="creditCardType")
    def credit_card_type(self) -> Optional[str]:
        return pulumi.get(self, "credit_card_type")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="extBillingAgreementId")
    def ext_billing_agreement_id(self) -> Optional[str]:
        return pulumi.get(self, "ext_billing_agreement_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastDigits")
    def last_digits(self) -> Optional[str]:
        return pulumi.get(self, "last_digits")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="nameOnCard")
    def name_on_card(self) -> Optional[str]:
        return pulumi.get(self, "name_on_card")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[str]:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="timeExpiration")
    def time_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_expiration")

    @property
    @pulumi.getter(name="walletInstrumentId")
    def wallet_instrument_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_instrument_id")

    @property
    @pulumi.getter(name="walletTransactionId")
    def wallet_transaction_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_transaction_id")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSubscriptionTaxInfoResult(dict):
    def __init__(__self__, *,
                 no_tax_reason_code: Optional[str] = None,
                 no_tax_reason_code_details: Optional[str] = None,
                 tax_cnpj: Optional[str] = None,
                 tax_payer_id: Optional[str] = None,
                 tax_reg_number: Optional[str] = None):
        if no_tax_reason_code is not None:
            pulumi.set(__self__, "no_tax_reason_code", no_tax_reason_code)
        if no_tax_reason_code_details is not None:
            pulumi.set(__self__, "no_tax_reason_code_details", no_tax_reason_code_details)
        if tax_cnpj is not None:
            pulumi.set(__self__, "tax_cnpj", tax_cnpj)
        if tax_payer_id is not None:
            pulumi.set(__self__, "tax_payer_id", tax_payer_id)
        if tax_reg_number is not None:
            pulumi.set(__self__, "tax_reg_number", tax_reg_number)

    @property
    @pulumi.getter(name="noTaxReasonCode")
    def no_tax_reason_code(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code")

    @property
    @pulumi.getter(name="noTaxReasonCodeDetails")
    def no_tax_reason_code_details(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code_details")

    @property
    @pulumi.getter(name="taxCnpj")
    def tax_cnpj(self) -> Optional[str]:
        return pulumi.get(self, "tax_cnpj")

    @property
    @pulumi.getter(name="taxPayerId")
    def tax_payer_id(self) -> Optional[str]:
        return pulumi.get(self, "tax_payer_id")

    @property
    @pulumi.getter(name="taxRegNumber")
    def tax_reg_number(self) -> Optional[str]:
        return pulumi.get(self, "tax_reg_number")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemTaxInfoResult(dict):
    def __init__(__self__, *,
                 no_tax_reason_code: Optional[str] = None,
                 no_tax_reason_code_details: Optional[str] = None,
                 tax_cnpj: Optional[str] = None,
                 tax_payer_id: Optional[str] = None,
                 tax_reg_number: Optional[str] = None):
        if no_tax_reason_code is not None:
            pulumi.set(__self__, "no_tax_reason_code", no_tax_reason_code)
        if no_tax_reason_code_details is not None:
            pulumi.set(__self__, "no_tax_reason_code_details", no_tax_reason_code_details)
        if tax_cnpj is not None:
            pulumi.set(__self__, "tax_cnpj", tax_cnpj)
        if tax_payer_id is not None:
            pulumi.set(__self__, "tax_payer_id", tax_payer_id)
        if tax_reg_number is not None:
            pulumi.set(__self__, "tax_reg_number", tax_reg_number)

    @property
    @pulumi.getter(name="noTaxReasonCode")
    def no_tax_reason_code(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code")

    @property
    @pulumi.getter(name="noTaxReasonCodeDetails")
    def no_tax_reason_code_details(self) -> Optional[str]:
        return pulumi.get(self, "no_tax_reason_code_details")

    @property
    @pulumi.getter(name="taxCnpj")
    def tax_cnpj(self) -> Optional[str]:
        return pulumi.get(self, "tax_cnpj")

    @property
    @pulumi.getter(name="taxPayerId")
    def tax_payer_id(self) -> Optional[str]:
        return pulumi.get(self, "tax_payer_id")

    @property
    @pulumi.getter(name="taxRegNumber")
    def tax_reg_number(self) -> Optional[str]:
        return pulumi.get(self, "tax_reg_number")


