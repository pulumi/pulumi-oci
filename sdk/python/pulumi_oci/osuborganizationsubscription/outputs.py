# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOrganizationSubscriptionsFilterResult',
    'GetOrganizationSubscriptionsSubscriptionResult',
    'GetOrganizationSubscriptionsSubscriptionCurrencyResult',
]

@pulumi.output_type
class GetOrganizationSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Currency name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Currency name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOrganizationSubscriptionsSubscriptionResult(dict):
    def __init__(__self__, *,
                 currencies: Sequence['outputs.GetOrganizationSubscriptionsSubscriptionCurrencyResult'],
                 id: _builtins.str,
                 service_name: _builtins.str,
                 status: _builtins.str,
                 time_end: _builtins.str,
                 time_start: _builtins.str,
                 total_value: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetOrganizationSubscriptionsSubscriptionCurrencyArgs'] currencies: Currency details
        :param _builtins.str id: SPM internal Subscription ID
        :param _builtins.str service_name: Customer friendly service name provided by PRG
        :param _builtins.str status: Status of the plan
        :param _builtins.str time_end: Represents the date when the last service of the subscription ends
        :param _builtins.str time_start: Represents the date when the first service of the subscription was activated
        :param _builtins.str total_value: Total aggregate TCLV of all lines for the subscription including expired, active, and signed
        :param _builtins.str type: Subscription Type i.e. IAAS,SAAS,PAAS
        """
        pulumi.set(__self__, "currencies", currencies)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_end", time_end)
        pulumi.set(__self__, "time_start", time_start)
        pulumi.set(__self__, "total_value", total_value)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def currencies(self) -> Sequence['outputs.GetOrganizationSubscriptionsSubscriptionCurrencyResult']:
        """
        Currency details
        """
        return pulumi.get(self, "currencies")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        SPM internal Subscription ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Customer friendly service name provided by PRG
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of the plan
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> _builtins.str:
        """
        Represents the date when the last service of the subscription ends
        """
        return pulumi.get(self, "time_end")

    @_builtins.property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> _builtins.str:
        """
        Represents the date when the first service of the subscription was activated
        """
        return pulumi.get(self, "time_start")

    @_builtins.property
    @pulumi.getter(name="totalValue")
    def total_value(self) -> _builtins.str:
        """
        Total aggregate TCLV of all lines for the subscription including expired, active, and signed
        """
        return pulumi.get(self, "total_value")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Subscription Type i.e. IAAS,SAAS,PAAS
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOrganizationSubscriptionsSubscriptionCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: _builtins.str,
                 name: _builtins.str,
                 std_precision: _builtins.str):
        """
        :param _builtins.str iso_code: Currency Code
        :param _builtins.str name: Currency name
        :param _builtins.str std_precision: Standard Precision of the Currency
        """
        pulumi.set(__self__, "iso_code", iso_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "std_precision", std_precision)

    @_builtins.property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> _builtins.str:
        """
        Currency Code
        """
        return pulumi.get(self, "iso_code")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Currency name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> _builtins.str:
        """
        Standard Precision of the Currency
        """
        return pulumi.get(self, "std_precision")


