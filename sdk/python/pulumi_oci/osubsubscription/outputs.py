# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCommitmentsCommitmentResult',
    'GetCommitmentsFilterResult',
    'GetRatecardsFilterResult',
    'GetRatecardsRateCardResult',
    'GetRatecardsRateCardCurrencyResult',
    'GetRatecardsRateCardProductResult',
    'GetRatecardsRateCardRateCardTierResult',
    'GetSubscriptionsFilterResult',
    'GetSubscriptionsSubscriptionResult',
    'GetSubscriptionsSubscriptionCurrencyResult',
    'GetSubscriptionsSubscriptionSubscribedServiceResult',
    'GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult',
    'GetSubscriptionsSubscriptionSubscribedServiceProductResult',
]

@pulumi.output_type
class GetCommitmentsCommitmentResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 id: Optional[str] = None,
                 quantity: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 used_amount: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if used_amount is not None:
            pulumi.set(__self__, "used_amount", used_amount)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> Optional[str]:
        return pulumi.get(self, "used_amount")


@pulumi.output_type
class GetCommitmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRatecardsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRatecardsRateCardResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetRatecardsRateCardCurrencyResult']] = None,
                 discretionary_discount_percentage: Optional[str] = None,
                 is_tier: Optional[bool] = None,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetRatecardsRateCardProductResult']] = None,
                 rate_card_tiers: Optional[Sequence['outputs.GetRatecardsRateCardRateCardTierResult']] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if discretionary_discount_percentage is not None:
            pulumi.set(__self__, "discretionary_discount_percentage", discretionary_discount_percentage)
        if is_tier is not None:
            pulumi.set(__self__, "is_tier", is_tier)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if rate_card_tiers is not None:
            pulumi.set(__self__, "rate_card_tiers", rate_card_tiers)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetRatecardsRateCardCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="discretionaryDiscountPercentage")
    def discretionary_discount_percentage(self) -> Optional[str]:
        return pulumi.get(self, "discretionary_discount_percentage")

    @property
    @pulumi.getter(name="isTier")
    def is_tier(self) -> Optional[bool]:
        return pulumi.get(self, "is_tier")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetRatecardsRateCardProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="rateCardTiers")
    def rate_card_tiers(self) -> Optional[Sequence['outputs.GetRatecardsRateCardRateCardTierResult']]:
        return pulumi.get(self, "rate_card_tiers")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetRatecardsRateCardCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetRatecardsRateCardProductResult(dict):
    def __init__(__self__, *,
                 billing_category: Optional[str] = None,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 product_category: Optional[str] = None,
                 ucm_rate_card_part_type: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if billing_category is not None:
            pulumi.set(__self__, "billing_category", billing_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if product_category is not None:
            pulumi.set(__self__, "product_category", product_category)
        if ucm_rate_card_part_type is not None:
            pulumi.set(__self__, "ucm_rate_card_part_type", ucm_rate_card_part_type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="billingCategory")
    def billing_category(self) -> Optional[str]:
        return pulumi.get(self, "billing_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="ucmRateCardPartType")
    def ucm_rate_card_part_type(self) -> Optional[str]:
        return pulumi.get(self, "ucm_rate_card_part_type")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


@pulumi.output_type
class GetRatecardsRateCardRateCardTierResult(dict):
    def __init__(__self__, *,
                 net_unit_price: Optional[str] = None,
                 overage_price: Optional[str] = None,
                 up_to_quantity: Optional[str] = None):
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if overage_price is not None:
            pulumi.set(__self__, "overage_price", overage_price)
        if up_to_quantity is not None:
            pulumi.set(__self__, "up_to_quantity", up_to_quantity)

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="overagePrice")
    def overage_price(self) -> Optional[str]:
        return pulumi.get(self, "overage_price")

    @property
    @pulumi.getter(name="upToQuantity")
    def up_to_quantity(self) -> Optional[str]:
        return pulumi.get(self, "up_to_quantity")


@pulumi.output_type
class GetSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionsSubscriptionResult(dict):
    def __init__(__self__, *,
                 currencies: Optional[Sequence['outputs.GetSubscriptionsSubscriptionCurrencyResult']] = None,
                 service_name: Optional[str] = None,
                 status: Optional[str] = None,
                 subscribed_services: Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceResult']] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if currencies is not None:
            pulumi.set(__self__, "currencies", currencies)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscribed_services is not None:
            pulumi.set(__self__, "subscribed_services", subscribed_services)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def currencies(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionCurrencyResult']]:
        return pulumi.get(self, "currencies")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscribedServices")
    def subscribed_services(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceResult']]:
        return pulumi.get(self, "subscribed_services")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscriptionsSubscriptionCurrencyResult(dict):
    def __init__(__self__, *,
                 iso_code: Optional[str] = None,
                 name: Optional[str] = None,
                 std_precision: Optional[str] = None):
        if iso_code is not None:
            pulumi.set(__self__, "iso_code", iso_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if std_precision is not None:
            pulumi.set(__self__, "std_precision", std_precision)

    @property
    @pulumi.getter(name="isoCode")
    def iso_code(self) -> Optional[str]:
        return pulumi.get(self, "iso_code")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stdPrecision")
    def std_precision(self) -> Optional[str]:
        return pulumi.get(self, "std_precision")


@pulumi.output_type
class GetSubscriptionsSubscriptionSubscribedServiceResult(dict):
    def __init__(__self__, *,
                 booking_opty_number: Optional[str] = None,
                 commitment_services: Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult']] = None,
                 csi: Optional[str] = None,
                 data_center_region: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 id: Optional[str] = None,
                 is_intent_to_pay: Optional[bool] = None,
                 net_unit_price: Optional[str] = None,
                 operation_type: Optional[str] = None,
                 order_number: Optional[str] = None,
                 partner_transaction_type: Optional[str] = None,
                 pricing_model: Optional[str] = None,
                 products: Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceProductResult']] = None,
                 program_type: Optional[str] = None,
                 promo_type: Optional[str] = None,
                 quantity: Optional[str] = None,
                 status: Optional[str] = None,
                 term_value: Optional[str] = None,
                 term_value_uom: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 total_value: Optional[str] = None):
        if booking_opty_number is not None:
            pulumi.set(__self__, "booking_opty_number", booking_opty_number)
        if commitment_services is not None:
            pulumi.set(__self__, "commitment_services", commitment_services)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if data_center_region is not None:
            pulumi.set(__self__, "data_center_region", data_center_region)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_intent_to_pay is not None:
            pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        if net_unit_price is not None:
            pulumi.set(__self__, "net_unit_price", net_unit_price)
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if partner_transaction_type is not None:
            pulumi.set(__self__, "partner_transaction_type", partner_transaction_type)
        if pricing_model is not None:
            pulumi.set(__self__, "pricing_model", pricing_model)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if program_type is not None:
            pulumi.set(__self__, "program_type", program_type)
        if promo_type is not None:
            pulumi.set(__self__, "promo_type", promo_type)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if term_value is not None:
            pulumi.set(__self__, "term_value", term_value)
        if term_value_uom is not None:
            pulumi.set(__self__, "term_value_uom", term_value_uom)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if total_value is not None:
            pulumi.set(__self__, "total_value", total_value)

    @property
    @pulumi.getter(name="bookingOptyNumber")
    def booking_opty_number(self) -> Optional[str]:
        return pulumi.get(self, "booking_opty_number")

    @property
    @pulumi.getter(name="commitmentServices")
    def commitment_services(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult']]:
        return pulumi.get(self, "commitment_services")

    @property
    @pulumi.getter
    def csi(self) -> Optional[str]:
        return pulumi.get(self, "csi")

    @property
    @pulumi.getter(name="dataCenterRegion")
    def data_center_region(self) -> Optional[str]:
        return pulumi.get(self, "data_center_region")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> Optional[bool]:
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter(name="netUnitPrice")
    def net_unit_price(self) -> Optional[str]:
        return pulumi.get(self, "net_unit_price")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[str]:
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="partnerTransactionType")
    def partner_transaction_type(self) -> Optional[str]:
        return pulumi.get(self, "partner_transaction_type")

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> Optional[str]:
        return pulumi.get(self, "pricing_model")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence['outputs.GetSubscriptionsSubscriptionSubscribedServiceProductResult']]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="programType")
    def program_type(self) -> Optional[str]:
        return pulumi.get(self, "program_type")

    @property
    @pulumi.getter(name="promoType")
    def promo_type(self) -> Optional[str]:
        return pulumi.get(self, "promo_type")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="termValue")
    def term_value(self) -> Optional[str]:
        return pulumi.get(self, "term_value")

    @property
    @pulumi.getter(name="termValueUom")
    def term_value_uom(self) -> Optional[str]:
        return pulumi.get(self, "term_value_uom")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="totalValue")
    def total_value(self) -> Optional[str]:
        return pulumi.get(self, "total_value")


@pulumi.output_type
class GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult(dict):
    def __init__(__self__, *,
                 available_amount: Optional[str] = None,
                 funded_allocation_value: Optional[str] = None,
                 line_net_amount: Optional[str] = None,
                 quantity: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if available_amount is not None:
            pulumi.set(__self__, "available_amount", available_amount)
        if funded_allocation_value is not None:
            pulumi.set(__self__, "funded_allocation_value", funded_allocation_value)
        if line_net_amount is not None:
            pulumi.set(__self__, "line_net_amount", line_net_amount)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="availableAmount")
    def available_amount(self) -> Optional[str]:
        return pulumi.get(self, "available_amount")

    @property
    @pulumi.getter(name="fundedAllocationValue")
    def funded_allocation_value(self) -> Optional[str]:
        return pulumi.get(self, "funded_allocation_value")

    @property
    @pulumi.getter(name="lineNetAmount")
    def line_net_amount(self) -> Optional[str]:
        return pulumi.get(self, "line_net_amount")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[str]:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetSubscriptionsSubscriptionSubscribedServiceProductResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 part_number: Optional[str] = None,
                 provisioning_group: Optional[str] = None,
                 unit_of_measure: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if provisioning_group is not None:
            pulumi.set(__self__, "provisioning_group", provisioning_group)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[str]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter(name="provisioningGroup")
    def provisioning_group(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_group")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[str]:
        return pulumi.get(self, "unit_of_measure")


