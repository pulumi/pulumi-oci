# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BackupDbSystemDetailArgs',
    'ConfigurationConfigurationDetailArgs',
    'ConfigurationConfigurationDetailItemArgs',
    'ConfigurationDbConfigurationOverridesArgs',
    'ConfigurationDbConfigurationOverridesItemArgs',
    'DbSystemCredentialsArgs',
    'DbSystemCredentialsPasswordDetailsArgs',
    'DbSystemInstanceArgs',
    'DbSystemInstancesDetailArgs',
    'DbSystemManagementPolicyArgs',
    'DbSystemManagementPolicyBackupPolicyArgs',
    'DbSystemNetworkDetailsArgs',
    'DbSystemSourceArgs',
    'DbSystemStorageDetailsArgs',
    'GetBackupsFilterArgs',
    'GetConfigurationsFilterArgs',
    'GetDbSystemsFilterArgs',
    'GetDefaultConfigurationsFilterArgs',
    'GetShapesFilterArgs',
]

@pulumi.input_type
class BackupDbSystemDetailArgs:
    def __init__(__self__, *,
                 db_version: Optional[pulumi.Input[str]] = None,
                 system_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] db_version: The major and minor versions of the DbSystem software.
        :param pulumi.Input[str] system_type: Type of the DbSystem.
        """
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if system_type is not None:
            pulumi.set(__self__, "system_type", system_type)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        The major and minor versions of the DbSystem software.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="systemType")
    def system_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the DbSystem.
        """
        return pulumi.get(self, "system_type")

    @system_type.setter
    def system_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_type", value)


@pulumi.input_type
class ConfigurationConfigurationDetailArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationConfigurationDetailItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationConfigurationDetailItemArgs']]] items: List of configuration overriden values
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationConfigurationDetailItemArgs']]]]:
        """
        List of configuration overriden values
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationConfigurationDetailItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class ConfigurationConfigurationDetailItemArgs:
    def __init__(__self__, *,
                 allowed_values: Optional[pulumi.Input[str]] = None,
                 config_key: Optional[pulumi.Input[str]] = None,
                 data_type: Optional[pulumi.Input[str]] = None,
                 default_config_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_overridable: Optional[pulumi.Input[bool]] = None,
                 is_restart_required: Optional[pulumi.Input[bool]] = None,
                 overriden_config_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allowed_values: Range or list of allowed values
        :param pulumi.Input[str] config_key: Key is the configuration key.
        :param pulumi.Input[str] data_type: Describes about the Datatype value.
        :param pulumi.Input[str] default_config_value: Default value
        :param pulumi.Input[str] description: (Updatable) Details about the Configuration Set.
        :param pulumi.Input[bool] is_overridable: This flags tells whether the value is overridable or not.
        :param pulumi.Input[bool] is_restart_required: If true, modfying this configuration value will requires restart.
        :param pulumi.Input[str] overriden_config_value: User selected configuration value
        """
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_config_value is not None:
            pulumi.set(__self__, "default_config_value", default_config_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_overridable is not None:
            pulumi.set(__self__, "is_overridable", is_overridable)
        if is_restart_required is not None:
            pulumi.set(__self__, "is_restart_required", is_restart_required)
        if overriden_config_value is not None:
            pulumi.set(__self__, "overriden_config_value", overriden_config_value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[str]]:
        """
        Range or list of allowed values
        """
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the configuration key.
        """
        return pulumi.get(self, "config_key")

    @config_key.setter
    def config_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_key", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Describes about the Datatype value.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultConfigValue")
    def default_config_value(self) -> Optional[pulumi.Input[str]]:
        """
        Default value
        """
        return pulumi.get(self, "default_config_value")

    @default_config_value.setter
    def default_config_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_config_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Details about the Configuration Set.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isOverridable")
    def is_overridable(self) -> Optional[pulumi.Input[bool]]:
        """
        This flags tells whether the value is overridable or not.
        """
        return pulumi.get(self, "is_overridable")

    @is_overridable.setter
    def is_overridable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_overridable", value)

    @property
    @pulumi.getter(name="isRestartRequired")
    def is_restart_required(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, modfying this configuration value will requires restart.
        """
        return pulumi.get(self, "is_restart_required")

    @is_restart_required.setter
    def is_restart_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_restart_required", value)

    @property
    @pulumi.getter(name="overridenConfigValue")
    def overriden_config_value(self) -> Optional[pulumi.Input[str]]:
        """
        User selected configuration value
        """
        return pulumi.get(self, "overriden_config_value")

    @overriden_config_value.setter
    def overriden_config_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overriden_config_value", value)


@pulumi.input_type
class ConfigurationDbConfigurationOverridesArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['ConfigurationDbConfigurationOverridesItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationDbConfigurationOverridesItemArgs']]] items: List of configuration overriden values
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['ConfigurationDbConfigurationOverridesItemArgs']]]:
        """
        List of configuration overriden values
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['ConfigurationDbConfigurationOverridesItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class ConfigurationDbConfigurationOverridesItemArgs:
    def __init__(__self__, *,
                 config_key: pulumi.Input[str],
                 overriden_config_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] config_key: Key is the configuration key.
        :param pulumi.Input[str] overriden_config_value: User selected configuration value
        """
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "overriden_config_value", overriden_config_value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> pulumi.Input[str]:
        """
        Key is the configuration key.
        """
        return pulumi.get(self, "config_key")

    @config_key.setter
    def config_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_key", value)

    @property
    @pulumi.getter(name="overridenConfigValue")
    def overriden_config_value(self) -> pulumi.Input[str]:
        """
        User selected configuration value
        """
        return pulumi.get(self, "overriden_config_value")

    @overriden_config_value.setter
    def overriden_config_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "overriden_config_value", value)


@pulumi.input_type
class DbSystemCredentialsArgs:
    def __init__(__self__, *,
                 password_details: pulumi.Input['DbSystemCredentialsPasswordDetailsArgs'],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input['DbSystemCredentialsPasswordDetailsArgs'] password_details: Details for the DbSystem password. Password can be passed as `VaultSecretPasswordDetails`(Vault) or `PlainTextPasswordDetails`.
        :param pulumi.Input[str] username: The DB system username.
        """
        pulumi.set(__self__, "password_details", password_details)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordDetails")
    def password_details(self) -> pulumi.Input['DbSystemCredentialsPasswordDetailsArgs']:
        """
        Details for the DbSystem password. Password can be passed as `VaultSecretPasswordDetails`(Vault) or `PlainTextPasswordDetails`.
        """
        return pulumi.get(self, "password_details")

    @password_details.setter
    def password_details(self, value: pulumi.Input['DbSystemCredentialsPasswordDetailsArgs']):
        pulumi.set(self, "password_details", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The DB system username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DbSystemCredentialsPasswordDetailsArgs:
    def __init__(__self__, *,
                 password_type: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 secret_id: Optional[pulumi.Input[str]] = None,
                 secret_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_type: Password type
        :param pulumi.Input[str] password: The dbSystem password.
        :param pulumi.Input[str] secret_id: The OCID of secret where the password is stored.
        :param pulumi.Input[str] secret_version: The secret version where the password is stored.
        """
        pulumi.set(__self__, "password_type", password_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_version is not None:
            pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> pulumi.Input[str]:
        """
        Password type
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The dbSystem password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of secret where the password is stored.
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_id", value)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> Optional[pulumi.Input[str]]:
        """
        The secret version where the password is stored.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_version", value)


@pulumi.input_type
class DbSystemInstanceArgs:
    def __init__(__self__, *,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_domain: Specifies the availability domain of AD-local storage. If isRegionallyDurable is set to true, availabilityDomain should not be specified. If isRegionallyDurable is set to false, availabilityDomain must be specified.
        :param pulumi.Input[str] description: Description of the DbInstance. This field should be input by the user.
        :param pulumi.Input[str] display_name: Display name of the DbInstance.
        :param pulumi.Input[str] id: Unique identifier that is immutable on creation.
        :param pulumi.Input[str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[str] state: The current state of the DbSystem.
        :param pulumi.Input[str] time_created: The time the the DbSystem was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the DbSystem was updated. An RFC3339 formatted datetime string
        """
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the availability domain of AD-local storage. If isRegionallyDurable is set to true, availabilityDomain should not be specified. If isRegionallyDurable is set to false, availabilityDomain must be specified.
        """
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the DbInstance. This field should be input by the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the DbInstance.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the DbSystem.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time the the DbSystem was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time the DbSystem was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


@pulumi.input_type
class DbSystemInstancesDetailArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description of the DbInstance. This field should be input by the user.
        :param pulumi.Input[str] display_name: Display name of the DbInstance.
        :param pulumi.Input[str] private_ip: Private IP in customer subnet that will be assigned to the DbInstance. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the DbInstance. This field should be input by the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the DbInstance.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Private IP in customer subnet that will be assigned to the DbInstance. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)


@pulumi.input_type
class DbSystemManagementPolicyArgs:
    def __init__(__self__, *,
                 backup_policy: Optional[pulumi.Input['DbSystemManagementPolicyBackupPolicyArgs']] = None,
                 maintenance_window_start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DbSystemManagementPolicyBackupPolicyArgs'] backup_policy: (Updatable) Posgresql DB system backup policy
        :param pulumi.Input[str] maintenance_window_start: (Updatable) The start of the maintenance window.
        """
        if backup_policy is not None:
            pulumi.set(__self__, "backup_policy", backup_policy)
        if maintenance_window_start is not None:
            pulumi.set(__self__, "maintenance_window_start", maintenance_window_start)

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> Optional[pulumi.Input['DbSystemManagementPolicyBackupPolicyArgs']]:
        """
        (Updatable) Posgresql DB system backup policy
        """
        return pulumi.get(self, "backup_policy")

    @backup_policy.setter
    def backup_policy(self, value: Optional[pulumi.Input['DbSystemManagementPolicyBackupPolicyArgs']]):
        pulumi.set(self, "backup_policy", value)

    @property
    @pulumi.getter(name="maintenanceWindowStart")
    def maintenance_window_start(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The start of the maintenance window.
        """
        return pulumi.get(self, "maintenance_window_start")

    @maintenance_window_start.setter
    def maintenance_window_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_start", value)


@pulumi.input_type
class DbSystemManagementPolicyBackupPolicyArgs:
    def __init__(__self__, *,
                 backup_start: Optional[pulumi.Input[str]] = None,
                 days_of_the_months: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 days_of_the_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] backup_start: (Updatable) Hour of the day when backup starts.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days_of_the_months: (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days_of_the_weeks: (Updatable) Weekly days
        :param pulumi.Input[str] kind: (Updatable) Backup policy kind
        :param pulumi.Input[int] retention_days: (Updatable) How many days the customers data should be stored after the db system deletion.
        """
        if backup_start is not None:
            pulumi.set(__self__, "backup_start", backup_start)
        if days_of_the_months is not None:
            pulumi.set(__self__, "days_of_the_months", days_of_the_months)
        if days_of_the_weeks is not None:
            pulumi.set(__self__, "days_of_the_weeks", days_of_the_weeks)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if retention_days is not None:
            pulumi.set(__self__, "retention_days", retention_days)

    @property
    @pulumi.getter(name="backupStart")
    def backup_start(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Hour of the day when backup starts.
        """
        return pulumi.get(self, "backup_start")

    @backup_start.setter
    def backup_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_start", value)

    @property
    @pulumi.getter(name="daysOfTheMonths")
    def days_of_the_months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        (Updatable) Days of the month when backup should start. If the day is greater last day of the current month, then it will be triggered on the last day of the current month
        """
        return pulumi.get(self, "days_of_the_months")

    @days_of_the_months.setter
    def days_of_the_months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days_of_the_months", value)

    @property
    @pulumi.getter(name="daysOfTheWeeks")
    def days_of_the_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Weekly days
        """
        return pulumi.get(self, "days_of_the_weeks")

    @days_of_the_weeks.setter
    def days_of_the_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "days_of_the_weeks", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Backup policy kind
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) How many days the customers data should be stored after the db system deletion.
        """
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)


@pulumi.input_type
class DbSystemNetworkDetailsArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 primary_db_endpoint_private_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: Customer Subnet identifier
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nsg_ids: List of customer NetworkSecurityGroup identifiers
        :param pulumi.Input[str] primary_db_endpoint_private_ip: Private IP in customer subnet. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if primary_db_endpoint_private_ip is not None:
            pulumi.set(__self__, "primary_db_endpoint_private_ip", primary_db_endpoint_private_ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Customer Subnet identifier
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of customer NetworkSecurityGroup identifiers
        """
        return pulumi.get(self, "nsg_ids")

    @nsg_ids.setter
    def nsg_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nsg_ids", value)

    @property
    @pulumi.getter(name="primaryDbEndpointPrivateIp")
    def primary_db_endpoint_private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Private IP in customer subnet. The value is optional. If the IP is not provided the IP will be chosen among the available IP addresses from the specified subnet.
        """
        return pulumi.get(self, "primary_db_endpoint_private_ip")

    @primary_db_endpoint_private_ip.setter
    def primary_db_endpoint_private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_db_endpoint_private_ip", value)


@pulumi.input_type
class DbSystemSourceArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 backup_id: Optional[pulumi.Input[str]] = None,
                 is_having_restore_config_overrides: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] source_type: The source descriminator.
        :param pulumi.Input[str] backup_id: DbSystem backup identifier.
        :param pulumi.Input[bool] is_having_restore_config_overrides: Restore the DB config overrides from backup. Default is false
        """
        pulumi.set(__self__, "source_type", source_type)
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if is_having_restore_config_overrides is not None:
            pulumi.set(__self__, "is_having_restore_config_overrides", is_having_restore_config_overrides)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The source descriminator.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        """
        DbSystem backup identifier.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="isHavingRestoreConfigOverrides")
    def is_having_restore_config_overrides(self) -> Optional[pulumi.Input[bool]]:
        """
        Restore the DB config overrides from backup. Default is false
        """
        return pulumi.get(self, "is_having_restore_config_overrides")

    @is_having_restore_config_overrides.setter
    def is_having_restore_config_overrides(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_having_restore_config_overrides", value)


@pulumi.input_type
class DbSystemStorageDetailsArgs:
    def __init__(__self__, *,
                 is_regionally_durable: pulumi.Input[bool],
                 system_type: pulumi.Input[str],
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_regionally_durable: Specifies if the block volume used for the DbSystem is regional or AD-local. If not specified, it will be set to false. If isRegionallyDurable is set to true, availabilityDomain should not be specified. If isRegionallyDurable is set to false, availabilityDomain must be specified.
        :param pulumi.Input[str] system_type: Type of the DbSystem.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] availability_domain: Specifies the availability domain of AD-local storage. If isRegionallyDurable is set to true, availabilityDomain should not be specified. If isRegionallyDurable is set to false, availabilityDomain must be specified.
        :param pulumi.Input[str] iops: (Updatable) DbSystem Performance Unit
        """
        pulumi.set(__self__, "is_regionally_durable", is_regionally_durable)
        pulumi.set(__self__, "system_type", system_type)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)

    @property
    @pulumi.getter(name="isRegionallyDurable")
    def is_regionally_durable(self) -> pulumi.Input[bool]:
        """
        Specifies if the block volume used for the DbSystem is regional or AD-local. If not specified, it will be set to false. If isRegionallyDurable is set to true, availabilityDomain should not be specified. If isRegionallyDurable is set to false, availabilityDomain must be specified.
        """
        return pulumi.get(self, "is_regionally_durable")

    @is_regionally_durable.setter
    def is_regionally_durable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_regionally_durable", value)

    @property
    @pulumi.getter(name="systemType")
    def system_type(self) -> pulumi.Input[str]:
        """
        Type of the DbSystem.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "system_type")

    @system_type.setter
    def system_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_type", value)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the availability domain of AD-local storage. If isRegionallyDurable is set to true, availabilityDomain should not be specified. If isRegionallyDurable is set to false, availabilityDomain must be specified.
        """
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) DbSystem Performance Unit
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iops", value)


@pulumi.input_type
class GetBackupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetConfigurationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDbSystemsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDefaultConfigurationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetShapesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


