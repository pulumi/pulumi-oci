# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBackupsResult',
    'AwaitableGetBackupsResult',
    'get_backups',
    'get_backups_output',
]

@pulumi.output_type
class GetBackupsResult:
    """
    A collection of values returned by getBackups.
    """
    def __init__(__self__, backup_collections=None, backup_id=None, compartment_id=None, display_name=None, filters=None, id=None, state=None, time_ended=None, time_started=None):
        if backup_collections and not isinstance(backup_collections, list):
            raise TypeError("Expected argument 'backup_collections' to be a list")
        pulumi.set(__self__, "backup_collections", backup_collections)
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_ended and not isinstance(time_ended, str):
            raise TypeError("Expected argument 'time_ended' to be a str")
        pulumi.set(__self__, "time_ended", time_ended)
        if time_started and not isinstance(time_started, str):
            raise TypeError("Expected argument 'time_started' to be a str")
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="backupCollections")
    def backup_collections(self) -> Sequence['outputs.GetBackupsBackupCollectionResult']:
        """
        The list of backup_collection.
        """
        return pulumi.get(self, "backup_collections")

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        Backup compartment identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Backup display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBackupsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier that is immutable on creation
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the Backup.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


class AwaitableGetBackupsResult(GetBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupsResult(
            backup_collections=self.backup_collections,
            backup_id=self.backup_id,
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            state=self.state,
            time_ended=self.time_ended,
            time_started=self.time_started)


def get_backups(backup_id: Optional[str] = None,
                compartment_id: Optional[str] = None,
                display_name: Optional[str] = None,
                filters: Optional[Sequence[pulumi.InputType['GetBackupsFilterArgs']]] = None,
                id: Optional[str] = None,
                state: Optional[str] = None,
                time_ended: Optional[str] = None,
                time_started: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupsResult:
    """
    This data source provides the list of Backups in Oracle Cloud Infrastructure Psql service.

    Returns a list of Backup.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_backups = oci.Psql.get_backups(backup_id=oci_psql_backup["test_backup"]["id"],
        compartment_id=var["compartment_id"],
        display_name=var["backup_display_name"],
        id=var["backup_id"],
        state=var["backup_state"],
        time_ended=var["backup_time_ended"],
        time_started=var["backup_time_started"])
    ```


    :param str backup_id: unique Backup identifier
    :param str compartment_id: The ID of the compartment in which to list resources.
    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str id: unique DbSystem identifier
    :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
    :param str time_ended: The End date for getting  backups. An RFC3339 formatted datetime string.
    :param str time_started: The start date for getting  backups. An RFC3339 formatted datetime string
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['state'] = state
    __args__['timeEnded'] = time_ended
    __args__['timeStarted'] = time_started
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Psql/getBackups:getBackups', __args__, opts=opts, typ=GetBackupsResult).value

    return AwaitableGetBackupsResult(
        backup_collections=pulumi.get(__ret__, 'backup_collections'),
        backup_id=pulumi.get(__ret__, 'backup_id'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'),
        time_ended=pulumi.get(__ret__, 'time_ended'),
        time_started=pulumi.get(__ret__, 'time_started'))


@_utilities.lift_output_func(get_backups)
def get_backups_output(backup_id: Optional[pulumi.Input[Optional[str]]] = None,
                       compartment_id: Optional[pulumi.Input[Optional[str]]] = None,
                       display_name: Optional[pulumi.Input[Optional[str]]] = None,
                       filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBackupsFilterArgs']]]]] = None,
                       id: Optional[pulumi.Input[Optional[str]]] = None,
                       state: Optional[pulumi.Input[Optional[str]]] = None,
                       time_ended: Optional[pulumi.Input[Optional[str]]] = None,
                       time_started: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupsResult]:
    """
    This data source provides the list of Backups in Oracle Cloud Infrastructure Psql service.

    Returns a list of Backup.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_backups = oci.Psql.get_backups(backup_id=oci_psql_backup["test_backup"]["id"],
        compartment_id=var["compartment_id"],
        display_name=var["backup_display_name"],
        id=var["backup_id"],
        state=var["backup_state"],
        time_ended=var["backup_time_ended"],
        time_started=var["backup_time_started"])
    ```


    :param str backup_id: unique Backup identifier
    :param str compartment_id: The ID of the compartment in which to list resources.
    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str id: unique DbSystem identifier
    :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
    :param str time_ended: The End date for getting  backups. An RFC3339 formatted datetime string.
    :param str time_started: The start date for getting  backups. An RFC3339 formatted datetime string
    """
    ...
