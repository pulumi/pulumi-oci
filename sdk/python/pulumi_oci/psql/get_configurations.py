# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetConfigurationsResult',
    'AwaitableGetConfigurationsResult',
    'get_configurations',
    'get_configurations_output',
]

@pulumi.output_type
class GetConfigurationsResult:
    """
    A collection of values returned by getConfigurations.
    """
    def __init__(__self__, compartment_id=None, configuration_collections=None, configuration_id=None, db_version=None, display_name=None, filters=None, id=None, shape=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration_collections and not isinstance(configuration_collections, list):
            raise TypeError("Expected argument 'configuration_collections' to be a list")
        pulumi.set(__self__, "configuration_collections", configuration_collections)
        if configuration_id and not isinstance(configuration_id, str):
            raise TypeError("Expected argument 'configuration_id' to be a str")
        pulumi.set(__self__, "configuration_id", configuration_id)
        if db_version and not isinstance(db_version, str):
            raise TypeError("Expected argument 'db_version' to be a str")
        pulumi.set(__self__, "db_version", db_version)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if shape and not isinstance(shape, str):
            raise TypeError("Expected argument 'shape' to be a str")
        pulumi.set(__self__, "shape", shape)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        Config compartment identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationCollections")
    def configuration_collections(self) -> Sequence['outputs.GetConfigurationsConfigurationCollectionResult']:
        """
        The list of configuration_collection.
        """
        return pulumi.get(self, "configuration_collections")

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        """
        Version of the Postgresql DB
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Config display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetConfigurationsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        Compute Shape Name like VM.Standard3.Flex.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the Configuration.
        """
        return pulumi.get(self, "state")


class AwaitableGetConfigurationsResult(GetConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigurationsResult(
            compartment_id=self.compartment_id,
            configuration_collections=self.configuration_collections,
            configuration_id=self.configuration_id,
            db_version=self.db_version,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            shape=self.shape,
            state=self.state)


def get_configurations(compartment_id: Optional[str] = None,
                       configuration_id: Optional[str] = None,
                       db_version: Optional[str] = None,
                       display_name: Optional[str] = None,
                       filters: Optional[Sequence[pulumi.InputType['GetConfigurationsFilterArgs']]] = None,
                       shape: Optional[str] = None,
                       state: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigurationsResult:
    """
    This data source provides the list of Configurations in Oracle Cloud Infrastructure Psql service.

    Returns a list of Configurations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_configurations = oci.Psql.get_configurations(compartment_id=var["compartment_id"],
        configuration_id=oci_psql_configuration["test_configuration"]["id"],
        db_version=var["configuration_db_version"],
        display_name=var["configuration_display_name"],
        shape=var["configuration_shape"],
        state=var["configuration_state"])
    ```


    :param str compartment_id: The ID of the compartment in which to list resources.
    :param str configuration_id: unique Configuration identifier
    :param str db_version: Verison of the Postgresql DB like 14.5
    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str shape: Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
    :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['configurationId'] = configuration_id
    __args__['dbVersion'] = db_version
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['shape'] = shape
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Psql/getConfigurations:getConfigurations', __args__, opts=opts, typ=GetConfigurationsResult).value

    return AwaitableGetConfigurationsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        configuration_collections=pulumi.get(__ret__, 'configuration_collections'),
        configuration_id=pulumi.get(__ret__, 'configuration_id'),
        db_version=pulumi.get(__ret__, 'db_version'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        shape=pulumi.get(__ret__, 'shape'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_configurations)
def get_configurations_output(compartment_id: Optional[pulumi.Input[Optional[str]]] = None,
                              configuration_id: Optional[pulumi.Input[Optional[str]]] = None,
                              db_version: Optional[pulumi.Input[Optional[str]]] = None,
                              display_name: Optional[pulumi.Input[Optional[str]]] = None,
                              filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetConfigurationsFilterArgs']]]]] = None,
                              shape: Optional[pulumi.Input[Optional[str]]] = None,
                              state: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigurationsResult]:
    """
    This data source provides the list of Configurations in Oracle Cloud Infrastructure Psql service.

    Returns a list of Configurations.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_configurations = oci.Psql.get_configurations(compartment_id=var["compartment_id"],
        configuration_id=oci_psql_configuration["test_configuration"]["id"],
        db_version=var["configuration_db_version"],
        display_name=var["configuration_display_name"],
        shape=var["configuration_shape"],
        state=var["configuration_state"])
    ```


    :param str compartment_id: The ID of the compartment in which to list resources.
    :param str configuration_id: unique Configuration identifier
    :param str db_version: Verison of the Postgresql DB like 14.5
    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str shape: Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
    :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
    """
    ...
