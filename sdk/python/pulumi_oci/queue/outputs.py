# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueuesFilterResult',
    'GetQueuesQueueCollectionResult',
    'GetQueuesQueueCollectionItemResult',
]

@pulumi.output_type
class GetQueuesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetQueuesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueuesQueueCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetQueuesQueueCollectionItemResult']):
        GetQueuesQueueCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetQueuesQueueCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetQueuesQueueCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetQueuesQueueCollectionItemResult(dict):
    def __init__(__self__, *,
                 channel_consumption_limit: int,
                 compartment_id: str,
                 custom_encryption_key_id: str,
                 dead_letter_queue_delivery_count: int,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 messages_endpoint: str,
                 purge_queue: bool,
                 purge_type: str,
                 retention_in_seconds: int,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 timeout_in_seconds: int,
                 visibility_in_seconds: int):
        """
        :param int channel_consumption_limit: The percentage of allocated queue resources that can be consumed by a single channel. For example, if a queue has a storage limit of 2Gb, and a single channel consumption limit is 0.1 (10%), that means data size of a single channel  can't exceed 200Mb. Consumption limit of 100% (default) means that a single channel can consume up-to all allocated queue's resources.
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param str custom_encryption_key_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom encryption key to be used to encrypt messages content.
        :param int dead_letter_queue_delivery_count: The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The unique queue identifier.
        :param str lifecycle_details: Any additional details about the current state of the queue.
        :param str messages_endpoint: The endpoint to use to consume or publish messages in the queue.
        :param int retention_in_seconds: The retention period of the messages in the queue, in seconds.
        :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time that the queue was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
        :param str time_updated: The time that the queue was updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
        :param int timeout_in_seconds: The default polling timeout of the messages in the queue, in seconds.
        :param int visibility_in_seconds: The default visibility timeout of the messages consumed from the queue, in seconds.
        """
        GetQueuesQueueCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            channel_consumption_limit=channel_consumption_limit,
            compartment_id=compartment_id,
            custom_encryption_key_id=custom_encryption_key_id,
            dead_letter_queue_delivery_count=dead_letter_queue_delivery_count,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            messages_endpoint=messages_endpoint,
            purge_queue=purge_queue,
            purge_type=purge_type,
            retention_in_seconds=retention_in_seconds,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
            timeout_in_seconds=timeout_in_seconds,
            visibility_in_seconds=visibility_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             channel_consumption_limit: Optional[int] = None,
             compartment_id: Optional[str] = None,
             custom_encryption_key_id: Optional[str] = None,
             dead_letter_queue_delivery_count: Optional[int] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             messages_endpoint: Optional[str] = None,
             purge_queue: Optional[bool] = None,
             purge_type: Optional[str] = None,
             retention_in_seconds: Optional[int] = None,
             state: Optional[str] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             timeout_in_seconds: Optional[int] = None,
             visibility_in_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if channel_consumption_limit is None and 'channelConsumptionLimit' in kwargs:
            channel_consumption_limit = kwargs['channelConsumptionLimit']
        if channel_consumption_limit is None:
            raise TypeError("Missing 'channel_consumption_limit' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if custom_encryption_key_id is None and 'customEncryptionKeyId' in kwargs:
            custom_encryption_key_id = kwargs['customEncryptionKeyId']
        if custom_encryption_key_id is None:
            raise TypeError("Missing 'custom_encryption_key_id' argument")
        if dead_letter_queue_delivery_count is None and 'deadLetterQueueDeliveryCount' in kwargs:
            dead_letter_queue_delivery_count = kwargs['deadLetterQueueDeliveryCount']
        if dead_letter_queue_delivery_count is None:
            raise TypeError("Missing 'dead_letter_queue_delivery_count' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if messages_endpoint is None and 'messagesEndpoint' in kwargs:
            messages_endpoint = kwargs['messagesEndpoint']
        if messages_endpoint is None:
            raise TypeError("Missing 'messages_endpoint' argument")
        if purge_queue is None and 'purgeQueue' in kwargs:
            purge_queue = kwargs['purgeQueue']
        if purge_queue is None:
            raise TypeError("Missing 'purge_queue' argument")
        if purge_type is None and 'purgeType' in kwargs:
            purge_type = kwargs['purgeType']
        if purge_type is None:
            raise TypeError("Missing 'purge_type' argument")
        if retention_in_seconds is None and 'retentionInSeconds' in kwargs:
            retention_in_seconds = kwargs['retentionInSeconds']
        if retention_in_seconds is None:
            raise TypeError("Missing 'retention_in_seconds' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")
        if timeout_in_seconds is None and 'timeoutInSeconds' in kwargs:
            timeout_in_seconds = kwargs['timeoutInSeconds']
        if timeout_in_seconds is None:
            raise TypeError("Missing 'timeout_in_seconds' argument")
        if visibility_in_seconds is None and 'visibilityInSeconds' in kwargs:
            visibility_in_seconds = kwargs['visibilityInSeconds']
        if visibility_in_seconds is None:
            raise TypeError("Missing 'visibility_in_seconds' argument")

        _setter("channel_consumption_limit", channel_consumption_limit)
        _setter("compartment_id", compartment_id)
        _setter("custom_encryption_key_id", custom_encryption_key_id)
        _setter("dead_letter_queue_delivery_count", dead_letter_queue_delivery_count)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("messages_endpoint", messages_endpoint)
        _setter("purge_queue", purge_queue)
        _setter("purge_type", purge_type)
        _setter("retention_in_seconds", retention_in_seconds)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("timeout_in_seconds", timeout_in_seconds)
        _setter("visibility_in_seconds", visibility_in_seconds)

    @property
    @pulumi.getter(name="channelConsumptionLimit")
    def channel_consumption_limit(self) -> int:
        """
        The percentage of allocated queue resources that can be consumed by a single channel. For example, if a queue has a storage limit of 2Gb, and a single channel consumption limit is 0.1 (10%), that means data size of a single channel  can't exceed 200Mb. Consumption limit of 100% (default) means that a single channel can consume up-to all allocated queue's resources.
        """
        return pulumi.get(self, "channel_consumption_limit")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="customEncryptionKeyId")
    def custom_encryption_key_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom encryption key to be used to encrypt messages content.
        """
        return pulumi.get(self, "custom_encryption_key_id")

    @property
    @pulumi.getter(name="deadLetterQueueDeliveryCount")
    def dead_letter_queue_delivery_count(self) -> int:
        """
        The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
        """
        return pulumi.get(self, "dead_letter_queue_delivery_count")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique queue identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Any additional details about the current state of the queue.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="messagesEndpoint")
    def messages_endpoint(self) -> str:
        """
        The endpoint to use to consume or publish messages in the queue.
        """
        return pulumi.get(self, "messages_endpoint")

    @property
    @pulumi.getter(name="purgeQueue")
    def purge_queue(self) -> bool:
        return pulumi.get(self, "purge_queue")

    @property
    @pulumi.getter(name="purgeType")
    def purge_type(self) -> str:
        return pulumi.get(self, "purge_type")

    @property
    @pulumi.getter(name="retentionInSeconds")
    def retention_in_seconds(self) -> int:
        """
        The retention period of the messages in the queue, in seconds.
        """
        return pulumi.get(self, "retention_in_seconds")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time that the queue was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time that the queue was updated, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> int:
        """
        The default polling timeout of the messages in the queue, in seconds.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="visibilityInSeconds")
    def visibility_in_seconds(self) -> int:
        """
        The default visibility timeout of the messages consumed from the queue, in seconds.
        """
        return pulumi.get(self, "visibility_in_seconds")


