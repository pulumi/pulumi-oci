# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueuesFilterResult',
    'GetQueuesQueueCollectionResult',
    'GetQueuesQueueCollectionItemResult',
]

@pulumi.output_type
class GetQueuesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueuesQueueCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetQueuesQueueCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetQueuesQueueCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetQueuesQueueCollectionItemResult(dict):
    def __init__(__self__, *,
                 channel_consumption_limit: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 custom_encryption_key_id: Optional[str] = None,
                 dead_letter_queue_delivery_count: Optional[int] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 messages_endpoint: Optional[str] = None,
                 purge_queue: Optional[bool] = None,
                 purge_type: Optional[str] = None,
                 retention_in_seconds: Optional[int] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 visibility_in_seconds: Optional[int] = None):
        if channel_consumption_limit is not None:
            pulumi.set(__self__, "channel_consumption_limit", channel_consumption_limit)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if custom_encryption_key_id is not None:
            pulumi.set(__self__, "custom_encryption_key_id", custom_encryption_key_id)
        if dead_letter_queue_delivery_count is not None:
            pulumi.set(__self__, "dead_letter_queue_delivery_count", dead_letter_queue_delivery_count)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if messages_endpoint is not None:
            pulumi.set(__self__, "messages_endpoint", messages_endpoint)
        if purge_queue is not None:
            pulumi.set(__self__, "purge_queue", purge_queue)
        if purge_type is not None:
            pulumi.set(__self__, "purge_type", purge_type)
        if retention_in_seconds is not None:
            pulumi.set(__self__, "retention_in_seconds", retention_in_seconds)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if visibility_in_seconds is not None:
            pulumi.set(__self__, "visibility_in_seconds", visibility_in_seconds)

    @property
    @pulumi.getter(name="channelConsumptionLimit")
    def channel_consumption_limit(self) -> Optional[int]:
        return pulumi.get(self, "channel_consumption_limit")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="customEncryptionKeyId")
    def custom_encryption_key_id(self) -> Optional[str]:
        return pulumi.get(self, "custom_encryption_key_id")

    @property
    @pulumi.getter(name="deadLetterQueueDeliveryCount")
    def dead_letter_queue_delivery_count(self) -> Optional[int]:
        return pulumi.get(self, "dead_letter_queue_delivery_count")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="messagesEndpoint")
    def messages_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "messages_endpoint")

    @property
    @pulumi.getter(name="purgeQueue")
    def purge_queue(self) -> Optional[bool]:
        return pulumi.get(self, "purge_queue")

    @property
    @pulumi.getter(name="purgeType")
    def purge_type(self) -> Optional[str]:
        return pulumi.get(self, "purge_type")

    @property
    @pulumi.getter(name="retentionInSeconds")
    def retention_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "retention_in_seconds")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="visibilityInSeconds")
    def visibility_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "visibility_in_seconds")


