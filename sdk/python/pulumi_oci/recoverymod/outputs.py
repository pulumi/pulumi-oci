# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProtectedDatabaseMetric',
    'ProtectedDatabaseRecoveryServiceSubnet',
    'GetProtectedDatabaseMetricResult',
    'GetProtectedDatabaseRecoveryServiceSubnetResult',
    'GetProtectedDatabasesFilterResult',
    'GetProtectedDatabasesProtectedDatabaseCollectionResult',
    'GetProtectedDatabasesProtectedDatabaseCollectionItemResult',
    'GetProtectedDatabasesProtectedDatabaseCollectionItemMetricResult',
    'GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnetResult',
    'GetProtectionPoliciesFilterResult',
    'GetProtectionPoliciesProtectionPolicyCollectionResult',
    'GetProtectionPoliciesProtectionPolicyCollectionItemResult',
    'GetRecoveryServiceSubnetsFilterResult',
    'GetRecoveryServiceSubnetsRecoveryServiceSubnetCollectionResult',
    'GetRecoveryServiceSubnetsRecoveryServiceSubnetCollectionItemResult',
]

@pulumi.output_type
class ProtectedDatabaseMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupSpaceEstimateInGbs":
            suggest = "backup_space_estimate_in_gbs"
        elif key == "backupSpaceUsedInGbs":
            suggest = "backup_space_used_in_gbs"
        elif key == "currentRetentionPeriodInSeconds":
            suggest = "current_retention_period_in_seconds"
        elif key == "dbSizeInGbs":
            suggest = "db_size_in_gbs"
        elif key == "isRedoLogsEnabled":
            suggest = "is_redo_logs_enabled"
        elif key == "retentionPeriodInDays":
            suggest = "retention_period_in_days"
        elif key == "unprotectedWindowInSeconds":
            suggest = "unprotected_window_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedDatabaseMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedDatabaseMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedDatabaseMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_space_estimate_in_gbs: Optional[float] = None,
                 backup_space_used_in_gbs: Optional[float] = None,
                 current_retention_period_in_seconds: Optional[float] = None,
                 db_size_in_gbs: Optional[float] = None,
                 is_redo_logs_enabled: Optional[bool] = None,
                 retention_period_in_days: Optional[float] = None,
                 unprotected_window_in_seconds: Optional[float] = None):
        if backup_space_estimate_in_gbs is not None:
            pulumi.set(__self__, "backup_space_estimate_in_gbs", backup_space_estimate_in_gbs)
        if backup_space_used_in_gbs is not None:
            pulumi.set(__self__, "backup_space_used_in_gbs", backup_space_used_in_gbs)
        if current_retention_period_in_seconds is not None:
            pulumi.set(__self__, "current_retention_period_in_seconds", current_retention_period_in_seconds)
        if db_size_in_gbs is not None:
            pulumi.set(__self__, "db_size_in_gbs", db_size_in_gbs)
        if is_redo_logs_enabled is not None:
            pulumi.set(__self__, "is_redo_logs_enabled", is_redo_logs_enabled)
        if retention_period_in_days is not None:
            pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)
        if unprotected_window_in_seconds is not None:
            pulumi.set(__self__, "unprotected_window_in_seconds", unprotected_window_in_seconds)

    @property
    @pulumi.getter(name="backupSpaceEstimateInGbs")
    def backup_space_estimate_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "backup_space_estimate_in_gbs")

    @property
    @pulumi.getter(name="backupSpaceUsedInGbs")
    def backup_space_used_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "backup_space_used_in_gbs")

    @property
    @pulumi.getter(name="currentRetentionPeriodInSeconds")
    def current_retention_period_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "current_retention_period_in_seconds")

    @property
    @pulumi.getter(name="dbSizeInGbs")
    def db_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "db_size_in_gbs")

    @property
    @pulumi.getter(name="isRedoLogsEnabled")
    def is_redo_logs_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redo_logs_enabled")

    @property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> Optional[float]:
        return pulumi.get(self, "retention_period_in_days")

    @property
    @pulumi.getter(name="unprotectedWindowInSeconds")
    def unprotected_window_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "unprotected_window_in_seconds")


@pulumi.output_type
class ProtectedDatabaseRecoveryServiceSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoveryServiceSubnetId":
            suggest = "recovery_service_subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectedDatabaseRecoveryServiceSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectedDatabaseRecoveryServiceSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectedDatabaseRecoveryServiceSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recovery_service_subnet_id: str,
                 state: Optional[str] = None):
        pulumi.set(__self__, "recovery_service_subnet_id", recovery_service_subnet_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="recoveryServiceSubnetId")
    def recovery_service_subnet_id(self) -> str:
        return pulumi.get(self, "recovery_service_subnet_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProtectedDatabaseMetricResult(dict):
    def __init__(__self__, *,
                 backup_space_estimate_in_gbs: Optional[float] = None,
                 backup_space_used_in_gbs: Optional[float] = None,
                 current_retention_period_in_seconds: Optional[float] = None,
                 db_size_in_gbs: Optional[float] = None,
                 is_redo_logs_enabled: Optional[bool] = None,
                 retention_period_in_days: Optional[float] = None,
                 unprotected_window_in_seconds: Optional[float] = None):
        if backup_space_estimate_in_gbs is not None:
            pulumi.set(__self__, "backup_space_estimate_in_gbs", backup_space_estimate_in_gbs)
        if backup_space_used_in_gbs is not None:
            pulumi.set(__self__, "backup_space_used_in_gbs", backup_space_used_in_gbs)
        if current_retention_period_in_seconds is not None:
            pulumi.set(__self__, "current_retention_period_in_seconds", current_retention_period_in_seconds)
        if db_size_in_gbs is not None:
            pulumi.set(__self__, "db_size_in_gbs", db_size_in_gbs)
        if is_redo_logs_enabled is not None:
            pulumi.set(__self__, "is_redo_logs_enabled", is_redo_logs_enabled)
        if retention_period_in_days is not None:
            pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)
        if unprotected_window_in_seconds is not None:
            pulumi.set(__self__, "unprotected_window_in_seconds", unprotected_window_in_seconds)

    @property
    @pulumi.getter(name="backupSpaceEstimateInGbs")
    def backup_space_estimate_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "backup_space_estimate_in_gbs")

    @property
    @pulumi.getter(name="backupSpaceUsedInGbs")
    def backup_space_used_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "backup_space_used_in_gbs")

    @property
    @pulumi.getter(name="currentRetentionPeriodInSeconds")
    def current_retention_period_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "current_retention_period_in_seconds")

    @property
    @pulumi.getter(name="dbSizeInGbs")
    def db_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "db_size_in_gbs")

    @property
    @pulumi.getter(name="isRedoLogsEnabled")
    def is_redo_logs_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redo_logs_enabled")

    @property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> Optional[float]:
        return pulumi.get(self, "retention_period_in_days")

    @property
    @pulumi.getter(name="unprotectedWindowInSeconds")
    def unprotected_window_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "unprotected_window_in_seconds")


@pulumi.output_type
class GetProtectedDatabaseRecoveryServiceSubnetResult(dict):
    def __init__(__self__, *,
                 recovery_service_subnet_id: Optional[str] = None,
                 state: Optional[str] = None):
        if recovery_service_subnet_id is not None:
            pulumi.set(__self__, "recovery_service_subnet_id", recovery_service_subnet_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="recoveryServiceSubnetId")
    def recovery_service_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "recovery_service_subnet_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProtectedDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProtectedDatabasesProtectedDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProtectedDatabasesProtectedDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_id: Optional[str] = None,
                 database_size: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 health: Optional[str] = None,
                 health_details: Optional[str] = None,
                 id: Optional[str] = None,
                 is_read_only_resource: Optional[bool] = None,
                 is_redo_logs_shipped: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 metrics: Optional[Sequence['outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemMetricResult']] = None,
                 password: Optional[str] = None,
                 protection_policy_id: Optional[str] = None,
                 recovery_service_subnets: Optional[Sequence['outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnetResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vpc_user_name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_size is not None:
            pulumi.set(__self__, "database_size", database_size)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if health_details is not None:
            pulumi.set(__self__, "health_details", health_details)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_read_only_resource is not None:
            pulumi.set(__self__, "is_read_only_resource", is_read_only_resource)
        if is_redo_logs_shipped is not None:
            pulumi.set(__self__, "is_redo_logs_shipped", is_redo_logs_shipped)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if protection_policy_id is not None:
            pulumi.set(__self__, "protection_policy_id", protection_policy_id)
        if recovery_service_subnets is not None:
            pulumi.set(__self__, "recovery_service_subnets", recovery_service_subnets)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vpc_user_name is not None:
            pulumi.set(__self__, "vpc_user_name", vpc_user_name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseSize")
    def database_size(self) -> Optional[str]:
        return pulumi.get(self, "database_size")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="healthDetails")
    def health_details(self) -> Optional[str]:
        return pulumi.get(self, "health_details")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isReadOnlyResource")
    def is_read_only_resource(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only_resource")

    @property
    @pulumi.getter(name="isRedoLogsShipped")
    def is_redo_logs_shipped(self) -> Optional[bool]:
        return pulumi.get(self, "is_redo_logs_shipped")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="protectionPolicyId")
    def protection_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "protection_policy_id")

    @property
    @pulumi.getter(name="recoveryServiceSubnets")
    def recovery_service_subnets(self) -> Optional[Sequence['outputs.GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnetResult']]:
        return pulumi.get(self, "recovery_service_subnets")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vpcUserName")
    def vpc_user_name(self) -> Optional[str]:
        return pulumi.get(self, "vpc_user_name")


@pulumi.output_type
class GetProtectedDatabasesProtectedDatabaseCollectionItemMetricResult(dict):
    def __init__(__self__, *,
                 backup_space_estimate_in_gbs: Optional[float] = None,
                 backup_space_used_in_gbs: Optional[float] = None,
                 current_retention_period_in_seconds: Optional[float] = None,
                 db_size_in_gbs: Optional[float] = None,
                 is_redo_logs_enabled: Optional[bool] = None,
                 retention_period_in_days: Optional[float] = None,
                 unprotected_window_in_seconds: Optional[float] = None):
        if backup_space_estimate_in_gbs is not None:
            pulumi.set(__self__, "backup_space_estimate_in_gbs", backup_space_estimate_in_gbs)
        if backup_space_used_in_gbs is not None:
            pulumi.set(__self__, "backup_space_used_in_gbs", backup_space_used_in_gbs)
        if current_retention_period_in_seconds is not None:
            pulumi.set(__self__, "current_retention_period_in_seconds", current_retention_period_in_seconds)
        if db_size_in_gbs is not None:
            pulumi.set(__self__, "db_size_in_gbs", db_size_in_gbs)
        if is_redo_logs_enabled is not None:
            pulumi.set(__self__, "is_redo_logs_enabled", is_redo_logs_enabled)
        if retention_period_in_days is not None:
            pulumi.set(__self__, "retention_period_in_days", retention_period_in_days)
        if unprotected_window_in_seconds is not None:
            pulumi.set(__self__, "unprotected_window_in_seconds", unprotected_window_in_seconds)

    @property
    @pulumi.getter(name="backupSpaceEstimateInGbs")
    def backup_space_estimate_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "backup_space_estimate_in_gbs")

    @property
    @pulumi.getter(name="backupSpaceUsedInGbs")
    def backup_space_used_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "backup_space_used_in_gbs")

    @property
    @pulumi.getter(name="currentRetentionPeriodInSeconds")
    def current_retention_period_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "current_retention_period_in_seconds")

    @property
    @pulumi.getter(name="dbSizeInGbs")
    def db_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "db_size_in_gbs")

    @property
    @pulumi.getter(name="isRedoLogsEnabled")
    def is_redo_logs_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redo_logs_enabled")

    @property
    @pulumi.getter(name="retentionPeriodInDays")
    def retention_period_in_days(self) -> Optional[float]:
        return pulumi.get(self, "retention_period_in_days")

    @property
    @pulumi.getter(name="unprotectedWindowInSeconds")
    def unprotected_window_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "unprotected_window_in_seconds")


@pulumi.output_type
class GetProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnetResult(dict):
    def __init__(__self__, *,
                 recovery_service_subnet_id: Optional[str] = None,
                 state: Optional[str] = None):
        if recovery_service_subnet_id is not None:
            pulumi.set(__self__, "recovery_service_subnet_id", recovery_service_subnet_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="recoveryServiceSubnetId")
    def recovery_service_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "recovery_service_subnet_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetProtectionPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProtectionPoliciesProtectionPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProtectionPoliciesProtectionPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProtectionPoliciesProtectionPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProtectionPoliciesProtectionPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 backup_retention_period_in_days: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_predefined_policy: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if backup_retention_period_in_days is not None:
            pulumi.set(__self__, "backup_retention_period_in_days", backup_retention_period_in_days)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_predefined_policy is not None:
            pulumi.set(__self__, "is_predefined_policy", is_predefined_policy)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="backupRetentionPeriodInDays")
    def backup_retention_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "backup_retention_period_in_days")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPredefinedPolicy")
    def is_predefined_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_predefined_policy")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRecoveryServiceSubnetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecoveryServiceSubnetsRecoveryServiceSubnetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRecoveryServiceSubnetsRecoveryServiceSubnetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRecoveryServiceSubnetsRecoveryServiceSubnetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecoveryServiceSubnetsRecoveryServiceSubnetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


