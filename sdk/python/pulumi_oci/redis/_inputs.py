# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'OciCacheConfigSetConfigurationDetailsArgs',
    'OciCacheConfigSetConfigurationDetailsArgsDict',
    'OciCacheConfigSetConfigurationDetailsItemArgs',
    'OciCacheConfigSetConfigurationDetailsItemArgsDict',
    'OciCacheConfigSetlistAssociatedOciCacheClusterItemArgs',
    'OciCacheConfigSetlistAssociatedOciCacheClusterItemArgsDict',
    'OciCacheUserAuthenticationModeArgs',
    'OciCacheUserAuthenticationModeArgsDict',
    'OciCacheUserGetRedisClusterOciCacheClusterArgs',
    'OciCacheUserGetRedisClusterOciCacheClusterArgsDict',
    'RedisClusterGetOciCacheUserOciCacheUserArgs',
    'RedisClusterGetOciCacheUserOciCacheUserArgsDict',
    'RedisClusterNodeCollectionArgs',
    'RedisClusterNodeCollectionArgsDict',
    'RedisClusterNodeCollectionItemArgs',
    'RedisClusterNodeCollectionItemArgsDict',
    'GetOciCacheConfigSetsFilterArgs',
    'GetOciCacheConfigSetsFilterArgsDict',
    'GetOciCacheDefaultConfigSetsFilterArgs',
    'GetOciCacheDefaultConfigSetsFilterArgsDict',
    'GetOciCacheUsersFilterArgs',
    'GetOciCacheUsersFilterArgsDict',
    'GetRedisClusterNodesFilterArgs',
    'GetRedisClusterNodesFilterArgsDict',
    'GetRedisClustersFilterArgs',
    'GetRedisClustersFilterArgsDict',
]

MYPY = False

if not MYPY:
    class OciCacheConfigSetConfigurationDetailsArgsDict(TypedDict):
        items: pulumi.Input[Sequence[pulumi.Input['OciCacheConfigSetConfigurationDetailsItemArgsDict']]]
        """
        List of ConfigurationInfo objects.
        """
elif False:
    OciCacheConfigSetConfigurationDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciCacheConfigSetConfigurationDetailsArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['OciCacheConfigSetConfigurationDetailsItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OciCacheConfigSetConfigurationDetailsItemArgs']]] items: List of ConfigurationInfo objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['OciCacheConfigSetConfigurationDetailsItemArgs']]]:
        """
        List of ConfigurationInfo objects.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['OciCacheConfigSetConfigurationDetailsItemArgs']]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class OciCacheConfigSetConfigurationDetailsItemArgsDict(TypedDict):
        config_key: pulumi.Input[_builtins.str]
        """
        Key is the configuration key.
        """
        config_value: pulumi.Input[_builtins.str]
        """
        Value of the configuration as a string. Can represent a string, boolean, or number. Example: "true", "42", or "someString".
        """
elif False:
    OciCacheConfigSetConfigurationDetailsItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciCacheConfigSetConfigurationDetailsItemArgs:
    def __init__(__self__, *,
                 config_key: pulumi.Input[_builtins.str],
                 config_value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] config_key: Key is the configuration key.
        :param pulumi.Input[_builtins.str] config_value: Value of the configuration as a string. Can represent a string, boolean, or number. Example: "true", "42", or "someString".
        """
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "config_value", config_value)

    @_builtins.property
    @pulumi.getter(name="configKey")
    def config_key(self) -> pulumi.Input[_builtins.str]:
        """
        Key is the configuration key.
        """
        return pulumi.get(self, "config_key")

    @config_key.setter
    def config_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config_key", value)

    @_builtins.property
    @pulumi.getter(name="configValue")
    def config_value(self) -> pulumi.Input[_builtins.str]:
        """
        Value of the configuration as a string. Can represent a string, boolean, or number. Example: "true", "42", or "someString".
        """
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config_value", value)


if not MYPY:
    class OciCacheConfigSetlistAssociatedOciCacheClusterItemArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
        """
elif False:
    OciCacheConfigSetlistAssociatedOciCacheClusterItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciCacheConfigSetlistAssociatedOciCacheClusterItemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the cluster.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class OciCacheUserAuthenticationModeArgsDict(TypedDict):
        authentication_type: pulumi.Input[_builtins.str]
        """
        (Updatable) This is Authentication Type of Oracle Cloud Infrastructure cache user
        """
        hashed_passwords: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        (Updatable) SHA-256 hashed passwords for Oracle Cloud Infrastructure Cache user,required if authenticationType is set to PASSWORD.
        """
elif False:
    OciCacheUserAuthenticationModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciCacheUserAuthenticationModeArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input[_builtins.str],
                 hashed_passwords: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_type: (Updatable) This is Authentication Type of Oracle Cloud Infrastructure cache user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hashed_passwords: (Updatable) SHA-256 hashed passwords for Oracle Cloud Infrastructure Cache user,required if authenticationType is set to PASSWORD.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        if hashed_passwords is not None:
            pulumi.set(__self__, "hashed_passwords", hashed_passwords)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input[_builtins.str]:
        """
        (Updatable) This is Authentication Type of Oracle Cloud Infrastructure cache user
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="hashedPasswords")
    def hashed_passwords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        (Updatable) SHA-256 hashed passwords for Oracle Cloud Infrastructure Cache user,required if authenticationType is set to PASSWORD.
        """
        return pulumi.get(self, "hashed_passwords")

    @hashed_passwords.setter
    def hashed_passwords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "hashed_passwords", value)


if not MYPY:
    class OciCacheUserGetRedisClusterOciCacheClusterArgsDict(TypedDict):
        oci_cache_cluster_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        OCID of the OciCacheCluster
        """
elif False:
    OciCacheUserGetRedisClusterOciCacheClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OciCacheUserGetRedisClusterOciCacheClusterArgs:
    def __init__(__self__, *,
                 oci_cache_cluster_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] oci_cache_cluster_id: OCID of the OciCacheCluster
        """
        if oci_cache_cluster_id is not None:
            pulumi.set(__self__, "oci_cache_cluster_id", oci_cache_cluster_id)

    @_builtins.property
    @pulumi.getter(name="ociCacheClusterId")
    def oci_cache_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OCID of the OciCacheCluster
        """
        return pulumi.get(self, "oci_cache_cluster_id")

    @oci_cache_cluster_id.setter
    def oci_cache_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oci_cache_cluster_id", value)


if not MYPY:
    class RedisClusterGetOciCacheUserOciCacheUserArgsDict(TypedDict):
        oci_cache_user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        OCID of the OciCacheUser
        """
elif False:
    RedisClusterGetOciCacheUserOciCacheUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RedisClusterGetOciCacheUserOciCacheUserArgs:
    def __init__(__self__, *,
                 oci_cache_user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] oci_cache_user_id: OCID of the OciCacheUser
        """
        if oci_cache_user_id is not None:
            pulumi.set(__self__, "oci_cache_user_id", oci_cache_user_id)

    @_builtins.property
    @pulumi.getter(name="ociCacheUserId")
    def oci_cache_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OCID of the OciCacheUser
        """
        return pulumi.get(self, "oci_cache_user_id")

    @oci_cache_user_id.setter
    def oci_cache_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oci_cache_user_id", value)


if not MYPY:
    class RedisClusterNodeCollectionArgsDict(TypedDict):
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgsDict']]]]
        """
        Collection of node objects.
        """
elif False:
    RedisClusterNodeCollectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RedisClusterNodeCollectionArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]] items: Collection of node objects.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]]]:
        """
        Collection of node objects.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class RedisClusterNodeCollectionItemArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        private_endpoint_fqdn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The fully qualified domain name (FQDN) of the API endpoint to access a specific node.
        """
        private_endpoint_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The private IP address of the API endpoint to access a specific node.
        """
elif False:
    RedisClusterNodeCollectionItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RedisClusterNodeCollectionItemArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_endpoint_fqdn: Optional[pulumi.Input[_builtins.str]] = None,
                 private_endpoint_ip_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param pulumi.Input[_builtins.str] private_endpoint_fqdn: The fully qualified domain name (FQDN) of the API endpoint to access a specific node.
        :param pulumi.Input[_builtins.str] private_endpoint_ip_address: The private IP address of the API endpoint to access a specific node.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if private_endpoint_fqdn is not None:
            pulumi.set(__self__, "private_endpoint_fqdn", private_endpoint_fqdn)
        if private_endpoint_ip_address is not None:
            pulumi.set(__self__, "private_endpoint_ip_address", private_endpoint_ip_address)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="privateEndpointFqdn")
    def private_endpoint_fqdn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The fully qualified domain name (FQDN) of the API endpoint to access a specific node.
        """
        return pulumi.get(self, "private_endpoint_fqdn")

    @private_endpoint_fqdn.setter
    def private_endpoint_fqdn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_endpoint_fqdn", value)

    @_builtins.property
    @pulumi.getter(name="privateEndpointIpAddress")
    def private_endpoint_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private IP address of the API endpoint to access a specific node.
        """
        return pulumi.get(self, "private_endpoint_ip_address")

    @private_endpoint_ip_address.setter
    def private_endpoint_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_endpoint_ip_address", value)


if not MYPY:
    class GetOciCacheConfigSetsFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetOciCacheConfigSetsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOciCacheConfigSetsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOciCacheDefaultConfigSetsFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetOciCacheDefaultConfigSetsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOciCacheDefaultConfigSetsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOciCacheUsersFilterArgsDict(TypedDict):
        name: _builtins.str
        """
        A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
        """
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetOciCacheUsersFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOciCacheUsersFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetRedisClusterNodesFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetRedisClusterNodesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRedisClusterNodesFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetRedisClustersFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetRedisClustersFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRedisClustersFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


