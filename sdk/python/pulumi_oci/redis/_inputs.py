# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RedisClusterNodeCollectionArgs',
    'RedisClusterNodeCollectionItemArgs',
    'GetRedisClustersFilterArgs',
]

@pulumi.input_type
class RedisClusterNodeCollectionArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]] items: Collection of node objects.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]]]:
        """
        Collection of node objects.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RedisClusterNodeCollectionItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class RedisClusterNodeCollectionItemArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 private_endpoint_fqdn: Optional[pulumi.Input[str]] = None,
                 private_endpoint_ip_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param pulumi.Input[str] private_endpoint_fqdn: The fully qualified domain name (FQDN) of the API endpoint to access a specific node.
        :param pulumi.Input[str] private_endpoint_ip_address: The private IP address of the API endpoint to access a specific node.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if private_endpoint_fqdn is not None:
            pulumi.set(__self__, "private_endpoint_fqdn", private_endpoint_fqdn)
        if private_endpoint_ip_address is not None:
            pulumi.set(__self__, "private_endpoint_ip_address", private_endpoint_ip_address)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="privateEndpointFqdn")
    def private_endpoint_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified domain name (FQDN) of the API endpoint to access a specific node.
        """
        return pulumi.get(self, "private_endpoint_fqdn")

    @private_endpoint_fqdn.setter
    def private_endpoint_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint_fqdn", value)

    @property
    @pulumi.getter(name="privateEndpointIpAddress")
    def private_endpoint_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP address of the API endpoint to access a specific node.
        """
        return pulumi.get(self, "private_endpoint_ip_address")

    @private_endpoint_ip_address.setter
    def private_endpoint_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint_ip_address", value)


@pulumi.input_type
class GetRedisClustersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


