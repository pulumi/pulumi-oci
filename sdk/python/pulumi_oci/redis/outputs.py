# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RedisClusterNodeCollection',
    'RedisClusterNodeCollectionItem',
    'GetRedisClusterNodeCollectionResult',
    'GetRedisClusterNodeCollectionItemResult',
    'GetRedisClustersFilterResult',
    'GetRedisClustersRedisClusterCollectionResult',
    'GetRedisClustersRedisClusterCollectionItemResult',
    'GetRedisClustersRedisClusterCollectionItemNodeCollectionResult',
    'GetRedisClustersRedisClusterCollectionItemNodeCollectionItemResult',
]

@pulumi.output_type
class RedisClusterNodeCollection(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.RedisClusterNodeCollectionItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.RedisClusterNodeCollectionItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class RedisClusterNodeCollectionItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "privateEndpointFqdn":
            suggest = "private_endpoint_fqdn"
        elif key == "privateEndpointIpAddress":
            suggest = "private_endpoint_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RedisClusterNodeCollectionItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RedisClusterNodeCollectionItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RedisClusterNodeCollectionItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 private_endpoint_fqdn: Optional[str] = None,
                 private_endpoint_ip_address: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if private_endpoint_fqdn is not None:
            pulumi.set(__self__, "private_endpoint_fqdn", private_endpoint_fqdn)
        if private_endpoint_ip_address is not None:
            pulumi.set(__self__, "private_endpoint_ip_address", private_endpoint_ip_address)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="privateEndpointFqdn")
    def private_endpoint_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_fqdn")

    @property
    @pulumi.getter(name="privateEndpointIpAddress")
    def private_endpoint_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip_address")


@pulumi.output_type
class GetRedisClusterNodeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRedisClusterNodeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRedisClusterNodeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRedisClusterNodeCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 private_endpoint_fqdn: Optional[str] = None,
                 private_endpoint_ip_address: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if private_endpoint_fqdn is not None:
            pulumi.set(__self__, "private_endpoint_fqdn", private_endpoint_fqdn)
        if private_endpoint_ip_address is not None:
            pulumi.set(__self__, "private_endpoint_ip_address", private_endpoint_ip_address)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="privateEndpointFqdn")
    def private_endpoint_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_fqdn")

    @property
    @pulumi.getter(name="privateEndpointIpAddress")
    def private_endpoint_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip_address")


@pulumi.output_type
class GetRedisClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRedisClustersRedisClusterCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRedisClustersRedisClusterCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRedisClustersRedisClusterCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRedisClustersRedisClusterCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 node_collections: Optional[Sequence['outputs.GetRedisClustersRedisClusterCollectionItemNodeCollectionResult']] = None,
                 node_count: Optional[int] = None,
                 node_memory_in_gbs: Optional[float] = None,
                 primary_endpoint_ip_address: Optional[str] = None,
                 primary_fqdn: Optional[str] = None,
                 replicas_endpoint_ip_address: Optional[str] = None,
                 replicas_fqdn: Optional[str] = None,
                 software_version: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if node_collections is not None:
            pulumi.set(__self__, "node_collections", node_collections)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if node_memory_in_gbs is not None:
            pulumi.set(__self__, "node_memory_in_gbs", node_memory_in_gbs)
        if primary_endpoint_ip_address is not None:
            pulumi.set(__self__, "primary_endpoint_ip_address", primary_endpoint_ip_address)
        if primary_fqdn is not None:
            pulumi.set(__self__, "primary_fqdn", primary_fqdn)
        if replicas_endpoint_ip_address is not None:
            pulumi.set(__self__, "replicas_endpoint_ip_address", replicas_endpoint_ip_address)
        if replicas_fqdn is not None:
            pulumi.set(__self__, "replicas_fqdn", replicas_fqdn)
        if software_version is not None:
            pulumi.set(__self__, "software_version", software_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nodeCollections")
    def node_collections(self) -> Optional[Sequence['outputs.GetRedisClustersRedisClusterCollectionItemNodeCollectionResult']]:
        return pulumi.get(self, "node_collections")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nodeMemoryInGbs")
    def node_memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "node_memory_in_gbs")

    @property
    @pulumi.getter(name="primaryEndpointIpAddress")
    def primary_endpoint_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "primary_endpoint_ip_address")

    @property
    @pulumi.getter(name="primaryFqdn")
    def primary_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "primary_fqdn")

    @property
    @pulumi.getter(name="replicasEndpointIpAddress")
    def replicas_endpoint_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "replicas_endpoint_ip_address")

    @property
    @pulumi.getter(name="replicasFqdn")
    def replicas_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "replicas_fqdn")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> Optional[str]:
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRedisClustersRedisClusterCollectionItemNodeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRedisClustersRedisClusterCollectionItemNodeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRedisClustersRedisClusterCollectionItemNodeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRedisClustersRedisClusterCollectionItemNodeCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 private_endpoint_fqdn: Optional[str] = None,
                 private_endpoint_ip_address: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if private_endpoint_fqdn is not None:
            pulumi.set(__self__, "private_endpoint_fqdn", private_endpoint_fqdn)
        if private_endpoint_ip_address is not None:
            pulumi.set(__self__, "private_endpoint_ip_address", private_endpoint_ip_address)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="privateEndpointFqdn")
    def private_endpoint_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_fqdn")

    @property
    @pulumi.getter(name="privateEndpointIpAddress")
    def private_endpoint_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip_address")


