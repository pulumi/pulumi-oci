# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrivateEndpointsFilterResult',
    'GetPrivateEndpointsPrivateEndpointCollectionResult',
    'GetPrivateEndpointsPrivateEndpointCollectionItemResult',
    'GetStackConfigSourceResult',
    'GetStacksFilterResult',
    'GetStacksStackResult',
    'GetStacksStackConfigSourceResult',
]

@pulumi.output_type
class GetPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetPrivateEndpointsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPrivateEndpointsPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPrivateEndpointsPrivateEndpointCollectionItemResult']):
        GetPrivateEndpointsPrivateEndpointCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetPrivateEndpointsPrivateEndpointCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPrivateEndpointsPrivateEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPrivateEndpointsPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 dns_zones: Sequence[str],
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_used_with_configuration_source_provider: bool,
                 nsg_id_lists: Sequence[str],
                 source_ips: Sequence[str],
                 state: str,
                 subnet_id: str,
                 time_created: str,
                 vcn_id: str):
        """
        :param str compartment_id: A filter to return only resources that exist in the compartment, identified by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: Description of the private endpoint. Avoid entering confidential information.
        :param str display_name: A filter to return only resources that match the given display name exactly. Use this filter to list a resource by name. Requires `sortBy` set to `DISPLAYNAME`. Alternatively, when you know the resource OCID, use the related Get operation.
        :param Sequence[str] dns_zones: DNS Proxy forwards any DNS FQDN queries over into the consumer DNS resolver if the DNS FQDN is included in the dns zones list otherwise it goes to service provider VCN resolver.
        :param Mapping[str, Any] freeform_tags: Free-form tags associated with the resource. Each tag is a key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: Unique identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the private endpoint details.
        :param bool is_used_with_configuration_source_provider: When `true`, allows the private endpoint to be used with a configuration source provider.
        :param Sequence[str] nsg_id_lists: An array of network security groups (NSG) that the customer can optionally provide.
        :param Sequence[str] source_ips: The source IPs which resource manager service will use to connect to customer's network. Automatically assigned by Resource Manager Service.
        :param str state: The current lifecycle state of the private endpoint.
        :param str subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet within the VCN for the private endpoint.
        :param str time_created: The date and time at which the private endpoint was created. Format is defined by RFC3339. Example: `2020-11-25T21:10:29.600Z`
        :param str vcn_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        GetPrivateEndpointsPrivateEndpointCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            dns_zones=dns_zones,
            freeform_tags=freeform_tags,
            id=id,
            is_used_with_configuration_source_provider=is_used_with_configuration_source_provider,
            nsg_id_lists=nsg_id_lists,
            source_ips=source_ips,
            state=state,
            subnet_id=subnet_id,
            time_created=time_created,
            vcn_id=vcn_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             dns_zones: Sequence[str],
             freeform_tags: Mapping[str, Any],
             id: str,
             is_used_with_configuration_source_provider: bool,
             nsg_id_lists: Sequence[str],
             source_ips: Sequence[str],
             state: str,
             subnet_id: str,
             time_created: str,
             vcn_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'dnsZones' in kwargs:
            dns_zones = kwargs['dnsZones']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isUsedWithConfigurationSourceProvider' in kwargs:
            is_used_with_configuration_source_provider = kwargs['isUsedWithConfigurationSourceProvider']
        if 'nsgIdLists' in kwargs:
            nsg_id_lists = kwargs['nsgIdLists']
        if 'sourceIps' in kwargs:
            source_ips = kwargs['sourceIps']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'vcnId' in kwargs:
            vcn_id = kwargs['vcnId']

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("dns_zones", dns_zones)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_used_with_configuration_source_provider", is_used_with_configuration_source_provider)
        _setter("nsg_id_lists", nsg_id_lists)
        _setter("source_ips", source_ips)
        _setter("state", state)
        _setter("subnet_id", subnet_id)
        _setter("time_created", time_created)
        _setter("vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        A filter to return only resources that exist in the compartment, identified by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the private endpoint. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly. Use this filter to list a resource by name. Requires `sortBy` set to `DISPLAYNAME`. Alternatively, when you know the resource OCID, use the related Get operation.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Sequence[str]:
        """
        DNS Proxy forwards any DNS FQDN queries over into the consumer DNS resolver if the DNS FQDN is included in the dns zones list otherwise it goes to service provider VCN resolver.
        """
        return pulumi.get(self, "dns_zones")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags associated with the resource. Each tag is a key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the private endpoint details.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUsedWithConfigurationSourceProvider")
    def is_used_with_configuration_source_provider(self) -> bool:
        """
        When `true`, allows the private endpoint to be used with a configuration source provider.
        """
        return pulumi.get(self, "is_used_with_configuration_source_provider")

    @property
    @pulumi.getter(name="nsgIdLists")
    def nsg_id_lists(self) -> Sequence[str]:
        """
        An array of network security groups (NSG) that the customer can optionally provide.
        """
        return pulumi.get(self, "nsg_id_lists")

    @property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> Sequence[str]:
        """
        The source IPs which resource manager service will use to connect to customer's network. Automatically assigned by Resource Manager Service.
        """
        return pulumi.get(self, "source_ips")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current lifecycle state of the private endpoint.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet within the VCN for the private endpoint.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time at which the private endpoint was created. Format is defined by RFC3339. Example: `2020-11-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetStackConfigSourceResult(dict):
    def __init__(__self__, *,
                 config_source_type: str,
                 working_directory: str,
                 zip_file_base64encoded: str):
        GetStackConfigSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_source_type=config_source_type,
            working_directory=working_directory,
            zip_file_base64encoded=zip_file_base64encoded,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_source_type: str,
             working_directory: str,
             zip_file_base64encoded: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configSourceType' in kwargs:
            config_source_type = kwargs['configSourceType']
        if 'workingDirectory' in kwargs:
            working_directory = kwargs['workingDirectory']
        if 'zipFileBase64encoded' in kwargs:
            zip_file_base64encoded = kwargs['zipFileBase64encoded']

        _setter("config_source_type", config_source_type)
        _setter("working_directory", working_directory)
        _setter("zip_file_base64encoded", zip_file_base64encoded)

    @property
    @pulumi.getter(name="configSourceType")
    def config_source_type(self) -> str:
        return pulumi.get(self, "config_source_type")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")

    @property
    @pulumi.getter(name="zipFileBase64encoded")
    def zip_file_base64encoded(self) -> str:
        return pulumi.get(self, "zip_file_base64encoded")


@pulumi.output_type
class GetStacksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetStacksFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetStacksStackResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 config_source: 'outputs.GetStacksStackConfigSourceResult',
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 state: str,
                 time_created: str,
                 variables: Mapping[str, Any]):
        """
        :param str compartment_id: The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) on which to filter.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: General description of the stack.
        :param str display_name: Display name on which to query.
        :param Mapping[str, Any] freeform_tags: Free-form tags associated with this resource. Each tag is a key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) on which to query for a stack.
        :param str state: A filter that returns only those resources that match the specified lifecycle state. The state value is case-insensitive.
               
               Allowable values:
               * CREATING
               * ACTIVE
               * DELETING
               * DELETED
        :param str time_created: The date and time at which the stack was created.
        """
        GetStacksStackResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            config_source=config_source,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            state=state,
            time_created=time_created,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             config_source: 'outputs.GetStacksStackConfigSourceResult',
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             state: str,
             time_created: str,
             variables: Mapping[str, Any],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'configSource' in kwargs:
            config_source = kwargs['configSource']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']

        _setter("compartment_id", compartment_id)
        _setter("config_source", config_source)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("state", state)
        _setter("time_created", time_created)
        _setter("variables", variables)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) on which to filter.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configSource")
    def config_source(self) -> 'outputs.GetStacksStackConfigSourceResult':
        return pulumi.get(self, "config_source")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        General description of the stack.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name on which to query.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags associated with this resource. Each tag is a key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) on which to query for a stack.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter that returns only those resources that match the specified lifecycle state. The state value is case-insensitive.

        Allowable values:
        * CREATING
        * ACTIVE
        * DELETING
        * DELETED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time at which the stack was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def variables(self) -> Mapping[str, Any]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetStacksStackConfigSourceResult(dict):
    def __init__(__self__, *,
                 config_source_type: str,
                 working_directory: str,
                 zip_file_base64encoded: str):
        GetStacksStackConfigSourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_source_type=config_source_type,
            working_directory=working_directory,
            zip_file_base64encoded=zip_file_base64encoded,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_source_type: str,
             working_directory: str,
             zip_file_base64encoded: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configSourceType' in kwargs:
            config_source_type = kwargs['configSourceType']
        if 'workingDirectory' in kwargs:
            working_directory = kwargs['workingDirectory']
        if 'zipFileBase64encoded' in kwargs:
            zip_file_base64encoded = kwargs['zipFileBase64encoded']

        _setter("config_source_type", config_source_type)
        _setter("working_directory", working_directory)
        _setter("zip_file_base64encoded", zip_file_base64encoded)

    @property
    @pulumi.getter(name="configSourceType")
    def config_source_type(self) -> str:
        return pulumi.get(self, "config_source_type")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")

    @property
    @pulumi.getter(name="zipFileBase64encoded")
    def zip_file_base64encoded(self) -> str:
        return pulumi.get(self, "zip_file_base64encoded")


