# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ScheduleResourceArgs',
    'ScheduleResourceArgsDict',
    'ScheduleResourceFilterArgs',
    'ScheduleResourceFilterArgsDict',
    'ScheduleResourceFilterValueArgs',
    'ScheduleResourceFilterValueArgsDict',
    'ScheduleResourceParameterArgs',
    'ScheduleResourceParameterArgsDict',
    'GetSchedulesFilterArgs',
    'GetSchedulesFilterArgsDict',
]

MYPY = False

if not MYPY:
    class ScheduleResourceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        (Updatable) This is the resource OCID.
        """
        metadata: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        (Updatable) This is additional information that helps to identity the resource for the schedule.

        <<<<<<< ours
        { "id": "<OCID_of_bucket>" "metadata": { "namespaceName": "sampleNamespace", "bucketName": "sampleBucket" } }
        """
        parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceParameterArgsDict']]]]
        """
        (Updatable) This is the user input parameters to use when acting on the resource.

        { "parameters": [ { "parameterType": "BODY", "value": { "ip": "192.168.44.44", "memory": "1024", "synced_folders": [ { "host_path": "data/", "guest_path": "/var/www", "type": "default" } ], "forwarded_ports": [] } }, { "parameterType": "PATH", "value": { "compartmentId": "ocid1.compartment.oc1..xxxxx", "instanceId": "ocid1.vcn.oc1..yyyy" } }, { "parameterType": "QUERY", "value": { "limit": "10", "tenantId": "ocid1.tenant.oc1..zzzz" } }, { "parameterType": "HEADER", "value": { "token": "xxxx" } } ] }
        """
elif False:
    ScheduleResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceParameterArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] id: (Updatable) This is the resource OCID.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: (Updatable) This is additional information that helps to identity the resource for the schedule.
               
               <<<<<<< ours
               { "id": "<OCID_of_bucket>" "metadata": { "namespaceName": "sampleNamespace", "bucketName": "sampleBucket" } }
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleResourceParameterArgs']]] parameters: (Updatable) This is the user input parameters to use when acting on the resource.
               
               { "parameters": [ { "parameterType": "BODY", "value": { "ip": "192.168.44.44", "memory": "1024", "synced_folders": [ { "host_path": "data/", "guest_path": "/var/www", "type": "default" } ], "forwarded_ports": [] } }, { "parameterType": "PATH", "value": { "compartmentId": "ocid1.compartment.oc1..xxxxx", "instanceId": "ocid1.vcn.oc1..yyyy" } }, { "parameterType": "QUERY", "value": { "limit": "10", "tenantId": "ocid1.tenant.oc1..zzzz" } }, { "parameterType": "HEADER", "value": { "token": "xxxx" } } ] }
        """
        pulumi.set(__self__, "id", id)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        (Updatable) This is the resource OCID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        (Updatable) This is additional information that helps to identity the resource for the schedule.

        <<<<<<< ours
        { "id": "<OCID_of_bucket>" "metadata": { "namespaceName": "sampleNamespace", "bucketName": "sampleBucket" } }
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceParameterArgs']]]]:
        """
        (Updatable) This is the user input parameters to use when acting on the resource.

        { "parameters": [ { "parameterType": "BODY", "value": { "ip": "192.168.44.44", "memory": "1024", "synced_folders": [ { "host_path": "data/", "guest_path": "/var/www", "type": "default" } ], "forwarded_ports": [] } }, { "parameterType": "PATH", "value": { "compartmentId": "ocid1.compartment.oc1..xxxxx", "instanceId": "ocid1.vcn.oc1..yyyy" } }, { "parameterType": "QUERY", "value": { "limit": "10", "tenantId": "ocid1.tenant.oc1..zzzz" } }, { "parameterType": "HEADER", "value": { "token": "xxxx" } } ] }
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


if not MYPY:
    class ScheduleResourceFilterArgsDict(TypedDict):
        attribute: pulumi.Input[_builtins.str]
        """
        (Updatable) This is the resource attribute on which the threshold is defined. We support 5 different types of attributes: `DEFINED_TAGS`, `COMPARTMENT_ID`, `TIME_CREATED`, `LIFECYCLE_STATE` and `RESOURCE_TYPE`.
        """
        condition: NotRequired[pulumi.Input[_builtins.str]]
        """
        This is the condition for the filter in comparison to its creation time.
        """
        should_include_child_compartments: NotRequired[pulumi.Input[_builtins.bool]]
        """
        This sets whether to include child compartments.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceFilterValueArgsDict']]]]
        """
        (Updatable) This is a collection of resource filter values, different types of filter has different value format, see below:
        * When `attribute="DEFINED_TAGS"`:
        """
elif False:
    ScheduleResourceFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleResourceFilterArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[_builtins.str],
                 condition: Optional[pulumi.Input[_builtins.str]] = None,
                 should_include_child_compartments: Optional[pulumi.Input[_builtins.bool]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceFilterValueArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] attribute: (Updatable) This is the resource attribute on which the threshold is defined. We support 5 different types of attributes: `DEFINED_TAGS`, `COMPARTMENT_ID`, `TIME_CREATED`, `LIFECYCLE_STATE` and `RESOURCE_TYPE`.
        :param pulumi.Input[_builtins.str] condition: This is the condition for the filter in comparison to its creation time.
        :param pulumi.Input[_builtins.bool] should_include_child_compartments: This sets whether to include child compartments.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleResourceFilterValueArgs']]] values: (Updatable) This is a collection of resource filter values, different types of filter has different value format, see below:
               * When `attribute="DEFINED_TAGS"`:
        """
        pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if should_include_child_compartments is not None:
            pulumi.set(__self__, "should_include_child_compartments", should_include_child_compartments)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[_builtins.str]:
        """
        (Updatable) This is the resource attribute on which the threshold is defined. We support 5 different types of attributes: `DEFINED_TAGS`, `COMPARTMENT_ID`, `TIME_CREATED`, `LIFECYCLE_STATE` and `RESOURCE_TYPE`.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "attribute", value)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the condition for the filter in comparison to its creation time.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter(name="shouldIncludeChildCompartments")
    def should_include_child_compartments(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This sets whether to include child compartments.
        """
        return pulumi.get(self, "should_include_child_compartments")

    @should_include_child_compartments.setter
    def should_include_child_compartments(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "should_include_child_compartments", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceFilterValueArgs']]]]:
        """
        (Updatable) This is a collection of resource filter values, different types of filter has different value format, see below:
        * When `attribute="DEFINED_TAGS"`:
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleResourceFilterValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ScheduleResourceFilterValueArgsDict(TypedDict):
        namespace: NotRequired[pulumi.Input[_builtins.str]]
        """
        This is the namespace of the defined tag.
        """
        tag_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        This is the key of the defined tag.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        This is the lifecycle state value used for filtering.
        """
elif False:
    ScheduleResourceFilterValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleResourceFilterValueArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_key: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] namespace: This is the namespace of the defined tag.
        :param pulumi.Input[_builtins.str] tag_key: This is the key of the defined tag.
        :param pulumi.Input[_builtins.str] value: This is the lifecycle state value used for filtering.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the namespace of the defined tag.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the key of the defined tag.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the lifecycle state value used for filtering.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ScheduleResourceParameterArgsDict(TypedDict):
        parameter_type: pulumi.Input[_builtins.str]
        """
        (Updatable) This is the parameter type on which the input parameter is defined
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Updatable) This is the HTTP request header value.
        =======
        { "id": "<OCID_of_bucket>" "metadata": { "namespaceName": "sampleNamespace", "bucketName": "sampleBucket" } }
        """
elif False:
    ScheduleResourceParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleResourceParameterArgs:
    def __init__(__self__, *,
                 parameter_type: pulumi.Input[_builtins.str],
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] parameter_type: (Updatable) This is the parameter type on which the input parameter is defined
        :param pulumi.Input[_builtins.str] value: (Updatable) This is the HTTP request header value.
               =======
               { "id": "<OCID_of_bucket>" "metadata": { "namespaceName": "sampleNamespace", "bucketName": "sampleBucket" } }
        """
        pulumi.set(__self__, "parameter_type", parameter_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="parameterType")
    def parameter_type(self) -> pulumi.Input[_builtins.str]:
        """
        (Updatable) This is the parameter type on which the input parameter is defined
        """
        return pulumi.get(self, "parameter_type")

    @parameter_type.setter
    def parameter_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "parameter_type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Updatable) This is the HTTP request header value.
        =======
        { "id": "<OCID_of_bucket>" "metadata": { "namespaceName": "sampleNamespace", "bucketName": "sampleBucket" } }
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetSchedulesFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetSchedulesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSchedulesFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


