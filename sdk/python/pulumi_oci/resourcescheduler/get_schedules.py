# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSchedulesResult',
    'AwaitableGetSchedulesResult',
    'get_schedules',
    'get_schedules_output',
]

@pulumi.output_type
class GetSchedulesResult:
    """
    A collection of values returned by getSchedules.
    """
    def __init__(__self__, compartment_id=None, display_name=None, filters=None, id=None, schedule_collections=None, schedule_id=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schedule_collections and not isinstance(schedule_collections, list):
            raise TypeError("Expected argument 'schedule_collections' to be a list")
        pulumi.set(__self__, "schedule_collections", schedule_collections)
        if schedule_id and not isinstance(schedule_id, str):
            raise TypeError("Expected argument 'schedule_id' to be a str")
        pulumi.set(__self__, "schedule_id", schedule_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the schedule is created
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        This is a user-friendly name for the schedule. It does not have to be unique, and it's changeable.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSchedulesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="scheduleCollections")
    def schedule_collections(self) -> Sequence['outputs.GetSchedulesScheduleCollectionResult']:
        """
        The list of schedule_collection.
        """
        return pulumi.get(self, "schedule_collections")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        This is the current state of a schedule.
        """
        return pulumi.get(self, "state")


class AwaitableGetSchedulesResult(GetSchedulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchedulesResult(
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            schedule_collections=self.schedule_collections,
            schedule_id=self.schedule_id,
            state=self.state)


def get_schedules(compartment_id: Optional[str] = None,
                  display_name: Optional[str] = None,
                  filters: Optional[Sequence[Union['GetSchedulesFilterArgs', 'GetSchedulesFilterArgsDict']]] = None,
                  schedule_id: Optional[str] = None,
                  state: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchedulesResult:
    """
    This data source provides the list of Schedules in Oracle Cloud Infrastructure Resource Scheduler service.

    This API gets a list of schedules

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_schedules = oci.ResourceScheduler.get_schedules(compartment_id=compartment_id,
        display_name=schedule_display_name,
        schedule_id=test_schedule["id"],
        state=schedule_state)
    ```


    :param str compartment_id: This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    :param str display_name: This is a filter to return only resources that match the given display name exactly.
    :param str schedule_id: This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
    :param str state: This is a filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['scheduleId'] = schedule_id
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:ResourceScheduler/getSchedules:getSchedules', __args__, opts=opts, typ=GetSchedulesResult).value

    return AwaitableGetSchedulesResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        schedule_collections=pulumi.get(__ret__, 'schedule_collections'),
        schedule_id=pulumi.get(__ret__, 'schedule_id'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_schedules)
def get_schedules_output(compartment_id: Optional[pulumi.Input[Optional[str]]] = None,
                         display_name: Optional[pulumi.Input[Optional[str]]] = None,
                         filters: Optional[pulumi.Input[Optional[Sequence[Union['GetSchedulesFilterArgs', 'GetSchedulesFilterArgsDict']]]]] = None,
                         schedule_id: Optional[pulumi.Input[Optional[str]]] = None,
                         state: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchedulesResult]:
    """
    This data source provides the list of Schedules in Oracle Cloud Infrastructure Resource Scheduler service.

    This API gets a list of schedules

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_schedules = oci.ResourceScheduler.get_schedules(compartment_id=compartment_id,
        display_name=schedule_display_name,
        schedule_id=test_schedule["id"],
        state=schedule_state)
    ```


    :param str compartment_id: This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    :param str display_name: This is a filter to return only resources that match the given display name exactly.
    :param str schedule_id: This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
    :param str state: This is a filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
    """
    ...
