# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectorSource',
    'ConnectorSourceCursor',
    'ConnectorSourceLogSource',
    'ConnectorSourceMonitoringSource',
    'ConnectorSourceMonitoringSourceNamespaceDetails',
    'ConnectorSourceMonitoringSourceNamespaceDetailsNamespace',
    'ConnectorSourceMonitoringSourceNamespaceDetailsNamespaceMetrics',
    'ConnectorTarget',
    'ConnectorTargetDimension',
    'ConnectorTargetDimensionDimensionValue',
    'ConnectorTask',
    'GetServiceConnectorSourceResult',
    'GetServiceConnectorSourceCursorResult',
    'GetServiceConnectorSourceLogSourceResult',
    'GetServiceConnectorSourceMonitoringSourceResult',
    'GetServiceConnectorSourceMonitoringSourceNamespaceDetailResult',
    'GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceResult',
    'GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceMetricResult',
    'GetServiceConnectorTargetResult',
    'GetServiceConnectorTargetDimensionResult',
    'GetServiceConnectorTargetDimensionDimensionValueResult',
    'GetServiceConnectorTaskResult',
    'GetServiceConnectorsFilterResult',
    'GetServiceConnectorsServiceConnectorCollectionResult',
    'GetServiceConnectorsServiceConnectorCollectionItemResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceCursorResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceLogSourceResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceResult',
    'GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceMetricResult',
    'GetServiceConnectorsServiceConnectorCollectionItemTargetResult',
    'GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionResult',
    'GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionDimensionValueResult',
    'GetServiceConnectorsServiceConnectorCollectionItemTaskResult',
]

@pulumi.output_type
class ConnectorSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logSources":
            suggest = "log_sources"
        elif key == "monitoringSources":
            suggest = "monitoring_sources"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 cursor: Optional['outputs.ConnectorSourceCursor'] = None,
                 log_sources: Optional[Sequence['outputs.ConnectorSourceLogSource']] = None,
                 monitoring_sources: Optional[Sequence['outputs.ConnectorSourceMonitoringSource']] = None,
                 stream_id: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        if cursor is not None:
            pulumi.set(__self__, "cursor", cursor)
        if log_sources is not None:
            pulumi.set(__self__, "log_sources", log_sources)
        if monitoring_sources is not None:
            pulumi.set(__self__, "monitoring_sources", monitoring_sources)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def cursor(self) -> Optional['outputs.ConnectorSourceCursor']:
        return pulumi.get(self, "cursor")

    @property
    @pulumi.getter(name="logSources")
    def log_sources(self) -> Optional[Sequence['outputs.ConnectorSourceLogSource']]:
        return pulumi.get(self, "log_sources")

    @property
    @pulumi.getter(name="monitoringSources")
    def monitoring_sources(self) -> Optional[Sequence['outputs.ConnectorSourceMonitoringSource']]:
        return pulumi.get(self, "monitoring_sources")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class ConnectorSourceCursor(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class ConnectorSourceLogSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorSourceLogSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorSourceLogSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorSourceLogSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ConnectorSourceMonitoringSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "namespaceDetails":
            suggest = "namespace_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorSourceMonitoringSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorSourceMonitoringSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorSourceMonitoringSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 namespace_details: Optional['outputs.ConnectorSourceMonitoringSourceNamespaceDetails'] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if namespace_details is not None:
            pulumi.set(__self__, "namespace_details", namespace_details)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="namespaceDetails")
    def namespace_details(self) -> Optional['outputs.ConnectorSourceMonitoringSourceNamespaceDetails']:
        return pulumi.get(self, "namespace_details")


@pulumi.output_type
class ConnectorSourceMonitoringSourceNamespaceDetails(dict):
    def __init__(__self__, *,
                 kind: str,
                 namespaces: Sequence['outputs.ConnectorSourceMonitoringSourceNamespaceDetailsNamespace']):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.ConnectorSourceMonitoringSourceNamespaceDetailsNamespace']:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class ConnectorSourceMonitoringSourceNamespaceDetailsNamespace(dict):
    def __init__(__self__, *,
                 metrics: 'outputs.ConnectorSourceMonitoringSourceNamespaceDetailsNamespaceMetrics',
                 namespace: str):
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def metrics(self) -> 'outputs.ConnectorSourceMonitoringSourceNamespaceDetailsNamespaceMetrics':
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ConnectorSourceMonitoringSourceNamespaceDetailsNamespaceMetrics(dict):
    def __init__(__self__, *,
                 kind: str):
        pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")


@pulumi.output_type
class ConnectorTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchRolloverSizeInMbs":
            suggest = "batch_rollover_size_in_mbs"
        elif key == "batchRolloverTimeInMs":
            suggest = "batch_rollover_time_in_ms"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "enableFormattedMessaging":
            suggest = "enable_formatted_messaging"
        elif key == "functionId":
            suggest = "function_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logSourceIdentifier":
            suggest = "log_source_identifier"
        elif key == "metricNamespace":
            suggest = "metric_namespace"
        elif key == "objectNamePrefix":
            suggest = "object_name_prefix"
        elif key == "streamId":
            suggest = "stream_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 batch_rollover_size_in_mbs: Optional[int] = None,
                 batch_rollover_time_in_ms: Optional[int] = None,
                 bucket: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.ConnectorTargetDimension']] = None,
                 enable_formatted_messaging: Optional[bool] = None,
                 function_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 log_source_identifier: Optional[str] = None,
                 metric: Optional[str] = None,
                 metric_namespace: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_name_prefix: Optional[str] = None,
                 stream_id: Optional[str] = None,
                 topic_id: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        if batch_rollover_size_in_mbs is not None:
            pulumi.set(__self__, "batch_rollover_size_in_mbs", batch_rollover_size_in_mbs)
        if batch_rollover_time_in_ms is not None:
            pulumi.set(__self__, "batch_rollover_time_in_ms", batch_rollover_time_in_ms)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if enable_formatted_messaging is not None:
            pulumi.set(__self__, "enable_formatted_messaging", enable_formatted_messaging)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_source_identifier is not None:
            pulumi.set(__self__, "log_source_identifier", log_source_identifier)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_name_prefix is not None:
            pulumi.set(__self__, "object_name_prefix", object_name_prefix)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="batchRolloverSizeInMbs")
    def batch_rollover_size_in_mbs(self) -> Optional[int]:
        return pulumi.get(self, "batch_rollover_size_in_mbs")

    @property
    @pulumi.getter(name="batchRolloverTimeInMs")
    def batch_rollover_time_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "batch_rollover_time_in_ms")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.ConnectorTargetDimension']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="enableFormattedMessaging")
    def enable_formatted_messaging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_formatted_messaging")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logSourceIdentifier")
    def log_source_identifier(self) -> Optional[str]:
        return pulumi.get(self, "log_source_identifier")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[str]:
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNamePrefix")
    def object_name_prefix(self) -> Optional[str]:
        return pulumi.get(self, "object_name_prefix")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class ConnectorTargetDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionValue":
            suggest = "dimension_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorTargetDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorTargetDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorTargetDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension_value: Optional['outputs.ConnectorTargetDimensionDimensionValue'] = None,
                 name: Optional[str] = None):
        if dimension_value is not None:
            pulumi.set(__self__, "dimension_value", dimension_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dimensionValue")
    def dimension_value(self) -> Optional['outputs.ConnectorTargetDimensionDimensionValue']:
        return pulumi.get(self, "dimension_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ConnectorTargetDimensionDimensionValue(dict):
    def __init__(__self__, *,
                 kind: str,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectorTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchSizeInKbs":
            suggest = "batch_size_in_kbs"
        elif key == "batchTimeInSec":
            suggest = "batch_time_in_sec"
        elif key == "functionId":
            suggest = "function_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 batch_size_in_kbs: Optional[int] = None,
                 batch_time_in_sec: Optional[int] = None,
                 condition: Optional[str] = None,
                 function_id: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        if batch_size_in_kbs is not None:
            pulumi.set(__self__, "batch_size_in_kbs", batch_size_in_kbs)
        if batch_time_in_sec is not None:
            pulumi.set(__self__, "batch_time_in_sec", batch_time_in_sec)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="batchSizeInKbs")
    def batch_size_in_kbs(self) -> Optional[int]:
        return pulumi.get(self, "batch_size_in_kbs")

    @property
    @pulumi.getter(name="batchTimeInSec")
    def batch_time_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "batch_time_in_sec")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")


@pulumi.output_type
class GetServiceConnectorSourceResult(dict):
    def __init__(__self__, *,
                 cursors: Optional[Sequence['outputs.GetServiceConnectorSourceCursorResult']] = None,
                 kind: Optional[str] = None,
                 log_sources: Optional[Sequence['outputs.GetServiceConnectorSourceLogSourceResult']] = None,
                 monitoring_sources: Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceResult']] = None,
                 stream_id: Optional[str] = None):
        if cursors is not None:
            pulumi.set(__self__, "cursors", cursors)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if log_sources is not None:
            pulumi.set(__self__, "log_sources", log_sources)
        if monitoring_sources is not None:
            pulumi.set(__self__, "monitoring_sources", monitoring_sources)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def cursors(self) -> Optional[Sequence['outputs.GetServiceConnectorSourceCursorResult']]:
        return pulumi.get(self, "cursors")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="logSources")
    def log_sources(self) -> Optional[Sequence['outputs.GetServiceConnectorSourceLogSourceResult']]:
        return pulumi.get(self, "log_sources")

    @property
    @pulumi.getter(name="monitoringSources")
    def monitoring_sources(self) -> Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceResult']]:
        return pulumi.get(self, "monitoring_sources")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class GetServiceConnectorSourceCursorResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetServiceConnectorSourceLogSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetServiceConnectorSourceMonitoringSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 namespace_details: Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceNamespaceDetailResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if namespace_details is not None:
            pulumi.set(__self__, "namespace_details", namespace_details)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="namespaceDetails")
    def namespace_details(self) -> Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceNamespaceDetailResult']]:
        return pulumi.get(self, "namespace_details")


@pulumi.output_type
class GetServiceConnectorSourceMonitoringSourceNamespaceDetailResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 namespaces: Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceResult']] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceResult']]:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceResult(dict):
    def __init__(__self__, *,
                 metrics: Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceMetricResult']] = None,
                 namespace: Optional[str] = None):
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceMetricResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetServiceConnectorTargetResult(dict):
    def __init__(__self__, *,
                 batch_rollover_size_in_mbs: Optional[int] = None,
                 batch_rollover_time_in_ms: Optional[int] = None,
                 bucket: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetServiceConnectorTargetDimensionResult']] = None,
                 enable_formatted_messaging: Optional[bool] = None,
                 function_id: Optional[str] = None,
                 kind: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 log_source_identifier: Optional[str] = None,
                 metric: Optional[str] = None,
                 metric_namespace: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_name_prefix: Optional[str] = None,
                 stream_id: Optional[str] = None,
                 topic_id: Optional[str] = None):
        if batch_rollover_size_in_mbs is not None:
            pulumi.set(__self__, "batch_rollover_size_in_mbs", batch_rollover_size_in_mbs)
        if batch_rollover_time_in_ms is not None:
            pulumi.set(__self__, "batch_rollover_time_in_ms", batch_rollover_time_in_ms)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if enable_formatted_messaging is not None:
            pulumi.set(__self__, "enable_formatted_messaging", enable_formatted_messaging)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_source_identifier is not None:
            pulumi.set(__self__, "log_source_identifier", log_source_identifier)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_name_prefix is not None:
            pulumi.set(__self__, "object_name_prefix", object_name_prefix)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="batchRolloverSizeInMbs")
    def batch_rollover_size_in_mbs(self) -> Optional[int]:
        return pulumi.get(self, "batch_rollover_size_in_mbs")

    @property
    @pulumi.getter(name="batchRolloverTimeInMs")
    def batch_rollover_time_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "batch_rollover_time_in_ms")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetServiceConnectorTargetDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="enableFormattedMessaging")
    def enable_formatted_messaging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_formatted_messaging")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logSourceIdentifier")
    def log_source_identifier(self) -> Optional[str]:
        return pulumi.get(self, "log_source_identifier")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[str]:
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNamePrefix")
    def object_name_prefix(self) -> Optional[str]:
        return pulumi.get(self, "object_name_prefix")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetServiceConnectorTargetDimensionResult(dict):
    def __init__(__self__, *,
                 dimension_values: Optional[Sequence['outputs.GetServiceConnectorTargetDimensionDimensionValueResult']] = None,
                 name: Optional[str] = None):
        if dimension_values is not None:
            pulumi.set(__self__, "dimension_values", dimension_values)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dimensionValues")
    def dimension_values(self) -> Optional[Sequence['outputs.GetServiceConnectorTargetDimensionDimensionValueResult']]:
        return pulumi.get(self, "dimension_values")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServiceConnectorTargetDimensionDimensionValueResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServiceConnectorTaskResult(dict):
    def __init__(__self__, *,
                 batch_size_in_kbs: Optional[int] = None,
                 batch_time_in_sec: Optional[int] = None,
                 condition: Optional[str] = None,
                 function_id: Optional[str] = None,
                 kind: Optional[str] = None):
        if batch_size_in_kbs is not None:
            pulumi.set(__self__, "batch_size_in_kbs", batch_size_in_kbs)
        if batch_time_in_sec is not None:
            pulumi.set(__self__, "batch_time_in_sec", batch_time_in_sec)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="batchSizeInKbs")
    def batch_size_in_kbs(self) -> Optional[int]:
        return pulumi.get(self, "batch_size_in_kbs")

    @property
    @pulumi.getter(name="batchTimeInSec")
    def batch_time_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "batch_time_in_sec")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetServiceConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecyle_details: Optional[str] = None,
                 sources: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 targets: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTargetResult']] = None,
                 tasks: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTaskResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceResult']]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTargetResult']]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTaskResult']]:
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceResult(dict):
    def __init__(__self__, *,
                 cursors: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceCursorResult']] = None,
                 kind: Optional[str] = None,
                 log_sources: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceLogSourceResult']] = None,
                 monitoring_sources: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceResult']] = None,
                 stream_id: Optional[str] = None):
        if cursors is not None:
            pulumi.set(__self__, "cursors", cursors)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if log_sources is not None:
            pulumi.set(__self__, "log_sources", log_sources)
        if monitoring_sources is not None:
            pulumi.set(__self__, "monitoring_sources", monitoring_sources)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def cursors(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceCursorResult']]:
        return pulumi.get(self, "cursors")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="logSources")
    def log_sources(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceLogSourceResult']]:
        return pulumi.get(self, "log_sources")

    @property
    @pulumi.getter(name="monitoringSources")
    def monitoring_sources(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceResult']]:
        return pulumi.get(self, "monitoring_sources")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceCursorResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceLogSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 namespace_details: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if namespace_details is not None:
            pulumi.set(__self__, "namespace_details", namespace_details)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="namespaceDetails")
    def namespace_details(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailResult']]:
        return pulumi.get(self, "namespace_details")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 namespaces: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceResult']] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceResult']]:
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceResult(dict):
    def __init__(__self__, *,
                 metrics: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceMetricResult']] = None,
                 namespace: Optional[str] = None):
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceMetricResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemTargetResult(dict):
    def __init__(__self__, *,
                 batch_rollover_size_in_mbs: Optional[int] = None,
                 batch_rollover_time_in_ms: Optional[int] = None,
                 bucket: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionResult']] = None,
                 enable_formatted_messaging: Optional[bool] = None,
                 function_id: Optional[str] = None,
                 kind: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 log_source_identifier: Optional[str] = None,
                 metric: Optional[str] = None,
                 metric_namespace: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_name_prefix: Optional[str] = None,
                 stream_id: Optional[str] = None,
                 topic_id: Optional[str] = None):
        if batch_rollover_size_in_mbs is not None:
            pulumi.set(__self__, "batch_rollover_size_in_mbs", batch_rollover_size_in_mbs)
        if batch_rollover_time_in_ms is not None:
            pulumi.set(__self__, "batch_rollover_time_in_ms", batch_rollover_time_in_ms)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if enable_formatted_messaging is not None:
            pulumi.set(__self__, "enable_formatted_messaging", enable_formatted_messaging)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_source_identifier is not None:
            pulumi.set(__self__, "log_source_identifier", log_source_identifier)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_name_prefix is not None:
            pulumi.set(__self__, "object_name_prefix", object_name_prefix)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="batchRolloverSizeInMbs")
    def batch_rollover_size_in_mbs(self) -> Optional[int]:
        return pulumi.get(self, "batch_rollover_size_in_mbs")

    @property
    @pulumi.getter(name="batchRolloverTimeInMs")
    def batch_rollover_time_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "batch_rollover_time_in_ms")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="enableFormattedMessaging")
    def enable_formatted_messaging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_formatted_messaging")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logSourceIdentifier")
    def log_source_identifier(self) -> Optional[str]:
        return pulumi.get(self, "log_source_identifier")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[str]:
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNamePrefix")
    def object_name_prefix(self) -> Optional[str]:
        return pulumi.get(self, "object_name_prefix")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionResult(dict):
    def __init__(__self__, *,
                 dimension_values: Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionDimensionValueResult']] = None,
                 name: Optional[str] = None):
        if dimension_values is not None:
            pulumi.set(__self__, "dimension_values", dimension_values)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dimensionValues")
    def dimension_values(self) -> Optional[Sequence['outputs.GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionDimensionValueResult']]:
        return pulumi.get(self, "dimension_values")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemTargetDimensionDimensionValueResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServiceConnectorsServiceConnectorCollectionItemTaskResult(dict):
    def __init__(__self__, *,
                 batch_size_in_kbs: Optional[int] = None,
                 batch_time_in_sec: Optional[int] = None,
                 condition: Optional[str] = None,
                 function_id: Optional[str] = None,
                 kind: Optional[str] = None):
        if batch_size_in_kbs is not None:
            pulumi.set(__self__, "batch_size_in_kbs", batch_size_in_kbs)
        if batch_time_in_sec is not None:
            pulumi.set(__self__, "batch_time_in_sec", batch_time_in_sec)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="batchSizeInKbs")
    def batch_size_in_kbs(self) -> Optional[int]:
        return pulumi.get(self, "batch_size_in_kbs")

    @property
    @pulumi.getter(name="batchTimeInSec")
    def batch_time_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "batch_time_in_sec")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")


