# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSecretbundleSecretBundleContentResult',
    'GetSecretbundleVersionsFilterResult',
    'GetSecretbundleVersionsSecretBundleVersionResult',
]

@pulumi.output_type
class GetSecretbundleSecretBundleContentResult(dict):
    def __init__(__self__, *,
                 content: str,
                 content_type: str):
        """
        :param str content: The base64-encoded content of the secret.
        :param str content_type: The formatting type of the secret contents.
        """
        GetSecretbundleSecretBundleContentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            content_type=content_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             content_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']

        _setter("content", content)
        _setter("content_type", content_type)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The base64-encoded content of the secret.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The formatting type of the secret contents.
        """
        return pulumi.get(self, "content_type")


@pulumi.output_type
class GetSecretbundleVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetSecretbundleVersionsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecretbundleVersionsSecretBundleVersionResult(dict):
    def __init__(__self__, *,
                 secret_id: str,
                 stages: Sequence[str],
                 time_created: str,
                 time_of_deletion: str,
                 time_of_expiry: str,
                 version_name: str,
                 version_number: str):
        """
        :param str secret_id: The OCID of the secret.
        :param Sequence[str] stages: A list of possible rotation states for the secret bundle.
        :param str time_created: The time when the secret bundle was created.
        :param str time_of_deletion: An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        :param str time_of_expiry: An optional property indicating when the secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        :param str version_name: The version name of the secret bundle, as provided when the secret was created or last rotated.
        :param str version_number: The version number of the secret.
        """
        GetSecretbundleVersionsSecretBundleVersionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_id=secret_id,
            stages=stages,
            time_created=time_created,
            time_of_deletion=time_of_deletion,
            time_of_expiry=time_of_expiry,
            version_name=version_name,
            version_number=version_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_id: str,
             stages: Sequence[str],
             time_created: str,
             time_of_deletion: str,
             time_of_expiry: str,
             version_name: str,
             version_number: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretId' in kwargs:
            secret_id = kwargs['secretId']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeOfDeletion' in kwargs:
            time_of_deletion = kwargs['timeOfDeletion']
        if 'timeOfExpiry' in kwargs:
            time_of_expiry = kwargs['timeOfExpiry']
        if 'versionName' in kwargs:
            version_name = kwargs['versionName']
        if 'versionNumber' in kwargs:
            version_number = kwargs['versionNumber']

        _setter("secret_id", secret_id)
        _setter("stages", stages)
        _setter("time_created", time_created)
        _setter("time_of_deletion", time_of_deletion)
        _setter("time_of_expiry", time_of_expiry)
        _setter("version_name", version_name)
        _setter("version_number", version_number)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        The OCID of the secret.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def stages(self) -> Sequence[str]:
        """
        A list of possible rotation states for the secret bundle.
        """
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time when the secret bundle was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> str:
        """
        An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="timeOfExpiry")
    def time_of_expiry(self) -> str:
        """
        An optional property indicating when the secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_of_expiry")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> str:
        """
        The version name of the secret bundle, as provided when the secret was created or last rotated.
        """
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> str:
        """
        The version number of the secret.
        """
        return pulumi.get(self, "version_number")


