# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSecretbundleSecretBundleContentResult',
    'GetSecretbundleVersionsFilterResult',
    'GetSecretbundleVersionsSecretBundleVersionResult',
]

@pulumi.output_type
class GetSecretbundleSecretBundleContentResult(dict):
    def __init__(__self__, *,
                 content: _builtins.str,
                 content_type: _builtins.str):
        """
        :param _builtins.str content: The base64-encoded content of the secret.
        :param _builtins.str content_type: The formatting type of the secret contents.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The base64-encoded content of the secret.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> _builtins.str:
        """
        The formatting type of the secret contents.
        """
        return pulumi.get(self, "content_type")


@pulumi.output_type
class GetSecretbundleVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecretbundleVersionsSecretBundleVersionResult(dict):
    def __init__(__self__, *,
                 secret_id: _builtins.str,
                 stages: Sequence[_builtins.str],
                 time_created: _builtins.str,
                 time_of_deletion: _builtins.str,
                 time_of_expiry: _builtins.str,
                 version_name: _builtins.str,
                 version_number: _builtins.str):
        """
        :param _builtins.str secret_id: The OCID of the secret.
        :param Sequence[_builtins.str] stages: A list of possible rotation states for the secret bundle.
        :param _builtins.str time_created: The time when the secret bundle was created.
        :param _builtins.str time_of_deletion: An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        :param _builtins.str time_of_expiry: An optional property indicating when the secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        :param _builtins.str version_name: The version name of the secret bundle, as provided when the secret was created or last rotated.
        :param _builtins.str version_number: The version number of the secret.
        """
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "stages", stages)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        pulumi.set(__self__, "time_of_expiry", time_of_expiry)
        pulumi.set(__self__, "version_name", version_name)
        pulumi.set(__self__, "version_number", version_number)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> _builtins.str:
        """
        The OCID of the secret.
        """
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter
    def stages(self) -> Sequence[_builtins.str]:
        """
        A list of possible rotation states for the secret bundle.
        """
        return pulumi.get(self, "stages")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the secret bundle was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> _builtins.str:
        """
        An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_of_deletion")

    @_builtins.property
    @pulumi.getter(name="timeOfExpiry")
    def time_of_expiry(self) -> _builtins.str:
        """
        An optional property indicating when the secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_of_expiry")

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> _builtins.str:
        """
        The version name of the secret bundle, as provided when the secret was created or last rotated.
        """
        return pulumi.get(self, "version_name")

    @_builtins.property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> _builtins.str:
        """
        The version number of the secret.
        """
        return pulumi.get(self, "version_number")


