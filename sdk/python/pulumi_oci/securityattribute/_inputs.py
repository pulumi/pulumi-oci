# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SecurityAttributeValidatorArgs',
    'SecurityAttributeValidatorArgsDict',
    'GetSecurityAttributeNamespacesFilterArgs',
    'GetSecurityAttributeNamespacesFilterArgsDict',
    'GetSecurityAttributesFilterArgs',
    'GetSecurityAttributesFilterArgsDict',
]

MYPY = False

if not MYPY:
    class SecurityAttributeValidatorArgsDict(TypedDict):
        validator_type: pulumi.Input[builtins.str]
        """
        (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        (Updatable) The list of allowed values for a security attribute value. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
elif False:
    SecurityAttributeValidatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityAttributeValidatorArgs:
    def __init__(__self__, *,
                 validator_type: pulumi.Input[builtins.str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] validator_type: (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: (Updatable) The list of allowed values for a security attribute value. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "validator_type", validator_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="validatorType")
    def validator_type(self) -> pulumi.Input[builtins.str]:
        """
        (Updatable) Specifies the type of validation: a static value (no validation) or a list.
        """
        return pulumi.get(self, "validator_type")

    @validator_type.setter
    def validator_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "validator_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Updatable) The list of allowed values for a security attribute value. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class GetSecurityAttributeNamespacesFilterArgsDict(TypedDict):
        name: builtins.str
        """
        A filter to return only resources that match the entire display name given.
        """
        values: Sequence[builtins.str]
        regex: NotRequired[builtins.bool]
elif False:
    GetSecurityAttributeNamespacesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecurityAttributeNamespacesFilterArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that match the entire display name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[builtins.str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetSecurityAttributesFilterArgsDict(TypedDict):
        name: builtins.str
        """
        The name assigned to the security attribute during creation. This is the security attribute key. The name must be unique within the security attribute namespace and cannot be changed.
        """
        values: Sequence[builtins.str]
        """
        The list of allowed values for a security attribute value.
        """
        regex: NotRequired[builtins.bool]
elif False:
    GetSecurityAttributesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetSecurityAttributesFilterArgs:
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name assigned to the security attribute during creation. This is the security attribute key. The name must be unique within the security attribute namespace and cannot be changed.
        :param Sequence[builtins.str] values: The list of allowed values for a security attribute value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name assigned to the security attribute during creation. This is the security attribute key. The name must be unique within the security attribute namespace and cannot be changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        The list of allowed values for a security attribute value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[builtins.str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[builtins.bool]):
        pulumi.set(self, "regex", value)


