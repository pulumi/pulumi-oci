# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetServiceCatalogAssociationResult',
    'AwaitableGetServiceCatalogAssociationResult',
    'get_service_catalog_association',
    'get_service_catalog_association_output',
]

@pulumi.output_type
class GetServiceCatalogAssociationResult:
    """
    A collection of values returned by getServiceCatalogAssociation.
    """
    def __init__(__self__, entity_id=None, entity_type=None, id=None, service_catalog_association_id=None, service_catalog_id=None, time_created=None):
        if entity_id and not isinstance(entity_id, str):
            raise TypeError("Expected argument 'entity_id' to be a str")
        pulumi.set(__self__, "entity_id", entity_id)
        if entity_type and not isinstance(entity_type, str):
            raise TypeError("Expected argument 'entity_type' to be a str")
        pulumi.set(__self__, "entity_type", entity_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if service_catalog_association_id and not isinstance(service_catalog_association_id, str):
            raise TypeError("Expected argument 'service_catalog_association_id' to be a str")
        pulumi.set(__self__, "service_catalog_association_id", service_catalog_association_id)
        if service_catalog_id and not isinstance(service_catalog_id, str):
            raise TypeError("Expected argument 'service_catalog_id' to be a str")
        pulumi.set(__self__, "service_catalog_id", service_catalog_id)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceCatalogAssociationId")
    def service_catalog_association_id(self) -> str:
        return pulumi.get(self, "service_catalog_association_id")

    @property
    @pulumi.getter(name="serviceCatalogId")
    def service_catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "service_catalog_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


class AwaitableGetServiceCatalogAssociationResult(GetServiceCatalogAssociationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceCatalogAssociationResult(
            entity_id=self.entity_id,
            entity_type=self.entity_type,
            id=self.id,
            service_catalog_association_id=self.service_catalog_association_id,
            service_catalog_id=self.service_catalog_id,
            time_created=self.time_created)


def get_service_catalog_association(service_catalog_association_id: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceCatalogAssociationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['serviceCatalogAssociationId'] = service_catalog_association_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:ServiceCatalog/getServiceCatalogAssociation:getServiceCatalogAssociation', __args__, opts=opts, typ=GetServiceCatalogAssociationResult).value

    return AwaitableGetServiceCatalogAssociationResult(
        entity_id=pulumi.get(__ret__, 'entity_id'),
        entity_type=pulumi.get(__ret__, 'entity_type'),
        id=pulumi.get(__ret__, 'id'),
        service_catalog_association_id=pulumi.get(__ret__, 'service_catalog_association_id'),
        service_catalog_id=pulumi.get(__ret__, 'service_catalog_id'),
        time_created=pulumi.get(__ret__, 'time_created'))


@_utilities.lift_output_func(get_service_catalog_association)
def get_service_catalog_association_output(service_catalog_association_id: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceCatalogAssociationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
