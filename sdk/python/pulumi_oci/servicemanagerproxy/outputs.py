# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceEnvironmentServiceDefinitionResult',
    'GetServiceEnvironmentServiceEnvironmentEndpointResult',
    'GetServiceEnvironmentsFilterResult',
    'GetServiceEnvironmentsServiceEnvironmentCollectionResult',
    'GetServiceEnvironmentsServiceEnvironmentCollectionItemResult',
    'GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceDefinitionResult',
    'GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceEnvironmentEndpointResult',
]

@pulumi.output_type
class GetServiceEnvironmentServiceDefinitionResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 short_display_name: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if short_display_name is not None:
            pulumi.set(__self__, "short_display_name", short_display_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="shortDisplayName")
    def short_display_name(self) -> Optional[str]:
        return pulumi.get(self, "short_display_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceEnvironmentServiceEnvironmentEndpointResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 environment_type: Optional[str] = None,
                 url: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_type is not None:
            pulumi.set(__self__, "environment_type", environment_type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[str]:
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetServiceEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServiceEnvironmentsServiceEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetServiceEnvironmentsServiceEnvironmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetServiceEnvironmentsServiceEnvironmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetServiceEnvironmentsServiceEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 console_url: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 service_definitions: Optional[Sequence['outputs.GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceDefinitionResult']] = None,
                 service_environment_endpoints: Optional[Sequence['outputs.GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceEnvironmentEndpointResult']] = None,
                 status: Optional[str] = None,
                 subscription_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if console_url is not None:
            pulumi.set(__self__, "console_url", console_url)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if service_definitions is not None:
            pulumi.set(__self__, "service_definitions", service_definitions)
        if service_environment_endpoints is not None:
            pulumi.set(__self__, "service_environment_endpoints", service_environment_endpoints)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> Optional[str]:
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceDefinitions")
    def service_definitions(self) -> Optional[Sequence['outputs.GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceDefinitionResult']]:
        return pulumi.get(self, "service_definitions")

    @property
    @pulumi.getter(name="serviceEnvironmentEndpoints")
    def service_environment_endpoints(self) -> Optional[Sequence['outputs.GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceEnvironmentEndpointResult']]:
        return pulumi.get(self, "service_environment_endpoints")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceDefinitionResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 short_display_name: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if short_display_name is not None:
            pulumi.set(__self__, "short_display_name", short_display_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="shortDisplayName")
    def short_display_name(self) -> Optional[str]:
        return pulumi.get(self, "short_display_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceEnvironmentsServiceEnvironmentCollectionItemServiceEnvironmentEndpointResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 environment_type: Optional[str] = None,
                 url: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_type is not None:
            pulumi.set(__self__, "environment_type", environment_type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[str]:
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


