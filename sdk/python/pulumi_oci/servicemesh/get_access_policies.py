# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAccessPoliciesResult',
    'AwaitableGetAccessPoliciesResult',
    'get_access_policies',
    'get_access_policies_output',
]

@pulumi.output_type
class GetAccessPoliciesResult:
    """
    A collection of values returned by getAccessPolicies.
    """
    def __init__(__self__, access_policy_collections=None, compartment_id=None, filters=None, id=None, mesh_id=None, name=None, state=None):
        if access_policy_collections and not isinstance(access_policy_collections, list):
            raise TypeError("Expected argument 'access_policy_collections' to be a list")
        pulumi.set(__self__, "access_policy_collections", access_policy_collections)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mesh_id and not isinstance(mesh_id, str):
            raise TypeError("Expected argument 'mesh_id' to be a str")
        pulumi.set(__self__, "mesh_id", mesh_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="accessPolicyCollections")
    def access_policy_collections(self) -> Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionResult']]:
        return pulumi.get(self, "access_policy_collections")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAccessPoliciesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[str]:
        return pulumi.get(self, "mesh_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


class AwaitableGetAccessPoliciesResult(GetAccessPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessPoliciesResult(
            access_policy_collections=self.access_policy_collections,
            compartment_id=self.compartment_id,
            filters=self.filters,
            id=self.id,
            mesh_id=self.mesh_id,
            name=self.name,
            state=self.state)


def get_access_policies(compartment_id: Optional[str] = None,
                        filters: Optional[Sequence[pulumi.InputType['GetAccessPoliciesFilterArgs']]] = None,
                        id: Optional[str] = None,
                        mesh_id: Optional[str] = None,
                        name: Optional[str] = None,
                        state: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['meshId'] = mesh_id
    __args__['name'] = name
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:ServiceMesh/getAccessPolicies:getAccessPolicies', __args__, opts=opts, typ=GetAccessPoliciesResult).value

    return AwaitableGetAccessPoliciesResult(
        access_policy_collections=pulumi.get(__ret__, 'access_policy_collections'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        mesh_id=pulumi.get(__ret__, 'mesh_id'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_access_policies)
def get_access_policies_output(compartment_id: Optional[pulumi.Input[str]] = None,
                               filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAccessPoliciesFilterArgs']]]]] = None,
                               id: Optional[pulumi.Input[Optional[str]]] = None,
                               mesh_id: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               state: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccessPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
