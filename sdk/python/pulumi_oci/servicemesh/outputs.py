# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccessPolicyRule',
    'AccessPolicyRuleDestination',
    'AccessPolicyRuleSource',
    'IngressGatewayAccessLogging',
    'IngressGatewayHost',
    'IngressGatewayHostListener',
    'IngressGatewayHostListenerTls',
    'IngressGatewayHostListenerTlsClientValidation',
    'IngressGatewayHostListenerTlsClientValidationTrustedCaBundle',
    'IngressGatewayHostListenerTlsServerCertificate',
    'IngressGatewayMtls',
    'IngressGatewayRouteTableRouteRule',
    'IngressGatewayRouteTableRouteRuleDestination',
    'IngressGatewayRouteTableRouteRuleIngressGatewayHost',
    'MeshCertificateAuthority',
    'MeshMtls',
    'VirtualDeploymentAccessLogging',
    'VirtualDeploymentListener',
    'VirtualDeploymentServiceDiscovery',
    'VirtualServiceDefaultRoutingPolicy',
    'VirtualServiceMtls',
    'VirtualServiceRouteTableRouteRule',
    'VirtualServiceRouteTableRouteRuleDestination',
    'GetAccessPoliciesAccessPolicyCollectionResult',
    'GetAccessPoliciesAccessPolicyCollectionItemResult',
    'GetAccessPoliciesAccessPolicyCollectionItemRuleResult',
    'GetAccessPoliciesAccessPolicyCollectionItemRuleDestinationResult',
    'GetAccessPoliciesAccessPolicyCollectionItemRuleSourceResult',
    'GetAccessPoliciesFilterResult',
    'GetAccessPolicyRuleResult',
    'GetAccessPolicyRuleDestinationResult',
    'GetAccessPolicyRuleSourceResult',
    'GetIngressGatewayAccessLoggingResult',
    'GetIngressGatewayHostResult',
    'GetIngressGatewayHostListenerResult',
    'GetIngressGatewayHostListenerTlResult',
    'GetIngressGatewayHostListenerTlClientValidationResult',
    'GetIngressGatewayHostListenerTlClientValidationTrustedCaBundleResult',
    'GetIngressGatewayHostListenerTlServerCertificateResult',
    'GetIngressGatewayMtlResult',
    'GetIngressGatewayRouteTableRouteRuleResult',
    'GetIngressGatewayRouteTableRouteRuleDestinationResult',
    'GetIngressGatewayRouteTableRouteRuleIngressGatewayHostResult',
    'GetIngressGatewayRouteTablesFilterResult',
    'GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionResult',
    'GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemResult',
    'GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleResult',
    'GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestinationResult',
    'GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHostResult',
    'GetIngressGatewaysFilterResult',
    'GetIngressGatewaysIngressGatewayCollectionResult',
    'GetIngressGatewaysIngressGatewayCollectionItemResult',
    'GetIngressGatewaysIngressGatewayCollectionItemAccessLoggingResult',
    'GetIngressGatewaysIngressGatewayCollectionItemHostResult',
    'GetIngressGatewaysIngressGatewayCollectionItemHostListenerResult',
    'GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlResult',
    'GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationResult',
    'GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationTrustedCaBundleResult',
    'GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlServerCertificateResult',
    'GetIngressGatewaysIngressGatewayCollectionItemMtlResult',
    'GetMeshCertificateAuthorityResult',
    'GetMeshMtlResult',
    'GetMeshesFilterResult',
    'GetMeshesMeshCollectionResult',
    'GetMeshesMeshCollectionItemResult',
    'GetMeshesMeshCollectionItemCertificateAuthorityResult',
    'GetMeshesMeshCollectionItemMtlResult',
    'GetVirtualDeploymentAccessLoggingResult',
    'GetVirtualDeploymentListenerResult',
    'GetVirtualDeploymentServiceDiscoveryResult',
    'GetVirtualDeploymentsFilterResult',
    'GetVirtualDeploymentsVirtualDeploymentCollectionResult',
    'GetVirtualDeploymentsVirtualDeploymentCollectionItemResult',
    'GetVirtualDeploymentsVirtualDeploymentCollectionItemAccessLoggingResult',
    'GetVirtualDeploymentsVirtualDeploymentCollectionItemListenerResult',
    'GetVirtualDeploymentsVirtualDeploymentCollectionItemServiceDiscoveryResult',
    'GetVirtualServiceDefaultRoutingPolicyResult',
    'GetVirtualServiceMtlResult',
    'GetVirtualServiceRouteTableRouteRuleResult',
    'GetVirtualServiceRouteTableRouteRuleDestinationResult',
    'GetVirtualServiceRouteTablesFilterResult',
    'GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionResult',
    'GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemResult',
    'GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleResult',
    'GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleDestinationResult',
    'GetVirtualServicesFilterResult',
    'GetVirtualServicesVirtualServiceCollectionResult',
    'GetVirtualServicesVirtualServiceCollectionItemResult',
    'GetVirtualServicesVirtualServiceCollectionItemDefaultRoutingPolicyResult',
    'GetVirtualServicesVirtualServiceCollectionItemMtlResult',
]

@pulumi.output_type
class AccessPolicyRule(dict):
    def __init__(__self__, *,
                 action: str,
                 destination: 'outputs.AccessPolicyRuleDestination',
                 source: 'outputs.AccessPolicyRuleSource'):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.AccessPolicyRuleDestination':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.AccessPolicyRuleSource':
        return pulumi.get(self, "source")


@pulumi.output_type
class AccessPolicyRuleDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressGatewayId":
            suggest = "ingress_gateway_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "virtualServiceId":
            suggest = "virtual_service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessPolicyRuleDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessPolicyRuleDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessPolicyRuleDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 hostnames: Optional[Sequence[str]] = None,
                 ingress_gateway_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 protocol: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class AccessPolicyRuleSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressGatewayId":
            suggest = "ingress_gateway_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "virtualServiceId":
            suggest = "virtual_service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessPolicyRuleSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessPolicyRuleSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessPolicyRuleSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 hostnames: Optional[Sequence[str]] = None,
                 ingress_gateway_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 protocol: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class IngressGatewayAccessLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayAccessLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayAccessLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayAccessLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class IngressGatewayHost(dict):
    def __init__(__self__, *,
                 listeners: Sequence['outputs.IngressGatewayHostListener'],
                 name: str,
                 hostnames: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "name", name)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.IngressGatewayHostListener']:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")


@pulumi.output_type
class IngressGatewayHostListener(dict):
    def __init__(__self__, *,
                 port: int,
                 protocol: str,
                 tls: Optional['outputs.IngressGatewayHostListenerTls'] = None):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.IngressGatewayHostListenerTls']:
        return pulumi.get(self, "tls")


@pulumi.output_type
class IngressGatewayHostListenerTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientValidation":
            suggest = "client_validation"
        elif key == "serverCertificate":
            suggest = "server_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayHostListenerTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayHostListenerTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayHostListenerTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 client_validation: Optional['outputs.IngressGatewayHostListenerTlsClientValidation'] = None,
                 server_certificate: Optional['outputs.IngressGatewayHostListenerTlsServerCertificate'] = None):
        pulumi.set(__self__, "mode", mode)
        if client_validation is not None:
            pulumi.set(__self__, "client_validation", client_validation)
        if server_certificate is not None:
            pulumi.set(__self__, "server_certificate", server_certificate)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="clientValidation")
    def client_validation(self) -> Optional['outputs.IngressGatewayHostListenerTlsClientValidation']:
        return pulumi.get(self, "client_validation")

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional['outputs.IngressGatewayHostListenerTlsServerCertificate']:
        return pulumi.get(self, "server_certificate")


@pulumi.output_type
class IngressGatewayHostListenerTlsClientValidation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subjectAlternateNames":
            suggest = "subject_alternate_names"
        elif key == "trustedCaBundle":
            suggest = "trusted_ca_bundle"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayHostListenerTlsClientValidation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayHostListenerTlsClientValidation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayHostListenerTlsClientValidation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subject_alternate_names: Optional[Sequence[str]] = None,
                 trusted_ca_bundle: Optional['outputs.IngressGatewayHostListenerTlsClientValidationTrustedCaBundle'] = None):
        if subject_alternate_names is not None:
            pulumi.set(__self__, "subject_alternate_names", subject_alternate_names)
        if trusted_ca_bundle is not None:
            pulumi.set(__self__, "trusted_ca_bundle", trusted_ca_bundle)

    @property
    @pulumi.getter(name="subjectAlternateNames")
    def subject_alternate_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternate_names")

    @property
    @pulumi.getter(name="trustedCaBundle")
    def trusted_ca_bundle(self) -> Optional['outputs.IngressGatewayHostListenerTlsClientValidationTrustedCaBundle']:
        return pulumi.get(self, "trusted_ca_bundle")


@pulumi.output_type
class IngressGatewayHostListenerTlsClientValidationTrustedCaBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caBundleId":
            suggest = "ca_bundle_id"
        elif key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayHostListenerTlsClientValidationTrustedCaBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayHostListenerTlsClientValidationTrustedCaBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayHostListenerTlsClientValidationTrustedCaBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 ca_bundle_id: Optional[str] = None,
                 secret_name: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ca_bundle_id is not None:
            pulumi.set(__self__, "ca_bundle_id", ca_bundle_id)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class IngressGatewayHostListenerTlsServerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayHostListenerTlsServerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayHostListenerTlsServerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayHostListenerTlsServerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 certificate_id: Optional[str] = None,
                 secret_name: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class IngressGatewayMtls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "maximumValidity":
            suggest = "maximum_validity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 maximum_validity: Optional[int] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if maximum_validity is not None:
            pulumi.set(__self__, "maximum_validity", maximum_validity)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="maximumValidity")
    def maximum_validity(self) -> Optional[int]:
        return pulumi.get(self, "maximum_validity")


@pulumi.output_type
class IngressGatewayRouteTableRouteRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressGatewayHost":
            suggest = "ingress_gateway_host"
        elif key == "isGrpc":
            suggest = "is_grpc"
        elif key == "isHostRewriteEnabled":
            suggest = "is_host_rewrite_enabled"
        elif key == "isPathRewriteEnabled":
            suggest = "is_path_rewrite_enabled"
        elif key == "pathType":
            suggest = "path_type"
        elif key == "requestTimeoutInMs":
            suggest = "request_timeout_in_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayRouteTableRouteRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayRouteTableRouteRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayRouteTableRouteRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.IngressGatewayRouteTableRouteRuleDestination'],
                 type: str,
                 ingress_gateway_host: Optional['outputs.IngressGatewayRouteTableRouteRuleIngressGatewayHost'] = None,
                 is_grpc: Optional[bool] = None,
                 is_host_rewrite_enabled: Optional[bool] = None,
                 is_path_rewrite_enabled: Optional[bool] = None,
                 path: Optional[str] = None,
                 path_type: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None):
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "type", type)
        if ingress_gateway_host is not None:
            pulumi.set(__self__, "ingress_gateway_host", ingress_gateway_host)
        if is_grpc is not None:
            pulumi.set(__self__, "is_grpc", is_grpc)
        if is_host_rewrite_enabled is not None:
            pulumi.set(__self__, "is_host_rewrite_enabled", is_host_rewrite_enabled)
        if is_path_rewrite_enabled is not None:
            pulumi.set(__self__, "is_path_rewrite_enabled", is_path_rewrite_enabled)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.IngressGatewayRouteTableRouteRuleDestination']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ingressGatewayHost")
    def ingress_gateway_host(self) -> Optional['outputs.IngressGatewayRouteTableRouteRuleIngressGatewayHost']:
        return pulumi.get(self, "ingress_gateway_host")

    @property
    @pulumi.getter(name="isGrpc")
    def is_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_grpc")

    @property
    @pulumi.getter(name="isHostRewriteEnabled")
    def is_host_rewrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_host_rewrite_enabled")

    @property
    @pulumi.getter(name="isPathRewriteEnabled")
    def is_path_rewrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_path_rewrite_enabled")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[str]:
        return pulumi.get(self, "path_type")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")


@pulumi.output_type
class IngressGatewayRouteTableRouteRuleDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualServiceId":
            suggest = "virtual_service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressGatewayRouteTableRouteRuleDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressGatewayRouteTableRouteRuleDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressGatewayRouteTableRouteRuleDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 virtual_service_id: str,
                 port: Optional[int] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "virtual_service_id", virtual_service_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> str:
        return pulumi.get(self, "virtual_service_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class IngressGatewayRouteTableRouteRuleIngressGatewayHost(dict):
    def __init__(__self__, *,
                 name: str,
                 port: Optional[int] = None):
        pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class MeshCertificateAuthority(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class MeshMtls(dict):
    def __init__(__self__, *,
                 minimum: str):
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> str:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class VirtualDeploymentAccessLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualDeploymentAccessLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualDeploymentAccessLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualDeploymentAccessLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class VirtualDeploymentListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeoutInMs":
            suggest = "idle_timeout_in_ms"
        elif key == "requestTimeoutInMs":
            suggest = "request_timeout_in_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualDeploymentListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualDeploymentListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualDeploymentListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 protocol: str,
                 idle_timeout_in_ms: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if idle_timeout_in_ms is not None:
            pulumi.set(__self__, "idle_timeout_in_ms", idle_timeout_in_ms)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="idleTimeoutInMs")
    def idle_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "idle_timeout_in_ms")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")


@pulumi.output_type
class VirtualDeploymentServiceDiscovery(dict):
    def __init__(__self__, *,
                 type: str,
                 hostname: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class VirtualServiceDefaultRoutingPolicy(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServiceMtls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "maximumValidity":
            suggest = "maximum_validity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServiceMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServiceMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServiceMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: str,
                 certificate_id: Optional[str] = None,
                 maximum_validity: Optional[int] = None):
        pulumi.set(__self__, "mode", mode)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if maximum_validity is not None:
            pulumi.set(__self__, "maximum_validity", maximum_validity)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="maximumValidity")
    def maximum_validity(self) -> Optional[int]:
        return pulumi.get(self, "maximum_validity")


@pulumi.output_type
class VirtualServiceRouteTableRouteRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isGrpc":
            suggest = "is_grpc"
        elif key == "pathType":
            suggest = "path_type"
        elif key == "requestTimeoutInMs":
            suggest = "request_timeout_in_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServiceRouteTableRouteRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServiceRouteTableRouteRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServiceRouteTableRouteRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.VirtualServiceRouteTableRouteRuleDestination'],
                 type: str,
                 is_grpc: Optional[bool] = None,
                 path: Optional[str] = None,
                 path_type: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None):
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "type", type)
        if is_grpc is not None:
            pulumi.set(__self__, "is_grpc", is_grpc)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.VirtualServiceRouteTableRouteRuleDestination']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="isGrpc")
    def is_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_grpc")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[str]:
        return pulumi.get(self, "path_type")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")


@pulumi.output_type
class VirtualServiceRouteTableRouteRuleDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualDeploymentId":
            suggest = "virtual_deployment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServiceRouteTableRouteRuleDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServiceRouteTableRouteRuleDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServiceRouteTableRouteRuleDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 virtual_deployment_id: str,
                 weight: int,
                 port: Optional[int] = None):
        pulumi.set(__self__, "virtual_deployment_id", virtual_deployment_id)
        pulumi.set(__self__, "weight", weight)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="virtualDeploymentId")
    def virtual_deployment_id(self) -> str:
        return pulumi.get(self, "virtual_deployment_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 mesh_id: Optional[str] = None,
                 name: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemRuleResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if mesh_id is not None:
            pulumi.set(__self__, "mesh_id", mesh_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[str]:
        return pulumi.get(self, "mesh_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemRuleResult']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyCollectionItemRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemRuleDestinationResult']] = None,
                 sources: Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemRuleSourceResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemRuleDestinationResult']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetAccessPoliciesAccessPolicyCollectionItemRuleSourceResult']]:
        return pulumi.get(self, "sources")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyCollectionItemRuleDestinationResult(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ingress_gateway_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 protocol: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyCollectionItemRuleSourceResult(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ingress_gateway_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 protocol: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class GetAccessPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAccessPolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.GetAccessPolicyRuleDestinationResult']] = None,
                 sources: Optional[Sequence['outputs.GetAccessPolicyRuleSourceResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.GetAccessPolicyRuleDestinationResult']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetAccessPolicyRuleSourceResult']]:
        return pulumi.get(self, "sources")


@pulumi.output_type
class GetAccessPolicyRuleDestinationResult(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ingress_gateway_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 protocol: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class GetAccessPolicyRuleSourceResult(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 ingress_gateway_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ports: Optional[Sequence[int]] = None,
                 protocol: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class GetIngressGatewayAccessLoggingResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetIngressGatewayHostResult(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 listeners: Optional[Sequence['outputs.GetIngressGatewayHostListenerResult']] = None,
                 name: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def listeners(self) -> Optional[Sequence['outputs.GetIngressGatewayHostListenerResult']]:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIngressGatewayHostListenerResult(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 tls: Optional[Sequence['outputs.GetIngressGatewayHostListenerTlResult']] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.GetIngressGatewayHostListenerTlResult']]:
        return pulumi.get(self, "tls")


@pulumi.output_type
class GetIngressGatewayHostListenerTlResult(dict):
    def __init__(__self__, *,
                 client_validations: Optional[Sequence['outputs.GetIngressGatewayHostListenerTlClientValidationResult']] = None,
                 mode: Optional[str] = None,
                 server_certificates: Optional[Sequence['outputs.GetIngressGatewayHostListenerTlServerCertificateResult']] = None):
        if client_validations is not None:
            pulumi.set(__self__, "client_validations", client_validations)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if server_certificates is not None:
            pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="clientValidations")
    def client_validations(self) -> Optional[Sequence['outputs.GetIngressGatewayHostListenerTlClientValidationResult']]:
        return pulumi.get(self, "client_validations")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Optional[Sequence['outputs.GetIngressGatewayHostListenerTlServerCertificateResult']]:
        return pulumi.get(self, "server_certificates")


@pulumi.output_type
class GetIngressGatewayHostListenerTlClientValidationResult(dict):
    def __init__(__self__, *,
                 subject_alternate_names: Optional[Sequence[str]] = None,
                 trusted_ca_bundles: Optional[Sequence['outputs.GetIngressGatewayHostListenerTlClientValidationTrustedCaBundleResult']] = None):
        if subject_alternate_names is not None:
            pulumi.set(__self__, "subject_alternate_names", subject_alternate_names)
        if trusted_ca_bundles is not None:
            pulumi.set(__self__, "trusted_ca_bundles", trusted_ca_bundles)

    @property
    @pulumi.getter(name="subjectAlternateNames")
    def subject_alternate_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternate_names")

    @property
    @pulumi.getter(name="trustedCaBundles")
    def trusted_ca_bundles(self) -> Optional[Sequence['outputs.GetIngressGatewayHostListenerTlClientValidationTrustedCaBundleResult']]:
        return pulumi.get(self, "trusted_ca_bundles")


@pulumi.output_type
class GetIngressGatewayHostListenerTlClientValidationTrustedCaBundleResult(dict):
    def __init__(__self__, *,
                 ca_bundle_id: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 type: Optional[str] = None):
        if ca_bundle_id is not None:
            pulumi.set(__self__, "ca_bundle_id", ca_bundle_id)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIngressGatewayHostListenerTlServerCertificateResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 type: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIngressGatewayMtlResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 maximum_validity: Optional[int] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if maximum_validity is not None:
            pulumi.set(__self__, "maximum_validity", maximum_validity)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="maximumValidity")
    def maximum_validity(self) -> Optional[int]:
        return pulumi.get(self, "maximum_validity")


@pulumi.output_type
class GetIngressGatewayRouteTableRouteRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Optional[Sequence['outputs.GetIngressGatewayRouteTableRouteRuleDestinationResult']] = None,
                 ingress_gateway_hosts: Optional[Sequence['outputs.GetIngressGatewayRouteTableRouteRuleIngressGatewayHostResult']] = None,
                 is_grpc: Optional[bool] = None,
                 is_host_rewrite_enabled: Optional[bool] = None,
                 is_path_rewrite_enabled: Optional[bool] = None,
                 path: Optional[str] = None,
                 path_type: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None,
                 type: Optional[str] = None):
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if ingress_gateway_hosts is not None:
            pulumi.set(__self__, "ingress_gateway_hosts", ingress_gateway_hosts)
        if is_grpc is not None:
            pulumi.set(__self__, "is_grpc", is_grpc)
        if is_host_rewrite_enabled is not None:
            pulumi.set(__self__, "is_host_rewrite_enabled", is_host_rewrite_enabled)
        if is_path_rewrite_enabled is not None:
            pulumi.set(__self__, "is_path_rewrite_enabled", is_path_rewrite_enabled)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.GetIngressGatewayRouteTableRouteRuleDestinationResult']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="ingressGatewayHosts")
    def ingress_gateway_hosts(self) -> Optional[Sequence['outputs.GetIngressGatewayRouteTableRouteRuleIngressGatewayHostResult']]:
        return pulumi.get(self, "ingress_gateway_hosts")

    @property
    @pulumi.getter(name="isGrpc")
    def is_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_grpc")

    @property
    @pulumi.getter(name="isHostRewriteEnabled")
    def is_host_rewrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_host_rewrite_enabled")

    @property
    @pulumi.getter(name="isPathRewriteEnabled")
    def is_path_rewrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_path_rewrite_enabled")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[str]:
        return pulumi.get(self, "path_type")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIngressGatewayRouteTableRouteRuleDestinationResult(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 virtual_service_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetIngressGatewayRouteTableRouteRuleIngressGatewayHostResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetIngressGatewayRouteTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ingress_gateway_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 route_rules: Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ingress_gateway_id is not None:
            pulumi.set(__self__, "ingress_gateway_id", ingress_gateway_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if route_rules is not None:
            pulumi.set(__self__, "route_rules", route_rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressGatewayId")
    def ingress_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "ingress_gateway_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeRules")
    def route_rules(self) -> Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleResult']]:
        return pulumi.get(self, "route_rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestinationResult']] = None,
                 ingress_gateway_hosts: Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHostResult']] = None,
                 is_grpc: Optional[bool] = None,
                 is_host_rewrite_enabled: Optional[bool] = None,
                 is_path_rewrite_enabled: Optional[bool] = None,
                 path: Optional[str] = None,
                 path_type: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None,
                 type: Optional[str] = None):
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if ingress_gateway_hosts is not None:
            pulumi.set(__self__, "ingress_gateway_hosts", ingress_gateway_hosts)
        if is_grpc is not None:
            pulumi.set(__self__, "is_grpc", is_grpc)
        if is_host_rewrite_enabled is not None:
            pulumi.set(__self__, "is_host_rewrite_enabled", is_host_rewrite_enabled)
        if is_path_rewrite_enabled is not None:
            pulumi.set(__self__, "is_path_rewrite_enabled", is_path_rewrite_enabled)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestinationResult']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="ingressGatewayHosts")
    def ingress_gateway_hosts(self) -> Optional[Sequence['outputs.GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHostResult']]:
        return pulumi.get(self, "ingress_gateway_hosts")

    @property
    @pulumi.getter(name="isGrpc")
    def is_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_grpc")

    @property
    @pulumi.getter(name="isHostRewriteEnabled")
    def is_host_rewrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_host_rewrite_enabled")

    @property
    @pulumi.getter(name="isPathRewriteEnabled")
    def is_path_rewrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_path_rewrite_enabled")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[str]:
        return pulumi.get(self, "path_type")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestinationResult(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 virtual_service_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHostResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetIngressGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_loggings: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemAccessLoggingResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hosts: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostResult']] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 mesh_id: Optional[str] = None,
                 mtls: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemMtlResult']] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if access_loggings is not None:
            pulumi.set(__self__, "access_loggings", access_loggings)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if mesh_id is not None:
            pulumi.set(__self__, "mesh_id", mesh_id)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="accessLoggings")
    def access_loggings(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemAccessLoggingResult']]:
        return pulumi.get(self, "access_loggings")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostResult']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[str]:
        return pulumi.get(self, "mesh_id")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemMtlResult']]:
        return pulumi.get(self, "mtls")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemAccessLoggingResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemHostResult(dict):
    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 listeners: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerResult']] = None,
                 name: Optional[str] = None):
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter
    def listeners(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerResult']]:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemHostListenerResult(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 tls: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlResult']] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlResult']]:
        return pulumi.get(self, "tls")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlResult(dict):
    def __init__(__self__, *,
                 client_validations: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationResult']] = None,
                 mode: Optional[str] = None,
                 server_certificates: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlServerCertificateResult']] = None):
        if client_validations is not None:
            pulumi.set(__self__, "client_validations", client_validations)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if server_certificates is not None:
            pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="clientValidations")
    def client_validations(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationResult']]:
        return pulumi.get(self, "client_validations")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlServerCertificateResult']]:
        return pulumi.get(self, "server_certificates")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationResult(dict):
    def __init__(__self__, *,
                 subject_alternate_names: Optional[Sequence[str]] = None,
                 trusted_ca_bundles: Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationTrustedCaBundleResult']] = None):
        if subject_alternate_names is not None:
            pulumi.set(__self__, "subject_alternate_names", subject_alternate_names)
        if trusted_ca_bundles is not None:
            pulumi.set(__self__, "trusted_ca_bundles", trusted_ca_bundles)

    @property
    @pulumi.getter(name="subjectAlternateNames")
    def subject_alternate_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternate_names")

    @property
    @pulumi.getter(name="trustedCaBundles")
    def trusted_ca_bundles(self) -> Optional[Sequence['outputs.GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationTrustedCaBundleResult']]:
        return pulumi.get(self, "trusted_ca_bundles")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationTrustedCaBundleResult(dict):
    def __init__(__self__, *,
                 ca_bundle_id: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 type: Optional[str] = None):
        if ca_bundle_id is not None:
            pulumi.set(__self__, "ca_bundle_id", ca_bundle_id)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemHostListenerTlServerCertificateResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 type: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIngressGatewaysIngressGatewayCollectionItemMtlResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 maximum_validity: Optional[int] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if maximum_validity is not None:
            pulumi.set(__self__, "maximum_validity", maximum_validity)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="maximumValidity")
    def maximum_validity(self) -> Optional[int]:
        return pulumi.get(self, "maximum_validity")


@pulumi.output_type
class GetMeshCertificateAuthorityResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMeshMtlResult(dict):
    def __init__(__self__, *,
                 minimum: Optional[str] = None):
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[str]:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetMeshesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMeshesMeshCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMeshesMeshCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMeshesMeshCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMeshesMeshCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate_authorities: Optional[Sequence['outputs.GetMeshesMeshCollectionItemCertificateAuthorityResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 mtls: Optional[Sequence['outputs.GetMeshesMeshCollectionItemMtlResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if certificate_authorities is not None:
            pulumi.set(__self__, "certificate_authorities", certificate_authorities)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="certificateAuthorities")
    def certificate_authorities(self) -> Optional[Sequence['outputs.GetMeshesMeshCollectionItemCertificateAuthorityResult']]:
        return pulumi.get(self, "certificate_authorities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[Sequence['outputs.GetMeshesMeshCollectionItemMtlResult']]:
        return pulumi.get(self, "mtls")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMeshesMeshCollectionItemCertificateAuthorityResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetMeshesMeshCollectionItemMtlResult(dict):
    def __init__(__self__, *,
                 minimum: Optional[str] = None):
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[str]:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetVirtualDeploymentAccessLoggingResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetVirtualDeploymentListenerResult(dict):
    def __init__(__self__, *,
                 idle_timeout_in_ms: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None):
        if idle_timeout_in_ms is not None:
            pulumi.set(__self__, "idle_timeout_in_ms", idle_timeout_in_ms)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)

    @property
    @pulumi.getter(name="idleTimeoutInMs")
    def idle_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "idle_timeout_in_ms")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")


@pulumi.output_type
class GetVirtualDeploymentServiceDiscoveryResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 type: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualDeploymentsVirtualDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVirtualDeploymentsVirtualDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_loggings: Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemAccessLoggingResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 listeners: Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemListenerResult']] = None,
                 name: Optional[str] = None,
                 service_discoveries: Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemServiceDiscoveryResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        if access_loggings is not None:
            pulumi.set(__self__, "access_loggings", access_loggings)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_discoveries is not None:
            pulumi.set(__self__, "service_discoveries", service_discoveries)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter(name="accessLoggings")
    def access_loggings(self) -> Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemAccessLoggingResult']]:
        return pulumi.get(self, "access_loggings")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def listeners(self) -> Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemListenerResult']]:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceDiscoveries")
    def service_discoveries(self) -> Optional[Sequence['outputs.GetVirtualDeploymentsVirtualDeploymentCollectionItemServiceDiscoveryResult']]:
        return pulumi.get(self, "service_discoveries")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class GetVirtualDeploymentsVirtualDeploymentCollectionItemAccessLoggingResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetVirtualDeploymentsVirtualDeploymentCollectionItemListenerResult(dict):
    def __init__(__self__, *,
                 idle_timeout_in_ms: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None):
        if idle_timeout_in_ms is not None:
            pulumi.set(__self__, "idle_timeout_in_ms", idle_timeout_in_ms)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)

    @property
    @pulumi.getter(name="idleTimeoutInMs")
    def idle_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "idle_timeout_in_ms")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")


@pulumi.output_type
class GetVirtualDeploymentsVirtualDeploymentCollectionItemServiceDiscoveryResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 type: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualServiceDefaultRoutingPolicyResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualServiceMtlResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 maximum_validity: Optional[int] = None,
                 mode: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if maximum_validity is not None:
            pulumi.set(__self__, "maximum_validity", maximum_validity)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="maximumValidity")
    def maximum_validity(self) -> Optional[int]:
        return pulumi.get(self, "maximum_validity")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetVirtualServiceRouteTableRouteRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Optional[Sequence['outputs.GetVirtualServiceRouteTableRouteRuleDestinationResult']] = None,
                 is_grpc: Optional[bool] = None,
                 path: Optional[str] = None,
                 path_type: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None,
                 type: Optional[str] = None):
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if is_grpc is not None:
            pulumi.set(__self__, "is_grpc", is_grpc)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.GetVirtualServiceRouteTableRouteRuleDestinationResult']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isGrpc")
    def is_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_grpc")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[str]:
        return pulumi.get(self, "path_type")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualServiceRouteTableRouteRuleDestinationResult(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 virtual_deployment_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_deployment_id is not None:
            pulumi.set(__self__, "virtual_deployment_id", virtual_deployment_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualDeploymentId")
    def virtual_deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_deployment_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetVirtualServiceRouteTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 route_rules: Optional[Sequence['outputs.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 virtual_service_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if route_rules is not None:
            pulumi.set(__self__, "route_rules", route_rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if virtual_service_id is not None:
            pulumi.set(__self__, "virtual_service_id", virtual_service_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeRules")
    def route_rules(self) -> Optional[Sequence['outputs.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleResult']]:
        return pulumi.get(self, "route_rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="virtualServiceId")
    def virtual_service_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_service_id")


@pulumi.output_type
class GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Optional[Sequence['outputs.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleDestinationResult']] = None,
                 is_grpc: Optional[bool] = None,
                 path: Optional[str] = None,
                 path_type: Optional[str] = None,
                 request_timeout_in_ms: Optional[str] = None,
                 type: Optional[str] = None):
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if is_grpc is not None:
            pulumi.set(__self__, "is_grpc", is_grpc)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if request_timeout_in_ms is not None:
            pulumi.set(__self__, "request_timeout_in_ms", request_timeout_in_ms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleDestinationResult']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="isGrpc")
    def is_grpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_grpc")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[str]:
        return pulumi.get(self, "path_type")

    @property
    @pulumi.getter(name="requestTimeoutInMs")
    def request_timeout_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "request_timeout_in_ms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleDestinationResult(dict):
    def __init__(__self__, *,
                 port: Optional[int] = None,
                 virtual_deployment_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if virtual_deployment_id is not None:
            pulumi.set(__self__, "virtual_deployment_id", virtual_deployment_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="virtualDeploymentId")
    def virtual_deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_deployment_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetVirtualServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualServicesVirtualServiceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetVirtualServicesVirtualServiceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetVirtualServicesVirtualServiceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVirtualServicesVirtualServiceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 default_routing_policies: Optional[Sequence['outputs.GetVirtualServicesVirtualServiceCollectionItemDefaultRoutingPolicyResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hosts: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 mesh_id: Optional[str] = None,
                 mtls: Optional[Sequence['outputs.GetVirtualServicesVirtualServiceCollectionItemMtlResult']] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_routing_policies is not None:
            pulumi.set(__self__, "default_routing_policies", default_routing_policies)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if mesh_id is not None:
            pulumi.set(__self__, "mesh_id", mesh_id)
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultRoutingPolicies")
    def default_routing_policies(self) -> Optional[Sequence['outputs.GetVirtualServicesVirtualServiceCollectionItemDefaultRoutingPolicyResult']]:
        return pulumi.get(self, "default_routing_policies")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[str]:
        return pulumi.get(self, "mesh_id")

    @property
    @pulumi.getter
    def mtls(self) -> Optional[Sequence['outputs.GetVirtualServicesVirtualServiceCollectionItemMtlResult']]:
        return pulumi.get(self, "mtls")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetVirtualServicesVirtualServiceCollectionItemDefaultRoutingPolicyResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVirtualServicesVirtualServiceCollectionItemMtlResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 maximum_validity: Optional[int] = None,
                 mode: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if maximum_validity is not None:
            pulumi.set(__self__, "maximum_validity", maximum_validity)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="maximumValidity")
    def maximum_validity(self) -> Optional[int]:
        return pulumi.get(self, "maximum_validity")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


