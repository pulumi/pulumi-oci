# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMaintenanceWindowResult',
    'AwaitableGetMaintenanceWindowResult',
    'get_maintenance_window',
    'get_maintenance_window_output',
]

@pulumi.output_type
class GetMaintenanceWindowResult:
    """
    A collection of values returned by getMaintenanceWindow.
    """
    def __init__(__self__, compartment_id=None, description=None, id=None, lifecycle_details=None, maintenance_window_id=None, name=None, resources=None, resources_details=None, schedules=None, state=None, time_created=None, time_updated=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if maintenance_window_id and not isinstance(maintenance_window_id, str):
            raise TypeError("Expected argument 'maintenance_window_id' to be a str")
        pulumi.set(__self__, "maintenance_window_id", maintenance_window_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if resources_details and not isinstance(resources_details, list):
            raise TypeError("Expected argument 'resources_details' to be a list")
        pulumi.set(__self__, "resources_details", resources_details)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Maintenance Window description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of maintenance window.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Lifecycle Details of the Maintenance Window.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maintenanceWindowId")
    def maintenance_window_id(self) -> str:
        return pulumi.get(self, "maintenance_window_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the monitored resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMaintenanceWindowResourceResult']:
        """
        List of resource Ids which are part of the Maintenance Window
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="resourcesDetails")
    def resources_details(self) -> Sequence['outputs.GetMaintenanceWindowResourcesDetailResult']:
        """
        List of resource details that are part of the Maintenance Window.
        """
        return pulumi.get(self, "resources_details")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetMaintenanceWindowScheduleResult']:
        """
        Schedule information of the Maintenance Window
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle state of the monitored resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the the maintenance window was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the the mainteance window was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


class AwaitableGetMaintenanceWindowResult(GetMaintenanceWindowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaintenanceWindowResult(
            compartment_id=self.compartment_id,
            description=self.description,
            id=self.id,
            lifecycle_details=self.lifecycle_details,
            maintenance_window_id=self.maintenance_window_id,
            name=self.name,
            resources=self.resources,
            resources_details=self.resources_details,
            schedules=self.schedules,
            state=self.state,
            time_created=self.time_created,
            time_updated=self.time_updated)


def get_maintenance_window(maintenance_window_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaintenanceWindowResult:
    """
    This data source provides details about a specific Maintenance Window resource in Oracle Cloud Infrastructure Stack Monitoring service.

    Get maintenance window for the given identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_maintenance_window = oci.StackMonitoring.get_maintenance_window(maintenance_window_id=test_maintenance_window_oci_stack_monitoring_maintenance_window["id"])
    ```


    :param str maintenance_window_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of maintenance window.
    """
    __args__ = dict()
    __args__['maintenanceWindowId'] = maintenance_window_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:StackMonitoring/getMaintenanceWindow:getMaintenanceWindow', __args__, opts=opts, typ=GetMaintenanceWindowResult).value

    return AwaitableGetMaintenanceWindowResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        maintenance_window_id=pulumi.get(__ret__, 'maintenance_window_id'),
        name=pulumi.get(__ret__, 'name'),
        resources=pulumi.get(__ret__, 'resources'),
        resources_details=pulumi.get(__ret__, 'resources_details'),
        schedules=pulumi.get(__ret__, 'schedules'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'))
def get_maintenance_window_output(maintenance_window_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMaintenanceWindowResult]:
    """
    This data source provides details about a specific Maintenance Window resource in Oracle Cloud Infrastructure Stack Monitoring service.

    Get maintenance window for the given identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_maintenance_window = oci.StackMonitoring.get_maintenance_window(maintenance_window_id=test_maintenance_window_oci_stack_monitoring_maintenance_window["id"])
    ```


    :param str maintenance_window_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of maintenance window.
    """
    __args__ = dict()
    __args__['maintenanceWindowId'] = maintenance_window_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:StackMonitoring/getMaintenanceWindow:getMaintenanceWindow', __args__, opts=opts, typ=GetMaintenanceWindowResult)
    return __ret__.apply(lambda __response__: GetMaintenanceWindowResult(
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_details=pulumi.get(__response__, 'lifecycle_details'),
        maintenance_window_id=pulumi.get(__response__, 'maintenance_window_id'),
        name=pulumi.get(__response__, 'name'),
        resources=pulumi.get(__response__, 'resources'),
        resources_details=pulumi.get(__response__, 'resources_details'),
        schedules=pulumi.get(__response__, 'schedules'),
        state=pulumi.get(__response__, 'state'),
        time_created=pulumi.get(__response__, 'time_created'),
        time_updated=pulumi.get(__response__, 'time_updated')))
