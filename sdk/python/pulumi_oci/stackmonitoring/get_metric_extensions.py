# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMetricExtensionsResult',
    'AwaitableGetMetricExtensionsResult',
    'get_metric_extensions',
    'get_metric_extensions_output',
]

@pulumi.output_type
class GetMetricExtensionsResult:
    """
    A collection of values returned by getMetricExtensions.
    """
    def __init__(__self__, compartment_id=None, enabled_on_resource_id=None, filters=None, id=None, metric_extension_collections=None, name=None, resource_type=None, state=None, status=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if enabled_on_resource_id and not isinstance(enabled_on_resource_id, str):
            raise TypeError("Expected argument 'enabled_on_resource_id' to be a str")
        pulumi.set(__self__, "enabled_on_resource_id", enabled_on_resource_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_extension_collections and not isinstance(metric_extension_collections, list):
            raise TypeError("Expected argument 'metric_extension_collections' to be a list")
        pulumi.set(__self__, "metric_extension_collections", metric_extension_collections)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="enabledOnResourceId")
    def enabled_on_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "enabled_on_resource_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMetricExtensionsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricExtensionCollections")
    def metric_extension_collections(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionResult']]:
        return pulumi.get(self, "metric_extension_collections")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


class AwaitableGetMetricExtensionsResult(GetMetricExtensionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricExtensionsResult(
            compartment_id=self.compartment_id,
            enabled_on_resource_id=self.enabled_on_resource_id,
            filters=self.filters,
            id=self.id,
            metric_extension_collections=self.metric_extension_collections,
            name=self.name,
            resource_type=self.resource_type,
            state=self.state,
            status=self.status)


def get_metric_extensions(compartment_id: Optional[str] = None,
                          enabled_on_resource_id: Optional[str] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetMetricExtensionsFilterArgs']]] = None,
                          name: Optional[str] = None,
                          resource_type: Optional[str] = None,
                          state: Optional[str] = None,
                          status: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricExtensionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['enabledOnResourceId'] = enabled_on_resource_id
    __args__['filters'] = filters
    __args__['name'] = name
    __args__['resourceType'] = resource_type
    __args__['state'] = state
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:StackMonitoring/getMetricExtensions:getMetricExtensions', __args__, opts=opts, typ=GetMetricExtensionsResult).value

    return AwaitableGetMetricExtensionsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        enabled_on_resource_id=pulumi.get(__ret__, 'enabled_on_resource_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        metric_extension_collections=pulumi.get(__ret__, 'metric_extension_collections'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_metric_extensions)
def get_metric_extensions_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                 enabled_on_resource_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMetricExtensionsFilterArgs']]]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 resource_type: Optional[pulumi.Input[Optional[str]]] = None,
                                 state: Optional[pulumi.Input[Optional[str]]] = None,
                                 status: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetricExtensionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
