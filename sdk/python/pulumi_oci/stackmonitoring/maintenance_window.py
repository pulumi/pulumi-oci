# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MaintenanceWindowArgs', 'MaintenanceWindow']

@pulumi.input_type
class MaintenanceWindowArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 resources: pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]],
                 schedule: pulumi.Input['MaintenanceWindowScheduleArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MaintenanceWindow resource.
        :param pulumi.Input[str] compartment_id: Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]] resources: (Updatable) List of resource Ids which are part of the Maintenance Window
        :param pulumi.Input['MaintenanceWindowScheduleArgs'] schedule: (Updatable) Schedule information of the Maintenance Window
        :param pulumi.Input[str] description: (Updatable) Maintenance Window description.
        :param pulumi.Input[str] name: Maintenance Window name.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "schedule", schedule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]]:
        """
        (Updatable) List of resource Ids which are part of the Maintenance Window
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['MaintenanceWindowScheduleArgs']:
        """
        (Updatable) Schedule information of the Maintenance Window
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['MaintenanceWindowScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Maintenance Window description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance Window name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MaintenanceWindowState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]]] = None,
                 resources_details: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourcesDetailArgs']]]] = None,
                 schedule: Optional[pulumi.Input['MaintenanceWindowScheduleArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MaintenanceWindow resources.
        :param pulumi.Input[str] compartment_id: Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[str] description: (Updatable) Maintenance Window description.
        :param pulumi.Input[str] lifecycle_details: Lifecycle Details of the Maintenance Window.
        :param pulumi.Input[str] name: Maintenance Window name.
        :param pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]] resources: (Updatable) List of resource Ids which are part of the Maintenance Window
        :param pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourcesDetailArgs']]] resources_details: List of resource details that are part of the Maintenance Window.
        :param pulumi.Input['MaintenanceWindowScheduleArgs'] schedule: (Updatable) Schedule information of the Maintenance Window
        :param pulumi.Input[str] state: Lifecycle state of the monitored resource.
        :param pulumi.Input[str] time_created: The time the the maintenance window was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the the mainteance window was updated. An RFC3339 formatted datetime string
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if resources_details is not None:
            pulumi.set(__self__, "resources_details", resources_details)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Maintenance Window description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        Lifecycle Details of the Maintenance Window.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance Window name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]]]:
        """
        (Updatable) List of resource Ids which are part of the Maintenance Window
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="resourcesDetails")
    def resources_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourcesDetailArgs']]]]:
        """
        List of resource details that are part of the Maintenance Window.
        """
        return pulumi.get(self, "resources_details")

    @resources_details.setter
    def resources_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowResourcesDetailArgs']]]]):
        pulumi.set(self, "resources_details", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['MaintenanceWindowScheduleArgs']]:
        """
        (Updatable) Schedule information of the Maintenance Window
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['MaintenanceWindowScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Lifecycle state of the monitored resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time the the maintenance window was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time the the mainteance window was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class MaintenanceWindow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourceArgs', 'MaintenanceWindowResourceArgsDict']]]]] = None,
                 schedule: Optional[pulumi.Input[Union['MaintenanceWindowScheduleArgs', 'MaintenanceWindowScheduleArgsDict']]] = None,
                 __props__=None):
        """
        This resource provides the Maintenance Window resource in Oracle Cloud Infrastructure Stack Monitoring service.

        Creates a new Maintenance Window for the given resources. It will create also the
        Alarms Suppression for each alarm that the resource migth trigger.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_maintenance_window = oci.stack_monitoring.MaintenanceWindow("test_maintenance_window",
            compartment_id=compartment_id,
            name=maintenance_window_name,
            resources=[{
                "resource_id": test_resource["id"],
                "are_members_included": maintenance_window_resources_are_members_included,
            }],
            schedule={
                "schedule_type": maintenance_window_schedule_schedule_type,
                "maintenance_window_duration": maintenance_window_schedule_maintenance_window_duration,
                "maintenance_window_recurrences": maintenance_window_schedule_maintenance_window_recurrences,
                "time_maintenance_window_end": maintenance_window_schedule_time_maintenance_window_end,
                "time_maintenance_window_start": maintenance_window_schedule_time_maintenance_window_start,
            },
            description=maintenance_window_description)
        ```

        ## Import

        MaintenanceWindows can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:StackMonitoring/maintenanceWindow:MaintenanceWindow test_maintenance_window "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[str] description: (Updatable) Maintenance Window description.
        :param pulumi.Input[str] name: Maintenance Window name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourceArgs', 'MaintenanceWindowResourceArgsDict']]]] resources: (Updatable) List of resource Ids which are part of the Maintenance Window
        :param pulumi.Input[Union['MaintenanceWindowScheduleArgs', 'MaintenanceWindowScheduleArgsDict']] schedule: (Updatable) Schedule information of the Maintenance Window
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MaintenanceWindowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Maintenance Window resource in Oracle Cloud Infrastructure Stack Monitoring service.

        Creates a new Maintenance Window for the given resources. It will create also the
        Alarms Suppression for each alarm that the resource migth trigger.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_maintenance_window = oci.stack_monitoring.MaintenanceWindow("test_maintenance_window",
            compartment_id=compartment_id,
            name=maintenance_window_name,
            resources=[{
                "resource_id": test_resource["id"],
                "are_members_included": maintenance_window_resources_are_members_included,
            }],
            schedule={
                "schedule_type": maintenance_window_schedule_schedule_type,
                "maintenance_window_duration": maintenance_window_schedule_maintenance_window_duration,
                "maintenance_window_recurrences": maintenance_window_schedule_maintenance_window_recurrences,
                "time_maintenance_window_end": maintenance_window_schedule_time_maintenance_window_end,
                "time_maintenance_window_start": maintenance_window_schedule_time_maintenance_window_start,
            },
            description=maintenance_window_description)
        ```

        ## Import

        MaintenanceWindows can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:StackMonitoring/maintenanceWindow:MaintenanceWindow test_maintenance_window "id"
        ```

        :param str resource_name: The name of the resource.
        :param MaintenanceWindowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MaintenanceWindowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourceArgs', 'MaintenanceWindowResourceArgsDict']]]]] = None,
                 schedule: Optional[pulumi.Input[Union['MaintenanceWindowScheduleArgs', 'MaintenanceWindowScheduleArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MaintenanceWindowArgs.__new__(MaintenanceWindowArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["resources_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(MaintenanceWindow, __self__).__init__(
            'oci:StackMonitoring/maintenanceWindow:MaintenanceWindow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourceArgs', 'MaintenanceWindowResourceArgsDict']]]]] = None,
            resources_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourcesDetailArgs', 'MaintenanceWindowResourcesDetailArgsDict']]]]] = None,
            schedule: Optional[pulumi.Input[Union['MaintenanceWindowScheduleArgs', 'MaintenanceWindowScheduleArgsDict']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'MaintenanceWindow':
        """
        Get an existing MaintenanceWindow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[str] description: (Updatable) Maintenance Window description.
        :param pulumi.Input[str] lifecycle_details: Lifecycle Details of the Maintenance Window.
        :param pulumi.Input[str] name: Maintenance Window name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourceArgs', 'MaintenanceWindowResourceArgsDict']]]] resources: (Updatable) List of resource Ids which are part of the Maintenance Window
        :param pulumi.Input[Sequence[pulumi.Input[Union['MaintenanceWindowResourcesDetailArgs', 'MaintenanceWindowResourcesDetailArgsDict']]]] resources_details: List of resource details that are part of the Maintenance Window.
        :param pulumi.Input[Union['MaintenanceWindowScheduleArgs', 'MaintenanceWindowScheduleArgsDict']] schedule: (Updatable) Schedule information of the Maintenance Window
        :param pulumi.Input[str] state: Lifecycle state of the monitored resource.
        :param pulumi.Input[str] time_created: The time the the maintenance window was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the the mainteance window was updated. An RFC3339 formatted datetime string
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MaintenanceWindowState.__new__(_MaintenanceWindowState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["description"] = description
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["name"] = name
        __props__.__dict__["resources"] = resources
        __props__.__dict__["resources_details"] = resources_details
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return MaintenanceWindow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) Maintenance Window description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[str]:
        """
        Lifecycle Details of the Maintenance Window.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Maintenance Window name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.MaintenanceWindowResource']]:
        """
        (Updatable) List of resource Ids which are part of the Maintenance Window
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="resourcesDetails")
    def resources_details(self) -> pulumi.Output[Sequence['outputs.MaintenanceWindowResourcesDetail']]:
        """
        List of resource details that are part of the Maintenance Window.
        """
        return pulumi.get(self, "resources_details")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.MaintenanceWindowSchedule']:
        """
        (Updatable) Schedule information of the Maintenance Window
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Lifecycle state of the monitored resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time the the maintenance window was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time the the mainteance window was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

