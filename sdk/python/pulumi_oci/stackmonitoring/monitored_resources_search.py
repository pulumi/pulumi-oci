# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MonitoredResourcesSearchArgs', 'MonitoredResourcesSearch']

@pulumi.input_type
class MonitoredResourcesSearchArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 exclude_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 host_name_contains: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 management_agent_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_contains: Optional[pulumi.Input[str]] = None,
                 property_equals: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resource_time_zone: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_created_less_than: Optional[pulumi.Input[str]] = None,
                 time_updated_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_updated_less_than: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MonitoredResourcesSearch resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        if exclude_fields is not None:
            pulumi.set(__self__, "exclude_fields", exclude_fields)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_contains is not None:
            pulumi.set(__self__, "host_name_contains", host_name_contains)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_contains is not None:
            pulumi.set(__self__, "name_contains", name_contains)
        if property_equals is not None:
            pulumi.set(__self__, "property_equals", property_equals)
        if resource_time_zone is not None:
            pulumi.set(__self__, "resource_time_zone", resource_time_zone)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created_greater_than_or_equal_to is not None:
            pulumi.set(__self__, "time_created_greater_than_or_equal_to", time_created_greater_than_or_equal_to)
        if time_created_less_than is not None:
            pulumi.set(__self__, "time_created_less_than", time_created_less_than)
        if time_updated_greater_than_or_equal_to is not None:
            pulumi.set(__self__, "time_updated_greater_than_or_equal_to", time_updated_greater_than_or_equal_to)
        if time_updated_less_than is not None:
            pulumi.set(__self__, "time_updated_less_than", time_updated_less_than)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="excludeFields")
    def exclude_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_fields")

    @exclude_fields.setter
    def exclude_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_fields", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hostNameContains")
    def host_name_contains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name_contains")

    @host_name_contains.setter
    def host_name_contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_contains", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_agent_id")

    @management_agent_id.setter
    def management_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_agent_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameContains")
    def name_contains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_contains")

    @name_contains.setter
    def name_contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_contains", value)

    @property
    @pulumi.getter(name="propertyEquals")
    def property_equals(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "property_equals")

    @property_equals.setter
    def property_equals(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "property_equals", value)

    @property
    @pulumi.getter(name="resourceTimeZone")
    def resource_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_time_zone")

    @resource_time_zone.setter
    def resource_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_time_zone", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreatedGreaterThanOrEqualTo")
    def time_created_greater_than_or_equal_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created_greater_than_or_equal_to")

    @time_created_greater_than_or_equal_to.setter
    def time_created_greater_than_or_equal_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created_greater_than_or_equal_to", value)

    @property
    @pulumi.getter(name="timeCreatedLessThan")
    def time_created_less_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created_less_than")

    @time_created_less_than.setter
    def time_created_less_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created_less_than", value)

    @property
    @pulumi.getter(name="timeUpdatedGreaterThanOrEqualTo")
    def time_updated_greater_than_or_equal_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated_greater_than_or_equal_to")

    @time_updated_greater_than_or_equal_to.setter
    def time_updated_greater_than_or_equal_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_greater_than_or_equal_to", value)

    @property
    @pulumi.getter(name="timeUpdatedLessThan")
    def time_updated_less_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated_less_than")

    @time_updated_less_than.setter
    def time_updated_less_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_less_than", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _MonitoredResourcesSearchState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 exclude_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 host_name_contains: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredResourcesSearchItemArgs']]]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 management_agent_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_contains: Optional[pulumi.Input[str]] = None,
                 property_equals: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resource_time_zone: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_created_less_than: Optional[pulumi.Input[str]] = None,
                 time_updated_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_updated_less_than: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MonitoredResourcesSearch resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if exclude_fields is not None:
            pulumi.set(__self__, "exclude_fields", exclude_fields)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_contains is not None:
            pulumi.set(__self__, "host_name_contains", host_name_contains)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_contains is not None:
            pulumi.set(__self__, "name_contains", name_contains)
        if property_equals is not None:
            pulumi.set(__self__, "property_equals", property_equals)
        if resource_time_zone is not None:
            pulumi.set(__self__, "resource_time_zone", resource_time_zone)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created_greater_than_or_equal_to is not None:
            pulumi.set(__self__, "time_created_greater_than_or_equal_to", time_created_greater_than_or_equal_to)
        if time_created_less_than is not None:
            pulumi.set(__self__, "time_created_less_than", time_created_less_than)
        if time_updated_greater_than_or_equal_to is not None:
            pulumi.set(__self__, "time_updated_greater_than_or_equal_to", time_updated_greater_than_or_equal_to)
        if time_updated_less_than is not None:
            pulumi.set(__self__, "time_updated_less_than", time_updated_less_than)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="excludeFields")
    def exclude_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_fields")

    @exclude_fields.setter
    def exclude_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_fields", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hostNameContains")
    def host_name_contains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name_contains")

    @host_name_contains.setter
    def host_name_contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_contains", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredResourcesSearchItemArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredResourcesSearchItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_agent_id")

    @management_agent_id.setter
    def management_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_agent_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameContains")
    def name_contains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name_contains")

    @name_contains.setter
    def name_contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_contains", value)

    @property
    @pulumi.getter(name="propertyEquals")
    def property_equals(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "property_equals")

    @property_equals.setter
    def property_equals(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "property_equals", value)

    @property
    @pulumi.getter(name="resourceTimeZone")
    def resource_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_time_zone")

    @resource_time_zone.setter
    def resource_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_time_zone", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreatedGreaterThanOrEqualTo")
    def time_created_greater_than_or_equal_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created_greater_than_or_equal_to")

    @time_created_greater_than_or_equal_to.setter
    def time_created_greater_than_or_equal_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created_greater_than_or_equal_to", value)

    @property
    @pulumi.getter(name="timeCreatedLessThan")
    def time_created_less_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created_less_than")

    @time_created_less_than.setter
    def time_created_less_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created_less_than", value)

    @property
    @pulumi.getter(name="timeUpdatedGreaterThanOrEqualTo")
    def time_updated_greater_than_or_equal_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated_greater_than_or_equal_to")

    @time_updated_greater_than_or_equal_to.setter
    def time_updated_greater_than_or_equal_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_greater_than_or_equal_to", value)

    @property
    @pulumi.getter(name="timeUpdatedLessThan")
    def time_updated_less_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated_less_than")

    @time_updated_less_than.setter
    def time_updated_less_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_less_than", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class MonitoredResourcesSearch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 exclude_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 host_name_contains: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 management_agent_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_contains: Optional[pulumi.Input[str]] = None,
                 property_equals: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resource_time_zone: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_created_less_than: Optional[pulumi.Input[str]] = None,
                 time_updated_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_updated_less_than: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MonitoredResourcesSearch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitoredResourcesSearchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MonitoredResourcesSearch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MonitoredResourcesSearchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitoredResourcesSearchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 exclude_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 host_name_contains: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 management_agent_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_contains: Optional[pulumi.Input[str]] = None,
                 property_equals: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resource_time_zone: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_created_less_than: Optional[pulumi.Input[str]] = None,
                 time_updated_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
                 time_updated_less_than: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitoredResourcesSearchArgs.__new__(MonitoredResourcesSearchArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["exclude_fields"] = exclude_fields
            __props__.__dict__["external_id"] = external_id
            __props__.__dict__["fields"] = fields
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["host_name_contains"] = host_name_contains
            __props__.__dict__["license"] = license
            __props__.__dict__["management_agent_id"] = management_agent_id
            __props__.__dict__["name"] = name
            __props__.__dict__["name_contains"] = name_contains
            __props__.__dict__["property_equals"] = property_equals
            __props__.__dict__["resource_time_zone"] = resource_time_zone
            __props__.__dict__["state"] = state
            __props__.__dict__["time_created_greater_than_or_equal_to"] = time_created_greater_than_or_equal_to
            __props__.__dict__["time_created_less_than"] = time_created_less_than
            __props__.__dict__["time_updated_greater_than_or_equal_to"] = time_updated_greater_than_or_equal_to
            __props__.__dict__["time_updated_less_than"] = time_updated_less_than
            __props__.__dict__["type"] = type
            __props__.__dict__["items"] = None
        super(MonitoredResourcesSearch, __self__).__init__(
            'oci:StackMonitoring/monitoredResourcesSearch:MonitoredResourcesSearch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            exclude_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            host_name_contains: Optional[pulumi.Input[str]] = None,
            items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitoredResourcesSearchItemArgs']]]]] = None,
            license: Optional[pulumi.Input[str]] = None,
            management_agent_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_contains: Optional[pulumi.Input[str]] = None,
            property_equals: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            resource_time_zone: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
            time_created_less_than: Optional[pulumi.Input[str]] = None,
            time_updated_greater_than_or_equal_to: Optional[pulumi.Input[str]] = None,
            time_updated_less_than: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'MonitoredResourcesSearch':
        """
        Get an existing MonitoredResourcesSearch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitoredResourcesSearchState.__new__(_MonitoredResourcesSearchState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["exclude_fields"] = exclude_fields
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["fields"] = fields
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["host_name_contains"] = host_name_contains
        __props__.__dict__["items"] = items
        __props__.__dict__["license"] = license
        __props__.__dict__["management_agent_id"] = management_agent_id
        __props__.__dict__["name"] = name
        __props__.__dict__["name_contains"] = name_contains
        __props__.__dict__["property_equals"] = property_equals
        __props__.__dict__["resource_time_zone"] = resource_time_zone
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created_greater_than_or_equal_to"] = time_created_greater_than_or_equal_to
        __props__.__dict__["time_created_less_than"] = time_created_less_than
        __props__.__dict__["time_updated_greater_than_or_equal_to"] = time_updated_greater_than_or_equal_to
        __props__.__dict__["time_updated_less_than"] = time_updated_less_than
        __props__.__dict__["type"] = type
        return MonitoredResourcesSearch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="excludeFields")
    def exclude_fields(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "exclude_fields")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostNameContains")
    def host_name_contains(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "host_name_contains")

    @property
    @pulumi.getter
    def items(self) -> pulumi.Output[Optional[Sequence['outputs.MonitoredResourcesSearchItem']]]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameContains")
    def name_contains(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name_contains")

    @property
    @pulumi.getter(name="propertyEquals")
    def property_equals(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "property_equals")

    @property
    @pulumi.getter(name="resourceTimeZone")
    def resource_time_zone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_time_zone")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreatedGreaterThanOrEqualTo")
    def time_created_greater_than_or_equal_to(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeCreatedLessThan")
    def time_created_less_than(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created_less_than")

    @property
    @pulumi.getter(name="timeUpdatedGreaterThanOrEqualTo")
    def time_updated_greater_than_or_equal_to(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeUpdatedLessThan")
    def time_updated_less_than(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated_less_than")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "type")

