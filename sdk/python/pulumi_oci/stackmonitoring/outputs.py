# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DiscoveryJobDiscoveryDetails',
    'DiscoveryJobDiscoveryDetailsCredentials',
    'DiscoveryJobDiscoveryDetailsCredentialsItem',
    'DiscoveryJobDiscoveryDetailsCredentialsItemProperties',
    'DiscoveryJobDiscoveryDetailsProperties',
    'DiscoveryJobDiscoveryDetailsTags',
    'MetricExtensionEnabledOnResource',
    'MetricExtensionMetricList',
    'MetricExtensionQueryProperties',
    'MetricExtensionQueryPropertiesInParamDetail',
    'MetricExtensionQueryPropertiesOutParamDetails',
    'MetricExtensionQueryPropertiesScriptDetails',
    'MetricExtensionQueryPropertiesSqlDetails',
    'MonitoredResourceAdditionalAlias',
    'MonitoredResourceAdditionalAliasCredential',
    'MonitoredResourceAdditionalCredential',
    'MonitoredResourceAdditionalCredentialProperty',
    'MonitoredResourceAliases',
    'MonitoredResourceAliasesCredential',
    'MonitoredResourceCredentials',
    'MonitoredResourceCredentialsProperty',
    'MonitoredResourceDatabaseConnectionDetails',
    'MonitoredResourceProperty',
    'MonitoredResourceTaskTaskDetails',
    'MonitoredResourceTypeMetadata',
    'MonitoredResourceTypeMetadataUniquePropertySet',
    'MonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail',
    'MonitoredResourcesAssociateMonitoredResourceSourceResourceDetail',
    'MonitoredResourcesListMemberItem',
    'MonitoredResourcesSearchAssociationItem',
    'MonitoredResourcesSearchAssociationItemDestinationResourceDetail',
    'MonitoredResourcesSearchAssociationItemSourceResourceDetail',
    'MonitoredResourcesSearchItem',
    'MonitoredResourcesSearchItemProperty',
    'GetBaselineableMetricsBaselineableMetricSummaryCollectionResult',
    'GetBaselineableMetricsBaselineableMetricSummaryCollectionItemResult',
    'GetBaselineableMetricsEvaluateDataPointResult',
    'GetBaselineableMetricsEvaluateItemResult',
    'GetBaselineableMetricsEvaluateItemDataPointResult',
    'GetBaselineableMetricsEvaluateItemEvaluationDataPointResult',
    'GetBaselineableMetricsEvaluateItemTrainingDataPointResult',
    'GetBaselineableMetricsFilterResult',
    'GetConfigsConfigCollectionResult',
    'GetConfigsConfigCollectionItemResult',
    'GetConfigsFilterResult',
    'GetDiscoveryJobDiscoveryDetailResult',
    'GetDiscoveryJobDiscoveryDetailCredentialResult',
    'GetDiscoveryJobDiscoveryDetailCredentialItemResult',
    'GetDiscoveryJobDiscoveryDetailCredentialItemPropertyResult',
    'GetDiscoveryJobDiscoveryDetailPropertyResult',
    'GetDiscoveryJobDiscoveryDetailTagResult',
    'GetDiscoveryJobLogsDiscoveryJobLogCollectionResult',
    'GetDiscoveryJobLogsDiscoveryJobLogCollectionItemResult',
    'GetDiscoveryJobLogsFilterResult',
    'GetDiscoveryJobsDiscoveryJobCollectionResult',
    'GetDiscoveryJobsDiscoveryJobCollectionItemResult',
    'GetDiscoveryJobsFilterResult',
    'GetMetricExtensionEnabledOnResourceResult',
    'GetMetricExtensionMetricListResult',
    'GetMetricExtensionQueryPropertyResult',
    'GetMetricExtensionQueryPropertyInParamDetailResult',
    'GetMetricExtensionQueryPropertyOutParamDetailResult',
    'GetMetricExtensionQueryPropertyScriptDetailResult',
    'GetMetricExtensionQueryPropertySqlDetailResult',
    'GetMetricExtensionsFilterResult',
    'GetMetricExtensionsMetricExtensionCollectionResult',
    'GetMetricExtensionsMetricExtensionCollectionItemResult',
    'GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResourceResult',
    'GetMetricExtensionsMetricExtensionCollectionItemMetricListResult',
    'GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyResult',
    'GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetailResult',
    'GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetailResult',
    'GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetailResult',
    'GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetailResult',
    'GetMonitoredResourceAdditionalAliasResult',
    'GetMonitoredResourceAdditionalAliasCredentialResult',
    'GetMonitoredResourceAdditionalCredentialResult',
    'GetMonitoredResourceAdditionalCredentialPropertyResult',
    'GetMonitoredResourceAliasResult',
    'GetMonitoredResourceAliasCredentialResult',
    'GetMonitoredResourceCredentialResult',
    'GetMonitoredResourceCredentialPropertyResult',
    'GetMonitoredResourceDatabaseConnectionDetailResult',
    'GetMonitoredResourcePropertyResult',
    'GetMonitoredResourceTaskTaskDetailResult',
    'GetMonitoredResourceTasksFilterResult',
    'GetMonitoredResourceTasksMonitoredResourceTasksCollectionResult',
    'GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemResult',
    'GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetailResult',
    'GetMonitoredResourceTypeMetadataResult',
    'GetMonitoredResourceTypeMetadataUniquePropertySetResult',
    'GetMonitoredResourceTypesFilterResult',
    'GetMonitoredResourceTypesMonitoredResourceTypesCollectionResult',
    'GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemResult',
    'GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataResult',
    'GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySetResult',
    'GetMonitoredResourcesFilterResult',
    'GetMonitoredResourcesMonitoredResourceCollectionResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasCredentialResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialPropertyResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemAliasResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemAliasCredentialResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemCredentialResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemCredentialPropertyResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemDatabaseConnectionDetailResult',
    'GetMonitoredResourcesMonitoredResourceCollectionItemPropertyResult',
]

@pulumi.output_type
class DiscoveryJobDiscoveryDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentId":
            suggest = "agent_id"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobDiscoveryDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobDiscoveryDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobDiscoveryDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_id: str,
                 properties: 'outputs.DiscoveryJobDiscoveryDetailsProperties',
                 resource_name: str,
                 resource_type: str,
                 credentials: Optional['outputs.DiscoveryJobDiscoveryDetailsCredentials'] = None,
                 license: Optional[str] = None,
                 tags: Optional['outputs.DiscoveryJobDiscoveryDetailsTags'] = None):
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> str:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.DiscoveryJobDiscoveryDetailsProperties':
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.DiscoveryJobDiscoveryDetailsCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def tags(self) -> Optional['outputs.DiscoveryJobDiscoveryDetailsTags']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class DiscoveryJobDiscoveryDetailsCredentials(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DiscoveryJobDiscoveryDetailsCredentialsItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DiscoveryJobDiscoveryDetailsCredentialsItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DiscoveryJobDiscoveryDetailsCredentialsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialName":
            suggest = "credential_name"
        elif key == "credentialType":
            suggest = "credential_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobDiscoveryDetailsCredentialsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobDiscoveryDetailsCredentialsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobDiscoveryDetailsCredentialsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_name: str,
                 credential_type: str,
                 properties: 'outputs.DiscoveryJobDiscoveryDetailsCredentialsItemProperties'):
        pulumi.set(__self__, "credential_name", credential_name)
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> str:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.DiscoveryJobDiscoveryDetailsCredentialsItemProperties':
        return pulumi.get(self, "properties")


@pulumi.output_type
class DiscoveryJobDiscoveryDetailsCredentialsItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertiesMap":
            suggest = "properties_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobDiscoveryDetailsCredentialsItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobDiscoveryDetailsCredentialsItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobDiscoveryDetailsCredentialsItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 properties_map: Optional[Mapping[str, Any]] = None):
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties_map")


@pulumi.output_type
class DiscoveryJobDiscoveryDetailsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertiesMap":
            suggest = "properties_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobDiscoveryDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobDiscoveryDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobDiscoveryDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 properties_map: Optional[Mapping[str, Any]] = None):
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties_map")


@pulumi.output_type
class DiscoveryJobDiscoveryDetailsTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertiesMap":
            suggest = "properties_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobDiscoveryDetailsTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobDiscoveryDetailsTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobDiscoveryDetailsTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 properties_map: Optional[Mapping[str, Any]] = None):
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties_map")


@pulumi.output_type
class MetricExtensionEnabledOnResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricExtensionEnabledOnResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricExtensionEnabledOnResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricExtensionEnabledOnResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: Optional[str] = None):
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class MetricExtensionMetricList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "computeExpression":
            suggest = "compute_expression"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "isDimension":
            suggest = "is_dimension"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "metricCategory":
            suggest = "metric_category"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricExtensionMetricList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricExtensionMetricList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricExtensionMetricList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 name: str,
                 compute_expression: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_dimension: Optional[bool] = None,
                 is_hidden: Optional[bool] = None,
                 metric_category: Optional[str] = None,
                 unit: Optional[str] = None):
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "name", name)
        if compute_expression is not None:
            pulumi.set(__self__, "compute_expression", compute_expression)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_dimension is not None:
            pulumi.set(__self__, "is_dimension", is_dimension)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if metric_category is not None:
            pulumi.set(__self__, "metric_category", metric_category)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="computeExpression")
    def compute_expression(self) -> Optional[str]:
        return pulumi.get(self, "compute_expression")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isDimension")
    def is_dimension(self) -> Optional[bool]:
        return pulumi.get(self, "is_dimension")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter(name="metricCategory")
    def metric_category(self) -> Optional[str]:
        return pulumi.get(self, "metric_category")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class MetricExtensionQueryProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectionMethod":
            suggest = "collection_method"
        elif key == "autoRowPrefix":
            suggest = "auto_row_prefix"
        elif key == "identityMetric":
            suggest = "identity_metric"
        elif key == "inParamDetails":
            suggest = "in_param_details"
        elif key == "isMetricServiceEnabled":
            suggest = "is_metric_service_enabled"
        elif key == "jmxAttributes":
            suggest = "jmx_attributes"
        elif key == "managedBeanQuery":
            suggest = "managed_bean_query"
        elif key == "outParamDetails":
            suggest = "out_param_details"
        elif key == "scriptDetails":
            suggest = "script_details"
        elif key == "sqlDetails":
            suggest = "sql_details"
        elif key == "sqlType":
            suggest = "sql_type"
        elif key == "startsWith":
            suggest = "starts_with"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricExtensionQueryProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricExtensionQueryProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricExtensionQueryProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection_method: str,
                 arguments: Optional[str] = None,
                 auto_row_prefix: Optional[str] = None,
                 command: Optional[str] = None,
                 delimiter: Optional[str] = None,
                 identity_metric: Optional[str] = None,
                 in_param_details: Optional[Sequence['outputs.MetricExtensionQueryPropertiesInParamDetail']] = None,
                 is_metric_service_enabled: Optional[bool] = None,
                 jmx_attributes: Optional[str] = None,
                 managed_bean_query: Optional[str] = None,
                 out_param_details: Optional['outputs.MetricExtensionQueryPropertiesOutParamDetails'] = None,
                 script_details: Optional['outputs.MetricExtensionQueryPropertiesScriptDetails'] = None,
                 sql_details: Optional['outputs.MetricExtensionQueryPropertiesSqlDetails'] = None,
                 sql_type: Optional[str] = None,
                 starts_with: Optional[str] = None):
        pulumi.set(__self__, "collection_method", collection_method)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if auto_row_prefix is not None:
            pulumi.set(__self__, "auto_row_prefix", auto_row_prefix)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if identity_metric is not None:
            pulumi.set(__self__, "identity_metric", identity_metric)
        if in_param_details is not None:
            pulumi.set(__self__, "in_param_details", in_param_details)
        if is_metric_service_enabled is not None:
            pulumi.set(__self__, "is_metric_service_enabled", is_metric_service_enabled)
        if jmx_attributes is not None:
            pulumi.set(__self__, "jmx_attributes", jmx_attributes)
        if managed_bean_query is not None:
            pulumi.set(__self__, "managed_bean_query", managed_bean_query)
        if out_param_details is not None:
            pulumi.set(__self__, "out_param_details", out_param_details)
        if script_details is not None:
            pulumi.set(__self__, "script_details", script_details)
        if sql_details is not None:
            pulumi.set(__self__, "sql_details", sql_details)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if starts_with is not None:
            pulumi.set(__self__, "starts_with", starts_with)

    @property
    @pulumi.getter(name="collectionMethod")
    def collection_method(self) -> str:
        return pulumi.get(self, "collection_method")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="autoRowPrefix")
    def auto_row_prefix(self) -> Optional[str]:
        return pulumi.get(self, "auto_row_prefix")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="identityMetric")
    def identity_metric(self) -> Optional[str]:
        return pulumi.get(self, "identity_metric")

    @property
    @pulumi.getter(name="inParamDetails")
    def in_param_details(self) -> Optional[Sequence['outputs.MetricExtensionQueryPropertiesInParamDetail']]:
        return pulumi.get(self, "in_param_details")

    @property
    @pulumi.getter(name="isMetricServiceEnabled")
    def is_metric_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_metric_service_enabled")

    @property
    @pulumi.getter(name="jmxAttributes")
    def jmx_attributes(self) -> Optional[str]:
        return pulumi.get(self, "jmx_attributes")

    @property
    @pulumi.getter(name="managedBeanQuery")
    def managed_bean_query(self) -> Optional[str]:
        return pulumi.get(self, "managed_bean_query")

    @property
    @pulumi.getter(name="outParamDetails")
    def out_param_details(self) -> Optional['outputs.MetricExtensionQueryPropertiesOutParamDetails']:
        return pulumi.get(self, "out_param_details")

    @property
    @pulumi.getter(name="scriptDetails")
    def script_details(self) -> Optional['outputs.MetricExtensionQueryPropertiesScriptDetails']:
        return pulumi.get(self, "script_details")

    @property
    @pulumi.getter(name="sqlDetails")
    def sql_details(self) -> Optional['outputs.MetricExtensionQueryPropertiesSqlDetails']:
        return pulumi.get(self, "sql_details")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[str]:
        return pulumi.get(self, "starts_with")


@pulumi.output_type
class MetricExtensionQueryPropertiesInParamDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inParamPosition":
            suggest = "in_param_position"
        elif key == "inParamValue":
            suggest = "in_param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricExtensionQueryPropertiesInParamDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricExtensionQueryPropertiesInParamDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricExtensionQueryPropertiesInParamDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_param_position: int,
                 in_param_value: str):
        pulumi.set(__self__, "in_param_position", in_param_position)
        pulumi.set(__self__, "in_param_value", in_param_value)

    @property
    @pulumi.getter(name="inParamPosition")
    def in_param_position(self) -> int:
        return pulumi.get(self, "in_param_position")

    @property
    @pulumi.getter(name="inParamValue")
    def in_param_value(self) -> str:
        return pulumi.get(self, "in_param_value")


@pulumi.output_type
class MetricExtensionQueryPropertiesOutParamDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outParamPosition":
            suggest = "out_param_position"
        elif key == "outParamType":
            suggest = "out_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricExtensionQueryPropertiesOutParamDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricExtensionQueryPropertiesOutParamDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricExtensionQueryPropertiesOutParamDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 out_param_position: int,
                 out_param_type: str):
        pulumi.set(__self__, "out_param_position", out_param_position)
        pulumi.set(__self__, "out_param_type", out_param_type)

    @property
    @pulumi.getter(name="outParamPosition")
    def out_param_position(self) -> int:
        return pulumi.get(self, "out_param_position")

    @property
    @pulumi.getter(name="outParamType")
    def out_param_type(self) -> str:
        return pulumi.get(self, "out_param_type")


@pulumi.output_type
class MetricExtensionQueryPropertiesScriptDetails(dict):
    def __init__(__self__, *,
                 content: str,
                 name: str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class MetricExtensionQueryPropertiesSqlDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scriptFileName":
            suggest = "script_file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricExtensionQueryPropertiesSqlDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricExtensionQueryPropertiesSqlDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricExtensionQueryPropertiesSqlDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 script_file_name: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")


@pulumi.output_type
class MonitoredResourceAdditionalAlias(dict):
    def __init__(__self__, *,
                 credential: 'outputs.MonitoredResourceAdditionalAliasCredential',
                 name: str,
                 source: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.MonitoredResourceAdditionalAliasCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")


@pulumi.output_type
class MonitoredResourceAdditionalAliasCredential(dict):
    def __init__(__self__, *,
                 name: str,
                 service: str,
                 source: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")


@pulumi.output_type
class MonitoredResourceAdditionalCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourceAdditionalCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourceAdditionalCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourceAdditionalCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: Optional[str] = None,
                 description: Optional[str] = None,
                 key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.MonitoredResourceAdditionalCredentialProperty']] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.MonitoredResourceAdditionalCredentialProperty']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourceAdditionalCredentialProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoredResourceAliases(dict):
    def __init__(__self__, *,
                 credential: 'outputs.MonitoredResourceAliasesCredential',
                 name: str,
                 source: str):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def credential(self) -> 'outputs.MonitoredResourceAliasesCredential':
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")


@pulumi.output_type
class MonitoredResourceAliasesCredential(dict):
    def __init__(__self__, *,
                 name: str,
                 service: str,
                 source: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")


@pulumi.output_type
class MonitoredResourceCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourceCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourceCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourceCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: Optional[str] = None,
                 description: Optional[str] = None,
                 key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.MonitoredResourceCredentialsProperty']] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.MonitoredResourceCredentialsProperty']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourceCredentialsProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoredResourceDatabaseConnectionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "connectorId":
            suggest = "connector_id"
        elif key == "dbId":
            suggest = "db_id"
        elif key == "dbUniqueName":
            suggest = "db_unique_name"
        elif key == "sslSecretId":
            suggest = "ssl_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourceDatabaseConnectionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourceDatabaseConnectionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourceDatabaseConnectionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 protocol: str,
                 service_name: str,
                 connector_id: Optional[str] = None,
                 db_id: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")


@pulumi.output_type
class MonitoredResourceProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoredResourceTaskTaskDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityProxyMetricCollectionInterval":
            suggest = "availability_proxy_metric_collection_interval"
        elif key == "availabilityProxyMetrics":
            suggest = "availability_proxy_metrics"
        elif key == "resourceGroup":
            suggest = "resource_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourceTaskTaskDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourceTaskTaskDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourceTaskTaskDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 namespace: str,
                 source: str,
                 type: str,
                 availability_proxy_metric_collection_interval: Optional[int] = None,
                 availability_proxy_metrics: Optional[Sequence[str]] = None,
                 resource_group: Optional[str] = None):
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "type", type)
        if availability_proxy_metric_collection_interval is not None:
            pulumi.set(__self__, "availability_proxy_metric_collection_interval", availability_proxy_metric_collection_interval)
        if availability_proxy_metrics is not None:
            pulumi.set(__self__, "availability_proxy_metrics", availability_proxy_metrics)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="availabilityProxyMetricCollectionInterval")
    def availability_proxy_metric_collection_interval(self) -> Optional[int]:
        return pulumi.get(self, "availability_proxy_metric_collection_interval")

    @property
    @pulumi.getter(name="availabilityProxyMetrics")
    def availability_proxy_metrics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "availability_proxy_metrics")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")


@pulumi.output_type
class MonitoredResourceTypeMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentProperties":
            suggest = "agent_properties"
        elif key == "requiredProperties":
            suggest = "required_properties"
        elif key == "uniquePropertySets":
            suggest = "unique_property_sets"
        elif key == "validPropertiesForCreates":
            suggest = "valid_properties_for_creates"
        elif key == "validPropertiesForUpdates":
            suggest = "valid_properties_for_updates"
        elif key == "validPropertyValues":
            suggest = "valid_property_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourceTypeMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourceTypeMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourceTypeMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 agent_properties: Optional[Sequence[str]] = None,
                 required_properties: Optional[Sequence[str]] = None,
                 unique_property_sets: Optional[Sequence['outputs.MonitoredResourceTypeMetadataUniquePropertySet']] = None,
                 valid_properties_for_creates: Optional[Sequence[str]] = None,
                 valid_properties_for_updates: Optional[Sequence[str]] = None,
                 valid_property_values: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "format", format)
        if agent_properties is not None:
            pulumi.set(__self__, "agent_properties", agent_properties)
        if required_properties is not None:
            pulumi.set(__self__, "required_properties", required_properties)
        if unique_property_sets is not None:
            pulumi.set(__self__, "unique_property_sets", unique_property_sets)
        if valid_properties_for_creates is not None:
            pulumi.set(__self__, "valid_properties_for_creates", valid_properties_for_creates)
        if valid_properties_for_updates is not None:
            pulumi.set(__self__, "valid_properties_for_updates", valid_properties_for_updates)
        if valid_property_values is not None:
            pulumi.set(__self__, "valid_property_values", valid_property_values)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="agentProperties")
    def agent_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "agent_properties")

    @property
    @pulumi.getter(name="requiredProperties")
    def required_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "required_properties")

    @property
    @pulumi.getter(name="uniquePropertySets")
    def unique_property_sets(self) -> Optional[Sequence['outputs.MonitoredResourceTypeMetadataUniquePropertySet']]:
        return pulumi.get(self, "unique_property_sets")

    @property
    @pulumi.getter(name="validPropertiesForCreates")
    def valid_properties_for_creates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "valid_properties_for_creates")

    @property
    @pulumi.getter(name="validPropertiesForUpdates")
    def valid_properties_for_updates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "valid_properties_for_updates")

    @property
    @pulumi.getter(name="validPropertyValues")
    def valid_property_values(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "valid_property_values")


@pulumi.output_type
class MonitoredResourceTypeMetadataUniquePropertySet(dict):
    def __init__(__self__, *,
                 properties: Sequence[str]):
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Sequence[str]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class MonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourcesAssociateMonitoredResourceSourceResourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesAssociateMonitoredResourceSourceResourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesAssociateMonitoredResourceSourceResourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesAssociateMonitoredResourceSourceResourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourcesListMemberItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "parentId":
            suggest = "parent_id"
        elif key == "resourceDisplayName":
            suggest = "resource_display_name"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "systemTags":
            suggest = "system_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesListMemberItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesListMemberItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesListMemberItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 external_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host_name: Optional[str] = None,
                 license: Optional[str] = None,
                 parent_id: Optional[str] = None,
                 resource_display_name: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if resource_display_name is not None:
            pulumi.set(__self__, "resource_display_name", resource_display_name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class MonitoredResourcesSearchAssociationItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associationType":
            suggest = "association_type"
        elif key == "destinationResourceDetails":
            suggest = "destination_resource_details"
        elif key == "destinationResourceId":
            suggest = "destination_resource_id"
        elif key == "sourceResourceDetails":
            suggest = "source_resource_details"
        elif key == "sourceResourceId":
            suggest = "source_resource_id"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesSearchAssociationItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesSearchAssociationItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesSearchAssociationItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 association_type: Optional[str] = None,
                 destination_resource_details: Optional[Sequence['outputs.MonitoredResourcesSearchAssociationItemDestinationResourceDetail']] = None,
                 destination_resource_id: Optional[str] = None,
                 source_resource_details: Optional[Sequence['outputs.MonitoredResourcesSearchAssociationItemSourceResourceDetail']] = None,
                 source_resource_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)
        if destination_resource_details is not None:
            pulumi.set(__self__, "destination_resource_details", destination_resource_details)
        if destination_resource_id is not None:
            pulumi.set(__self__, "destination_resource_id", destination_resource_id)
        if source_resource_details is not None:
            pulumi.set(__self__, "source_resource_details", source_resource_details)
        if source_resource_id is not None:
            pulumi.set(__self__, "source_resource_id", source_resource_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional[str]:
        return pulumi.get(self, "association_type")

    @property
    @pulumi.getter(name="destinationResourceDetails")
    def destination_resource_details(self) -> Optional[Sequence['outputs.MonitoredResourcesSearchAssociationItemDestinationResourceDetail']]:
        return pulumi.get(self, "destination_resource_details")

    @property
    @pulumi.getter(name="destinationResourceId")
    def destination_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_resource_id")

    @property
    @pulumi.getter(name="sourceResourceDetails")
    def source_resource_details(self) -> Optional[Sequence['outputs.MonitoredResourcesSearchAssociationItemSourceResourceDetail']]:
        return pulumi.get(self, "source_resource_details")

    @property
    @pulumi.getter(name="sourceResourceId")
    def source_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "source_resource_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class MonitoredResourcesSearchAssociationItemDestinationResourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesSearchAssociationItemDestinationResourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesSearchAssociationItemDestinationResourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesSearchAssociationItemDestinationResourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourcesSearchAssociationItemSourceResourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesSearchAssociationItemSourceResourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesSearchAssociationItemSourceResourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesSearchAssociationItemSourceResourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourcesSearchItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "managementAgentId":
            suggest = "management_agent_id"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoredResourcesSearchItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoredResourcesSearchItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoredResourcesSearchItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 external_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 license: Optional[str] = None,
                 management_agent_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.MonitoredResourcesSearchItemProperty']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.MonitoredResourcesSearchItemProperty']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MonitoredResourcesSearchItemProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBaselineableMetricsBaselineableMetricSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBaselineableMetricsBaselineableMetricSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBaselineableMetricsBaselineableMetricSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBaselineableMetricsBaselineableMetricSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 column: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_out_of_box: Optional[bool] = None,
                 last_updated_by: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 tenancy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_updated: Optional[str] = None):
        if column is not None:
            pulumi.set(__self__, "column", column)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_out_of_box is not None:
            pulumi.set(__self__, "is_out_of_box", is_out_of_box)
        if last_updated_by is not None:
            pulumi.set(__self__, "last_updated_by", last_updated_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_updated is not None:
            pulumi.set(__self__, "time_last_updated", time_last_updated)

    @property
    @pulumi.getter
    def column(self) -> Optional[str]:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOutOfBox")
    def is_out_of_box(self) -> Optional[bool]:
        return pulumi.get(self, "is_out_of_box")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> Optional[str]:
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastUpdated")
    def time_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_last_updated")


@pulumi.output_type
class GetBaselineableMetricsEvaluateDataPointResult(dict):
    def __init__(__self__, *,
                 anomaly: Optional[float] = None,
                 high: Optional[float] = None,
                 low: Optional[float] = None,
                 timestamp: Optional[str] = None,
                 value: Optional[float] = None):
        if anomaly is not None:
            pulumi.set(__self__, "anomaly", anomaly)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def anomaly(self) -> Optional[float]:
        return pulumi.get(self, "anomaly")

    @property
    @pulumi.getter
    def high(self) -> Optional[float]:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> Optional[float]:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBaselineableMetricsEvaluateItemResult(dict):
    def __init__(__self__, *,
                 evaluation_data_points: Sequence['outputs.GetBaselineableMetricsEvaluateItemEvaluationDataPointResult'],
                 training_data_points: Sequence['outputs.GetBaselineableMetricsEvaluateItemTrainingDataPointResult'],
                 data_points: Optional[Sequence['outputs.GetBaselineableMetricsEvaluateItemDataPointResult']] = None,
                 dimensions: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "evaluation_data_points", evaluation_data_points)
        pulumi.set(__self__, "training_data_points", training_data_points)
        if data_points is not None:
            pulumi.set(__self__, "data_points", data_points)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="evaluationDataPoints")
    def evaluation_data_points(self) -> Sequence['outputs.GetBaselineableMetricsEvaluateItemEvaluationDataPointResult']:
        return pulumi.get(self, "evaluation_data_points")

    @property
    @pulumi.getter(name="trainingDataPoints")
    def training_data_points(self) -> Sequence['outputs.GetBaselineableMetricsEvaluateItemTrainingDataPointResult']:
        return pulumi.get(self, "training_data_points")

    @property
    @pulumi.getter(name="dataPoints")
    def data_points(self) -> Optional[Sequence['outputs.GetBaselineableMetricsEvaluateItemDataPointResult']]:
        return pulumi.get(self, "data_points")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetBaselineableMetricsEvaluateItemDataPointResult(dict):
    def __init__(__self__, *,
                 anomaly: Optional[float] = None,
                 high: Optional[float] = None,
                 low: Optional[float] = None,
                 timestamp: Optional[str] = None,
                 value: Optional[float] = None):
        if anomaly is not None:
            pulumi.set(__self__, "anomaly", anomaly)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def anomaly(self) -> Optional[float]:
        return pulumi.get(self, "anomaly")

    @property
    @pulumi.getter
    def high(self) -> Optional[float]:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> Optional[float]:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBaselineableMetricsEvaluateItemEvaluationDataPointResult(dict):
    def __init__(__self__, *,
                 timestamp: str,
                 value: float):
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBaselineableMetricsEvaluateItemTrainingDataPointResult(dict):
    def __init__(__self__, *,
                 timestamp: str,
                 value: float):
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBaselineableMetricsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetConfigsConfigCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetConfigsConfigCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetConfigsConfigCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConfigsConfigCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 config_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 license: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoveryJobDiscoveryDetailResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 credentials: Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailCredentialResult']] = None,
                 license: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailPropertyResult']] = None,
                 resource_name: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailTagResult']] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailTagResult']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDiscoveryJobDiscoveryDetailCredentialResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailCredentialItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailCredentialItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryJobDiscoveryDetailCredentialItemResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailCredentialItemPropertyResult']] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetDiscoveryJobDiscoveryDetailCredentialItemPropertyResult']]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDiscoveryJobDiscoveryDetailCredentialItemPropertyResult(dict):
    def __init__(__self__, *,
                 properties_map: Optional[Mapping[str, Any]] = None):
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties_map")


@pulumi.output_type
class GetDiscoveryJobDiscoveryDetailPropertyResult(dict):
    def __init__(__self__, *,
                 properties_map: Optional[Mapping[str, Any]] = None):
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties_map")


@pulumi.output_type
class GetDiscoveryJobDiscoveryDetailTagResult(dict):
    def __init__(__self__, *,
                 properties_map: Optional[Mapping[str, Any]] = None):
        if properties_map is not None:
            pulumi.set(__self__, "properties_map", properties_map)

    @property
    @pulumi.getter(name="propertiesMap")
    def properties_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties_map")


@pulumi.output_type
class GetDiscoveryJobLogsDiscoveryJobLogCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDiscoveryJobLogsDiscoveryJobLogCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDiscoveryJobLogsDiscoveryJobLogCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryJobLogsDiscoveryJobLogCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 log_message: Optional[str] = None,
                 log_type: Optional[str] = None,
                 time_created: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log_message is not None:
            pulumi.set(__self__, "log_message", log_message)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logMessage")
    def log_message(self) -> Optional[str]:
        return pulumi.get(self, "log_message")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[str]:
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDiscoveryJobLogsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoveryJobsDiscoveryJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDiscoveryJobsDiscoveryJobCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDiscoveryJobsDiscoveryJobCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryJobsDiscoveryJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 discovery_type: str,
                 id: str,
                 resource_name: str,
                 resource_type: str,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 status_message: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 tenant_id: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "discovery_type", discovery_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="discoveryType")
    def discovery_type(self) -> str:
        return pulumi.get(self, "discovery_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetDiscoveryJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMetricExtensionEnabledOnResourceResult(dict):
    def __init__(__self__, *,
                 resource_id: Optional[str] = None):
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetMetricExtensionMetricListResult(dict):
    def __init__(__self__, *,
                 compute_expression: Optional[str] = None,
                 data_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_dimension: Optional[bool] = None,
                 is_hidden: Optional[bool] = None,
                 metric_category: Optional[str] = None,
                 name: Optional[str] = None,
                 unit: Optional[str] = None):
        if compute_expression is not None:
            pulumi.set(__self__, "compute_expression", compute_expression)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_dimension is not None:
            pulumi.set(__self__, "is_dimension", is_dimension)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if metric_category is not None:
            pulumi.set(__self__, "metric_category", metric_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="computeExpression")
    def compute_expression(self) -> Optional[str]:
        return pulumi.get(self, "compute_expression")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isDimension")
    def is_dimension(self) -> Optional[bool]:
        return pulumi.get(self, "is_dimension")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter(name="metricCategory")
    def metric_category(self) -> Optional[str]:
        return pulumi.get(self, "metric_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetMetricExtensionQueryPropertyResult(dict):
    def __init__(__self__, *,
                 arguments: Optional[str] = None,
                 auto_row_prefix: Optional[str] = None,
                 collection_method: Optional[str] = None,
                 command: Optional[str] = None,
                 delimiter: Optional[str] = None,
                 identity_metric: Optional[str] = None,
                 in_param_details: Optional[Sequence['outputs.GetMetricExtensionQueryPropertyInParamDetailResult']] = None,
                 is_metric_service_enabled: Optional[bool] = None,
                 jmx_attributes: Optional[str] = None,
                 managed_bean_query: Optional[str] = None,
                 out_param_details: Optional[Sequence['outputs.GetMetricExtensionQueryPropertyOutParamDetailResult']] = None,
                 script_details: Optional[Sequence['outputs.GetMetricExtensionQueryPropertyScriptDetailResult']] = None,
                 sql_details: Optional[Sequence['outputs.GetMetricExtensionQueryPropertySqlDetailResult']] = None,
                 sql_type: Optional[str] = None,
                 starts_with: Optional[str] = None):
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if auto_row_prefix is not None:
            pulumi.set(__self__, "auto_row_prefix", auto_row_prefix)
        if collection_method is not None:
            pulumi.set(__self__, "collection_method", collection_method)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if identity_metric is not None:
            pulumi.set(__self__, "identity_metric", identity_metric)
        if in_param_details is not None:
            pulumi.set(__self__, "in_param_details", in_param_details)
        if is_metric_service_enabled is not None:
            pulumi.set(__self__, "is_metric_service_enabled", is_metric_service_enabled)
        if jmx_attributes is not None:
            pulumi.set(__self__, "jmx_attributes", jmx_attributes)
        if managed_bean_query is not None:
            pulumi.set(__self__, "managed_bean_query", managed_bean_query)
        if out_param_details is not None:
            pulumi.set(__self__, "out_param_details", out_param_details)
        if script_details is not None:
            pulumi.set(__self__, "script_details", script_details)
        if sql_details is not None:
            pulumi.set(__self__, "sql_details", sql_details)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if starts_with is not None:
            pulumi.set(__self__, "starts_with", starts_with)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="autoRowPrefix")
    def auto_row_prefix(self) -> Optional[str]:
        return pulumi.get(self, "auto_row_prefix")

    @property
    @pulumi.getter(name="collectionMethod")
    def collection_method(self) -> Optional[str]:
        return pulumi.get(self, "collection_method")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="identityMetric")
    def identity_metric(self) -> Optional[str]:
        return pulumi.get(self, "identity_metric")

    @property
    @pulumi.getter(name="inParamDetails")
    def in_param_details(self) -> Optional[Sequence['outputs.GetMetricExtensionQueryPropertyInParamDetailResult']]:
        return pulumi.get(self, "in_param_details")

    @property
    @pulumi.getter(name="isMetricServiceEnabled")
    def is_metric_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_metric_service_enabled")

    @property
    @pulumi.getter(name="jmxAttributes")
    def jmx_attributes(self) -> Optional[str]:
        return pulumi.get(self, "jmx_attributes")

    @property
    @pulumi.getter(name="managedBeanQuery")
    def managed_bean_query(self) -> Optional[str]:
        return pulumi.get(self, "managed_bean_query")

    @property
    @pulumi.getter(name="outParamDetails")
    def out_param_details(self) -> Optional[Sequence['outputs.GetMetricExtensionQueryPropertyOutParamDetailResult']]:
        return pulumi.get(self, "out_param_details")

    @property
    @pulumi.getter(name="scriptDetails")
    def script_details(self) -> Optional[Sequence['outputs.GetMetricExtensionQueryPropertyScriptDetailResult']]:
        return pulumi.get(self, "script_details")

    @property
    @pulumi.getter(name="sqlDetails")
    def sql_details(self) -> Optional[Sequence['outputs.GetMetricExtensionQueryPropertySqlDetailResult']]:
        return pulumi.get(self, "sql_details")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[str]:
        return pulumi.get(self, "starts_with")


@pulumi.output_type
class GetMetricExtensionQueryPropertyInParamDetailResult(dict):
    def __init__(__self__, *,
                 in_param_position: Optional[int] = None,
                 in_param_value: Optional[str] = None):
        if in_param_position is not None:
            pulumi.set(__self__, "in_param_position", in_param_position)
        if in_param_value is not None:
            pulumi.set(__self__, "in_param_value", in_param_value)

    @property
    @pulumi.getter(name="inParamPosition")
    def in_param_position(self) -> Optional[int]:
        return pulumi.get(self, "in_param_position")

    @property
    @pulumi.getter(name="inParamValue")
    def in_param_value(self) -> Optional[str]:
        return pulumi.get(self, "in_param_value")


@pulumi.output_type
class GetMetricExtensionQueryPropertyOutParamDetailResult(dict):
    def __init__(__self__, *,
                 out_param_position: Optional[int] = None,
                 out_param_type: Optional[str] = None):
        if out_param_position is not None:
            pulumi.set(__self__, "out_param_position", out_param_position)
        if out_param_type is not None:
            pulumi.set(__self__, "out_param_type", out_param_type)

    @property
    @pulumi.getter(name="outParamPosition")
    def out_param_position(self) -> Optional[int]:
        return pulumi.get(self, "out_param_position")

    @property
    @pulumi.getter(name="outParamType")
    def out_param_type(self) -> Optional[str]:
        return pulumi.get(self, "out_param_type")


@pulumi.output_type
class GetMetricExtensionQueryPropertyScriptDetailResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMetricExtensionQueryPropertySqlDetailResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 script_file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")


@pulumi.output_type
class GetMetricExtensionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemResult(dict):
    def __init__(__self__, *,
                 collection_method: Optional[str] = None,
                 collection_recurrences: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 enabled_on_resources: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResourceResult']] = None,
                 enabled_on_resources_count: Optional[int] = None,
                 id: Optional[str] = None,
                 last_updated_by: Optional[str] = None,
                 metric_lists: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemMetricListResult']] = None,
                 name: Optional[str] = None,
                 publish_trigger: Optional[bool] = None,
                 query_properties: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyResult']] = None,
                 resource_type: Optional[str] = None,
                 resource_uri: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if collection_method is not None:
            pulumi.set(__self__, "collection_method", collection_method)
        if collection_recurrences is not None:
            pulumi.set(__self__, "collection_recurrences", collection_recurrences)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled_on_resources is not None:
            pulumi.set(__self__, "enabled_on_resources", enabled_on_resources)
        if enabled_on_resources_count is not None:
            pulumi.set(__self__, "enabled_on_resources_count", enabled_on_resources_count)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_updated_by is not None:
            pulumi.set(__self__, "last_updated_by", last_updated_by)
        if metric_lists is not None:
            pulumi.set(__self__, "metric_lists", metric_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if publish_trigger is not None:
            pulumi.set(__self__, "publish_trigger", publish_trigger)
        if query_properties is not None:
            pulumi.set(__self__, "query_properties", query_properties)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_uri is not None:
            pulumi.set(__self__, "resource_uri", resource_uri)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="collectionMethod")
    def collection_method(self) -> Optional[str]:
        return pulumi.get(self, "collection_method")

    @property
    @pulumi.getter(name="collectionRecurrences")
    def collection_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "collection_recurrences")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enabledOnResources")
    def enabled_on_resources(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResourceResult']]:
        return pulumi.get(self, "enabled_on_resources")

    @property
    @pulumi.getter(name="enabledOnResourcesCount")
    def enabled_on_resources_count(self) -> Optional[int]:
        return pulumi.get(self, "enabled_on_resources_count")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> Optional[str]:
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter(name="metricLists")
    def metric_lists(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemMetricListResult']]:
        return pulumi.get(self, "metric_lists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publishTrigger")
    def publish_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "publish_trigger")

    @property
    @pulumi.getter(name="queryProperties")
    def query_properties(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyResult']]:
        return pulumi.get(self, "query_properties")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceUri")
    def resource_uri(self) -> Optional[str]:
        return pulumi.get(self, "resource_uri")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemEnabledOnResourceResult(dict):
    def __init__(__self__, *,
                 resource_id: Optional[str] = None):
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemMetricListResult(dict):
    def __init__(__self__, *,
                 compute_expression: Optional[str] = None,
                 data_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_dimension: Optional[bool] = None,
                 is_hidden: Optional[bool] = None,
                 metric_category: Optional[str] = None,
                 name: Optional[str] = None,
                 unit: Optional[str] = None):
        if compute_expression is not None:
            pulumi.set(__self__, "compute_expression", compute_expression)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_dimension is not None:
            pulumi.set(__self__, "is_dimension", is_dimension)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if metric_category is not None:
            pulumi.set(__self__, "metric_category", metric_category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="computeExpression")
    def compute_expression(self) -> Optional[str]:
        return pulumi.get(self, "compute_expression")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isDimension")
    def is_dimension(self) -> Optional[bool]:
        return pulumi.get(self, "is_dimension")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter(name="metricCategory")
    def metric_category(self) -> Optional[str]:
        return pulumi.get(self, "metric_category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyResult(dict):
    def __init__(__self__, *,
                 arguments: Optional[str] = None,
                 auto_row_prefix: Optional[str] = None,
                 collection_method: Optional[str] = None,
                 command: Optional[str] = None,
                 delimiter: Optional[str] = None,
                 identity_metric: Optional[str] = None,
                 in_param_details: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetailResult']] = None,
                 is_metric_service_enabled: Optional[bool] = None,
                 jmx_attributes: Optional[str] = None,
                 managed_bean_query: Optional[str] = None,
                 out_param_details: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetailResult']] = None,
                 script_details: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetailResult']] = None,
                 sql_details: Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetailResult']] = None,
                 sql_type: Optional[str] = None,
                 starts_with: Optional[str] = None):
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if auto_row_prefix is not None:
            pulumi.set(__self__, "auto_row_prefix", auto_row_prefix)
        if collection_method is not None:
            pulumi.set(__self__, "collection_method", collection_method)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if identity_metric is not None:
            pulumi.set(__self__, "identity_metric", identity_metric)
        if in_param_details is not None:
            pulumi.set(__self__, "in_param_details", in_param_details)
        if is_metric_service_enabled is not None:
            pulumi.set(__self__, "is_metric_service_enabled", is_metric_service_enabled)
        if jmx_attributes is not None:
            pulumi.set(__self__, "jmx_attributes", jmx_attributes)
        if managed_bean_query is not None:
            pulumi.set(__self__, "managed_bean_query", managed_bean_query)
        if out_param_details is not None:
            pulumi.set(__self__, "out_param_details", out_param_details)
        if script_details is not None:
            pulumi.set(__self__, "script_details", script_details)
        if sql_details is not None:
            pulumi.set(__self__, "sql_details", sql_details)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if starts_with is not None:
            pulumi.set(__self__, "starts_with", starts_with)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="autoRowPrefix")
    def auto_row_prefix(self) -> Optional[str]:
        return pulumi.get(self, "auto_row_prefix")

    @property
    @pulumi.getter(name="collectionMethod")
    def collection_method(self) -> Optional[str]:
        return pulumi.get(self, "collection_method")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="identityMetric")
    def identity_metric(self) -> Optional[str]:
        return pulumi.get(self, "identity_metric")

    @property
    @pulumi.getter(name="inParamDetails")
    def in_param_details(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetailResult']]:
        return pulumi.get(self, "in_param_details")

    @property
    @pulumi.getter(name="isMetricServiceEnabled")
    def is_metric_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_metric_service_enabled")

    @property
    @pulumi.getter(name="jmxAttributes")
    def jmx_attributes(self) -> Optional[str]:
        return pulumi.get(self, "jmx_attributes")

    @property
    @pulumi.getter(name="managedBeanQuery")
    def managed_bean_query(self) -> Optional[str]:
        return pulumi.get(self, "managed_bean_query")

    @property
    @pulumi.getter(name="outParamDetails")
    def out_param_details(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetailResult']]:
        return pulumi.get(self, "out_param_details")

    @property
    @pulumi.getter(name="scriptDetails")
    def script_details(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetailResult']]:
        return pulumi.get(self, "script_details")

    @property
    @pulumi.getter(name="sqlDetails")
    def sql_details(self) -> Optional[Sequence['outputs.GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetailResult']]:
        return pulumi.get(self, "sql_details")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[str]:
        return pulumi.get(self, "starts_with")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetailResult(dict):
    def __init__(__self__, *,
                 in_param_position: Optional[int] = None,
                 in_param_value: Optional[str] = None):
        if in_param_position is not None:
            pulumi.set(__self__, "in_param_position", in_param_position)
        if in_param_value is not None:
            pulumi.set(__self__, "in_param_value", in_param_value)

    @property
    @pulumi.getter(name="inParamPosition")
    def in_param_position(self) -> Optional[int]:
        return pulumi.get(self, "in_param_position")

    @property
    @pulumi.getter(name="inParamValue")
    def in_param_value(self) -> Optional[str]:
        return pulumi.get(self, "in_param_value")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetailResult(dict):
    def __init__(__self__, *,
                 out_param_position: Optional[int] = None,
                 out_param_type: Optional[str] = None):
        if out_param_position is not None:
            pulumi.set(__self__, "out_param_position", out_param_position)
        if out_param_type is not None:
            pulumi.set(__self__, "out_param_type", out_param_type)

    @property
    @pulumi.getter(name="outParamPosition")
    def out_param_position(self) -> Optional[int]:
        return pulumi.get(self, "out_param_position")

    @property
    @pulumi.getter(name="outParamType")
    def out_param_type(self) -> Optional[str]:
        return pulumi.get(self, "out_param_type")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetailResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetailResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 script_file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        return pulumi.get(self, "script_file_name")


@pulumi.output_type
class GetMonitoredResourceAdditionalAliasResult(dict):
    def __init__(__self__, *,
                 credentials: Optional[Sequence['outputs.GetMonitoredResourceAdditionalAliasCredentialResult']] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetMonitoredResourceAdditionalAliasCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourceAdditionalAliasCredentialResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 service: Optional[str] = None,
                 source: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourceAdditionalCredentialResult(dict):
    def __init__(__self__, *,
                 credential_type: Optional[str] = None,
                 description: Optional[str] = None,
                 key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetMonitoredResourceAdditionalCredentialPropertyResult']] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetMonitoredResourceAdditionalCredentialPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourceAdditionalCredentialPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMonitoredResourceAliasResult(dict):
    def __init__(__self__, *,
                 credentials: Optional[Sequence['outputs.GetMonitoredResourceAliasCredentialResult']] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetMonitoredResourceAliasCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourceAliasCredentialResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 service: Optional[str] = None,
                 source: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourceCredentialResult(dict):
    def __init__(__self__, *,
                 credential_type: Optional[str] = None,
                 description: Optional[str] = None,
                 key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetMonitoredResourceCredentialPropertyResult']] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetMonitoredResourceCredentialPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourceCredentialPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMonitoredResourceDatabaseConnectionDetailResult(dict):
    def __init__(__self__, *,
                 connector_id: Optional[str] = None,
                 db_id: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None):
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")


@pulumi.output_type
class GetMonitoredResourcePropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMonitoredResourceTaskTaskDetailResult(dict):
    def __init__(__self__, *,
                 availability_proxy_metric_collection_interval: Optional[int] = None,
                 availability_proxy_metrics: Optional[Sequence[str]] = None,
                 namespace: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if availability_proxy_metric_collection_interval is not None:
            pulumi.set(__self__, "availability_proxy_metric_collection_interval", availability_proxy_metric_collection_interval)
        if availability_proxy_metrics is not None:
            pulumi.set(__self__, "availability_proxy_metrics", availability_proxy_metrics)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityProxyMetricCollectionInterval")
    def availability_proxy_metric_collection_interval(self) -> Optional[int]:
        return pulumi.get(self, "availability_proxy_metric_collection_interval")

    @property
    @pulumi.getter(name="availabilityProxyMetrics")
    def availability_proxy_metrics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "availability_proxy_metrics")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourceTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitoredResourceTasksMonitoredResourceTasksCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 task_details: Optional[Sequence['outputs.GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetailResult']] = None,
                 tenant_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 work_request_ids: Optional[Sequence[str]] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if task_details is not None:
            pulumi.set(__self__, "task_details", task_details)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if work_request_ids is not None:
            pulumi.set(__self__, "work_request_ids", work_request_ids)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="taskDetails")
    def task_details(self) -> Optional[Sequence['outputs.GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetailResult']]:
        return pulumi.get(self, "task_details")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="workRequestIds")
    def work_request_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "work_request_ids")


@pulumi.output_type
class GetMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetailResult(dict):
    def __init__(__self__, *,
                 availability_proxy_metric_collection_interval: Optional[int] = None,
                 availability_proxy_metrics: Optional[Sequence[str]] = None,
                 namespace: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if availability_proxy_metric_collection_interval is not None:
            pulumi.set(__self__, "availability_proxy_metric_collection_interval", availability_proxy_metric_collection_interval)
        if availability_proxy_metrics is not None:
            pulumi.set(__self__, "availability_proxy_metrics", availability_proxy_metrics)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityProxyMetricCollectionInterval")
    def availability_proxy_metric_collection_interval(self) -> Optional[int]:
        return pulumi.get(self, "availability_proxy_metric_collection_interval")

    @property
    @pulumi.getter(name="availabilityProxyMetrics")
    def availability_proxy_metrics(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "availability_proxy_metrics")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourceTypeMetadataResult(dict):
    def __init__(__self__, *,
                 agent_properties: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 required_properties: Optional[Sequence[str]] = None,
                 unique_property_sets: Optional[Sequence['outputs.GetMonitoredResourceTypeMetadataUniquePropertySetResult']] = None,
                 valid_properties_for_creates: Optional[Sequence[str]] = None,
                 valid_properties_for_updates: Optional[Sequence[str]] = None,
                 valid_property_values: Optional[Mapping[str, Any]] = None):
        if agent_properties is not None:
            pulumi.set(__self__, "agent_properties", agent_properties)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if required_properties is not None:
            pulumi.set(__self__, "required_properties", required_properties)
        if unique_property_sets is not None:
            pulumi.set(__self__, "unique_property_sets", unique_property_sets)
        if valid_properties_for_creates is not None:
            pulumi.set(__self__, "valid_properties_for_creates", valid_properties_for_creates)
        if valid_properties_for_updates is not None:
            pulumi.set(__self__, "valid_properties_for_updates", valid_properties_for_updates)
        if valid_property_values is not None:
            pulumi.set(__self__, "valid_property_values", valid_property_values)

    @property
    @pulumi.getter(name="agentProperties")
    def agent_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "agent_properties")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="requiredProperties")
    def required_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "required_properties")

    @property
    @pulumi.getter(name="uniquePropertySets")
    def unique_property_sets(self) -> Optional[Sequence['outputs.GetMonitoredResourceTypeMetadataUniquePropertySetResult']]:
        return pulumi.get(self, "unique_property_sets")

    @property
    @pulumi.getter(name="validPropertiesForCreates")
    def valid_properties_for_creates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "valid_properties_for_creates")

    @property
    @pulumi.getter(name="validPropertiesForUpdates")
    def valid_properties_for_updates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "valid_properties_for_updates")

    @property
    @pulumi.getter(name="validPropertyValues")
    def valid_property_values(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "valid_property_values")


@pulumi.output_type
class GetMonitoredResourceTypeMetadataUniquePropertySetResult(dict):
    def __init__(__self__, *,
                 properties: Optional[Sequence[str]] = None):
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetMonitoredResourceTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitoredResourceTypesMonitoredResourceTypesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 metadatas: Optional[Sequence['outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataResult']] = None,
                 metric_namespace: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[str]:
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 agent_properties: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 required_properties: Optional[Sequence[str]] = None,
                 unique_property_sets: Optional[Sequence['outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySetResult']] = None,
                 valid_properties_for_creates: Optional[Sequence[str]] = None,
                 valid_properties_for_updates: Optional[Sequence[str]] = None,
                 valid_property_values: Optional[Mapping[str, Any]] = None):
        if agent_properties is not None:
            pulumi.set(__self__, "agent_properties", agent_properties)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if required_properties is not None:
            pulumi.set(__self__, "required_properties", required_properties)
        if unique_property_sets is not None:
            pulumi.set(__self__, "unique_property_sets", unique_property_sets)
        if valid_properties_for_creates is not None:
            pulumi.set(__self__, "valid_properties_for_creates", valid_properties_for_creates)
        if valid_properties_for_updates is not None:
            pulumi.set(__self__, "valid_properties_for_updates", valid_properties_for_updates)
        if valid_property_values is not None:
            pulumi.set(__self__, "valid_property_values", valid_property_values)

    @property
    @pulumi.getter(name="agentProperties")
    def agent_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "agent_properties")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="requiredProperties")
    def required_properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "required_properties")

    @property
    @pulumi.getter(name="uniquePropertySets")
    def unique_property_sets(self) -> Optional[Sequence['outputs.GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySetResult']]:
        return pulumi.get(self, "unique_property_sets")

    @property
    @pulumi.getter(name="validPropertiesForCreates")
    def valid_properties_for_creates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "valid_properties_for_creates")

    @property
    @pulumi.getter(name="validPropertiesForUpdates")
    def valid_properties_for_updates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "valid_properties_for_updates")

    @property
    @pulumi.getter(name="validPropertyValues")
    def valid_property_values(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "valid_property_values")


@pulumi.output_type
class GetMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySetResult(dict):
    def __init__(__self__, *,
                 properties: Optional[Sequence[str]] = None):
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetMonitoredResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_aliases: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasResult']] = None,
                 additional_credentials: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialResult']] = None,
                 aliases: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAliasResult']] = None,
                 compartment_id: Optional[str] = None,
                 credentials: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemCredentialResult']] = None,
                 database_connection_details: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemDatabaseConnectionDetailResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 external_id: Optional[str] = None,
                 external_resource_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 license: Optional[str] = None,
                 management_agent_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemPropertyResult']] = None,
                 resource_time_zone: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 tenant_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if additional_aliases is not None:
            pulumi.set(__self__, "additional_aliases", additional_aliases)
        if additional_credentials is not None:
            pulumi.set(__self__, "additional_credentials", additional_credentials)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if database_connection_details is not None:
            pulumi.set(__self__, "database_connection_details", database_connection_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_resource_id is not None:
            pulumi.set(__self__, "external_resource_id", external_resource_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if management_agent_id is not None:
            pulumi.set(__self__, "management_agent_id", management_agent_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if resource_time_zone is not None:
            pulumi.set(__self__, "resource_time_zone", resource_time_zone)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="additionalAliases")
    def additional_aliases(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasResult']]:
        return pulumi.get(self, "additional_aliases")

    @property
    @pulumi.getter(name="additionalCredentials")
    def additional_credentials(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialResult']]:
        return pulumi.get(self, "additional_credentials")

    @property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAliasResult']]:
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="databaseConnectionDetails")
    def database_connection_details(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemDatabaseConnectionDetailResult']]:
        return pulumi.get(self, "database_connection_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalResourceId")
    def external_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "external_resource_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceTimeZone")
    def resource_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "resource_time_zone")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasResult(dict):
    def __init__(__self__, *,
                 credentials: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasCredentialResult']] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasCredentialResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 service: Optional[str] = None,
                 source: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialResult(dict):
    def __init__(__self__, *,
                 credential_type: Optional[str] = None,
                 description: Optional[str] = None,
                 key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialPropertyResult']] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemAliasResult(dict):
    def __init__(__self__, *,
                 credentials: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAliasCredentialResult']] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemAliasCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemAliasCredentialResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 service: Optional[str] = None,
                 source: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemCredentialResult(dict):
    def __init__(__self__, *,
                 credential_type: Optional[str] = None,
                 description: Optional[str] = None,
                 key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemCredentialPropertyResult']] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None):
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetMonitoredResourcesMonitoredResourceCollectionItemCredentialPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemCredentialPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemDatabaseConnectionDetailResult(dict):
    def __init__(__self__, *,
                 connector_id: Optional[str] = None,
                 db_id: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service_name: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None):
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")


@pulumi.output_type
class GetMonitoredResourcesMonitoredResourceCollectionItemPropertyResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


