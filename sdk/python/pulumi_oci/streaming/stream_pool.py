# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamPoolArgs', 'StreamPool']

@pulumi.input_type
class StreamPoolArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 custom_encryption_key: Optional[pulumi.Input['StreamPoolCustomEncryptionKeyArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 kafka_settings: Optional[pulumi.Input['StreamPoolKafkaSettingsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_endpoint_settings: Optional[pulumi.Input['StreamPoolPrivateEndpointSettingsArgs']] = None):
        """
        The set of arguments for constructing a StreamPool resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        if custom_encryption_key is not None:
            pulumi.set(__self__, "custom_encryption_key", custom_encryption_key)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if kafka_settings is not None:
            pulumi.set(__self__, "kafka_settings", kafka_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_endpoint_settings is not None:
            pulumi.set(__self__, "private_endpoint_settings", private_endpoint_settings)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="customEncryptionKey")
    def custom_encryption_key(self) -> Optional[pulumi.Input['StreamPoolCustomEncryptionKeyArgs']]:
        return pulumi.get(self, "custom_encryption_key")

    @custom_encryption_key.setter
    def custom_encryption_key(self, value: Optional[pulumi.Input['StreamPoolCustomEncryptionKeyArgs']]):
        pulumi.set(self, "custom_encryption_key", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="kafkaSettings")
    def kafka_settings(self) -> Optional[pulumi.Input['StreamPoolKafkaSettingsArgs']]:
        return pulumi.get(self, "kafka_settings")

    @kafka_settings.setter
    def kafka_settings(self, value: Optional[pulumi.Input['StreamPoolKafkaSettingsArgs']]):
        pulumi.set(self, "kafka_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateEndpointSettings")
    def private_endpoint_settings(self) -> Optional[pulumi.Input['StreamPoolPrivateEndpointSettingsArgs']]:
        return pulumi.get(self, "private_endpoint_settings")

    @private_endpoint_settings.setter
    def private_endpoint_settings(self, value: Optional[pulumi.Input['StreamPoolPrivateEndpointSettingsArgs']]):
        pulumi.set(self, "private_endpoint_settings", value)


@pulumi.input_type
class _StreamPoolState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 custom_encryption_key: Optional[pulumi.Input['StreamPoolCustomEncryptionKeyArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 endpoint_fqdn: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_private: Optional[pulumi.Input[bool]] = None,
                 kafka_settings: Optional[pulumi.Input['StreamPoolKafkaSettingsArgs']] = None,
                 lifecycle_state_details: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_endpoint_settings: Optional[pulumi.Input['StreamPoolPrivateEndpointSettingsArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamPool resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if custom_encryption_key is not None:
            pulumi.set(__self__, "custom_encryption_key", custom_encryption_key)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if endpoint_fqdn is not None:
            pulumi.set(__self__, "endpoint_fqdn", endpoint_fqdn)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if kafka_settings is not None:
            pulumi.set(__self__, "kafka_settings", kafka_settings)
        if lifecycle_state_details is not None:
            pulumi.set(__self__, "lifecycle_state_details", lifecycle_state_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_endpoint_settings is not None:
            pulumi.set(__self__, "private_endpoint_settings", private_endpoint_settings)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="customEncryptionKey")
    def custom_encryption_key(self) -> Optional[pulumi.Input['StreamPoolCustomEncryptionKeyArgs']]:
        return pulumi.get(self, "custom_encryption_key")

    @custom_encryption_key.setter
    def custom_encryption_key(self, value: Optional[pulumi.Input['StreamPoolCustomEncryptionKeyArgs']]):
        pulumi.set(self, "custom_encryption_key", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="endpointFqdn")
    def endpoint_fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_fqdn")

    @endpoint_fqdn.setter
    def endpoint_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_fqdn", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_private")

    @is_private.setter
    def is_private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_private", value)

    @property
    @pulumi.getter(name="kafkaSettings")
    def kafka_settings(self) -> Optional[pulumi.Input['StreamPoolKafkaSettingsArgs']]:
        return pulumi.get(self, "kafka_settings")

    @kafka_settings.setter
    def kafka_settings(self, value: Optional[pulumi.Input['StreamPoolKafkaSettingsArgs']]):
        pulumi.set(self, "kafka_settings", value)

    @property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_state_details")

    @lifecycle_state_details.setter
    def lifecycle_state_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_state_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateEndpointSettings")
    def private_endpoint_settings(self) -> Optional[pulumi.Input['StreamPoolPrivateEndpointSettingsArgs']]:
        return pulumi.get(self, "private_endpoint_settings")

    @private_endpoint_settings.setter
    def private_endpoint_settings(self, value: Optional[pulumi.Input['StreamPoolPrivateEndpointSettingsArgs']]):
        pulumi.set(self, "private_endpoint_settings", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)


class StreamPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 custom_encryption_key: Optional[pulumi.Input[pulumi.InputType['StreamPoolCustomEncryptionKeyArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 kafka_settings: Optional[pulumi.Input[pulumi.InputType['StreamPoolKafkaSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_endpoint_settings: Optional[pulumi.Input[pulumi.InputType['StreamPoolPrivateEndpointSettingsArgs']]] = None,
                 __props__=None):
        """
        Create a StreamPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StreamPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StreamPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 custom_encryption_key: Optional[pulumi.Input[pulumi.InputType['StreamPoolCustomEncryptionKeyArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 kafka_settings: Optional[pulumi.Input[pulumi.InputType['StreamPoolKafkaSettingsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_endpoint_settings: Optional[pulumi.Input[pulumi.InputType['StreamPoolPrivateEndpointSettingsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamPoolArgs.__new__(StreamPoolArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["custom_encryption_key"] = custom_encryption_key
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["kafka_settings"] = kafka_settings
            __props__.__dict__["name"] = name
            __props__.__dict__["private_endpoint_settings"] = private_endpoint_settings
            __props__.__dict__["endpoint_fqdn"] = None
            __props__.__dict__["is_private"] = None
            __props__.__dict__["lifecycle_state_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        super(StreamPool, __self__).__init__(
            'oci:Streaming/streamPool:StreamPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            custom_encryption_key: Optional[pulumi.Input[pulumi.InputType['StreamPoolCustomEncryptionKeyArgs']]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            endpoint_fqdn: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_private: Optional[pulumi.Input[bool]] = None,
            kafka_settings: Optional[pulumi.Input[pulumi.InputType['StreamPoolKafkaSettingsArgs']]] = None,
            lifecycle_state_details: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_endpoint_settings: Optional[pulumi.Input[pulumi.InputType['StreamPoolPrivateEndpointSettingsArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None) -> 'StreamPool':
        """
        Get an existing StreamPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamPoolState.__new__(_StreamPoolState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["custom_encryption_key"] = custom_encryption_key
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["endpoint_fqdn"] = endpoint_fqdn
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_private"] = is_private
        __props__.__dict__["kafka_settings"] = kafka_settings
        __props__.__dict__["lifecycle_state_details"] = lifecycle_state_details
        __props__.__dict__["name"] = name
        __props__.__dict__["private_endpoint_settings"] = private_endpoint_settings
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        return StreamPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="customEncryptionKey")
    def custom_encryption_key(self) -> pulumi.Output[Optional['outputs.StreamPoolCustomEncryptionKey']]:
        return pulumi.get(self, "custom_encryption_key")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="endpointFqdn")
    def endpoint_fqdn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "endpoint_fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_private")

    @property
    @pulumi.getter(name="kafkaSettings")
    def kafka_settings(self) -> pulumi.Output[Optional['outputs.StreamPoolKafkaSettings']]:
        return pulumi.get(self, "kafka_settings")

    @property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_state_details")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateEndpointSettings")
    def private_endpoint_settings(self) -> pulumi.Output[Optional['outputs.StreamPoolPrivateEndpointSettings']]:
        return pulumi.get(self, "private_endpoint_settings")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

