# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetOrganizationTenanciesResult',
    'AwaitableGetOrganizationTenanciesResult',
    'get_organization_tenancies',
    'get_organization_tenancies_output',
]

@pulumi.output_type
class GetOrganizationTenanciesResult:
    """
    A collection of values returned by getOrganizationTenancies.
    """
    def __init__(__self__, filters=None, id=None, organization_id=None, organization_tenancy_collections=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if organization_tenancy_collections and not isinstance(organization_tenancy_collections, list):
            raise TypeError("Expected argument 'organization_tenancy_collections' to be a list")
        pulumi.set(__self__, "organization_tenancy_collections", organization_tenancy_collections)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetOrganizationTenanciesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="organizationTenancyCollections")
    def organization_tenancy_collections(self) -> Sequence['outputs.GetOrganizationTenanciesOrganizationTenancyCollectionResult']:
        """
        The list of organization_tenancy_collection.
        """
        return pulumi.get(self, "organization_tenancy_collections")


class AwaitableGetOrganizationTenanciesResult(GetOrganizationTenanciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationTenanciesResult(
            filters=self.filters,
            id=self.id,
            organization_id=self.organization_id,
            organization_tenancy_collections=self.organization_tenancy_collections)


def get_organization_tenancies(filters: Optional[Sequence[Union['GetOrganizationTenanciesFilterArgs', 'GetOrganizationTenanciesFilterArgsDict']]] = None,
                               organization_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationTenanciesResult:
    """
    This data source provides the list of Organization Tenancies in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.

    Gets a list of tenancies in the organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_organization_tenancies = oci.Tenantmanagercontrolplane.get_organization_tenancies(organization_id=test_organization["id"])
    ```


    :param str organization_id: OCID of the organization.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Tenantmanagercontrolplane/getOrganizationTenancies:getOrganizationTenancies', __args__, opts=opts, typ=GetOrganizationTenanciesResult).value

    return AwaitableGetOrganizationTenanciesResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        organization_tenancy_collections=pulumi.get(__ret__, 'organization_tenancy_collections'))
def get_organization_tenancies_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetOrganizationTenanciesFilterArgs', 'GetOrganizationTenanciesFilterArgsDict']]]]] = None,
                                      organization_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationTenanciesResult]:
    """
    This data source provides the list of Organization Tenancies in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.

    Gets a list of tenancies in the organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_organization_tenancies = oci.Tenantmanagercontrolplane.get_organization_tenancies(organization_id=test_organization["id"])
    ```


    :param str organization_id: OCID of the organization.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Tenantmanagercontrolplane/getOrganizationTenancies:getOrganizationTenancies', __args__, opts=opts, typ=GetOrganizationTenanciesResult)
    return __ret__.apply(lambda __response__: GetOrganizationTenanciesResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        organization_tenancy_collections=pulumi.get(__response__, 'organization_tenancy_collections')))
