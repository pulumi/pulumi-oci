# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubscriptionAvailableRegionsResult',
    'AwaitableGetSubscriptionAvailableRegionsResult',
    'get_subscription_available_regions',
    'get_subscription_available_regions_output',
]

@pulumi.output_type
class GetSubscriptionAvailableRegionsResult:
    """
    A collection of values returned by getSubscriptionAvailableRegions.
    """
    def __init__(__self__, available_region_collections=None, filters=None, id=None, subscription_id=None):
        if available_region_collections and not isinstance(available_region_collections, list):
            raise TypeError("Expected argument 'available_region_collections' to be a list")
        pulumi.set(__self__, "available_region_collections", available_region_collections)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="availableRegionCollections")
    def available_region_collections(self) -> Sequence['outputs.GetSubscriptionAvailableRegionsAvailableRegionCollectionResult']:
        """
        The list of available_region_collection.
        """
        return pulumi.get(self, "available_region_collections")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSubscriptionAvailableRegionsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")


class AwaitableGetSubscriptionAvailableRegionsResult(GetSubscriptionAvailableRegionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionAvailableRegionsResult(
            available_region_collections=self.available_region_collections,
            filters=self.filters,
            id=self.id,
            subscription_id=self.subscription_id)


def get_subscription_available_regions(filters: Optional[Sequence[Union['GetSubscriptionAvailableRegionsFilterArgs', 'GetSubscriptionAvailableRegionsFilterArgsDict']]] = None,
                                       subscription_id: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionAvailableRegionsResult:
    """
    This data source provides the list of Subscription Available Regions in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.

    List the available regions based on subscription ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_subscription_available_regions = oci.Tenantmanagercontrolplane.get_subscription_available_regions(subscription_id=test_subscription["id"])
    ```


    :param str subscription_id: OCID of the subscription.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions', __args__, opts=opts, typ=GetSubscriptionAvailableRegionsResult).value

    return AwaitableGetSubscriptionAvailableRegionsResult(
        available_region_collections=pulumi.get(__ret__, 'available_region_collections'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'))
def get_subscription_available_regions_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetSubscriptionAvailableRegionsFilterArgs', 'GetSubscriptionAvailableRegionsFilterArgsDict']]]]] = None,
                                              subscription_id: Optional[pulumi.Input[str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubscriptionAvailableRegionsResult]:
    """
    This data source provides the list of Subscription Available Regions in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.

    List the available regions based on subscription ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_subscription_available_regions = oci.Tenantmanagercontrolplane.get_subscription_available_regions(subscription_id=test_subscription["id"])
    ```


    :param str subscription_id: OCID of the subscription.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions', __args__, opts=opts, typ=GetSubscriptionAvailableRegionsResult)
    return __ret__.apply(lambda __response__: GetSubscriptionAvailableRegionsResult(
        available_region_collections=pulumi.get(__response__, 'available_region_collections'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        subscription_id=pulumi.get(__response__, 'subscription_id')))
