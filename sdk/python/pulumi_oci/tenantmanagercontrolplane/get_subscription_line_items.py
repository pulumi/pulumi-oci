# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubscriptionLineItemsResult',
    'AwaitableGetSubscriptionLineItemsResult',
    'get_subscription_line_items',
    'get_subscription_line_items_output',
]

@pulumi.output_type
class GetSubscriptionLineItemsResult:
    """
    A collection of values returned by getSubscriptionLineItems.
    """
    def __init__(__self__, filters=None, id=None, subscription_id=None, subscription_line_item_collections=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if subscription_line_item_collections and not isinstance(subscription_line_item_collections, list):
            raise TypeError("Expected argument 'subscription_line_item_collections' to be a list")
        pulumi.set(__self__, "subscription_line_item_collections", subscription_line_item_collections)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSubscriptionLineItemsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="subscriptionLineItemCollections")
    def subscription_line_item_collections(self) -> Sequence['outputs.GetSubscriptionLineItemsSubscriptionLineItemCollectionResult']:
        """
        The list of subscription_line_item_collection.
        """
        return pulumi.get(self, "subscription_line_item_collections")


class AwaitableGetSubscriptionLineItemsResult(GetSubscriptionLineItemsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionLineItemsResult(
            filters=self.filters,
            id=self.id,
            subscription_id=self.subscription_id,
            subscription_line_item_collections=self.subscription_line_item_collections)


def get_subscription_line_items(filters: Optional[Sequence[Union['GetSubscriptionLineItemsFilterArgs', 'GetSubscriptionLineItemsFilterArgsDict']]] = None,
                                subscription_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionLineItemsResult:
    """
    This data source provides the list of Subscription Line Items in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.

    Lists the line items in a subscription.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_subscription_line_items = oci.Tenantmanagercontrolplane.get_subscription_line_items(subscription_id=test_subscription["id"])
    ```


    :param str subscription_id: OCID of the subscription.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Tenantmanagercontrolplane/getSubscriptionLineItems:getSubscriptionLineItems', __args__, opts=opts, typ=GetSubscriptionLineItemsResult).value

    return AwaitableGetSubscriptionLineItemsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        subscription_line_item_collections=pulumi.get(__ret__, 'subscription_line_item_collections'))
def get_subscription_line_items_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetSubscriptionLineItemsFilterArgs', 'GetSubscriptionLineItemsFilterArgsDict']]]]] = None,
                                       subscription_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubscriptionLineItemsResult]:
    """
    This data source provides the list of Subscription Line Items in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.

    Lists the line items in a subscription.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_subscription_line_items = oci.Tenantmanagercontrolplane.get_subscription_line_items(subscription_id=test_subscription["id"])
    ```


    :param str subscription_id: OCID of the subscription.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Tenantmanagercontrolplane/getSubscriptionLineItems:getSubscriptionLineItems', __args__, opts=opts, typ=GetSubscriptionLineItemsResult)
    return __ret__.apply(lambda __response__: GetSubscriptionLineItemsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        subscription_id=pulumi.get(__response__, 'subscription_id'),
        subscription_line_item_collections=pulumi.get(__response__, 'subscription_line_item_collections')))
