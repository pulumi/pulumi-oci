# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionResult',
    'GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionItemResult',
    'GetAssignedSubscriptionLineItemsFilterResult',
    'GetAssignedSubscriptionPromotionResult',
    'GetAssignedSubscriptionSkusResult',
    'GetAssignedSubscriptionsAssignedSubscriptionCollectionResult',
    'GetAssignedSubscriptionsAssignedSubscriptionCollectionItemResult',
    'GetAssignedSubscriptionsAssignedSubscriptionCollectionItemPromotionResult',
    'GetAssignedSubscriptionsAssignedSubscriptionCollectionItemSkusResult',
    'GetAssignedSubscriptionsFilterResult',
    'GetDomainGovernancesDomainGovernanceCollectionResult',
    'GetDomainGovernancesDomainGovernanceCollectionItemResult',
    'GetDomainGovernancesFilterResult',
    'GetDomainsDomainCollectionResult',
    'GetDomainsDomainCollectionItemResult',
    'GetDomainsFilterResult',
    'GetLinksFilterResult',
    'GetLinksLinkCollectionResult',
    'GetLinksLinkCollectionItemResult',
    'GetOrganizationTenanciesFilterResult',
    'GetOrganizationTenanciesOrganizationTenancyCollectionResult',
    'GetOrganizationTenanciesOrganizationTenancyCollectionItemResult',
    'GetOrganizationsFilterResult',
    'GetOrganizationsOrganizationCollectionResult',
    'GetOrganizationsOrganizationCollectionItemResult',
    'GetRecipientInvitationsFilterResult',
    'GetRecipientInvitationsRecipientInvitationCollectionResult',
    'GetRecipientInvitationsRecipientInvitationCollectionItemResult',
    'GetSenderInvitationsFilterResult',
    'GetSenderInvitationsSenderInvitationCollectionResult',
    'GetSenderInvitationsSenderInvitationCollectionItemResult',
    'GetSubscriptionAvailableRegionsAvailableRegionCollectionResult',
    'GetSubscriptionAvailableRegionsAvailableRegionCollectionItemResult',
    'GetSubscriptionAvailableRegionsFilterResult',
    'GetSubscriptionLineItemsFilterResult',
    'GetSubscriptionLineItemsSubscriptionLineItemCollectionResult',
    'GetSubscriptionLineItemsSubscriptionLineItemCollectionItemResult',
    'GetSubscriptionMappingsFilterResult',
    'GetSubscriptionMappingsSubscriptionMappingCollectionResult',
    'GetSubscriptionMappingsSubscriptionMappingCollectionItemResult',
    'GetSubscriptionPromotionResult',
    'GetSubscriptionSkusResult',
    'GetSubscriptionsFilterResult',
    'GetSubscriptionsSubscriptionCollectionResult',
    'GetSubscriptionsSubscriptionCollectionItemResult',
    'GetSubscriptionsSubscriptionCollectionItemPromotionResult',
    'GetSubscriptionsSubscriptionCollectionItemSkusResult',
]

@pulumi.output_type
class GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionItemResult']):
        """
        :param Sequence['GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionItemArgs'] items: Array containing line item summaries in an assigned subscription.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionItemResult']:
        """
        Array containing line item summaries in an assigned subscription.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAssignedSubscriptionLineItemsAssignedSubscriptionLineItemCollectionItemResult(dict):
    def __init__(__self__, *,
                 billing_model: builtins.str,
                 id: builtins.str,
                 product_code: builtins.str,
                 quantity: builtins.float,
                 system_tags: Mapping[str, builtins.str],
                 time_ended: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str billing_model: Billing model supported by the associated line item.
        :param builtins.str id: Subscription line item identifier.
        :param builtins.str product_code: Product code.
        :param builtins.float quantity: Product number.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_ended: The time the subscription item and associated products should end. An RFC 3339 formatted date and time string.
        :param builtins.str time_started: The time the subscription item and associated products should start. An RFC 3339 formatted date and time string.
        """
        pulumi.set(__self__, "billing_model", billing_model)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_code", product_code)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="billingModel")
    def billing_model(self) -> builtins.str:
        """
        Billing model supported by the associated line item.
        """
        return pulumi.get(self, "billing_model")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Subscription line item identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> builtins.str:
        """
        Product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter
    def quantity(self) -> builtins.float:
        """
        Product number.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The time the subscription item and associated products should end. An RFC 3339 formatted date and time string.
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The time the subscription item and associated products should start. An RFC 3339 formatted date and time string.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAssignedSubscriptionLineItemsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAssignedSubscriptionPromotionResult(dict):
    def __init__(__self__, *,
                 amount: builtins.float,
                 currency_unit: builtins.str,
                 duration: builtins.int,
                 duration_unit: builtins.str,
                 is_intent_to_pay: builtins.bool,
                 status: builtins.str,
                 time_expired: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.float amount: If a subscription is present, indicates the total amount of promotional subscription credits.
        :param builtins.str currency_unit: Currency unit associated with the promotion.
        :param builtins.int duration: Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        :param builtins.str duration_unit: Unit for the duration.
        :param builtins.bool is_intent_to_pay: Speficies whether or not the customer intends to pay after the promotion has expired.
        :param builtins.str status: If a subscription is present, indicates the current status of the subscription promotion.
        :param builtins.str time_expired: Date and time when the promotion ends.
        :param builtins.str time_started: Date and time when the promotion starts.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "currency_unit", currency_unit)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "duration_unit", duration_unit)
        pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_expired", time_expired)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def amount(self) -> builtins.float:
        """
        If a subscription is present, indicates the total amount of promotional subscription credits.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="currencyUnit")
    def currency_unit(self) -> builtins.str:
        """
        Currency unit associated with the promotion.
        """
        return pulumi.get(self, "currency_unit")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        """
        Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="durationUnit")
    def duration_unit(self) -> builtins.str:
        """
        Unit for the duration.
        """
        return pulumi.get(self, "duration_unit")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> builtins.bool:
        """
        Speficies whether or not the customer intends to pay after the promotion has expired.
        """
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        If a subscription is present, indicates the current status of the subscription promotion.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeExpired")
    def time_expired(self) -> builtins.str:
        """
        Date and time when the promotion ends.
        """
        return pulumi.get(self, "time_expired")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        Date and time when the promotion starts.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAssignedSubscriptionSkusResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 end_date: builtins.str,
                 gsi_order_line_id: builtins.str,
                 is_additional_instance: builtins.bool,
                 is_base_service_component: builtins.bool,
                 license_part_description: builtins.str,
                 metric_name: builtins.str,
                 quantity: builtins.int,
                 sku: builtins.str,
                 start_date: builtins.str):
        """
        :param builtins.str description: Description of the stock units.
        :param builtins.str end_date: Date and time when the SKU ended.
        :param builtins.str gsi_order_line_id: Sales order line identifier.
        :param builtins.bool is_additional_instance: Specifies if an additional test instance can be provisioned by the SaaS application.
        :param builtins.bool is_base_service_component: Specifies if the SKU is considered as a parent or child.
        :param builtins.str license_part_description: Description of the covered product belonging to this SKU.
        :param builtins.str metric_name: Base metric for billing the service.
        :param builtins.int quantity: Quantity of the stock units.
        :param builtins.str sku: Stock Keeping Unit (SKU) ID.
        :param builtins.str start_date: Subscription start time.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "gsi_order_line_id", gsi_order_line_id)
        pulumi.set(__self__, "is_additional_instance", is_additional_instance)
        pulumi.set(__self__, "is_base_service_component", is_base_service_component)
        pulumi.set(__self__, "license_part_description", license_part_description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the stock units.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> builtins.str:
        """
        Date and time when the SKU ended.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="gsiOrderLineId")
    def gsi_order_line_id(self) -> builtins.str:
        """
        Sales order line identifier.
        """
        return pulumi.get(self, "gsi_order_line_id")

    @property
    @pulumi.getter(name="isAdditionalInstance")
    def is_additional_instance(self) -> builtins.bool:
        """
        Specifies if an additional test instance can be provisioned by the SaaS application.
        """
        return pulumi.get(self, "is_additional_instance")

    @property
    @pulumi.getter(name="isBaseServiceComponent")
    def is_base_service_component(self) -> builtins.bool:
        """
        Specifies if the SKU is considered as a parent or child.
        """
        return pulumi.get(self, "is_base_service_component")

    @property
    @pulumi.getter(name="licensePartDescription")
    def license_part_description(self) -> builtins.str:
        """
        Description of the covered product belonging to this SKU.
        """
        return pulumi.get(self, "license_part_description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> builtins.str:
        """
        Base metric for billing the service.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def quantity(self) -> builtins.int:
        """
        Quantity of the stock units.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def sku(self) -> builtins.str:
        """
        Stock Keeping Unit (SKU) ID.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> builtins.str:
        """
        Subscription start time.
        """
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetAssignedSubscriptionsAssignedSubscriptionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAssignedSubscriptionsAssignedSubscriptionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAssignedSubscriptionsAssignedSubscriptionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAssignedSubscriptionsAssignedSubscriptionCollectionItemResult(dict):
    def __init__(__self__, *,
                 classic_subscription_id: builtins.str,
                 cloud_amount_currency: builtins.str,
                 compartment_id: builtins.str,
                 csi_number: builtins.str,
                 currency_code: builtins.str,
                 customer_country_code: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 end_date: builtins.str,
                 entity_version: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_classic_subscription: builtins.bool,
                 is_government_subscription: builtins.bool,
                 managed_by: builtins.str,
                 order_ids: Sequence[builtins.str],
                 program_type: builtins.str,
                 promotions: Sequence['outputs.GetAssignedSubscriptionsAssignedSubscriptionCollectionItemPromotionResult'],
                 purchase_entitlement_id: builtins.str,
                 region_assignment: builtins.str,
                 service_name: builtins.str,
                 skuses: Sequence['outputs.GetAssignedSubscriptionsAssignedSubscriptionCollectionItemSkusResult'],
                 start_date: builtins.str,
                 state: builtins.str,
                 subscription_number: builtins.str,
                 subscription_tier: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str classic_subscription_id: Subscription ID.
        :param builtins.str cloud_amount_currency: The currency code for the customer associated with the subscription.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str csi_number: Customer service identifier for the customer associated with the subscription.
        :param builtins.str currency_code: Currency code. For example USD, MXN.
        :param builtins.str customer_country_code: The country code for the customer associated with the subscription.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str end_date: Date and time when the SKU ended.
        :param builtins.str entity_version: The version of the subscription entity.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the subscription.
        :param builtins.bool is_classic_subscription: Specifies whether or not the subscription is legacy.
        :param builtins.bool is_government_subscription: Specifies whether or not the subscription is a government subscription.
        :param builtins.str managed_by: Service or component which is used to provision and manage the subscription.
        :param Sequence[builtins.str] order_ids: List of subscription order OCIDs that contributed to this subscription.
        :param builtins.str program_type: Specifies any program that is associated with the subscription.
        :param Sequence['GetAssignedSubscriptionsAssignedSubscriptionCollectionItemPromotionArgs'] promotions: List of promotions related to the subscription.
        :param builtins.str purchase_entitlement_id: Purchase entitlement ID associated with the subscription.
        :param builtins.str region_assignment: Region for the subscription.
        :param builtins.str service_name: The type of subscription, such as 'UCM', 'SAAS', 'ERP', 'CRM'.
        :param Sequence['GetAssignedSubscriptionsAssignedSubscriptionCollectionItemSkusArgs'] skuses: List of SKUs linked to the subscription.
        :param builtins.str start_date: Subscription start time.
        :param builtins.str state: Lifecycle state of the subscription.
        :param builtins.str subscription_number: Unique Oracle Cloud Subscriptions identifier that is immutable on creation.
        :param builtins.str subscription_tier: Tier for the subscription, whether a free promotion subscription or a paid subscription.
        :param builtins.str time_created: The date and time of creation, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        :param builtins.str time_updated: The date and time of update, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        pulumi.set(__self__, "classic_subscription_id", classic_subscription_id)
        pulumi.set(__self__, "cloud_amount_currency", cloud_amount_currency)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "csi_number", csi_number)
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "customer_country_code", customer_country_code)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "entity_version", entity_version)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_classic_subscription", is_classic_subscription)
        pulumi.set(__self__, "is_government_subscription", is_government_subscription)
        pulumi.set(__self__, "managed_by", managed_by)
        pulumi.set(__self__, "order_ids", order_ids)
        pulumi.set(__self__, "program_type", program_type)
        pulumi.set(__self__, "promotions", promotions)
        pulumi.set(__self__, "purchase_entitlement_id", purchase_entitlement_id)
        pulumi.set(__self__, "region_assignment", region_assignment)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "skuses", skuses)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscription_number", subscription_number)
        pulumi.set(__self__, "subscription_tier", subscription_tier)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="classicSubscriptionId")
    def classic_subscription_id(self) -> builtins.str:
        """
        Subscription ID.
        """
        return pulumi.get(self, "classic_subscription_id")

    @property
    @pulumi.getter(name="cloudAmountCurrency")
    def cloud_amount_currency(self) -> builtins.str:
        """
        The currency code for the customer associated with the subscription.
        """
        return pulumi.get(self, "cloud_amount_currency")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="csiNumber")
    def csi_number(self) -> builtins.str:
        """
        Customer service identifier for the customer associated with the subscription.
        """
        return pulumi.get(self, "csi_number")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> builtins.str:
        """
        Currency code. For example USD, MXN.
        """
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="customerCountryCode")
    def customer_country_code(self) -> builtins.str:
        """
        The country code for the customer associated with the subscription.
        """
        return pulumi.get(self, "customer_country_code")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> builtins.str:
        """
        Date and time when the SKU ended.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> builtins.str:
        """
        The version of the subscription entity.
        """
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the subscription.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isClassicSubscription")
    def is_classic_subscription(self) -> builtins.bool:
        """
        Specifies whether or not the subscription is legacy.
        """
        return pulumi.get(self, "is_classic_subscription")

    @property
    @pulumi.getter(name="isGovernmentSubscription")
    def is_government_subscription(self) -> builtins.bool:
        """
        Specifies whether or not the subscription is a government subscription.
        """
        return pulumi.get(self, "is_government_subscription")

    @property
    @pulumi.getter(name="managedBy")
    def managed_by(self) -> builtins.str:
        """
        Service or component which is used to provision and manage the subscription.
        """
        return pulumi.get(self, "managed_by")

    @property
    @pulumi.getter(name="orderIds")
    def order_ids(self) -> Sequence[builtins.str]:
        """
        List of subscription order OCIDs that contributed to this subscription.
        """
        return pulumi.get(self, "order_ids")

    @property
    @pulumi.getter(name="programType")
    def program_type(self) -> builtins.str:
        """
        Specifies any program that is associated with the subscription.
        """
        return pulumi.get(self, "program_type")

    @property
    @pulumi.getter
    def promotions(self) -> Sequence['outputs.GetAssignedSubscriptionsAssignedSubscriptionCollectionItemPromotionResult']:
        """
        List of promotions related to the subscription.
        """
        return pulumi.get(self, "promotions")

    @property
    @pulumi.getter(name="purchaseEntitlementId")
    def purchase_entitlement_id(self) -> builtins.str:
        """
        Purchase entitlement ID associated with the subscription.
        """
        return pulumi.get(self, "purchase_entitlement_id")

    @property
    @pulumi.getter(name="regionAssignment")
    def region_assignment(self) -> builtins.str:
        """
        Region for the subscription.
        """
        return pulumi.get(self, "region_assignment")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        The type of subscription, such as 'UCM', 'SAAS', 'ERP', 'CRM'.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def skuses(self) -> Sequence['outputs.GetAssignedSubscriptionsAssignedSubscriptionCollectionItemSkusResult']:
        """
        List of SKUs linked to the subscription.
        """
        return pulumi.get(self, "skuses")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> builtins.str:
        """
        Subscription start time.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle state of the subscription.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionNumber")
    def subscription_number(self) -> builtins.str:
        """
        Unique Oracle Cloud Subscriptions identifier that is immutable on creation.
        """
        return pulumi.get(self, "subscription_number")

    @property
    @pulumi.getter(name="subscriptionTier")
    def subscription_tier(self) -> builtins.str:
        """
        Tier for the subscription, whether a free promotion subscription or a paid subscription.
        """
        return pulumi.get(self, "subscription_tier")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time of creation, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time of update, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAssignedSubscriptionsAssignedSubscriptionCollectionItemPromotionResult(dict):
    def __init__(__self__, *,
                 amount: builtins.float,
                 currency_unit: builtins.str,
                 duration: builtins.int,
                 duration_unit: builtins.str,
                 is_intent_to_pay: builtins.bool,
                 status: builtins.str,
                 time_expired: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.float amount: If a subscription is present, indicates the total amount of promotional subscription credits.
        :param builtins.str currency_unit: Currency unit associated with the promotion.
        :param builtins.int duration: Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        :param builtins.str duration_unit: Unit for the duration.
        :param builtins.bool is_intent_to_pay: Speficies whether or not the customer intends to pay after the promotion has expired.
        :param builtins.str status: If a subscription is present, indicates the current status of the subscription promotion.
        :param builtins.str time_expired: Date and time when the promotion ends.
        :param builtins.str time_started: Date and time when the promotion starts.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "currency_unit", currency_unit)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "duration_unit", duration_unit)
        pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_expired", time_expired)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def amount(self) -> builtins.float:
        """
        If a subscription is present, indicates the total amount of promotional subscription credits.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="currencyUnit")
    def currency_unit(self) -> builtins.str:
        """
        Currency unit associated with the promotion.
        """
        return pulumi.get(self, "currency_unit")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        """
        Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="durationUnit")
    def duration_unit(self) -> builtins.str:
        """
        Unit for the duration.
        """
        return pulumi.get(self, "duration_unit")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> builtins.bool:
        """
        Speficies whether or not the customer intends to pay after the promotion has expired.
        """
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        If a subscription is present, indicates the current status of the subscription promotion.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeExpired")
    def time_expired(self) -> builtins.str:
        """
        Date and time when the promotion ends.
        """
        return pulumi.get(self, "time_expired")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        Date and time when the promotion starts.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAssignedSubscriptionsAssignedSubscriptionCollectionItemSkusResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 end_date: builtins.str,
                 gsi_order_line_id: builtins.str,
                 is_additional_instance: builtins.bool,
                 is_base_service_component: builtins.bool,
                 license_part_description: builtins.str,
                 metric_name: builtins.str,
                 quantity: builtins.int,
                 sku: builtins.str,
                 start_date: builtins.str):
        """
        :param builtins.str description: Description of the stock units.
        :param builtins.str end_date: Date and time when the SKU ended.
        :param builtins.str gsi_order_line_id: Sales order line identifier.
        :param builtins.bool is_additional_instance: Specifies if an additional test instance can be provisioned by the SaaS application.
        :param builtins.bool is_base_service_component: Specifies if the SKU is considered as a parent or child.
        :param builtins.str license_part_description: Description of the covered product belonging to this SKU.
        :param builtins.str metric_name: Base metric for billing the service.
        :param builtins.int quantity: Quantity of the stock units.
        :param builtins.str sku: Stock Keeping Unit (SKU) ID.
        :param builtins.str start_date: Subscription start time.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "gsi_order_line_id", gsi_order_line_id)
        pulumi.set(__self__, "is_additional_instance", is_additional_instance)
        pulumi.set(__self__, "is_base_service_component", is_base_service_component)
        pulumi.set(__self__, "license_part_description", license_part_description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the stock units.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> builtins.str:
        """
        Date and time when the SKU ended.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="gsiOrderLineId")
    def gsi_order_line_id(self) -> builtins.str:
        """
        Sales order line identifier.
        """
        return pulumi.get(self, "gsi_order_line_id")

    @property
    @pulumi.getter(name="isAdditionalInstance")
    def is_additional_instance(self) -> builtins.bool:
        """
        Specifies if an additional test instance can be provisioned by the SaaS application.
        """
        return pulumi.get(self, "is_additional_instance")

    @property
    @pulumi.getter(name="isBaseServiceComponent")
    def is_base_service_component(self) -> builtins.bool:
        """
        Specifies if the SKU is considered as a parent or child.
        """
        return pulumi.get(self, "is_base_service_component")

    @property
    @pulumi.getter(name="licensePartDescription")
    def license_part_description(self) -> builtins.str:
        """
        Description of the covered product belonging to this SKU.
        """
        return pulumi.get(self, "license_part_description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> builtins.str:
        """
        Base metric for billing the service.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def quantity(self) -> builtins.int:
        """
        Quantity of the stock units.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def sku(self) -> builtins.str:
        """
        Stock Keeping Unit (SKU) ID.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> builtins.str:
        """
        Subscription start time.
        """
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetAssignedSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainGovernancesDomainGovernanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDomainGovernancesDomainGovernanceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDomainGovernancesDomainGovernanceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDomainGovernancesDomainGovernanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 domain_id: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_governance_enabled: builtins.bool,
                 ons_subscription_id: builtins.str,
                 ons_topic_id: builtins.str,
                 owner_id: builtins.str,
                 state: builtins.str,
                 subscription_email: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str domain_id: The domain OCID.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the domain governance entity.
        :param builtins.bool is_governance_enabled: Indicates whether governance is enabled for this domain.
        :param builtins.str ons_subscription_id: The ONS subscription associated with this domain governance entity.
        :param builtins.str ons_topic_id: The ONS topic associated with this domain governance entity.
        :param builtins.str owner_id: The OCID of the tenancy that owns this domain governance entity.
        :param builtins.str state: The lifecycle state of the resource.
        :param builtins.str subscription_email: Email address to be used to notify the user, and that the ONS subscription will be created with.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: Date-time when this domain governance was created. An RFC 3339-formatted date and time string.
        :param builtins.str time_updated: Date-time when this domain governance was last updated. An RFC 3339-formatted date and time string.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_governance_enabled", is_governance_enabled)
        pulumi.set(__self__, "ons_subscription_id", ons_subscription_id)
        pulumi.set(__self__, "ons_topic_id", ons_topic_id)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscription_email", subscription_email)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> builtins.str:
        """
        The domain OCID.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the domain governance entity.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isGovernanceEnabled")
    def is_governance_enabled(self) -> builtins.bool:
        """
        Indicates whether governance is enabled for this domain.
        """
        return pulumi.get(self, "is_governance_enabled")

    @property
    @pulumi.getter(name="onsSubscriptionId")
    def ons_subscription_id(self) -> builtins.str:
        """
        The ONS subscription associated with this domain governance entity.
        """
        return pulumi.get(self, "ons_subscription_id")

    @property
    @pulumi.getter(name="onsTopicId")
    def ons_topic_id(self) -> builtins.str:
        """
        The ONS topic associated with this domain governance entity.
        """
        return pulumi.get(self, "ons_topic_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> builtins.str:
        """
        The OCID of the tenancy that owns this domain governance entity.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionEmail")
    def subscription_email(self) -> builtins.str:
        """
        Email address to be used to notify the user, and that the ONS subscription will be created with.
        """
        return pulumi.get(self, "subscription_email")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date-time when this domain governance was created. An RFC 3339-formatted date and time string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date-time when this domain governance was last updated. An RFC 3339-formatted date and time string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDomainGovernancesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that exactly match the name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that exactly match the name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDomainsDomainCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDomainsDomainCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDomainsDomainCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDomainsDomainCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 domain_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_governance_enabled: builtins.bool,
                 owner_id: builtins.str,
                 state: builtins.str,
                 status: builtins.str,
                 subscription_email: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 txt_record: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str domain_name: The domain name.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the domain.
        :param builtins.str owner_id: The OCID of the tenancy that has started the registration process for this domain.
        :param builtins.str state: The lifecycle state of the resource.
        :param builtins.str status: The status of the domain.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: Date-time when this domain was created. An RFC 3339-formatted date and time string.
        :param builtins.str time_updated: Date-time when this domain was last updated. An RFC 3339-formatted date and time string.
        :param builtins.str txt_record: The code that the owner of the domain will need to add as a TXT record to their domain.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_governance_enabled", is_governance_enabled)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subscription_email", subscription_email)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "txt_record", txt_record)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> builtins.str:
        """
        The domain name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isGovernanceEnabled")
    def is_governance_enabled(self) -> builtins.bool:
        return pulumi.get(self, "is_governance_enabled")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> builtins.str:
        """
        The OCID of the tenancy that has started the registration process for this domain.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the domain.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionEmail")
    def subscription_email(self) -> builtins.str:
        return pulumi.get(self, "subscription_email")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date-time when this domain was created. An RFC 3339-formatted date and time string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date-time when this domain was last updated. An RFC 3339-formatted date and time string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="txtRecord")
    def txt_record(self) -> builtins.str:
        """
        The code that the owner of the domain will need to add as a TXT record to their domain.
        """
        return pulumi.get(self, "txt_record")


@pulumi.output_type
class GetDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that exactly match the name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that exactly match the name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLinksFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLinksLinkCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetLinksLinkCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetLinksLinkCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLinksLinkCollectionItemResult(dict):
    def __init__(__self__, *,
                 child_tenancy_id: builtins.str,
                 id: builtins.str,
                 parent_tenancy_id: builtins.str,
                 state: builtins.str,
                 time_created: builtins.str,
                 time_terminated: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str child_tenancy_id: The ID of the child tenancy this link is associated with.
        :param builtins.str id: OCID of the link.
        :param builtins.str parent_tenancy_id: The ID of the parent tenancy this link is associated with.
        :param builtins.str state: The lifecycle state of the resource.
        :param builtins.str time_created: Date-time when this link was created.
        :param builtins.str time_terminated: Date-time when this link was terminated.
        :param builtins.str time_updated: Date-time when this link was last updated.
        """
        pulumi.set(__self__, "child_tenancy_id", child_tenancy_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parent_tenancy_id", parent_tenancy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_terminated", time_terminated)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="childTenancyId")
    def child_tenancy_id(self) -> builtins.str:
        """
        The ID of the child tenancy this link is associated with.
        """
        return pulumi.get(self, "child_tenancy_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        OCID of the link.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="parentTenancyId")
    def parent_tenancy_id(self) -> builtins.str:
        """
        The ID of the parent tenancy this link is associated with.
        """
        return pulumi.get(self, "parent_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date-time when this link was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeTerminated")
    def time_terminated(self) -> builtins.str:
        """
        Date-time when this link was terminated.
        """
        return pulumi.get(self, "time_terminated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date-time when this link was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOrganizationTenanciesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of the tenancy.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the tenancy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOrganizationTenanciesOrganizationTenancyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOrganizationTenanciesOrganizationTenancyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOrganizationTenanciesOrganizationTenancyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOrganizationTenanciesOrganizationTenancyCollectionItemResult(dict):
    def __init__(__self__, *,
                 governance_status: builtins.str,
                 is_approved_for_transfer: builtins.bool,
                 name: builtins.str,
                 role: builtins.str,
                 state: builtins.str,
                 tenancy_id: builtins.str,
                 time_joined: builtins.str,
                 time_left: builtins.str):
        """
        :param builtins.str governance_status: The governance status of the tenancy.
        :param builtins.bool is_approved_for_transfer: Parameter to indicate the tenancy is approved for transfer to another organization.
        :param builtins.str name: Name of the tenancy.
        :param builtins.str role: Role of the organization tenancy.
        :param builtins.str state: Lifecycle state of the organization tenancy.
        :param builtins.str tenancy_id: OCID of the tenancy.
        :param builtins.str time_joined: Date and time when the tenancy joined the organization.
        :param builtins.str time_left: Date and time when the tenancy left the organization.
        """
        pulumi.set(__self__, "governance_status", governance_status)
        pulumi.set(__self__, "is_approved_for_transfer", is_approved_for_transfer)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        pulumi.set(__self__, "time_joined", time_joined)
        pulumi.set(__self__, "time_left", time_left)

    @property
    @pulumi.getter(name="governanceStatus")
    def governance_status(self) -> builtins.str:
        """
        The governance status of the tenancy.
        """
        return pulumi.get(self, "governance_status")

    @property
    @pulumi.getter(name="isApprovedForTransfer")
    def is_approved_for_transfer(self) -> builtins.bool:
        """
        Parameter to indicate the tenancy is approved for transfer to another organization.
        """
        return pulumi.get(self, "is_approved_for_transfer")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the tenancy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        Role of the organization tenancy.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle state of the organization tenancy.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        OCID of the tenancy.
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeJoined")
    def time_joined(self) -> builtins.str:
        """
        Date and time when the tenancy joined the organization.
        """
        return pulumi.get(self, "time_joined")

    @property
    @pulumi.getter(name="timeLeft")
    def time_left(self) -> builtins.str:
        """
        Date and time when the tenancy left the organization.
        """
        return pulumi.get(self, "time_left")


@pulumi.output_type
class GetOrganizationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOrganizationsOrganizationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOrganizationsOrganizationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOrganizationsOrganizationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOrganizationsOrganizationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 default_ucm_subscription_id: builtins.str,
                 display_name: builtins.str,
                 id: builtins.str,
                 parent_name: builtins.str,
                 state: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str default_ucm_subscription_id: OCID of the default Universal Credits Model subscription. Any tenancy joining the organization will automatically get assigned this subscription, if a subscription is not explictly assigned.
        :param builtins.str display_name: A display name for the organization. Avoid entering confidential information.
        :param builtins.str id: OCID of the organization.
        :param builtins.str parent_name: The name of the tenancy that is the organization parent.
        :param builtins.str state: Lifecycle state of the organization.
        :param builtins.str time_created: Date and time when the organization was created.
        :param builtins.str time_updated: Date and time when the organization was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "default_ucm_subscription_id", default_ucm_subscription_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parent_name", parent_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultUcmSubscriptionId")
    def default_ucm_subscription_id(self) -> builtins.str:
        """
        OCID of the default Universal Credits Model subscription. Any tenancy joining the organization will automatically get assigned this subscription, if a subscription is not explictly assigned.
        """
        return pulumi.get(self, "default_ucm_subscription_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A display name for the organization. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        OCID of the organization.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="parentName")
    def parent_name(self) -> builtins.str:
        """
        The name of the tenancy that is the organization parent.
        """
        return pulumi.get(self, "parent_name")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle state of the organization.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date and time when the organization was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date and time when the organization was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRecipientInvitationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecipientInvitationsRecipientInvitationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRecipientInvitationsRecipientInvitationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRecipientInvitationsRecipientInvitationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRecipientInvitationsRecipientInvitationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 recipient_email_address: builtins.str,
                 sender_invitation_id: builtins.str,
                 sender_tenancy_id: builtins.str,
                 state: builtins.str,
                 status: builtins.str,
                 subjects: Sequence[builtins.str],
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A user-created name to describe the invitation. Avoid entering confidential information.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: OCID of the recipient invitation.
        :param builtins.str recipient_email_address: Email address of the recipient.
        :param builtins.str sender_invitation_id: OCID of the corresponding sender invitation.
        :param builtins.str sender_tenancy_id: The tenancy that sent the invitation.
        :param builtins.str state: The lifecycle state of the resource.
        :param builtins.str status: The status of the recipient invitation.
        :param Sequence[builtins.str] subjects: The list of subjects the invitation contains.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: Date and time when the recipient invitation was created.
        :param builtins.str time_updated: Date and time when the recipient invitation was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "recipient_email_address", recipient_email_address)
        pulumi.set(__self__, "sender_invitation_id", sender_invitation_id)
        pulumi.set(__self__, "sender_tenancy_id", sender_tenancy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subjects", subjects)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-created name to describe the invitation. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        OCID of the recipient invitation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="recipientEmailAddress")
    def recipient_email_address(self) -> builtins.str:
        """
        Email address of the recipient.
        """
        return pulumi.get(self, "recipient_email_address")

    @property
    @pulumi.getter(name="senderInvitationId")
    def sender_invitation_id(self) -> builtins.str:
        """
        OCID of the corresponding sender invitation.
        """
        return pulumi.get(self, "sender_invitation_id")

    @property
    @pulumi.getter(name="senderTenancyId")
    def sender_tenancy_id(self) -> builtins.str:
        """
        The tenancy that sent the invitation.
        """
        return pulumi.get(self, "sender_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the recipient invitation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subjects(self) -> Sequence[builtins.str]:
        """
        The list of subjects the invitation contains.
        """
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date and time when the recipient invitation was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date and time when the recipient invitation was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSenderInvitationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSenderInvitationsSenderInvitationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSenderInvitationsSenderInvitationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSenderInvitationsSenderInvitationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSenderInvitationsSenderInvitationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 recipient_email_address: builtins.str,
                 recipient_invitation_id: builtins.str,
                 recipient_tenancy_id: builtins.str,
                 state: builtins.str,
                 status: builtins.str,
                 subjects: Sequence[builtins.str],
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: OCID of the sender invitation.
        :param builtins.str recipient_email_address: Email address of the recipient.
        :param builtins.str recipient_invitation_id: OCID of the corresponding recipient invitation.
        :param builtins.str recipient_tenancy_id: The tenancy that the invitation is addressed to.
        :param builtins.str state: The lifecycle state of the resource.
        :param builtins.str status: The status of the sender invitation.
        :param Sequence[builtins.str] subjects: The list of subjects the invitation contains.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: Date and time when the sender invitation was created.
        :param builtins.str time_updated: Date and time when the sender invitation was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "recipient_email_address", recipient_email_address)
        pulumi.set(__self__, "recipient_invitation_id", recipient_invitation_id)
        pulumi.set(__self__, "recipient_tenancy_id", recipient_tenancy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subjects", subjects)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        OCID of the sender invitation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="recipientEmailAddress")
    def recipient_email_address(self) -> builtins.str:
        """
        Email address of the recipient.
        """
        return pulumi.get(self, "recipient_email_address")

    @property
    @pulumi.getter(name="recipientInvitationId")
    def recipient_invitation_id(self) -> builtins.str:
        """
        OCID of the corresponding recipient invitation.
        """
        return pulumi.get(self, "recipient_invitation_id")

    @property
    @pulumi.getter(name="recipientTenancyId")
    def recipient_tenancy_id(self) -> builtins.str:
        """
        The tenancy that the invitation is addressed to.
        """
        return pulumi.get(self, "recipient_tenancy_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the sender invitation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def subjects(self) -> Sequence[builtins.str]:
        """
        The list of subjects the invitation contains.
        """
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date and time when the sender invitation was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date and time when the sender invitation was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSubscriptionAvailableRegionsAvailableRegionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSubscriptionAvailableRegionsAvailableRegionCollectionItemResult']):
        """
        :param Sequence['GetSubscriptionAvailableRegionsAvailableRegionCollectionItemArgs'] items: Array containing available region items.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSubscriptionAvailableRegionsAvailableRegionCollectionItemResult']:
        """
        Array containing available region items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionAvailableRegionsAvailableRegionCollectionItemResult(dict):
    def __init__(__self__, *,
                 region_name: builtins.str,
                 system_tags: Mapping[str, builtins.str]):
        """
        :param builtins.str region_name: Region availability for the subscription.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> builtins.str:
        """
        Region availability for the subscription.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetSubscriptionAvailableRegionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionLineItemsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionLineItemsSubscriptionLineItemCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSubscriptionLineItemsSubscriptionLineItemCollectionItemResult']):
        """
        :param Sequence['GetSubscriptionLineItemsSubscriptionLineItemCollectionItemArgs'] items: Array containing line item summaries in a subscription.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSubscriptionLineItemsSubscriptionLineItemCollectionItemResult']:
        """
        Array containing line item summaries in a subscription.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionLineItemsSubscriptionLineItemCollectionItemResult(dict):
    def __init__(__self__, *,
                 billing_model: builtins.str,
                 id: builtins.str,
                 product_code: builtins.str,
                 quantity: builtins.float,
                 system_tags: Mapping[str, builtins.str],
                 time_ended: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str billing_model: Billing model supported by the associated line item.
        :param builtins.str id: Subscription line item identifier.
        :param builtins.str product_code: Product code.
        :param builtins.float quantity: Product number.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_ended: The time the subscription item and associated products should end. An RFC 3339 formatted date and time string.
        :param builtins.str time_started: The time the subscription item and associated products should start. An RFC 3339 formatted date and time string.
        """
        pulumi.set(__self__, "billing_model", billing_model)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_code", product_code)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="billingModel")
    def billing_model(self) -> builtins.str:
        """
        Billing model supported by the associated line item.
        """
        return pulumi.get(self, "billing_model")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Subscription line item identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> builtins.str:
        """
        Product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter
    def quantity(self) -> builtins.float:
        """
        Product number.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The time the subscription item and associated products should end. An RFC 3339 formatted date and time string.
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The time the subscription item and associated products should start. An RFC 3339 formatted date and time string.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSubscriptionMappingsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionMappingsSubscriptionMappingCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSubscriptionMappingsSubscriptionMappingCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSubscriptionMappingsSubscriptionMappingCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionMappingsSubscriptionMappingCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 id: builtins.str,
                 is_explicitly_assigned: builtins.bool,
                 state: builtins.str,
                 subscription_id: builtins.str,
                 time_created: builtins.str,
                 time_terminated: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str id: OCID of the mapping between subscription and compartment identified by the tenancy.
        :param builtins.bool is_explicitly_assigned: Denotes if the subscription is explicity assigned to the root compartment or tenancy.
        :param builtins.str state: The lifecycle state of the resource.
        :param builtins.str subscription_id: OCID of the subscription.
        :param builtins.str time_created: Date-time when subscription mapping was created.
        :param builtins.str time_terminated: Date-time when subscription mapping was terminated.
        :param builtins.str time_updated: Date-time when subscription mapping was updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_explicitly_assigned", is_explicitly_assigned)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_terminated", time_terminated)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        OCID of the mapping between subscription and compartment identified by the tenancy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExplicitlyAssigned")
    def is_explicitly_assigned(self) -> builtins.bool:
        """
        Denotes if the subscription is explicity assigned to the root compartment or tenancy.
        """
        return pulumi.get(self, "is_explicitly_assigned")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> builtins.str:
        """
        OCID of the subscription.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Date-time when subscription mapping was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeTerminated")
    def time_terminated(self) -> builtins.str:
        """
        Date-time when subscription mapping was terminated.
        """
        return pulumi.get(self, "time_terminated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Date-time when subscription mapping was updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSubscriptionPromotionResult(dict):
    def __init__(__self__, *,
                 amount: builtins.float,
                 currency_unit: builtins.str,
                 duration: builtins.int,
                 duration_unit: builtins.str,
                 is_intent_to_pay: builtins.bool,
                 status: builtins.str,
                 time_expired: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.float amount: If a subscription is present, indicates the total amount of promotional subscription credits.
        :param builtins.str currency_unit: Currency unit associated with the promotion.
        :param builtins.int duration: Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        :param builtins.str duration_unit: Unit for the duration.
        :param builtins.bool is_intent_to_pay: Speficies whether or not the customer intends to pay after the promotion has expired.
        :param builtins.str status: If a subscription is present, indicates the current status of the subscription promotion.
        :param builtins.str time_expired: Date and time when the promotion ends.
        :param builtins.str time_started: Date and time when the promotion starts.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "currency_unit", currency_unit)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "duration_unit", duration_unit)
        pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_expired", time_expired)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def amount(self) -> builtins.float:
        """
        If a subscription is present, indicates the total amount of promotional subscription credits.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="currencyUnit")
    def currency_unit(self) -> builtins.str:
        """
        Currency unit associated with the promotion.
        """
        return pulumi.get(self, "currency_unit")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        """
        Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="durationUnit")
    def duration_unit(self) -> builtins.str:
        """
        Unit for the duration.
        """
        return pulumi.get(self, "duration_unit")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> builtins.bool:
        """
        Speficies whether or not the customer intends to pay after the promotion has expired.
        """
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        If a subscription is present, indicates the current status of the subscription promotion.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeExpired")
    def time_expired(self) -> builtins.str:
        """
        Date and time when the promotion ends.
        """
        return pulumi.get(self, "time_expired")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        Date and time when the promotion starts.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSubscriptionSkusResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 end_date: builtins.str,
                 gsi_order_line_id: builtins.str,
                 is_additional_instance: builtins.bool,
                 is_base_service_component: builtins.bool,
                 license_part_description: builtins.str,
                 metric_name: builtins.str,
                 quantity: builtins.int,
                 sku: builtins.str,
                 start_date: builtins.str):
        """
        :param builtins.str description: Description of the stock units.
        :param builtins.str end_date: Date and time when the SKU ended.
        :param builtins.str gsi_order_line_id: Sales order line identifier.
        :param builtins.bool is_additional_instance: Specifies if an additional test instance can be provisioned by the SaaS application.
        :param builtins.bool is_base_service_component: Specifies if the SKU is considered as a parent or child.
        :param builtins.str license_part_description: Description of the covered product belonging to this SKU.
        :param builtins.str metric_name: Base metric for billing the service.
        :param builtins.int quantity: Quantity of the stock units.
        :param builtins.str sku: Stock Keeping Unit (SKU) ID.
        :param builtins.str start_date: Subscription start time.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "gsi_order_line_id", gsi_order_line_id)
        pulumi.set(__self__, "is_additional_instance", is_additional_instance)
        pulumi.set(__self__, "is_base_service_component", is_base_service_component)
        pulumi.set(__self__, "license_part_description", license_part_description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the stock units.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> builtins.str:
        """
        Date and time when the SKU ended.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="gsiOrderLineId")
    def gsi_order_line_id(self) -> builtins.str:
        """
        Sales order line identifier.
        """
        return pulumi.get(self, "gsi_order_line_id")

    @property
    @pulumi.getter(name="isAdditionalInstance")
    def is_additional_instance(self) -> builtins.bool:
        """
        Specifies if an additional test instance can be provisioned by the SaaS application.
        """
        return pulumi.get(self, "is_additional_instance")

    @property
    @pulumi.getter(name="isBaseServiceComponent")
    def is_base_service_component(self) -> builtins.bool:
        """
        Specifies if the SKU is considered as a parent or child.
        """
        return pulumi.get(self, "is_base_service_component")

    @property
    @pulumi.getter(name="licensePartDescription")
    def license_part_description(self) -> builtins.str:
        """
        Description of the covered product belonging to this SKU.
        """
        return pulumi.get(self, "license_part_description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> builtins.str:
        """
        Base metric for billing the service.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def quantity(self) -> builtins.int:
        """
        Quantity of the stock units.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def sku(self) -> builtins.str:
        """
        Stock Keeping Unit (SKU) ID.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> builtins.str:
        """
        Subscription start time.
        """
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemResult(dict):
    def __init__(__self__, *,
                 classic_subscription_id: builtins.str,
                 cloud_amount_currency: builtins.str,
                 compartment_id: builtins.str,
                 csi_number: builtins.str,
                 currency_code: builtins.str,
                 customer_country_code: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 end_date: builtins.str,
                 entity_version: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_classic_subscription: builtins.bool,
                 is_government_subscription: builtins.bool,
                 payment_model: builtins.str,
                 program_type: builtins.str,
                 promotions: Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPromotionResult'],
                 purchase_entitlement_id: builtins.str,
                 region_assignment: builtins.str,
                 service_name: builtins.str,
                 skuses: Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSkusResult'],
                 start_date: builtins.str,
                 state: builtins.str,
                 subscription_number: builtins.str,
                 subscription_tier: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str classic_subscription_id: Classic subscription ID.
        :param builtins.str cloud_amount_currency: The currency code for the customer associated with the subscription.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str csi_number: Customer service identifier for the customer associated with the subscription.
        :param builtins.str currency_code: Currency code. For example USD, MXN.
        :param builtins.str customer_country_code: The country code for the customer associated with the subscription.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str end_date: Date and time when the SKU ended.
        :param builtins.str entity_version: The version of the subscription entity.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the subscription.
        :param builtins.bool is_classic_subscription: Specifies whether or not the subscription is from classic systems.
        :param builtins.bool is_government_subscription: Specifies whether or not the subscription is a government subscription.
        :param builtins.str payment_model: The pay model of the subscription, such as 'Pay as you go' or 'Monthly'.
        :param builtins.str program_type: Specifies any program that is associated with the subscription.
        :param Sequence['GetSubscriptionsSubscriptionCollectionItemPromotionArgs'] promotions: List of promotions related to the subscription.
        :param builtins.str purchase_entitlement_id: Purchase entitlement ID associated with the subscription.
        :param builtins.str region_assignment: Region for the subscription.
        :param builtins.str service_name: The type of subscription, such as 'UCM', 'SAAS', 'ERP', 'CRM'.
        :param Sequence['GetSubscriptionsSubscriptionCollectionItemSkusArgs'] skuses: List of SKUs linked to this subscription.
        :param builtins.str start_date: Subscription start time.
        :param builtins.str state: Lifecycle state of the subscription.
        :param builtins.str subscription_number: Unique Oracle Cloud Subscriptions identifier that is immutable on creation.
        :param builtins.str subscription_tier: Tier for the subscription, whether a free promotion subscription or a paid subscription.
        :param builtins.str time_created: The date and time of creation, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        :param builtins.str time_updated: The date and time of update, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        pulumi.set(__self__, "classic_subscription_id", classic_subscription_id)
        pulumi.set(__self__, "cloud_amount_currency", cloud_amount_currency)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "csi_number", csi_number)
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "customer_country_code", customer_country_code)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "entity_version", entity_version)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_classic_subscription", is_classic_subscription)
        pulumi.set(__self__, "is_government_subscription", is_government_subscription)
        pulumi.set(__self__, "payment_model", payment_model)
        pulumi.set(__self__, "program_type", program_type)
        pulumi.set(__self__, "promotions", promotions)
        pulumi.set(__self__, "purchase_entitlement_id", purchase_entitlement_id)
        pulumi.set(__self__, "region_assignment", region_assignment)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "skuses", skuses)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscription_number", subscription_number)
        pulumi.set(__self__, "subscription_tier", subscription_tier)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="classicSubscriptionId")
    def classic_subscription_id(self) -> builtins.str:
        """
        Classic subscription ID.
        """
        return pulumi.get(self, "classic_subscription_id")

    @property
    @pulumi.getter(name="cloudAmountCurrency")
    def cloud_amount_currency(self) -> builtins.str:
        """
        The currency code for the customer associated with the subscription.
        """
        return pulumi.get(self, "cloud_amount_currency")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="csiNumber")
    def csi_number(self) -> builtins.str:
        """
        Customer service identifier for the customer associated with the subscription.
        """
        return pulumi.get(self, "csi_number")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> builtins.str:
        """
        Currency code. For example USD, MXN.
        """
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="customerCountryCode")
    def customer_country_code(self) -> builtins.str:
        """
        The country code for the customer associated with the subscription.
        """
        return pulumi.get(self, "customer_country_code")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> builtins.str:
        """
        Date and time when the SKU ended.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> builtins.str:
        """
        The version of the subscription entity.
        """
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The Oracle ID ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the subscription.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isClassicSubscription")
    def is_classic_subscription(self) -> builtins.bool:
        """
        Specifies whether or not the subscription is from classic systems.
        """
        return pulumi.get(self, "is_classic_subscription")

    @property
    @pulumi.getter(name="isGovernmentSubscription")
    def is_government_subscription(self) -> builtins.bool:
        """
        Specifies whether or not the subscription is a government subscription.
        """
        return pulumi.get(self, "is_government_subscription")

    @property
    @pulumi.getter(name="paymentModel")
    def payment_model(self) -> builtins.str:
        """
        The pay model of the subscription, such as 'Pay as you go' or 'Monthly'.
        """
        return pulumi.get(self, "payment_model")

    @property
    @pulumi.getter(name="programType")
    def program_type(self) -> builtins.str:
        """
        Specifies any program that is associated with the subscription.
        """
        return pulumi.get(self, "program_type")

    @property
    @pulumi.getter
    def promotions(self) -> Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemPromotionResult']:
        """
        List of promotions related to the subscription.
        """
        return pulumi.get(self, "promotions")

    @property
    @pulumi.getter(name="purchaseEntitlementId")
    def purchase_entitlement_id(self) -> builtins.str:
        """
        Purchase entitlement ID associated with the subscription.
        """
        return pulumi.get(self, "purchase_entitlement_id")

    @property
    @pulumi.getter(name="regionAssignment")
    def region_assignment(self) -> builtins.str:
        """
        Region for the subscription.
        """
        return pulumi.get(self, "region_assignment")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        The type of subscription, such as 'UCM', 'SAAS', 'ERP', 'CRM'.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def skuses(self) -> Sequence['outputs.GetSubscriptionsSubscriptionCollectionItemSkusResult']:
        """
        List of SKUs linked to this subscription.
        """
        return pulumi.get(self, "skuses")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> builtins.str:
        """
        Subscription start time.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Lifecycle state of the subscription.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionNumber")
    def subscription_number(self) -> builtins.str:
        """
        Unique Oracle Cloud Subscriptions identifier that is immutable on creation.
        """
        return pulumi.get(self, "subscription_number")

    @property
    @pulumi.getter(name="subscriptionTier")
    def subscription_tier(self) -> builtins.str:
        """
        Tier for the subscription, whether a free promotion subscription or a paid subscription.
        """
        return pulumi.get(self, "subscription_tier")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time of creation, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time of update, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemPromotionResult(dict):
    def __init__(__self__, *,
                 amount: builtins.float,
                 currency_unit: builtins.str,
                 duration: builtins.int,
                 duration_unit: builtins.str,
                 is_intent_to_pay: builtins.bool,
                 status: builtins.str,
                 time_expired: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.float amount: If a subscription is present, indicates the total amount of promotional subscription credits.
        :param builtins.str currency_unit: Currency unit associated with the promotion.
        :param builtins.int duration: Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        :param builtins.str duration_unit: Unit for the duration.
        :param builtins.bool is_intent_to_pay: Speficies whether or not the customer intends to pay after the promotion has expired.
        :param builtins.str status: If a subscription is present, indicates the current status of the subscription promotion.
        :param builtins.str time_expired: Date and time when the promotion ends.
        :param builtins.str time_started: Date and time when the promotion starts.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "currency_unit", currency_unit)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "duration_unit", duration_unit)
        pulumi.set(__self__, "is_intent_to_pay", is_intent_to_pay)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_expired", time_expired)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def amount(self) -> builtins.float:
        """
        If a subscription is present, indicates the total amount of promotional subscription credits.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="currencyUnit")
    def currency_unit(self) -> builtins.str:
        """
        Currency unit associated with the promotion.
        """
        return pulumi.get(self, "currency_unit")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        """
        Specifies how long the promotion related to the subscription, if any, is valid in duration units.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="durationUnit")
    def duration_unit(self) -> builtins.str:
        """
        Unit for the duration.
        """
        return pulumi.get(self, "duration_unit")

    @property
    @pulumi.getter(name="isIntentToPay")
    def is_intent_to_pay(self) -> builtins.bool:
        """
        Speficies whether or not the customer intends to pay after the promotion has expired.
        """
        return pulumi.get(self, "is_intent_to_pay")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        If a subscription is present, indicates the current status of the subscription promotion.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeExpired")
    def time_expired(self) -> builtins.str:
        """
        Date and time when the promotion ends.
        """
        return pulumi.get(self, "time_expired")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        Date and time when the promotion starts.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSubscriptionsSubscriptionCollectionItemSkusResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 end_date: builtins.str,
                 gsi_order_line_id: builtins.str,
                 is_additional_instance: builtins.bool,
                 is_base_service_component: builtins.bool,
                 license_part_description: builtins.str,
                 metric_name: builtins.str,
                 quantity: builtins.int,
                 sku: builtins.str,
                 start_date: builtins.str):
        """
        :param builtins.str description: Description of the stock units.
        :param builtins.str end_date: Date and time when the SKU ended.
        :param builtins.str gsi_order_line_id: Sales order line identifier.
        :param builtins.bool is_additional_instance: Specifies if an additional test instance can be provisioned by the SaaS application.
        :param builtins.bool is_base_service_component: Specifies if the SKU is considered as a parent or child.
        :param builtins.str license_part_description: Description of the covered product belonging to this SKU.
        :param builtins.str metric_name: Base metric for billing the service.
        :param builtins.int quantity: Quantity of the stock units.
        :param builtins.str sku: Stock Keeping Unit (SKU) ID.
        :param builtins.str start_date: Subscription start time.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "gsi_order_line_id", gsi_order_line_id)
        pulumi.set(__self__, "is_additional_instance", is_additional_instance)
        pulumi.set(__self__, "is_base_service_component", is_base_service_component)
        pulumi.set(__self__, "license_part_description", license_part_description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the stock units.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> builtins.str:
        """
        Date and time when the SKU ended.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="gsiOrderLineId")
    def gsi_order_line_id(self) -> builtins.str:
        """
        Sales order line identifier.
        """
        return pulumi.get(self, "gsi_order_line_id")

    @property
    @pulumi.getter(name="isAdditionalInstance")
    def is_additional_instance(self) -> builtins.bool:
        """
        Specifies if an additional test instance can be provisioned by the SaaS application.
        """
        return pulumi.get(self, "is_additional_instance")

    @property
    @pulumi.getter(name="isBaseServiceComponent")
    def is_base_service_component(self) -> builtins.bool:
        """
        Specifies if the SKU is considered as a parent or child.
        """
        return pulumi.get(self, "is_base_service_component")

    @property
    @pulumi.getter(name="licensePartDescription")
    def license_part_description(self) -> builtins.str:
        """
        Description of the covered product belonging to this SKU.
        """
        return pulumi.get(self, "license_part_description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> builtins.str:
        """
        Base metric for billing the service.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def quantity(self) -> builtins.int:
        """
        Quantity of the stock units.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def sku(self) -> builtins.str:
        """
        Stock Keeping Unit (SKU) ID.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> builtins.str:
        """
        Subscription start time.
        """
        return pulumi.get(self, "start_date")


