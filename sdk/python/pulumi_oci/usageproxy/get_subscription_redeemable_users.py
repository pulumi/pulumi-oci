# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSubscriptionRedeemableUsersResult',
    'AwaitableGetSubscriptionRedeemableUsersResult',
    'get_subscription_redeemable_users',
    'get_subscription_redeemable_users_output',
]

@pulumi.output_type
class GetSubscriptionRedeemableUsersResult:
    """
    A collection of values returned by getSubscriptionRedeemableUsers.
    """
    def __init__(__self__, filters=None, id=None, redeemable_user_collections=None, subscription_id=None, tenancy_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if redeemable_user_collections and not isinstance(redeemable_user_collections, list):
            raise TypeError("Expected argument 'redeemable_user_collections' to be a list")
        pulumi.set(__self__, "redeemable_user_collections", redeemable_user_collections)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if tenancy_id and not isinstance(tenancy_id, str):
            raise TypeError("Expected argument 'tenancy_id' to be a str")
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSubscriptionRedeemableUsersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="redeemableUserCollections")
    def redeemable_user_collections(self) -> Optional[Sequence['outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionResult']]:
        return pulumi.get(self, "redeemable_user_collections")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        return pulumi.get(self, "tenancy_id")


class AwaitableGetSubscriptionRedeemableUsersResult(GetSubscriptionRedeemableUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionRedeemableUsersResult(
            filters=self.filters,
            id=self.id,
            redeemable_user_collections=self.redeemable_user_collections,
            subscription_id=self.subscription_id,
            tenancy_id=self.tenancy_id)


def get_subscription_redeemable_users(filters: Optional[Sequence[pulumi.InputType['GetSubscriptionRedeemableUsersFilterArgs']]] = None,
                                      subscription_id: Optional[str] = None,
                                      tenancy_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionRedeemableUsersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['subscriptionId'] = subscription_id
    __args__['tenancyId'] = tenancy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:UsageProxy/getSubscriptionRedeemableUsers:getSubscriptionRedeemableUsers', __args__, opts=opts, typ=GetSubscriptionRedeemableUsersResult).value

    return AwaitableGetSubscriptionRedeemableUsersResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        redeemable_user_collections=pulumi.get(__ret__, 'redeemable_user_collections'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        tenancy_id=pulumi.get(__ret__, 'tenancy_id'))


@_utilities.lift_output_func(get_subscription_redeemable_users)
def get_subscription_redeemable_users_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSubscriptionRedeemableUsersFilterArgs']]]]] = None,
                                             subscription_id: Optional[pulumi.Input[str]] = None,
                                             tenancy_id: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubscriptionRedeemableUsersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
