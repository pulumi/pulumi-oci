# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SubscriptionRedeemableUserItem',
    'GetResourceQuotasFilterResult',
    'GetResourceQuotasResourceQuotumCollectionResult',
    'GetResourceQuotasResourceQuotumCollectionItemResult',
    'GetResourcesFilterResult',
    'GetResourcesResourcesCollectionResult',
    'GetResourcesResourcesCollectionItemResult',
    'GetResourcesResourcesCollectionItemSkusResult',
    'GetSubscriptionProductItemResult',
    'GetSubscriptionProductsFilterResult',
    'GetSubscriptionProductsProductCollectionResult',
    'GetSubscriptionProductsProductCollectionItemResult',
    'GetSubscriptionProductsProductCollectionItemItemResult',
    'GetSubscriptionRedeemableUserItemResult',
    'GetSubscriptionRedeemableUsersFilterResult',
    'GetSubscriptionRedeemableUsersRedeemableUserCollectionResult',
    'GetSubscriptionRedeemableUsersRedeemableUserCollectionItemResult',
    'GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemResult',
    'GetSubscriptionRedemptionItemResult',
    'GetSubscriptionRedemptionsFilterResult',
    'GetSubscriptionRedemptionsRedemptionCollectionResult',
    'GetSubscriptionRedemptionsRedemptionCollectionItemResult',
    'GetSubscriptionRedemptionsRedemptionCollectionItemItemResult',
    'GetSubscriptionRewardItemResult',
    'GetSubscriptionRewardSummaryResult',
    'GetSubscriptionRewardsFilterResult',
    'GetSubscriptionRewardsRewardCollectionResult',
    'GetSubscriptionRewardsRewardCollectionItemResult',
    'GetSubscriptionRewardsRewardCollectionItemItemResult',
    'GetSubscriptionRewardsRewardCollectionItemSummaryResult',
    'GetUsagelimitsFilterResult',
    'GetUsagelimitsUsageLimitCollectionResult',
    'GetUsagelimitsUsageLimitCollectionItemResult',
]

@pulumi.output_type
class SubscriptionRedeemableUserItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailId":
            suggest = "email_id"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubscriptionRedeemableUserItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubscriptionRedeemableUserItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubscriptionRedeemableUserItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_id: str,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None):
        pulumi.set(__self__, "email_id", email_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter(name="emailId")
    def email_id(self) -> str:
        return pulumi.get(self, "email_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")


@pulumi.output_type
class GetResourceQuotasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResourceQuotasResourceQuotumCollectionResult(dict):
    def __init__(__self__, *,
                 is_allowed: Optional[bool] = None,
                 items: Optional[Sequence['outputs.GetResourceQuotasResourceQuotumCollectionItemResult']] = None):
        if is_allowed is not None:
            pulumi.set(__self__, "is_allowed", is_allowed)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="isAllowed")
    def is_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_allowed")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetResourceQuotasResourceQuotumCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResourceQuotasResourceQuotumCollectionItemResult(dict):
    def __init__(__self__, *,
                 affected_resource: Optional[str] = None,
                 balance: Optional[float] = None,
                 is_allowed: Optional[bool] = None,
                 is_dependency: Optional[bool] = None,
                 is_overage: Optional[bool] = None,
                 name: Optional[str] = None,
                 purchased_limit: Optional[float] = None,
                 service: Optional[str] = None):
        if affected_resource is not None:
            pulumi.set(__self__, "affected_resource", affected_resource)
        if balance is not None:
            pulumi.set(__self__, "balance", balance)
        if is_allowed is not None:
            pulumi.set(__self__, "is_allowed", is_allowed)
        if is_dependency is not None:
            pulumi.set(__self__, "is_dependency", is_dependency)
        if is_overage is not None:
            pulumi.set(__self__, "is_overage", is_overage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if purchased_limit is not None:
            pulumi.set(__self__, "purchased_limit", purchased_limit)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="affectedResource")
    def affected_resource(self) -> Optional[str]:
        return pulumi.get(self, "affected_resource")

    @property
    @pulumi.getter
    def balance(self) -> Optional[float]:
        return pulumi.get(self, "balance")

    @property
    @pulumi.getter(name="isAllowed")
    def is_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_allowed")

    @property
    @pulumi.getter(name="isDependency")
    def is_dependency(self) -> Optional[bool]:
        return pulumi.get(self, "is_dependency")

    @property
    @pulumi.getter(name="isOverage")
    def is_overage(self) -> Optional[bool]:
        return pulumi.get(self, "is_overage")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="purchasedLimit")
    def purchased_limit(self) -> Optional[float]:
        return pulumi.get(self, "purchased_limit")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResourcesResourcesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetResourcesResourcesCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetResourcesResourcesCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResourcesResourcesCollectionItemResult(dict):
    def __init__(__self__, *,
                 child_resources: Optional[Sequence[str]] = None,
                 daily_unit_display_name: Optional[str] = None,
                 description: Optional[str] = None,
                 hourly_unit_display_name: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 is_purchased: Optional[bool] = None,
                 name: Optional[str] = None,
                 raw_unit_display_name: Optional[str] = None,
                 servicename: Optional[str] = None,
                 skuses: Optional[Sequence['outputs.GetResourcesResourcesCollectionItemSkusResult']] = None,
                 usage_data_type: Optional[str] = None):
        if child_resources is not None:
            pulumi.set(__self__, "child_resources", child_resources)
        if daily_unit_display_name is not None:
            pulumi.set(__self__, "daily_unit_display_name", daily_unit_display_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hourly_unit_display_name is not None:
            pulumi.set(__self__, "hourly_unit_display_name", hourly_unit_display_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if is_purchased is not None:
            pulumi.set(__self__, "is_purchased", is_purchased)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if raw_unit_display_name is not None:
            pulumi.set(__self__, "raw_unit_display_name", raw_unit_display_name)
        if servicename is not None:
            pulumi.set(__self__, "servicename", servicename)
        if skuses is not None:
            pulumi.set(__self__, "skuses", skuses)
        if usage_data_type is not None:
            pulumi.set(__self__, "usage_data_type", usage_data_type)

    @property
    @pulumi.getter(name="childResources")
    def child_resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "child_resources")

    @property
    @pulumi.getter(name="dailyUnitDisplayName")
    def daily_unit_display_name(self) -> Optional[str]:
        return pulumi.get(self, "daily_unit_display_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hourlyUnitDisplayName")
    def hourly_unit_display_name(self) -> Optional[str]:
        return pulumi.get(self, "hourly_unit_display_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="isPurchased")
    def is_purchased(self) -> Optional[bool]:
        return pulumi.get(self, "is_purchased")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rawUnitDisplayName")
    def raw_unit_display_name(self) -> Optional[str]:
        return pulumi.get(self, "raw_unit_display_name")

    @property
    @pulumi.getter
    def servicename(self) -> Optional[str]:
        return pulumi.get(self, "servicename")

    @property
    @pulumi.getter
    def skuses(self) -> Optional[Sequence['outputs.GetResourcesResourcesCollectionItemSkusResult']]:
        return pulumi.get(self, "skuses")

    @property
    @pulumi.getter(name="usageDataType")
    def usage_data_type(self) -> Optional[str]:
        return pulumi.get(self, "usage_data_type")


@pulumi.output_type
class GetResourcesResourcesCollectionItemSkusResult(dict):
    def __init__(__self__, *,
                 cloud_credit_type: Optional[str] = None,
                 sku_id: Optional[str] = None,
                 sku_type: Optional[str] = None):
        if cloud_credit_type is not None:
            pulumi.set(__self__, "cloud_credit_type", cloud_credit_type)
        if sku_id is not None:
            pulumi.set(__self__, "sku_id", sku_id)
        if sku_type is not None:
            pulumi.set(__self__, "sku_type", sku_type)

    @property
    @pulumi.getter(name="cloudCreditType")
    def cloud_credit_type(self) -> Optional[str]:
        return pulumi.get(self, "cloud_credit_type")

    @property
    @pulumi.getter(name="skuId")
    def sku_id(self) -> Optional[str]:
        return pulumi.get(self, "sku_id")

    @property
    @pulumi.getter(name="skuType")
    def sku_type(self) -> Optional[str]:
        return pulumi.get(self, "sku_type")


@pulumi.output_type
class GetSubscriptionProductItemResult(dict):
    def __init__(__self__, *,
                 earned_rewards: Optional[float] = None,
                 is_eligible_to_earn_rewards: Optional[bool] = None,
                 product_name: Optional[str] = None,
                 product_number: Optional[str] = None,
                 usage_amount: Optional[float] = None):
        if earned_rewards is not None:
            pulumi.set(__self__, "earned_rewards", earned_rewards)
        if is_eligible_to_earn_rewards is not None:
            pulumi.set(__self__, "is_eligible_to_earn_rewards", is_eligible_to_earn_rewards)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if product_number is not None:
            pulumi.set(__self__, "product_number", product_number)
        if usage_amount is not None:
            pulumi.set(__self__, "usage_amount", usage_amount)

    @property
    @pulumi.getter(name="earnedRewards")
    def earned_rewards(self) -> Optional[float]:
        return pulumi.get(self, "earned_rewards")

    @property
    @pulumi.getter(name="isEligibleToEarnRewards")
    def is_eligible_to_earn_rewards(self) -> Optional[bool]:
        return pulumi.get(self, "is_eligible_to_earn_rewards")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="productNumber")
    def product_number(self) -> Optional[str]:
        return pulumi.get(self, "product_number")

    @property
    @pulumi.getter(name="usageAmount")
    def usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "usage_amount")


@pulumi.output_type
class GetSubscriptionProductsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionProductsProductCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionProductsProductCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionProductsProductCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionProductsProductCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionProductsProductCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionProductsProductCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionProductsProductCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 earned_rewards: Optional[float] = None,
                 is_eligible_to_earn_rewards: Optional[bool] = None,
                 product_name: Optional[str] = None,
                 product_number: Optional[str] = None,
                 usage_amount: Optional[float] = None):
        if earned_rewards is not None:
            pulumi.set(__self__, "earned_rewards", earned_rewards)
        if is_eligible_to_earn_rewards is not None:
            pulumi.set(__self__, "is_eligible_to_earn_rewards", is_eligible_to_earn_rewards)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if product_number is not None:
            pulumi.set(__self__, "product_number", product_number)
        if usage_amount is not None:
            pulumi.set(__self__, "usage_amount", usage_amount)

    @property
    @pulumi.getter(name="earnedRewards")
    def earned_rewards(self) -> Optional[float]:
        return pulumi.get(self, "earned_rewards")

    @property
    @pulumi.getter(name="isEligibleToEarnRewards")
    def is_eligible_to_earn_rewards(self) -> Optional[bool]:
        return pulumi.get(self, "is_eligible_to_earn_rewards")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="productNumber")
    def product_number(self) -> Optional[str]:
        return pulumi.get(self, "product_number")

    @property
    @pulumi.getter(name="usageAmount")
    def usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "usage_amount")


@pulumi.output_type
class GetSubscriptionRedeemableUserItemResult(dict):
    def __init__(__self__, *,
                 email_id: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None):
        if email_id is not None:
            pulumi.set(__self__, "email_id", email_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter(name="emailId")
    def email_id(self) -> Optional[str]:
        return pulumi.get(self, "email_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")


@pulumi.output_type
class GetSubscriptionRedeemableUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionRedeemableUsersRedeemableUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionRedeemableUsersRedeemableUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemResult'],
                 subscription_id: str,
                 tenancy_id: str,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemResult']:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetSubscriptionRedeemableUsersRedeemableUserCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 email_id: str,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None):
        pulumi.set(__self__, "email_id", email_id)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter(name="emailId")
    def email_id(self) -> str:
        return pulumi.get(self, "email_id")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")


@pulumi.output_type
class GetSubscriptionRedemptionItemResult(dict):
    def __init__(__self__, *,
                 base_rewards: Optional[float] = None,
                 fx_rate: Optional[float] = None,
                 invoice_currency: Optional[str] = None,
                 invoice_number: Optional[str] = None,
                 invoice_total_amount: Optional[float] = None,
                 redeemed_rewards: Optional[float] = None,
                 redemption_code: Optional[str] = None,
                 redemption_email: Optional[str] = None,
                 time_invoiced: Optional[str] = None,
                 time_redeemed: Optional[str] = None):
        if base_rewards is not None:
            pulumi.set(__self__, "base_rewards", base_rewards)
        if fx_rate is not None:
            pulumi.set(__self__, "fx_rate", fx_rate)
        if invoice_currency is not None:
            pulumi.set(__self__, "invoice_currency", invoice_currency)
        if invoice_number is not None:
            pulumi.set(__self__, "invoice_number", invoice_number)
        if invoice_total_amount is not None:
            pulumi.set(__self__, "invoice_total_amount", invoice_total_amount)
        if redeemed_rewards is not None:
            pulumi.set(__self__, "redeemed_rewards", redeemed_rewards)
        if redemption_code is not None:
            pulumi.set(__self__, "redemption_code", redemption_code)
        if redemption_email is not None:
            pulumi.set(__self__, "redemption_email", redemption_email)
        if time_invoiced is not None:
            pulumi.set(__self__, "time_invoiced", time_invoiced)
        if time_redeemed is not None:
            pulumi.set(__self__, "time_redeemed", time_redeemed)

    @property
    @pulumi.getter(name="baseRewards")
    def base_rewards(self) -> Optional[float]:
        return pulumi.get(self, "base_rewards")

    @property
    @pulumi.getter(name="fxRate")
    def fx_rate(self) -> Optional[float]:
        return pulumi.get(self, "fx_rate")

    @property
    @pulumi.getter(name="invoiceCurrency")
    def invoice_currency(self) -> Optional[str]:
        return pulumi.get(self, "invoice_currency")

    @property
    @pulumi.getter(name="invoiceNumber")
    def invoice_number(self) -> Optional[str]:
        return pulumi.get(self, "invoice_number")

    @property
    @pulumi.getter(name="invoiceTotalAmount")
    def invoice_total_amount(self) -> Optional[float]:
        return pulumi.get(self, "invoice_total_amount")

    @property
    @pulumi.getter(name="redeemedRewards")
    def redeemed_rewards(self) -> Optional[float]:
        return pulumi.get(self, "redeemed_rewards")

    @property
    @pulumi.getter(name="redemptionCode")
    def redemption_code(self) -> Optional[str]:
        return pulumi.get(self, "redemption_code")

    @property
    @pulumi.getter(name="redemptionEmail")
    def redemption_email(self) -> Optional[str]:
        return pulumi.get(self, "redemption_email")

    @property
    @pulumi.getter(name="timeInvoiced")
    def time_invoiced(self) -> Optional[str]:
        return pulumi.get(self, "time_invoiced")

    @property
    @pulumi.getter(name="timeRedeemed")
    def time_redeemed(self) -> Optional[str]:
        return pulumi.get(self, "time_redeemed")


@pulumi.output_type
class GetSubscriptionRedemptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionRedemptionsRedemptionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionRedemptionsRedemptionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionRedemptionsRedemptionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionRedemptionsRedemptionCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionRedemptionsRedemptionCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionRedemptionsRedemptionCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionRedemptionsRedemptionCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 base_rewards: Optional[float] = None,
                 fx_rate: Optional[float] = None,
                 invoice_currency: Optional[str] = None,
                 invoice_number: Optional[str] = None,
                 invoice_total_amount: Optional[float] = None,
                 redeemed_rewards: Optional[float] = None,
                 redemption_code: Optional[str] = None,
                 redemption_email: Optional[str] = None,
                 time_invoiced: Optional[str] = None,
                 time_redeemed: Optional[str] = None):
        if base_rewards is not None:
            pulumi.set(__self__, "base_rewards", base_rewards)
        if fx_rate is not None:
            pulumi.set(__self__, "fx_rate", fx_rate)
        if invoice_currency is not None:
            pulumi.set(__self__, "invoice_currency", invoice_currency)
        if invoice_number is not None:
            pulumi.set(__self__, "invoice_number", invoice_number)
        if invoice_total_amount is not None:
            pulumi.set(__self__, "invoice_total_amount", invoice_total_amount)
        if redeemed_rewards is not None:
            pulumi.set(__self__, "redeemed_rewards", redeemed_rewards)
        if redemption_code is not None:
            pulumi.set(__self__, "redemption_code", redemption_code)
        if redemption_email is not None:
            pulumi.set(__self__, "redemption_email", redemption_email)
        if time_invoiced is not None:
            pulumi.set(__self__, "time_invoiced", time_invoiced)
        if time_redeemed is not None:
            pulumi.set(__self__, "time_redeemed", time_redeemed)

    @property
    @pulumi.getter(name="baseRewards")
    def base_rewards(self) -> Optional[float]:
        return pulumi.get(self, "base_rewards")

    @property
    @pulumi.getter(name="fxRate")
    def fx_rate(self) -> Optional[float]:
        return pulumi.get(self, "fx_rate")

    @property
    @pulumi.getter(name="invoiceCurrency")
    def invoice_currency(self) -> Optional[str]:
        return pulumi.get(self, "invoice_currency")

    @property
    @pulumi.getter(name="invoiceNumber")
    def invoice_number(self) -> Optional[str]:
        return pulumi.get(self, "invoice_number")

    @property
    @pulumi.getter(name="invoiceTotalAmount")
    def invoice_total_amount(self) -> Optional[float]:
        return pulumi.get(self, "invoice_total_amount")

    @property
    @pulumi.getter(name="redeemedRewards")
    def redeemed_rewards(self) -> Optional[float]:
        return pulumi.get(self, "redeemed_rewards")

    @property
    @pulumi.getter(name="redemptionCode")
    def redemption_code(self) -> Optional[str]:
        return pulumi.get(self, "redemption_code")

    @property
    @pulumi.getter(name="redemptionEmail")
    def redemption_email(self) -> Optional[str]:
        return pulumi.get(self, "redemption_email")

    @property
    @pulumi.getter(name="timeInvoiced")
    def time_invoiced(self) -> Optional[str]:
        return pulumi.get(self, "time_invoiced")

    @property
    @pulumi.getter(name="timeRedeemed")
    def time_redeemed(self) -> Optional[str]:
        return pulumi.get(self, "time_redeemed")


@pulumi.output_type
class GetSubscriptionRewardItemResult(dict):
    def __init__(__self__, *,
                 available_rewards: Optional[float] = None,
                 earned_rewards: Optional[float] = None,
                 eligible_usage_amount: Optional[float] = None,
                 ineligible_usage_amount: Optional[float] = None,
                 is_manual: Optional[bool] = None,
                 redeemed_rewards: Optional[float] = None,
                 time_rewards_earned: Optional[str] = None,
                 time_rewards_expired: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None,
                 usage_amount: Optional[float] = None,
                 usage_period_key: Optional[str] = None):
        if available_rewards is not None:
            pulumi.set(__self__, "available_rewards", available_rewards)
        if earned_rewards is not None:
            pulumi.set(__self__, "earned_rewards", earned_rewards)
        if eligible_usage_amount is not None:
            pulumi.set(__self__, "eligible_usage_amount", eligible_usage_amount)
        if ineligible_usage_amount is not None:
            pulumi.set(__self__, "ineligible_usage_amount", ineligible_usage_amount)
        if is_manual is not None:
            pulumi.set(__self__, "is_manual", is_manual)
        if redeemed_rewards is not None:
            pulumi.set(__self__, "redeemed_rewards", redeemed_rewards)
        if time_rewards_earned is not None:
            pulumi.set(__self__, "time_rewards_earned", time_rewards_earned)
        if time_rewards_expired is not None:
            pulumi.set(__self__, "time_rewards_expired", time_rewards_expired)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)
        if usage_amount is not None:
            pulumi.set(__self__, "usage_amount", usage_amount)
        if usage_period_key is not None:
            pulumi.set(__self__, "usage_period_key", usage_period_key)

    @property
    @pulumi.getter(name="availableRewards")
    def available_rewards(self) -> Optional[float]:
        return pulumi.get(self, "available_rewards")

    @property
    @pulumi.getter(name="earnedRewards")
    def earned_rewards(self) -> Optional[float]:
        return pulumi.get(self, "earned_rewards")

    @property
    @pulumi.getter(name="eligibleUsageAmount")
    def eligible_usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "eligible_usage_amount")

    @property
    @pulumi.getter(name="ineligibleUsageAmount")
    def ineligible_usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "ineligible_usage_amount")

    @property
    @pulumi.getter(name="isManual")
    def is_manual(self) -> Optional[bool]:
        return pulumi.get(self, "is_manual")

    @property
    @pulumi.getter(name="redeemedRewards")
    def redeemed_rewards(self) -> Optional[float]:
        return pulumi.get(self, "redeemed_rewards")

    @property
    @pulumi.getter(name="timeRewardsEarned")
    def time_rewards_earned(self) -> Optional[str]:
        return pulumi.get(self, "time_rewards_earned")

    @property
    @pulumi.getter(name="timeRewardsExpired")
    def time_rewards_expired(self) -> Optional[str]:
        return pulumi.get(self, "time_rewards_expired")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")

    @property
    @pulumi.getter(name="usageAmount")
    def usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "usage_amount")

    @property
    @pulumi.getter(name="usagePeriodKey")
    def usage_period_key(self) -> Optional[str]:
        return pulumi.get(self, "usage_period_key")


@pulumi.output_type
class GetSubscriptionRewardSummaryResult(dict):
    def __init__(__self__, *,
                 currency: Optional[str] = None,
                 redemption_code: Optional[str] = None,
                 rewards_rate: Optional[float] = None,
                 subscription_id: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 total_rewards_available: Optional[float] = None):
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if redemption_code is not None:
            pulumi.set(__self__, "redemption_code", redemption_code)
        if rewards_rate is not None:
            pulumi.set(__self__, "rewards_rate", rewards_rate)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if total_rewards_available is not None:
            pulumi.set(__self__, "total_rewards_available", total_rewards_available)

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="redemptionCode")
    def redemption_code(self) -> Optional[str]:
        return pulumi.get(self, "redemption_code")

    @property
    @pulumi.getter(name="rewardsRate")
    def rewards_rate(self) -> Optional[float]:
        return pulumi.get(self, "rewards_rate")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="totalRewardsAvailable")
    def total_rewards_available(self) -> Optional[float]:
        return pulumi.get(self, "total_rewards_available")


@pulumi.output_type
class GetSubscriptionRewardsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscriptionRewardsRewardCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionRewardsRewardCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionRewardsRewardCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscriptionRewardsRewardCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscriptionRewardsRewardCollectionItemItemResult']] = None,
                 summaries: Optional[Sequence['outputs.GetSubscriptionRewardsRewardCollectionItemSummaryResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if summaries is not None:
            pulumi.set(__self__, "summaries", summaries)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscriptionRewardsRewardCollectionItemItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def summaries(self) -> Optional[Sequence['outputs.GetSubscriptionRewardsRewardCollectionItemSummaryResult']]:
        return pulumi.get(self, "summaries")


@pulumi.output_type
class GetSubscriptionRewardsRewardCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 available_rewards: Optional[float] = None,
                 earned_rewards: Optional[float] = None,
                 eligible_usage_amount: Optional[float] = None,
                 ineligible_usage_amount: Optional[float] = None,
                 is_manual: Optional[bool] = None,
                 redeemed_rewards: Optional[float] = None,
                 time_rewards_earned: Optional[str] = None,
                 time_rewards_expired: Optional[str] = None,
                 time_usage_ended: Optional[str] = None,
                 time_usage_started: Optional[str] = None,
                 usage_amount: Optional[float] = None,
                 usage_period_key: Optional[str] = None):
        if available_rewards is not None:
            pulumi.set(__self__, "available_rewards", available_rewards)
        if earned_rewards is not None:
            pulumi.set(__self__, "earned_rewards", earned_rewards)
        if eligible_usage_amount is not None:
            pulumi.set(__self__, "eligible_usage_amount", eligible_usage_amount)
        if ineligible_usage_amount is not None:
            pulumi.set(__self__, "ineligible_usage_amount", ineligible_usage_amount)
        if is_manual is not None:
            pulumi.set(__self__, "is_manual", is_manual)
        if redeemed_rewards is not None:
            pulumi.set(__self__, "redeemed_rewards", redeemed_rewards)
        if time_rewards_earned is not None:
            pulumi.set(__self__, "time_rewards_earned", time_rewards_earned)
        if time_rewards_expired is not None:
            pulumi.set(__self__, "time_rewards_expired", time_rewards_expired)
        if time_usage_ended is not None:
            pulumi.set(__self__, "time_usage_ended", time_usage_ended)
        if time_usage_started is not None:
            pulumi.set(__self__, "time_usage_started", time_usage_started)
        if usage_amount is not None:
            pulumi.set(__self__, "usage_amount", usage_amount)
        if usage_period_key is not None:
            pulumi.set(__self__, "usage_period_key", usage_period_key)

    @property
    @pulumi.getter(name="availableRewards")
    def available_rewards(self) -> Optional[float]:
        return pulumi.get(self, "available_rewards")

    @property
    @pulumi.getter(name="earnedRewards")
    def earned_rewards(self) -> Optional[float]:
        return pulumi.get(self, "earned_rewards")

    @property
    @pulumi.getter(name="eligibleUsageAmount")
    def eligible_usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "eligible_usage_amount")

    @property
    @pulumi.getter(name="ineligibleUsageAmount")
    def ineligible_usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "ineligible_usage_amount")

    @property
    @pulumi.getter(name="isManual")
    def is_manual(self) -> Optional[bool]:
        return pulumi.get(self, "is_manual")

    @property
    @pulumi.getter(name="redeemedRewards")
    def redeemed_rewards(self) -> Optional[float]:
        return pulumi.get(self, "redeemed_rewards")

    @property
    @pulumi.getter(name="timeRewardsEarned")
    def time_rewards_earned(self) -> Optional[str]:
        return pulumi.get(self, "time_rewards_earned")

    @property
    @pulumi.getter(name="timeRewardsExpired")
    def time_rewards_expired(self) -> Optional[str]:
        return pulumi.get(self, "time_rewards_expired")

    @property
    @pulumi.getter(name="timeUsageEnded")
    def time_usage_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_ended")

    @property
    @pulumi.getter(name="timeUsageStarted")
    def time_usage_started(self) -> Optional[str]:
        return pulumi.get(self, "time_usage_started")

    @property
    @pulumi.getter(name="usageAmount")
    def usage_amount(self) -> Optional[float]:
        return pulumi.get(self, "usage_amount")

    @property
    @pulumi.getter(name="usagePeriodKey")
    def usage_period_key(self) -> Optional[str]:
        return pulumi.get(self, "usage_period_key")


@pulumi.output_type
class GetSubscriptionRewardsRewardCollectionItemSummaryResult(dict):
    def __init__(__self__, *,
                 currency: Optional[str] = None,
                 redemption_code: Optional[str] = None,
                 rewards_rate: Optional[float] = None,
                 subscription_id: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 total_rewards_available: Optional[float] = None):
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if redemption_code is not None:
            pulumi.set(__self__, "redemption_code", redemption_code)
        if rewards_rate is not None:
            pulumi.set(__self__, "rewards_rate", rewards_rate)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if total_rewards_available is not None:
            pulumi.set(__self__, "total_rewards_available", total_rewards_available)

    @property
    @pulumi.getter
    def currency(self) -> Optional[str]:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="redemptionCode")
    def redemption_code(self) -> Optional[str]:
        return pulumi.get(self, "redemption_code")

    @property
    @pulumi.getter(name="rewardsRate")
    def rewards_rate(self) -> Optional[float]:
        return pulumi.get(self, "rewards_rate")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="totalRewardsAvailable")
    def total_rewards_available(self) -> Optional[float]:
        return pulumi.get(self, "total_rewards_available")


@pulumi.output_type
class GetUsagelimitsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUsagelimitsUsageLimitCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetUsagelimitsUsageLimitCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetUsagelimitsUsageLimitCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUsagelimitsUsageLimitCollectionItemResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 alert_level: Optional[float] = None,
                 created_by: Optional[str] = None,
                 entitlement_id: Optional[str] = None,
                 id: Optional[str] = None,
                 limit: Optional[str] = None,
                 limit_type: Optional[str] = None,
                 max_hard_limit: Optional[str] = None,
                 modified_by: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 service_name: Optional[str] = None,
                 sku_part_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_modified: Optional[str] = None,
                 value_type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alert_level is not None:
            pulumi.set(__self__, "alert_level", alert_level)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if entitlement_id is not None:
            pulumi.set(__self__, "entitlement_id", entitlement_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)
        if max_hard_limit is not None:
            pulumi.set(__self__, "max_hard_limit", max_hard_limit)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if sku_part_id is not None:
            pulumi.set(__self__, "sku_part_id", sku_part_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="alertLevel")
    def alert_level(self) -> Optional[float]:
        return pulumi.get(self, "alert_level")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="entitlementId")
    def entitlement_id(self) -> Optional[str]:
        return pulumi.get(self, "entitlement_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @property
    @pulumi.getter(name="maxHardLimit")
    def max_hard_limit(self) -> Optional[str]:
        return pulumi.get(self, "max_hard_limit")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[str]:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="skuPartId")
    def sku_part_id(self) -> Optional[str]:
        return pulumi.get(self, "sku_part_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


