# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSecretVersionSdkV2Result',
    'AwaitableGetSecretVersionSdkV2Result',
    'get_secret_version_sdk_v2',
    'get_secret_version_sdk_v2_output',
]

@pulumi.output_type
class GetSecretVersionSdkV2Result:
    """
    A collection of values returned by getSecretVersionSdkV2.
    """
    def __init__(__self__, content_type=None, id=None, is_content_auto_generated=None, name=None, secret_id=None, secret_version_number=None, stages=None, time_created=None, time_of_current_version_expiry=None, time_of_deletion=None, version_number=None):
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        pulumi.set(__self__, "content_type", content_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_content_auto_generated and not isinstance(is_content_auto_generated, bool):
            raise TypeError("Expected argument 'is_content_auto_generated' to be a bool")
        pulumi.set(__self__, "is_content_auto_generated", is_content_auto_generated)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if secret_id and not isinstance(secret_id, str):
            raise TypeError("Expected argument 'secret_id' to be a str")
        pulumi.set(__self__, "secret_id", secret_id)
        if secret_version_number and not isinstance(secret_version_number, str):
            raise TypeError("Expected argument 'secret_version_number' to be a str")
        pulumi.set(__self__, "secret_version_number", secret_version_number)
        if stages and not isinstance(stages, list):
            raise TypeError("Expected argument 'stages' to be a list")
        pulumi.set(__self__, "stages", stages)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_of_current_version_expiry and not isinstance(time_of_current_version_expiry, str):
            raise TypeError("Expected argument 'time_of_current_version_expiry' to be a str")
        pulumi.set(__self__, "time_of_current_version_expiry", time_of_current_version_expiry)
        if time_of_deletion and not isinstance(time_of_deletion, str):
            raise TypeError("Expected argument 'time_of_deletion' to be a str")
        pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if version_number and not isinstance(version_number, str):
            raise TypeError("Expected argument 'version_number' to be a str")
        pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isContentAutoGenerated")
    def is_content_auto_generated(self) -> bool:
        return pulumi.get(self, "is_content_auto_generated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersionNumber")
    def secret_version_number(self) -> str:
        return pulumi.get(self, "secret_version_number")

    @property
    @pulumi.getter
    def stages(self) -> Sequence[str]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfCurrentVersionExpiry")
    def time_of_current_version_expiry(self) -> str:
        return pulumi.get(self, "time_of_current_version_expiry")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> str:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> str:
        return pulumi.get(self, "version_number")


class AwaitableGetSecretVersionSdkV2Result(GetSecretVersionSdkV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretVersionSdkV2Result(
            content_type=self.content_type,
            id=self.id,
            is_content_auto_generated=self.is_content_auto_generated,
            name=self.name,
            secret_id=self.secret_id,
            secret_version_number=self.secret_version_number,
            stages=self.stages,
            time_created=self.time_created,
            time_of_current_version_expiry=self.time_of_current_version_expiry,
            time_of_deletion=self.time_of_deletion,
            version_number=self.version_number)


def get_secret_version_sdk_v2(secret_id: Optional[str] = None,
                              secret_version_number: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretVersionSdkV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['secretId'] = secret_id
    __args__['secretVersionNumber'] = secret_version_number
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Vault/getSecretVersionSdkV2:getSecretVersionSdkV2', __args__, opts=opts, typ=GetSecretVersionSdkV2Result).value

    return AwaitableGetSecretVersionSdkV2Result(
        content_type=pulumi.get(__ret__, 'content_type'),
        id=pulumi.get(__ret__, 'id'),
        is_content_auto_generated=pulumi.get(__ret__, 'is_content_auto_generated'),
        name=pulumi.get(__ret__, 'name'),
        secret_id=pulumi.get(__ret__, 'secret_id'),
        secret_version_number=pulumi.get(__ret__, 'secret_version_number'),
        stages=pulumi.get(__ret__, 'stages'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_of_current_version_expiry=pulumi.get(__ret__, 'time_of_current_version_expiry'),
        time_of_deletion=pulumi.get(__ret__, 'time_of_deletion'),
        version_number=pulumi.get(__ret__, 'version_number'))
def get_secret_version_sdk_v2_output(secret_id: Optional[pulumi.Input[str]] = None,
                                     secret_version_number: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecretVersionSdkV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['secretId'] = secret_id
    __args__['secretVersionNumber'] = secret_version_number
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Vault/getSecretVersionSdkV2:getSecretVersionSdkV2', __args__, opts=opts, typ=GetSecretVersionSdkV2Result)
    return __ret__.apply(lambda __response__: GetSecretVersionSdkV2Result(
        content_type=pulumi.get(__response__, 'content_type'),
        id=pulumi.get(__response__, 'id'),
        is_content_auto_generated=pulumi.get(__response__, 'is_content_auto_generated'),
        name=pulumi.get(__response__, 'name'),
        secret_id=pulumi.get(__response__, 'secret_id'),
        secret_version_number=pulumi.get(__response__, 'secret_version_number'),
        stages=pulumi.get(__response__, 'stages'),
        time_created=pulumi.get(__response__, 'time_created'),
        time_of_current_version_expiry=pulumi.get(__response__, 'time_of_current_version_expiry'),
        time_of_deletion=pulumi.get(__response__, 'time_of_deletion'),
        version_number=pulumi.get(__response__, 'version_number')))
