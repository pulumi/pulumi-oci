# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SecretSecretContent',
    'SecretSecretRule',
    'GetSecretSecretContentResult',
    'GetSecretSecretRuleResult',
    'GetSecretsFilterResult',
    'GetSecretsSecretResult',
    'GetSecretsSecretSecretContentResult',
    'GetSecretsSecretSecretRuleResult',
]

@pulumi.output_type
class SecretSecretContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSecretContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSecretContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSecretContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: str,
                 name: Optional[str] = None,
                 stage: Optional[str] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stage(self) -> Optional[str]:
        return pulumi.get(self, "stage")


@pulumi.output_type
class SecretSecretRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleType":
            suggest = "rule_type"
        elif key == "isEnforcedOnDeletedSecretVersions":
            suggest = "is_enforced_on_deleted_secret_versions"
        elif key == "isSecretContentRetrievalBlockedOnExpiry":
            suggest = "is_secret_content_retrieval_blocked_on_expiry"
        elif key == "secretVersionExpiryInterval":
            suggest = "secret_version_expiry_interval"
        elif key == "timeOfAbsoluteExpiry":
            suggest = "time_of_absolute_expiry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSecretRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSecretRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSecretRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_type: str,
                 is_enforced_on_deleted_secret_versions: Optional[bool] = None,
                 is_secret_content_retrieval_blocked_on_expiry: Optional[bool] = None,
                 secret_version_expiry_interval: Optional[str] = None,
                 time_of_absolute_expiry: Optional[str] = None):
        pulumi.set(__self__, "rule_type", rule_type)
        if is_enforced_on_deleted_secret_versions is not None:
            pulumi.set(__self__, "is_enforced_on_deleted_secret_versions", is_enforced_on_deleted_secret_versions)
        if is_secret_content_retrieval_blocked_on_expiry is not None:
            pulumi.set(__self__, "is_secret_content_retrieval_blocked_on_expiry", is_secret_content_retrieval_blocked_on_expiry)
        if secret_version_expiry_interval is not None:
            pulumi.set(__self__, "secret_version_expiry_interval", secret_version_expiry_interval)
        if time_of_absolute_expiry is not None:
            pulumi.set(__self__, "time_of_absolute_expiry", time_of_absolute_expiry)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="isEnforcedOnDeletedSecretVersions")
    def is_enforced_on_deleted_secret_versions(self) -> Optional[bool]:
        return pulumi.get(self, "is_enforced_on_deleted_secret_versions")

    @property
    @pulumi.getter(name="isSecretContentRetrievalBlockedOnExpiry")
    def is_secret_content_retrieval_blocked_on_expiry(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret_content_retrieval_blocked_on_expiry")

    @property
    @pulumi.getter(name="secretVersionExpiryInterval")
    def secret_version_expiry_interval(self) -> Optional[str]:
        return pulumi.get(self, "secret_version_expiry_interval")

    @property
    @pulumi.getter(name="timeOfAbsoluteExpiry")
    def time_of_absolute_expiry(self) -> Optional[str]:
        return pulumi.get(self, "time_of_absolute_expiry")


@pulumi.output_type
class GetSecretSecretContentResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 content_type: Optional[str] = None,
                 name: Optional[str] = None,
                 stage: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stage(self) -> Optional[str]:
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSecretSecretRuleResult(dict):
    def __init__(__self__, *,
                 is_enforced_on_deleted_secret_versions: Optional[bool] = None,
                 is_secret_content_retrieval_blocked_on_expiry: Optional[bool] = None,
                 rule_type: Optional[str] = None,
                 secret_version_expiry_interval: Optional[str] = None,
                 time_of_absolute_expiry: Optional[str] = None):
        if is_enforced_on_deleted_secret_versions is not None:
            pulumi.set(__self__, "is_enforced_on_deleted_secret_versions", is_enforced_on_deleted_secret_versions)
        if is_secret_content_retrieval_blocked_on_expiry is not None:
            pulumi.set(__self__, "is_secret_content_retrieval_blocked_on_expiry", is_secret_content_retrieval_blocked_on_expiry)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if secret_version_expiry_interval is not None:
            pulumi.set(__self__, "secret_version_expiry_interval", secret_version_expiry_interval)
        if time_of_absolute_expiry is not None:
            pulumi.set(__self__, "time_of_absolute_expiry", time_of_absolute_expiry)

    @property
    @pulumi.getter(name="isEnforcedOnDeletedSecretVersions")
    def is_enforced_on_deleted_secret_versions(self) -> Optional[bool]:
        return pulumi.get(self, "is_enforced_on_deleted_secret_versions")

    @property
    @pulumi.getter(name="isSecretContentRetrievalBlockedOnExpiry")
    def is_secret_content_retrieval_blocked_on_expiry(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret_content_retrieval_blocked_on_expiry")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="secretVersionExpiryInterval")
    def secret_version_expiry_interval(self) -> Optional[str]:
        return pulumi.get(self, "secret_version_expiry_interval")

    @property
    @pulumi.getter(name="timeOfAbsoluteExpiry")
    def time_of_absolute_expiry(self) -> Optional[str]:
        return pulumi.get(self, "time_of_absolute_expiry")


@pulumi.output_type
class GetSecretsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecretsSecretResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 current_version_number: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 key_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 secret_contents: Optional[Sequence['outputs.GetSecretsSecretSecretContentResult']] = None,
                 secret_name: Optional[str] = None,
                 secret_rules: Optional[Sequence['outputs.GetSecretsSecretSecretRuleResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_of_current_version_expiry: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if current_version_number is not None:
            pulumi.set(__self__, "current_version_number", current_version_number)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if secret_contents is not None:
            pulumi.set(__self__, "secret_contents", secret_contents)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if secret_rules is not None:
            pulumi.set(__self__, "secret_rules", secret_rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_current_version_expiry is not None:
            pulumi.set(__self__, "time_of_current_version_expiry", time_of_current_version_expiry)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currentVersionNumber")
    def current_version_number(self) -> Optional[str]:
        return pulumi.get(self, "current_version_number")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="secretContents")
    def secret_contents(self) -> Optional[Sequence['outputs.GetSecretsSecretSecretContentResult']]:
        return pulumi.get(self, "secret_contents")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretRules")
    def secret_rules(self) -> Optional[Sequence['outputs.GetSecretsSecretSecretRuleResult']]:
        return pulumi.get(self, "secret_rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfCurrentVersionExpiry")
    def time_of_current_version_expiry(self) -> Optional[str]:
        return pulumi.get(self, "time_of_current_version_expiry")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetSecretsSecretSecretContentResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 content_type: Optional[str] = None,
                 name: Optional[str] = None,
                 stage: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stage(self) -> Optional[str]:
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSecretsSecretSecretRuleResult(dict):
    def __init__(__self__, *,
                 is_enforced_on_deleted_secret_versions: Optional[bool] = None,
                 is_secret_content_retrieval_blocked_on_expiry: Optional[bool] = None,
                 rule_type: Optional[str] = None,
                 secret_version_expiry_interval: Optional[str] = None,
                 time_of_absolute_expiry: Optional[str] = None):
        if is_enforced_on_deleted_secret_versions is not None:
            pulumi.set(__self__, "is_enforced_on_deleted_secret_versions", is_enforced_on_deleted_secret_versions)
        if is_secret_content_retrieval_blocked_on_expiry is not None:
            pulumi.set(__self__, "is_secret_content_retrieval_blocked_on_expiry", is_secret_content_retrieval_blocked_on_expiry)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if secret_version_expiry_interval is not None:
            pulumi.set(__self__, "secret_version_expiry_interval", secret_version_expiry_interval)
        if time_of_absolute_expiry is not None:
            pulumi.set(__self__, "time_of_absolute_expiry", time_of_absolute_expiry)

    @property
    @pulumi.getter(name="isEnforcedOnDeletedSecretVersions")
    def is_enforced_on_deleted_secret_versions(self) -> Optional[bool]:
        return pulumi.get(self, "is_enforced_on_deleted_secret_versions")

    @property
    @pulumi.getter(name="isSecretContentRetrievalBlockedOnExpiry")
    def is_secret_content_retrieval_blocked_on_expiry(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret_content_retrieval_blocked_on_expiry")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="secretVersionExpiryInterval")
    def secret_version_expiry_interval(self) -> Optional[str]:
        return pulumi.get(self, "secret_version_expiry_interval")

    @property
    @pulumi.getter(name="timeOfAbsoluteExpiry")
    def time_of_absolute_expiry(self) -> Optional[str]:
        return pulumi.get(self, "time_of_absolute_expiry")


