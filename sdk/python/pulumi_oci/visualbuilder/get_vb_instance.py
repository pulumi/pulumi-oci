# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetVbInstanceResult',
    'AwaitableGetVbInstanceResult',
    'get_vb_instance',
    'get_vb_instance_output',
]

@pulumi.output_type
class GetVbInstanceResult:
    """
    A collection of values returned by getVbInstance.
    """
    def __init__(__self__, alternate_custom_endpoints=None, attachments=None, compartment_id=None, consumption_model=None, custom_endpoints=None, defined_tags=None, display_name=None, freeform_tags=None, id=None, idcs_infos=None, idcs_open_id=None, instance_url=None, is_visual_builder_enabled=None, management_nat_gateway_ip=None, management_vcn_id=None, node_count=None, service_nat_gateway_ip=None, service_vcn_id=None, state=None, state_message=None, system_tags=None, time_created=None, time_updated=None, vb_instance_id=None):
        if alternate_custom_endpoints and not isinstance(alternate_custom_endpoints, list):
            raise TypeError("Expected argument 'alternate_custom_endpoints' to be a list")
        pulumi.set(__self__, "alternate_custom_endpoints", alternate_custom_endpoints)
        if attachments and not isinstance(attachments, list):
            raise TypeError("Expected argument 'attachments' to be a list")
        pulumi.set(__self__, "attachments", attachments)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if consumption_model and not isinstance(consumption_model, str):
            raise TypeError("Expected argument 'consumption_model' to be a str")
        pulumi.set(__self__, "consumption_model", consumption_model)
        if custom_endpoints and not isinstance(custom_endpoints, list):
            raise TypeError("Expected argument 'custom_endpoints' to be a list")
        pulumi.set(__self__, "custom_endpoints", custom_endpoints)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idcs_infos and not isinstance(idcs_infos, list):
            raise TypeError("Expected argument 'idcs_infos' to be a list")
        pulumi.set(__self__, "idcs_infos", idcs_infos)
        if idcs_open_id and not isinstance(idcs_open_id, str):
            raise TypeError("Expected argument 'idcs_open_id' to be a str")
        pulumi.set(__self__, "idcs_open_id", idcs_open_id)
        if instance_url and not isinstance(instance_url, str):
            raise TypeError("Expected argument 'instance_url' to be a str")
        pulumi.set(__self__, "instance_url", instance_url)
        if is_visual_builder_enabled and not isinstance(is_visual_builder_enabled, bool):
            raise TypeError("Expected argument 'is_visual_builder_enabled' to be a bool")
        pulumi.set(__self__, "is_visual_builder_enabled", is_visual_builder_enabled)
        if management_nat_gateway_ip and not isinstance(management_nat_gateway_ip, str):
            raise TypeError("Expected argument 'management_nat_gateway_ip' to be a str")
        pulumi.set(__self__, "management_nat_gateway_ip", management_nat_gateway_ip)
        if management_vcn_id and not isinstance(management_vcn_id, str):
            raise TypeError("Expected argument 'management_vcn_id' to be a str")
        pulumi.set(__self__, "management_vcn_id", management_vcn_id)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if service_nat_gateway_ip and not isinstance(service_nat_gateway_ip, str):
            raise TypeError("Expected argument 'service_nat_gateway_ip' to be a str")
        pulumi.set(__self__, "service_nat_gateway_ip", service_nat_gateway_ip)
        if service_vcn_id and not isinstance(service_vcn_id, str):
            raise TypeError("Expected argument 'service_vcn_id' to be a str")
        pulumi.set(__self__, "service_vcn_id", service_vcn_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_message and not isinstance(state_message, str):
            raise TypeError("Expected argument 'state_message' to be a str")
        pulumi.set(__self__, "state_message", state_message)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if vb_instance_id and not isinstance(vb_instance_id, str):
            raise TypeError("Expected argument 'vb_instance_id' to be a str")
        pulumi.set(__self__, "vb_instance_id", vb_instance_id)

    @property
    @pulumi.getter(name="alternateCustomEndpoints")
    def alternate_custom_endpoints(self) -> Optional[Sequence['outputs.GetVbInstanceAlternateCustomEndpointResult']]:
        return pulumi.get(self, "alternate_custom_endpoints")

    @property
    @pulumi.getter
    def attachments(self) -> Optional[Sequence['outputs.GetVbInstanceAttachmentResult']]:
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> Optional[str]:
        return pulumi.get(self, "consumption_model")

    @property
    @pulumi.getter(name="customEndpoints")
    def custom_endpoints(self) -> Optional[Sequence['outputs.GetVbInstanceCustomEndpointResult']]:
        return pulumi.get(self, "custom_endpoints")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsInfos")
    def idcs_infos(self) -> Optional[Sequence['outputs.GetVbInstanceIdcsInfoResult']]:
        return pulumi.get(self, "idcs_infos")

    @property
    @pulumi.getter(name="idcsOpenId")
    def idcs_open_id(self) -> Optional[str]:
        return pulumi.get(self, "idcs_open_id")

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[str]:
        return pulumi.get(self, "instance_url")

    @property
    @pulumi.getter(name="isVisualBuilderEnabled")
    def is_visual_builder_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_visual_builder_enabled")

    @property
    @pulumi.getter(name="managementNatGatewayIp")
    def management_nat_gateway_ip(self) -> Optional[str]:
        return pulumi.get(self, "management_nat_gateway_ip")

    @property
    @pulumi.getter(name="managementVcnId")
    def management_vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "management_vcn_id")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="serviceNatGatewayIp")
    def service_nat_gateway_ip(self) -> Optional[str]:
        return pulumi.get(self, "service_nat_gateway_ip")

    @property
    @pulumi.getter(name="serviceVcnId")
    def service_vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "service_vcn_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vbInstanceId")
    def vb_instance_id(self) -> str:
        return pulumi.get(self, "vb_instance_id")


class AwaitableGetVbInstanceResult(GetVbInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVbInstanceResult(
            alternate_custom_endpoints=self.alternate_custom_endpoints,
            attachments=self.attachments,
            compartment_id=self.compartment_id,
            consumption_model=self.consumption_model,
            custom_endpoints=self.custom_endpoints,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            idcs_infos=self.idcs_infos,
            idcs_open_id=self.idcs_open_id,
            instance_url=self.instance_url,
            is_visual_builder_enabled=self.is_visual_builder_enabled,
            management_nat_gateway_ip=self.management_nat_gateway_ip,
            management_vcn_id=self.management_vcn_id,
            node_count=self.node_count,
            service_nat_gateway_ip=self.service_nat_gateway_ip,
            service_vcn_id=self.service_vcn_id,
            state=self.state,
            state_message=self.state_message,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated,
            vb_instance_id=self.vb_instance_id)


def get_vb_instance(vb_instance_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVbInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vbInstanceId'] = vb_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:VisualBuilder/getVbInstance:getVbInstance', __args__, opts=opts, typ=GetVbInstanceResult).value

    return AwaitableGetVbInstanceResult(
        alternate_custom_endpoints=pulumi.get(__ret__, 'alternate_custom_endpoints'),
        attachments=pulumi.get(__ret__, 'attachments'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        consumption_model=pulumi.get(__ret__, 'consumption_model'),
        custom_endpoints=pulumi.get(__ret__, 'custom_endpoints'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        idcs_infos=pulumi.get(__ret__, 'idcs_infos'),
        idcs_open_id=pulumi.get(__ret__, 'idcs_open_id'),
        instance_url=pulumi.get(__ret__, 'instance_url'),
        is_visual_builder_enabled=pulumi.get(__ret__, 'is_visual_builder_enabled'),
        management_nat_gateway_ip=pulumi.get(__ret__, 'management_nat_gateway_ip'),
        management_vcn_id=pulumi.get(__ret__, 'management_vcn_id'),
        node_count=pulumi.get(__ret__, 'node_count'),
        service_nat_gateway_ip=pulumi.get(__ret__, 'service_nat_gateway_ip'),
        service_vcn_id=pulumi.get(__ret__, 'service_vcn_id'),
        state=pulumi.get(__ret__, 'state'),
        state_message=pulumi.get(__ret__, 'state_message'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        vb_instance_id=pulumi.get(__ret__, 'vb_instance_id'))


@_utilities.lift_output_func(get_vb_instance)
def get_vb_instance_output(vb_instance_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVbInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
