# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VbInstanceArgs', 'VbInstance']

@pulumi.input_type
class VbInstanceArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 node_count: pulumi.Input[int],
                 alternate_custom_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAlternateCustomEndpointArgs']]]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 custom_endpoint: Optional[pulumi.Input['VbInstanceCustomEndpointArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_open_id: Optional[pulumi.Input[str]] = None,
                 is_visual_builder_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a VbInstance resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "node_count", node_count)
        if alternate_custom_endpoints is not None:
            pulumi.set(__self__, "alternate_custom_endpoints", alternate_custom_endpoints)
        if consumption_model is not None:
            pulumi.set(__self__, "consumption_model", consumption_model)
        if custom_endpoint is not None:
            pulumi.set(__self__, "custom_endpoint", custom_endpoint)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if idcs_open_id is not None:
            pulumi.set(__self__, "idcs_open_id", idcs_open_id)
        if is_visual_builder_enabled is not None:
            pulumi.set(__self__, "is_visual_builder_enabled", is_visual_builder_enabled)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="alternateCustomEndpoints")
    def alternate_custom_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAlternateCustomEndpointArgs']]]]:
        return pulumi.get(self, "alternate_custom_endpoints")

    @alternate_custom_endpoints.setter
    def alternate_custom_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAlternateCustomEndpointArgs']]]]):
        pulumi.set(self, "alternate_custom_endpoints", value)

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumption_model")

    @consumption_model.setter
    def consumption_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumption_model", value)

    @property
    @pulumi.getter(name="customEndpoint")
    def custom_endpoint(self) -> Optional[pulumi.Input['VbInstanceCustomEndpointArgs']]:
        return pulumi.get(self, "custom_endpoint")

    @custom_endpoint.setter
    def custom_endpoint(self, value: Optional[pulumi.Input['VbInstanceCustomEndpointArgs']]):
        pulumi.set(self, "custom_endpoint", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="idcsOpenId")
    def idcs_open_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_open_id")

    @idcs_open_id.setter
    def idcs_open_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_open_id", value)

    @property
    @pulumi.getter(name="isVisualBuilderEnabled")
    def is_visual_builder_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_visual_builder_enabled")

    @is_visual_builder_enabled.setter
    def is_visual_builder_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_visual_builder_enabled", value)


@pulumi.input_type
class _VbInstanceState:
    def __init__(__self__, *,
                 alternate_custom_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAlternateCustomEndpointArgs']]]] = None,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAttachmentArgs']]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 custom_endpoint: Optional[pulumi.Input['VbInstanceCustomEndpointArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_infos: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceIdcsInfoArgs']]]] = None,
                 idcs_open_id: Optional[pulumi.Input[str]] = None,
                 instance_url: Optional[pulumi.Input[str]] = None,
                 is_visual_builder_enabled: Optional[pulumi.Input[bool]] = None,
                 management_nat_gateway_ip: Optional[pulumi.Input[str]] = None,
                 management_vcn_id: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 service_nat_gateway_ip: Optional[pulumi.Input[str]] = None,
                 service_vcn_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_message: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VbInstance resources.
        """
        if alternate_custom_endpoints is not None:
            pulumi.set(__self__, "alternate_custom_endpoints", alternate_custom_endpoints)
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if consumption_model is not None:
            pulumi.set(__self__, "consumption_model", consumption_model)
        if custom_endpoint is not None:
            pulumi.set(__self__, "custom_endpoint", custom_endpoint)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if idcs_infos is not None:
            pulumi.set(__self__, "idcs_infos", idcs_infos)
        if idcs_open_id is not None:
            pulumi.set(__self__, "idcs_open_id", idcs_open_id)
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)
        if is_visual_builder_enabled is not None:
            pulumi.set(__self__, "is_visual_builder_enabled", is_visual_builder_enabled)
        if management_nat_gateway_ip is not None:
            pulumi.set(__self__, "management_nat_gateway_ip", management_nat_gateway_ip)
        if management_vcn_id is not None:
            pulumi.set(__self__, "management_vcn_id", management_vcn_id)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if service_nat_gateway_ip is not None:
            pulumi.set(__self__, "service_nat_gateway_ip", service_nat_gateway_ip)
        if service_vcn_id is not None:
            pulumi.set(__self__, "service_vcn_id", service_vcn_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="alternateCustomEndpoints")
    def alternate_custom_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAlternateCustomEndpointArgs']]]]:
        return pulumi.get(self, "alternate_custom_endpoints")

    @alternate_custom_endpoints.setter
    def alternate_custom_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAlternateCustomEndpointArgs']]]]):
        pulumi.set(self, "alternate_custom_endpoints", value)

    @property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAttachmentArgs']]]]:
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceAttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumption_model")

    @consumption_model.setter
    def consumption_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumption_model", value)

    @property
    @pulumi.getter(name="customEndpoint")
    def custom_endpoint(self) -> Optional[pulumi.Input['VbInstanceCustomEndpointArgs']]:
        return pulumi.get(self, "custom_endpoint")

    @custom_endpoint.setter
    def custom_endpoint(self, value: Optional[pulumi.Input['VbInstanceCustomEndpointArgs']]):
        pulumi.set(self, "custom_endpoint", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="idcsInfos")
    def idcs_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceIdcsInfoArgs']]]]:
        return pulumi.get(self, "idcs_infos")

    @idcs_infos.setter
    def idcs_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VbInstanceIdcsInfoArgs']]]]):
        pulumi.set(self, "idcs_infos", value)

    @property
    @pulumi.getter(name="idcsOpenId")
    def idcs_open_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idcs_open_id")

    @idcs_open_id.setter
    def idcs_open_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idcs_open_id", value)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_url", value)

    @property
    @pulumi.getter(name="isVisualBuilderEnabled")
    def is_visual_builder_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_visual_builder_enabled")

    @is_visual_builder_enabled.setter
    def is_visual_builder_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_visual_builder_enabled", value)

    @property
    @pulumi.getter(name="managementNatGatewayIp")
    def management_nat_gateway_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_nat_gateway_ip")

    @management_nat_gateway_ip.setter
    def management_nat_gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_nat_gateway_ip", value)

    @property
    @pulumi.getter(name="managementVcnId")
    def management_vcn_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_vcn_id")

    @management_vcn_id.setter
    def management_vcn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_vcn_id", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="serviceNatGatewayIp")
    def service_nat_gateway_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_nat_gateway_ip")

    @service_nat_gateway_ip.setter
    def service_nat_gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_nat_gateway_ip", value)

    @property
    @pulumi.getter(name="serviceVcnId")
    def service_vcn_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vcn_id")

    @service_vcn_id.setter
    def service_vcn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vcn_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_message")

    @state_message.setter
    def state_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_message", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class VbInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alternate_custom_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VbInstanceAlternateCustomEndpointArgs']]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 custom_endpoint: Optional[pulumi.Input[pulumi.InputType['VbInstanceCustomEndpointArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_open_id: Optional[pulumi.Input[str]] = None,
                 is_visual_builder_enabled: Optional[pulumi.Input[bool]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a VbInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VbInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VbInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VbInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VbInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alternate_custom_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VbInstanceAlternateCustomEndpointArgs']]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 consumption_model: Optional[pulumi.Input[str]] = None,
                 custom_endpoint: Optional[pulumi.Input[pulumi.InputType['VbInstanceCustomEndpointArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 idcs_open_id: Optional[pulumi.Input[str]] = None,
                 is_visual_builder_enabled: Optional[pulumi.Input[bool]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VbInstanceArgs.__new__(VbInstanceArgs)

            __props__.__dict__["alternate_custom_endpoints"] = alternate_custom_endpoints
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["consumption_model"] = consumption_model
            __props__.__dict__["custom_endpoint"] = custom_endpoint
            __props__.__dict__["defined_tags"] = defined_tags
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["idcs_open_id"] = None if idcs_open_id is None else pulumi.Output.secret(idcs_open_id)
            __props__.__dict__["is_visual_builder_enabled"] = is_visual_builder_enabled
            if node_count is None and not opts.urn:
                raise TypeError("Missing required property 'node_count'")
            __props__.__dict__["node_count"] = node_count
            __props__.__dict__["attachments"] = None
            __props__.__dict__["idcs_infos"] = None
            __props__.__dict__["instance_url"] = None
            __props__.__dict__["management_nat_gateway_ip"] = None
            __props__.__dict__["management_vcn_id"] = None
            __props__.__dict__["service_nat_gateway_ip"] = None
            __props__.__dict__["service_vcn_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["state_message"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["idcsOpenId"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VbInstance, __self__).__init__(
            'oci:VisualBuilder/vbInstance:VbInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alternate_custom_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VbInstanceAlternateCustomEndpointArgs']]]]] = None,
            attachments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VbInstanceAttachmentArgs']]]]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            consumption_model: Optional[pulumi.Input[str]] = None,
            custom_endpoint: Optional[pulumi.Input[pulumi.InputType['VbInstanceCustomEndpointArgs']]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            idcs_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VbInstanceIdcsInfoArgs']]]]] = None,
            idcs_open_id: Optional[pulumi.Input[str]] = None,
            instance_url: Optional[pulumi.Input[str]] = None,
            is_visual_builder_enabled: Optional[pulumi.Input[bool]] = None,
            management_nat_gateway_ip: Optional[pulumi.Input[str]] = None,
            management_vcn_id: Optional[pulumi.Input[str]] = None,
            node_count: Optional[pulumi.Input[int]] = None,
            service_nat_gateway_ip: Optional[pulumi.Input[str]] = None,
            service_vcn_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            state_message: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'VbInstance':
        """
        Get an existing VbInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VbInstanceState.__new__(_VbInstanceState)

        __props__.__dict__["alternate_custom_endpoints"] = alternate_custom_endpoints
        __props__.__dict__["attachments"] = attachments
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["consumption_model"] = consumption_model
        __props__.__dict__["custom_endpoint"] = custom_endpoint
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["idcs_infos"] = idcs_infos
        __props__.__dict__["idcs_open_id"] = idcs_open_id
        __props__.__dict__["instance_url"] = instance_url
        __props__.__dict__["is_visual_builder_enabled"] = is_visual_builder_enabled
        __props__.__dict__["management_nat_gateway_ip"] = management_nat_gateway_ip
        __props__.__dict__["management_vcn_id"] = management_vcn_id
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["service_nat_gateway_ip"] = service_nat_gateway_ip
        __props__.__dict__["service_vcn_id"] = service_vcn_id
        __props__.__dict__["state"] = state
        __props__.__dict__["state_message"] = state_message
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return VbInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alternateCustomEndpoints")
    def alternate_custom_endpoints(self) -> pulumi.Output[Optional[Sequence['outputs.VbInstanceAlternateCustomEndpoint']]]:
        return pulumi.get(self, "alternate_custom_endpoints")

    @property
    @pulumi.getter
    def attachments(self) -> pulumi.Output[Optional[Sequence['outputs.VbInstanceAttachment']]]:
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="consumptionModel")
    def consumption_model(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "consumption_model")

    @property
    @pulumi.getter(name="customEndpoint")
    def custom_endpoint(self) -> pulumi.Output[Optional['outputs.VbInstanceCustomEndpoint']]:
        return pulumi.get(self, "custom_endpoint")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="idcsInfos")
    def idcs_infos(self) -> pulumi.Output[Optional[Sequence['outputs.VbInstanceIdcsInfo']]]:
        return pulumi.get(self, "idcs_infos")

    @property
    @pulumi.getter(name="idcsOpenId")
    def idcs_open_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "idcs_open_id")

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "instance_url")

    @property
    @pulumi.getter(name="isVisualBuilderEnabled")
    def is_visual_builder_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_visual_builder_enabled")

    @property
    @pulumi.getter(name="managementNatGatewayIp")
    def management_nat_gateway_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "management_nat_gateway_ip")

    @property
    @pulumi.getter(name="managementVcnId")
    def management_vcn_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "management_vcn_id")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="serviceNatGatewayIp")
    def service_nat_gateway_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_nat_gateway_ip")

    @property
    @pulumi.getter(name="serviceVcnId")
    def service_vcn_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_vcn_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

