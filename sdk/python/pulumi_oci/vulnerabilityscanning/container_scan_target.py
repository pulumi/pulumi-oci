# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerScanTargetArgs', 'ContainerScanTarget']

@pulumi.input_type
class ContainerScanTargetArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 container_scan_recipe_id: pulumi.Input[str],
                 target_registry: pulumi.Input['ContainerScanTargetTargetRegistryArgs'],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a ContainerScanTarget resource.
        :param pulumi.Input[str] compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        :param pulumi.Input[str] container_scan_recipe_id: (Updatable) ID of the container scan recipe this target applies.
        :param pulumi.Input['ContainerScanTargetTargetRegistryArgs'] target_registry: (Updatable) Registry information for a container scan target
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Target description.
        :param pulumi.Input[str] display_name: (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "container_scan_recipe_id", container_scan_recipe_id)
        pulumi.set(__self__, "target_registry", target_registry)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="containerScanRecipeId")
    def container_scan_recipe_id(self) -> pulumi.Input[str]:
        """
        (Updatable) ID of the container scan recipe this target applies.
        """
        return pulumi.get(self, "container_scan_recipe_id")

    @container_scan_recipe_id.setter
    def container_scan_recipe_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_scan_recipe_id", value)

    @property
    @pulumi.getter(name="targetRegistry")
    def target_registry(self) -> pulumi.Input['ContainerScanTargetTargetRegistryArgs']:
        """
        (Updatable) Registry information for a container scan target
        """
        return pulumi.get(self, "target_registry")

    @target_registry.setter
    def target_registry(self, value: pulumi.Input['ContainerScanTargetTargetRegistryArgs']):
        pulumi.set(self, "target_registry", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Target description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)


@pulumi.input_type
class _ContainerScanTargetState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 container_scan_recipe_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_registry: Optional[pulumi.Input['ContainerScanTargetTargetRegistryArgs']] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ContainerScanTarget resources.
        :param pulumi.Input[str] compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        :param pulumi.Input[str] container_scan_recipe_id: (Updatable) ID of the container scan recipe this target applies.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Target description.
        :param pulumi.Input[str] display_name: (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] state: The current state of the config.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input['ContainerScanTargetTargetRegistryArgs'] target_registry: (Updatable) Registry information for a container scan target
        :param pulumi.Input[str] time_created: Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        :param pulumi.Input[str] time_updated: Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_scan_recipe_id is not None:
            pulumi.set(__self__, "container_scan_recipe_id", container_scan_recipe_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_registry is not None:
            pulumi.set(__self__, "target_registry", target_registry)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="containerScanRecipeId")
    def container_scan_recipe_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) ID of the container scan recipe this target applies.
        """
        return pulumi.get(self, "container_scan_recipe_id")

    @container_scan_recipe_id.setter
    def container_scan_recipe_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_scan_recipe_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Target description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the config.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="targetRegistry")
    def target_registry(self) -> Optional[pulumi.Input['ContainerScanTargetTargetRegistryArgs']]:
        """
        (Updatable) Registry information for a container scan target
        """
        return pulumi.get(self, "target_registry")

    @target_registry.setter
    def target_registry(self, value: Optional[pulumi.Input['ContainerScanTargetTargetRegistryArgs']]):
        pulumi.set(self, "target_registry", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class ContainerScanTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 container_scan_recipe_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_registry: Optional[pulumi.Input[pulumi.InputType['ContainerScanTargetTargetRegistryArgs']]] = None,
                 __props__=None):
        """
        This resource provides the Container Scan Target resource in Oracle Cloud Infrastructure Vulnerability Scanning service.

        Creates a new ContainerScanTarget. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_container_scan_target = oci.vulnerability_scanning.ContainerScanTarget("testContainerScanTarget",
            compartment_id=var["compartment_id"],
            container_scan_recipe_id=oci_vulnerability_scanning_container_scan_recipe["test_container_scan_recipe"]["id"],
            target_registry=oci.vulnerability_scanning.ContainerScanTargetTargetRegistryArgs(
                compartment_id=var["compartment_id"],
                type=var["container_scan_target_target_registry_type"],
                repositories=var["container_scan_target_target_registry_repositories"],
                url=var["container_scan_target_target_registry_url"],
            ),
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["container_scan_target_description"],
            display_name=var["container_scan_target_display_name"],
            freeform_tags={
                "bar-key": "value",
            })
        ```

        ## Import

        ContainerScanTargets can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:VulnerabilityScanning/containerScanTarget:ContainerScanTarget test_container_scan_target "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        :param pulumi.Input[str] container_scan_recipe_id: (Updatable) ID of the container scan recipe this target applies.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Target description.
        :param pulumi.Input[str] display_name: (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[pulumi.InputType['ContainerScanTargetTargetRegistryArgs']] target_registry: (Updatable) Registry information for a container scan target
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerScanTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Container Scan Target resource in Oracle Cloud Infrastructure Vulnerability Scanning service.

        Creates a new ContainerScanTarget. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_container_scan_target = oci.vulnerability_scanning.ContainerScanTarget("testContainerScanTarget",
            compartment_id=var["compartment_id"],
            container_scan_recipe_id=oci_vulnerability_scanning_container_scan_recipe["test_container_scan_recipe"]["id"],
            target_registry=oci.vulnerability_scanning.ContainerScanTargetTargetRegistryArgs(
                compartment_id=var["compartment_id"],
                type=var["container_scan_target_target_registry_type"],
                repositories=var["container_scan_target_target_registry_repositories"],
                url=var["container_scan_target_target_registry_url"],
            ),
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["container_scan_target_description"],
            display_name=var["container_scan_target_display_name"],
            freeform_tags={
                "bar-key": "value",
            })
        ```

        ## Import

        ContainerScanTargets can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:VulnerabilityScanning/containerScanTarget:ContainerScanTarget test_container_scan_target "id"
        ```

        :param str resource_name: The name of the resource.
        :param ContainerScanTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerScanTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 container_scan_recipe_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_registry: Optional[pulumi.Input[pulumi.InputType['ContainerScanTargetTargetRegistryArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerScanTargetArgs.__new__(ContainerScanTargetArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            if container_scan_recipe_id is None and not opts.urn:
                raise TypeError("Missing required property 'container_scan_recipe_id'")
            __props__.__dict__["container_scan_recipe_id"] = container_scan_recipe_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            if target_registry is None and not opts.urn:
                raise TypeError("Missing required property 'target_registry'")
            __props__.__dict__["target_registry"] = target_registry
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(ContainerScanTarget, __self__).__init__(
            'oci:VulnerabilityScanning/containerScanTarget:ContainerScanTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            container_scan_recipe_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            target_registry: Optional[pulumi.Input[pulumi.InputType['ContainerScanTargetTargetRegistryArgs']]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'ContainerScanTarget':
        """
        Get an existing ContainerScanTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        :param pulumi.Input[str] container_scan_recipe_id: (Updatable) ID of the container scan recipe this target applies.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) Target description.
        :param pulumi.Input[str] display_name: (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] state: The current state of the config.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[pulumi.InputType['ContainerScanTargetTargetRegistryArgs']] target_registry: (Updatable) Registry information for a container scan target
        :param pulumi.Input[str] time_created: Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        :param pulumi.Input[str] time_updated: Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerScanTargetState.__new__(_ContainerScanTargetState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["container_scan_recipe_id"] = container_scan_recipe_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["target_registry"] = target_registry
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return ContainerScanTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerScanRecipeId")
    def container_scan_recipe_id(self) -> pulumi.Output[str]:
        """
        (Updatable) ID of the container scan recipe this target applies.
        """
        return pulumi.get(self, "container_scan_recipe_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) Target description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) User friendly name of container scan target. If not present, will be auto-generated.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the config.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetRegistry")
    def target_registry(self) -> pulumi.Output['outputs.ContainerScanTargetTargetRegistry']:
        """
        (Updatable) Registry information for a container scan target
        """
        return pulumi.get(self, "target_registry")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_updated")

