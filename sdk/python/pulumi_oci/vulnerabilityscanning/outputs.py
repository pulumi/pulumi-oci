# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ContainerScanRecipeScanSettings',
    'ContainerScanTargetTargetRegistry',
    'HostScanRecipeAgentSettings',
    'HostScanRecipeAgentSettingsAgentConfiguration',
    'HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings',
    'HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings',
    'HostScanRecipePortSettings',
    'HostScanRecipeSchedule',
    'GetContainerScanRecipeScanSettingResult',
    'GetContainerScanRecipesContainerScanRecipeSummaryCollectionResult',
    'GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult',
    'GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult',
    'GetContainerScanRecipesFilterResult',
    'GetContainerScanTargetTargetRegistryResult',
    'GetContainerScanTargetsContainerScanTargetSummaryCollectionResult',
    'GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult',
    'GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult',
    'GetContainerScanTargetsFilterResult',
    'GetHostScanRecipeAgentSettingResult',
    'GetHostScanRecipeAgentSettingAgentConfigurationResult',
    'GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult',
    'GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult',
    'GetHostScanRecipePortSettingResult',
    'GetHostScanRecipeScheduleResult',
    'GetHostScanRecipesFilterResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult',
    'GetHostScanTargetsFilterResult',
    'GetHostScanTargetsHostScanTargetSummaryCollectionResult',
    'GetHostScanTargetsHostScanTargetSummaryCollectionItemResult',
]

@pulumi.output_type
class ContainerScanRecipeScanSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerScanRecipeScanSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerScanRecipeScanSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerScanRecipeScanSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: (Updatable) The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        (Updatable) The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class ContainerScanTargetTargetRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerScanTargetTargetRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerScanTargetTargetRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerScanTargetTargetRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 type: str,
                 repositories: Optional[Sequence[str]] = None,
                 url: Optional[str] = None):
        """
        :param str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        :param str type: (Updatable) The scan level
        :param Sequence[str] repositories: (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
        :param str url: (Updatable) URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "type", type)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) The scan level
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence[str]]:
        """
        (Updatable) List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
        """
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        (Updatable) URL of the registry. Required for non-OCIR registry types (for OCIR registry types, it can be inferred from the tenancy).
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class HostScanRecipeAgentSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"
        elif key == "agentConfiguration":
            suggest = "agent_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: str,
                 agent_configuration: Optional['outputs.HostScanRecipeAgentSettingsAgentConfiguration'] = None):
        """
        :param str scan_level: (Updatable) The scan level
        :param 'HostScanRecipeAgentSettingsAgentConfigurationArgs' agent_configuration: (Updatable) Agent configuration for host scan agent settings. This model is polymorphic, presenting different configuration options based on selected agent vendor.
        """
        pulumi.set(__self__, "scan_level", scan_level)
        if agent_configuration is not None:
            pulumi.set(__self__, "agent_configuration", agent_configuration)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        (Updatable) The scan level
        """
        return pulumi.get(self, "scan_level")

    @property
    @pulumi.getter(name="agentConfiguration")
    def agent_configuration(self) -> Optional['outputs.HostScanRecipeAgentSettingsAgentConfiguration']:
        """
        (Updatable) Agent configuration for host scan agent settings. This model is polymorphic, presenting different configuration options based on selected agent vendor.
        """
        return pulumi.get(self, "agent_configuration")


@pulumi.output_type
class HostScanRecipeAgentSettingsAgentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cisBenchmarkSettings":
            suggest = "cis_benchmark_settings"
        elif key == "endpointProtectionSettings":
            suggest = "endpoint_protection_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettingsAgentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettingsAgentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettingsAgentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vendor: str,
                 cis_benchmark_settings: Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings'] = None,
                 endpoint_protection_settings: Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings'] = None):
        """
        :param str vendor: (Updatable) Vendor to use for the host scan agent.
        :param 'HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettingsArgs' cis_benchmark_settings: (Updatable) CIS (Center for Internet Security) Benchmark scan settings for a host scan
        :param 'HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettingsArgs' endpoint_protection_settings: (Updatable) Endpoint Protection scan settings for a host scan
        """
        pulumi.set(__self__, "vendor", vendor)
        if cis_benchmark_settings is not None:
            pulumi.set(__self__, "cis_benchmark_settings", cis_benchmark_settings)
        if endpoint_protection_settings is not None:
            pulumi.set(__self__, "endpoint_protection_settings", endpoint_protection_settings)

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        (Updatable) Vendor to use for the host scan agent.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter(name="cisBenchmarkSettings")
    def cis_benchmark_settings(self) -> Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings']:
        """
        (Updatable) CIS (Center for Internet Security) Benchmark scan settings for a host scan
        """
        return pulumi.get(self, "cis_benchmark_settings")

    @property
    @pulumi.getter(name="endpointProtectionSettings")
    def endpoint_protection_settings(self) -> Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings']:
        """
        (Updatable) Endpoint Protection scan settings for a host scan
        """
        return pulumi.get(self, "endpoint_protection_settings")


@pulumi.output_type
class HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        """
        :param str scan_level: (Updatable) The scan level
        """
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        """
        (Updatable) The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        """
        :param str scan_level: (Updatable) The scan level
        """
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        """
        (Updatable) The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class HostScanRecipePortSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipePortSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipePortSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipePortSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: (Updatable) The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        (Updatable) The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class HostScanRecipeSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 day_of_week: Optional[str] = None):
        """
        :param str type: (Updatable) How often the scan occurs
        :param str day_of_week: (Updatable) Day of week the scheduled scan occurs (not applicable for DAILY type)
        """
        pulumi.set(__self__, "type", type)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) How often the scan occurs
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        (Updatable) Day of week the scheduled scan occurs (not applicable for DAILY type)
        """
        return pulumi.get(self, "day_of_week")


@pulumi.output_type
class GetContainerScanRecipeScanSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetContainerScanRecipesContainerScanRecipeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 image_count: int,
                 scan_settings: Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan recipe. Immutable and generated on creation.
        :param int image_count: This field is set equal to the number of images we want to scan in the first go when the recipe is created
        :param Sequence['GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingArgs'] scan_settings: A collection of container scan settings
        :param str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        :param str time_updated: Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_count", image_count)
        pulumi.set(__self__, "scan_settings", scan_settings)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan recipe. Immutable and generated on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageCount")
    def image_count(self) -> int:
        """
        This field is set equal to the number of images we want to scan in the first go when the recipe is created
        """
        return pulumi.get(self, "image_count")

    @property
    @pulumi.getter(name="scanSettings")
    def scan_settings(self) -> Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult']:
        """
        A collection of container scan settings
        """
        return pulumi.get(self, "scan_settings")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetContainerScanRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetContainerScanTargetTargetRegistryResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 repositories: Sequence[str],
                 type: str,
                 url: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        :param Sequence[str] repositories: List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
        :param str type: The scan level
        :param str url: URL of the registry.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "repositories", repositories)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def repositories(self) -> Sequence[str]:
        """
        List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
        """
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the registry.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetContainerScanTargetsContainerScanTargetSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 container_scan_recipe_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 target_registries: Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult'],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param str container_scan_recipe_id: ID of the container scan recipe this target applies.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Target description.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan target. Immutable and generated on creation.
        :param str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence['GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryArgs'] target_registries: Registry information for a container scan target
        :param str time_created: Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        :param str time_updated: Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "container_scan_recipe_id", container_scan_recipe_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_registries", target_registries)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerScanRecipeId")
    def container_scan_recipe_id(self) -> str:
        """
        ID of the container scan recipe this target applies.
        """
        return pulumi.get(self, "container_scan_recipe_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Target description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan target. Immutable and generated on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetRegistries")
    def target_registries(self) -> Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult']:
        """
        Registry information for a container scan target
        """
        return pulumi.get(self, "target_registries")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 repositories: Sequence[str],
                 type: str,
                 url: str):
        """
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param Sequence[str] repositories: List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
        :param str type: The scan level
        :param str url: URL of the registry.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "repositories", repositories)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def repositories(self) -> Sequence[str]:
        """
        List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
        """
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of the registry.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetContainerScanTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanRecipeAgentSettingResult(dict):
    def __init__(__self__, *,
                 agent_configurations: Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationResult'],
                 scan_level: str):
        """
        :param Sequence['GetHostScanRecipeAgentSettingAgentConfigurationArgs'] agent_configurations: Agent configuration for host scan agent settings. This model is polymorphic, presenting different configuration options based on selected agent vendor.
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "agent_configurations", agent_configurations)
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="agentConfigurations")
    def agent_configurations(self) -> Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationResult']:
        """
        Agent configuration for host scan agent settings. This model is polymorphic, presenting different configuration options based on selected agent vendor.
        """
        return pulumi.get(self, "agent_configurations")

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeAgentSettingAgentConfigurationResult(dict):
    def __init__(__self__, *,
                 cis_benchmark_settings: Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult'],
                 endpoint_protection_settings: Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult'],
                 vendor: str):
        """
        :param Sequence['GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingArgs'] cis_benchmark_settings: CIS (Center for Internet Security) Benchmark scan settings for a host scan
        :param Sequence['GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingArgs'] endpoint_protection_settings: Endpoint Protection scan settings for a host scan
        :param str vendor: Vendor to use for the host scan agent.
        """
        pulumi.set(__self__, "cis_benchmark_settings", cis_benchmark_settings)
        pulumi.set(__self__, "endpoint_protection_settings", endpoint_protection_settings)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="cisBenchmarkSettings")
    def cis_benchmark_settings(self) -> Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult']:
        """
        CIS (Center for Internet Security) Benchmark scan settings for a host scan
        """
        return pulumi.get(self, "cis_benchmark_settings")

    @property
    @pulumi.getter(name="endpointProtectionSettings")
    def endpoint_protection_settings(self) -> Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult']:
        """
        Endpoint Protection scan settings for a host scan
        """
        return pulumi.get(self, "endpoint_protection_settings")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        Vendor to use for the host scan agent.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipePortSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 type: str):
        """
        :param str day_of_week: Day of week the scheduled scan occurs (not applicable for DAILY type)
        :param str type: How often the scan occurs
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        Day of week the scheduled scan occurs (not applicable for DAILY type)
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        How often the scan occurs
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHostScanRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_settings: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult'],
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 port_settings: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult'],
                 schedules: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param Sequence['GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingArgs'] agent_settings: Agent scan settings for a host scan
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: Unique identifier of the config that is immutable on creation
        :param Sequence['GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingArgs'] port_settings: Port scan settings for a host scan
        :param Sequence['GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleArgs'] schedules: A scanning schedule
        :param str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        :param str time_updated: Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        pulumi.set(__self__, "agent_settings", agent_settings)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port_settings", port_settings)
        pulumi.set(__self__, "schedules", schedules)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentSettings")
    def agent_settings(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult']:
        """
        Agent scan settings for a host scan
        """
        return pulumi.get(self, "agent_settings")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of the config that is immutable on creation
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portSettings")
    def port_settings(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult']:
        """
        Port scan settings for a host scan
        """
        return pulumi.get(self, "port_settings")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult']:
        """
        A scanning schedule
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult(dict):
    def __init__(__self__, *,
                 agent_configurations: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult'],
                 scan_level: str):
        """
        :param Sequence['GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationArgs'] agent_configurations: Agent configuration for host scan agent settings. This model is polymorphic, presenting different configuration options based on selected agent vendor.
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "agent_configurations", agent_configurations)
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="agentConfigurations")
    def agent_configurations(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult']:
        """
        Agent configuration for host scan agent settings. This model is polymorphic, presenting different configuration options based on selected agent vendor.
        """
        return pulumi.get(self, "agent_configurations")

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult(dict):
    def __init__(__self__, *,
                 cis_benchmark_settings: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult'],
                 endpoint_protection_settings: Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult'],
                 vendor: str):
        """
        :param Sequence['GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingArgs'] cis_benchmark_settings: CIS (Center for Internet Security) Benchmark scan settings for a host scan
        :param Sequence['GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingArgs'] endpoint_protection_settings: Endpoint Protection scan settings for a host scan
        :param str vendor: Vendor to use for the host scan agent.
        """
        pulumi.set(__self__, "cis_benchmark_settings", cis_benchmark_settings)
        pulumi.set(__self__, "endpoint_protection_settings", endpoint_protection_settings)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="cisBenchmarkSettings")
    def cis_benchmark_settings(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult']:
        """
        CIS (Center for Internet Security) Benchmark scan settings for a host scan
        """
        return pulumi.get(self, "cis_benchmark_settings")

    @property
    @pulumi.getter(name="endpointProtectionSettings")
    def endpoint_protection_settings(self) -> Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult']:
        """
        Endpoint Protection scan settings for a host scan
        """
        return pulumi.get(self, "endpoint_protection_settings")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        Vendor to use for the host scan agent.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: str):
        """
        :param str scan_level: The scan level
        """
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        """
        The scan level
        """
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 type: str):
        """
        :param str day_of_week: Day of week the scheduled scan occurs (not applicable for DAILY type)
        :param str type: How often the scan occurs
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        Day of week the scheduled scan occurs (not applicable for DAILY type)
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        How often the scan occurs
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHostScanTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanTargetsHostScanTargetSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetHostScanTargetsHostScanTargetSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetHostScanTargetsHostScanTargetSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostScanTargetsHostScanTargetSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 host_scan_recipe_id: str,
                 id: str,
                 instance_ids: Sequence[str],
                 state: str,
                 system_tags: Mapping[str, Any],
                 target_compartment_id: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Target description.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str host_scan_recipe_id: ID of the host scan recipe this target applies.
        :param str id: Unique identifier of the config that is immutable on creation
        :param Sequence[str] instance_ids: List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
        :param str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str target_compartment_id: Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
        :param str time_created: Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        :param str time_updated: Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host_scan_recipe_id", host_scan_recipe_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Target description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostScanRecipeId")
    def host_scan_recipe_id(self) -> str:
        """
        ID of the host scan recipe this target applies.
        """
        return pulumi.get(self, "host_scan_recipe_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of the config that is immutable on creation
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        """
        List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
        """
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> str:
        """
        Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
        """
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        """
        return pulumi.get(self, "time_updated")


