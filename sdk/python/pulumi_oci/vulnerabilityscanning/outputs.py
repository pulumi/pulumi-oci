# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ContainerScanRecipeScanSettings',
    'ContainerScanTargetTargetRegistry',
    'HostScanRecipeAgentSettings',
    'HostScanRecipeAgentSettingsAgentConfiguration',
    'HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings',
    'HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings',
    'HostScanRecipeApplicationSettings',
    'HostScanRecipeApplicationSettingsFoldersToScan',
    'HostScanRecipePortSettings',
    'HostScanRecipeSchedule',
    'GetContainerScanRecipeScanSettingResult',
    'GetContainerScanRecipesContainerScanRecipeSummaryCollectionResult',
    'GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult',
    'GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult',
    'GetContainerScanRecipesFilterResult',
    'GetContainerScanTargetTargetRegistryResult',
    'GetContainerScanTargetsContainerScanTargetSummaryCollectionResult',
    'GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult',
    'GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult',
    'GetContainerScanTargetsFilterResult',
    'GetHostScanRecipeAgentSettingResult',
    'GetHostScanRecipeAgentSettingAgentConfigurationResult',
    'GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult',
    'GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult',
    'GetHostScanRecipeApplicationSettingResult',
    'GetHostScanRecipeApplicationSettingFoldersToScanResult',
    'GetHostScanRecipePortSettingResult',
    'GetHostScanRecipeScheduleResult',
    'GetHostScanRecipesFilterResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingFoldersToScanResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult',
    'GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult',
    'GetHostScanTargetErrorsFilterResult',
    'GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionResult',
    'GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemResult',
    'GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemItemResult',
    'GetHostScanTargetsFilterResult',
    'GetHostScanTargetsHostScanTargetSummaryCollectionResult',
    'GetHostScanTargetsHostScanTargetSummaryCollectionItemResult',
]

@pulumi.output_type
class ContainerScanRecipeScanSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerScanRecipeScanSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerScanRecipeScanSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerScanRecipeScanSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: str):
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class ContainerScanTargetTargetRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerScanTargetTargetRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerScanTargetTargetRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerScanTargetTargetRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 type: str,
                 repositories: Optional[Sequence[str]] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "type", type)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class HostScanRecipeAgentSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"
        elif key == "agentConfiguration":
            suggest = "agent_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: str,
                 agent_configuration: Optional['outputs.HostScanRecipeAgentSettingsAgentConfiguration'] = None):
        pulumi.set(__self__, "scan_level", scan_level)
        if agent_configuration is not None:
            pulumi.set(__self__, "agent_configuration", agent_configuration)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        return pulumi.get(self, "scan_level")

    @property
    @pulumi.getter(name="agentConfiguration")
    def agent_configuration(self) -> Optional['outputs.HostScanRecipeAgentSettingsAgentConfiguration']:
        return pulumi.get(self, "agent_configuration")


@pulumi.output_type
class HostScanRecipeAgentSettingsAgentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cisBenchmarkSettings":
            suggest = "cis_benchmark_settings"
        elif key == "endpointProtectionSettings":
            suggest = "endpoint_protection_settings"
        elif key == "shouldUnInstall":
            suggest = "should_un_install"
        elif key == "vaultSecretId":
            suggest = "vault_secret_id"
        elif key == "vendorType":
            suggest = "vendor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettingsAgentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettingsAgentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettingsAgentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vendor: str,
                 cis_benchmark_settings: Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings'] = None,
                 endpoint_protection_settings: Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings'] = None,
                 should_un_install: Optional[bool] = None,
                 vault_secret_id: Optional[str] = None,
                 vendor_type: Optional[str] = None):
        pulumi.set(__self__, "vendor", vendor)
        if cis_benchmark_settings is not None:
            pulumi.set(__self__, "cis_benchmark_settings", cis_benchmark_settings)
        if endpoint_protection_settings is not None:
            pulumi.set(__self__, "endpoint_protection_settings", endpoint_protection_settings)
        if should_un_install is not None:
            pulumi.set(__self__, "should_un_install", should_un_install)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if vendor_type is not None:
            pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter(name="cisBenchmarkSettings")
    def cis_benchmark_settings(self) -> Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings']:
        return pulumi.get(self, "cis_benchmark_settings")

    @property
    @pulumi.getter(name="endpointProtectionSettings")
    def endpoint_protection_settings(self) -> Optional['outputs.HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings']:
        return pulumi.get(self, "endpoint_protection_settings")

    @property
    @pulumi.getter(name="shouldUnInstall")
    def should_un_install(self) -> Optional[bool]:
        return pulumi.get(self, "should_un_install")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> Optional[str]:
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class HostScanRecipeApplicationSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationScanRecurrence":
            suggest = "application_scan_recurrence"
        elif key == "foldersToScans":
            suggest = "folders_to_scans"
        elif key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeApplicationSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeApplicationSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeApplicationSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_scan_recurrence: str,
                 folders_to_scans: Sequence['outputs.HostScanRecipeApplicationSettingsFoldersToScan'],
                 is_enabled: bool):
        pulumi.set(__self__, "application_scan_recurrence", application_scan_recurrence)
        pulumi.set(__self__, "folders_to_scans", folders_to_scans)
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="applicationScanRecurrence")
    def application_scan_recurrence(self) -> str:
        return pulumi.get(self, "application_scan_recurrence")

    @property
    @pulumi.getter(name="foldersToScans")
    def folders_to_scans(self) -> Sequence['outputs.HostScanRecipeApplicationSettingsFoldersToScan']:
        return pulumi.get(self, "folders_to_scans")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class HostScanRecipeApplicationSettingsFoldersToScan(dict):
    def __init__(__self__, *,
                 folder: str,
                 operatingsystem: str):
        pulumi.set(__self__, "folder", folder)
        pulumi.set(__self__, "operatingsystem", operatingsystem)

    @property
    @pulumi.getter
    def folder(self) -> str:
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def operatingsystem(self) -> str:
        return pulumi.get(self, "operatingsystem")


@pulumi.output_type
class HostScanRecipePortSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanLevel":
            suggest = "scan_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipePortSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipePortSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipePortSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_level: str):
        pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> str:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class HostScanRecipeSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostScanRecipeSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostScanRecipeSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostScanRecipeSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 day_of_week: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")


@pulumi.output_type
class GetContainerScanRecipeScanSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetContainerScanRecipesContainerScanRecipeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_count: Optional[int] = None,
                 scan_settings: Optional[Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_count is not None:
            pulumi.set(__self__, "image_count", image_count)
        if scan_settings is not None:
            pulumi.set(__self__, "scan_settings", scan_settings)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageCount")
    def image_count(self) -> Optional[int]:
        return pulumi.get(self, "image_count")

    @property
    @pulumi.getter(name="scanSettings")
    def scan_settings(self) -> Optional[Sequence['outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult']]:
        return pulumi.get(self, "scan_settings")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetContainerScanRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetContainerScanTargetTargetRegistryResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 repositories: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetContainerScanTargetsContainerScanTargetSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerScanTargetsContainerScanTargetSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 container_scan_recipe_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_registries: Optional[Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_scan_recipe_id is not None:
            pulumi.set(__self__, "container_scan_recipe_id", container_scan_recipe_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_registries is not None:
            pulumi.set(__self__, "target_registries", target_registries)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerScanRecipeId")
    def container_scan_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "container_scan_recipe_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetRegistries")
    def target_registries(self) -> Optional[Sequence['outputs.GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult']]:
        return pulumi.get(self, "target_registries")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistryResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 repositories: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def repositories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetContainerScanTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanRecipeAgentSettingResult(dict):
    def __init__(__self__, *,
                 agent_configurations: Optional[Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationResult']] = None,
                 scan_level: Optional[str] = None):
        if agent_configurations is not None:
            pulumi.set(__self__, "agent_configurations", agent_configurations)
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="agentConfigurations")
    def agent_configurations(self) -> Optional[Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationResult']]:
        return pulumi.get(self, "agent_configurations")

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeAgentSettingAgentConfigurationResult(dict):
    def __init__(__self__, *,
                 cis_benchmark_settings: Optional[Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult']] = None,
                 endpoint_protection_settings: Optional[Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult']] = None,
                 should_un_install: Optional[bool] = None,
                 vault_secret_id: Optional[str] = None,
                 vendor: Optional[str] = None,
                 vendor_type: Optional[str] = None):
        if cis_benchmark_settings is not None:
            pulumi.set(__self__, "cis_benchmark_settings", cis_benchmark_settings)
        if endpoint_protection_settings is not None:
            pulumi.set(__self__, "endpoint_protection_settings", endpoint_protection_settings)
        if should_un_install is not None:
            pulumi.set(__self__, "should_un_install", should_un_install)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if vendor_type is not None:
            pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter(name="cisBenchmarkSettings")
    def cis_benchmark_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult']]:
        return pulumi.get(self, "cis_benchmark_settings")

    @property
    @pulumi.getter(name="endpointProtectionSettings")
    def endpoint_protection_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult']]:
        return pulumi.get(self, "endpoint_protection_settings")

    @property
    @pulumi.getter(name="shouldUnInstall")
    def should_un_install(self) -> Optional[bool]:
        return pulumi.get(self, "should_un_install")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> Optional[str]:
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class GetHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeApplicationSettingResult(dict):
    def __init__(__self__, *,
                 application_scan_recurrence: Optional[str] = None,
                 folders_to_scans: Optional[Sequence['outputs.GetHostScanRecipeApplicationSettingFoldersToScanResult']] = None,
                 is_enabled: Optional[bool] = None):
        if application_scan_recurrence is not None:
            pulumi.set(__self__, "application_scan_recurrence", application_scan_recurrence)
        if folders_to_scans is not None:
            pulumi.set(__self__, "folders_to_scans", folders_to_scans)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="applicationScanRecurrence")
    def application_scan_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "application_scan_recurrence")

    @property
    @pulumi.getter(name="foldersToScans")
    def folders_to_scans(self) -> Optional[Sequence['outputs.GetHostScanRecipeApplicationSettingFoldersToScanResult']]:
        return pulumi.get(self, "folders_to_scans")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetHostScanRecipeApplicationSettingFoldersToScanResult(dict):
    def __init__(__self__, *,
                 folder: Optional[str] = None,
                 operatingsystem: Optional[str] = None):
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if operatingsystem is not None:
            pulumi.set(__self__, "operatingsystem", operatingsystem)

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def operatingsystem(self) -> Optional[str]:
        return pulumi.get(self, "operatingsystem")


@pulumi.output_type
class GetHostScanRecipePortSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipeScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 type: Optional[str] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHostScanRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_settings: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult']] = None,
                 application_settings: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 port_settings: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult']] = None,
                 schedules: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_settings is not None:
            pulumi.set(__self__, "agent_settings", agent_settings)
        if application_settings is not None:
            pulumi.set(__self__, "application_settings", application_settings)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_settings is not None:
            pulumi.set(__self__, "port_settings", port_settings)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentSettings")
    def agent_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult']]:
        return pulumi.get(self, "agent_settings")

    @property
    @pulumi.getter(name="applicationSettings")
    def application_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingResult']]:
        return pulumi.get(self, "application_settings")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portSettings")
    def port_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult']]:
        return pulumi.get(self, "port_settings")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingResult(dict):
    def __init__(__self__, *,
                 agent_configurations: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult']] = None,
                 scan_level: Optional[str] = None):
        if agent_configurations is not None:
            pulumi.set(__self__, "agent_configurations", agent_configurations)
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="agentConfigurations")
    def agent_configurations(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult']]:
        return pulumi.get(self, "agent_configurations")

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationResult(dict):
    def __init__(__self__, *,
                 cis_benchmark_settings: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult']] = None,
                 endpoint_protection_settings: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult']] = None,
                 should_un_install: Optional[bool] = None,
                 vault_secret_id: Optional[str] = None,
                 vendor: Optional[str] = None,
                 vendor_type: Optional[str] = None):
        if cis_benchmark_settings is not None:
            pulumi.set(__self__, "cis_benchmark_settings", cis_benchmark_settings)
        if endpoint_protection_settings is not None:
            pulumi.set(__self__, "endpoint_protection_settings", endpoint_protection_settings)
        if should_un_install is not None:
            pulumi.set(__self__, "should_un_install", should_un_install)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if vendor_type is not None:
            pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter(name="cisBenchmarkSettings")
    def cis_benchmark_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult']]:
        return pulumi.get(self, "cis_benchmark_settings")

    @property
    @pulumi.getter(name="endpointProtectionSettings")
    def endpoint_protection_settings(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult']]:
        return pulumi.get(self, "endpoint_protection_settings")

    @property
    @pulumi.getter(name="shouldUnInstall")
    def should_un_install(self) -> Optional[bool]:
        return pulumi.get(self, "should_un_install")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> Optional[str]:
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingResult(dict):
    def __init__(__self__, *,
                 application_scan_recurrence: Optional[str] = None,
                 folders_to_scans: Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingFoldersToScanResult']] = None,
                 is_enabled: Optional[bool] = None):
        if application_scan_recurrence is not None:
            pulumi.set(__self__, "application_scan_recurrence", application_scan_recurrence)
        if folders_to_scans is not None:
            pulumi.set(__self__, "folders_to_scans", folders_to_scans)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="applicationScanRecurrence")
    def application_scan_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "application_scan_recurrence")

    @property
    @pulumi.getter(name="foldersToScans")
    def folders_to_scans(self) -> Optional[Sequence['outputs.GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingFoldersToScanResult']]:
        return pulumi.get(self, "folders_to_scans")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingFoldersToScanResult(dict):
    def __init__(__self__, *,
                 folder: Optional[str] = None,
                 operatingsystem: Optional[str] = None):
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if operatingsystem is not None:
            pulumi.set(__self__, "operatingsystem", operatingsystem)

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def operatingsystem(self) -> Optional[str]:
        return pulumi.get(self, "operatingsystem")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemPortSettingResult(dict):
    def __init__(__self__, *,
                 scan_level: Optional[str] = None):
        if scan_level is not None:
            pulumi.set(__self__, "scan_level", scan_level)

    @property
    @pulumi.getter(name="scanLevel")
    def scan_level(self) -> Optional[str]:
        return pulumi.get(self, "scan_level")


@pulumi.output_type
class GetHostScanRecipesHostScanRecipeSummaryCollectionItemScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 type: Optional[str] = None):
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetHostScanTargetErrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 error_code: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_id: Optional[str] = None,
                 message: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 task: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vendor: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if task is not None:
            pulumi.set(__self__, "task", task)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def task(self) -> Optional[str]:
        return pulumi.get(self, "task")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetHostScanTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHostScanTargetsHostScanTargetSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetHostScanTargetsHostScanTargetSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetHostScanTargetsHostScanTargetSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetHostScanTargetsHostScanTargetSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 host_scan_recipe_id: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_compartment_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if host_scan_recipe_id is not None:
            pulumi.set(__self__, "host_scan_recipe_id", host_scan_recipe_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_ids is not None:
            pulumi.set(__self__, "instance_ids", instance_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostScanRecipeId")
    def host_scan_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "host_scan_recipe_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


