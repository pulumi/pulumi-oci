# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AppAccelerationPolicyResponseCachingPolicyArgs',
    'AppAccelerationPolicyResponseCompressionPolicyArgs',
    'AppAccelerationPolicyResponseCompressionPolicyGzipCompressionArgs',
    'GetAppAccelerationPoliciesFilterArgs',
    'GetAppAccelerationsFilterArgs',
]

@pulumi.input_type
class AppAccelerationPolicyResponseCachingPolicyArgs:
    def __init__(__self__, *,
                 is_response_header_based_caching_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_response_header_based_caching_enabled: (Updatable) When false, responses will not be cached by the backend based on response headers.
        """
        if is_response_header_based_caching_enabled is not None:
            pulumi.set(__self__, "is_response_header_based_caching_enabled", is_response_header_based_caching_enabled)

    @property
    @pulumi.getter(name="isResponseHeaderBasedCachingEnabled")
    def is_response_header_based_caching_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) When false, responses will not be cached by the backend based on response headers.
        """
        return pulumi.get(self, "is_response_header_based_caching_enabled")

    @is_response_header_based_caching_enabled.setter
    def is_response_header_based_caching_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_response_header_based_caching_enabled", value)


@pulumi.input_type
class AppAccelerationPolicyResponseCompressionPolicyArgs:
    def __init__(__self__, *,
                 gzip_compression: Optional[pulumi.Input['AppAccelerationPolicyResponseCompressionPolicyGzipCompressionArgs']] = None):
        """
        :param pulumi.Input['AppAccelerationPolicyResponseCompressionPolicyGzipCompressionArgs'] gzip_compression: (Updatable) An object that specifies the gzip compression policy.
        """
        if gzip_compression is not None:
            pulumi.set(__self__, "gzip_compression", gzip_compression)

    @property
    @pulumi.getter(name="gzipCompression")
    def gzip_compression(self) -> Optional[pulumi.Input['AppAccelerationPolicyResponseCompressionPolicyGzipCompressionArgs']]:
        """
        (Updatable) An object that specifies the gzip compression policy.
        """
        return pulumi.get(self, "gzip_compression")

    @gzip_compression.setter
    def gzip_compression(self, value: Optional[pulumi.Input['AppAccelerationPolicyResponseCompressionPolicyGzipCompressionArgs']]):
        pulumi.set(self, "gzip_compression", value)


@pulumi.input_type
class AppAccelerationPolicyResponseCompressionPolicyGzipCompressionArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_enabled: (Updatable) When true, support for gzip compression is enabled. HTTP responses will be compressed with gzip only if the client indicates support for gzip via the "Accept-Encoding: gzip" request header.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) When true, support for gzip compression is enabled. HTTP responses will be compressed with gzip only if the client indicates support for gzip via the "Accept-Encoding: gzip" request header.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class GetAppAccelerationPoliciesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetAppAccelerationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


