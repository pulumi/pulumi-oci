# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AppAccelerationPolicyResponseCachingPolicy',
    'AppAccelerationPolicyResponseCompressionPolicy',
    'AppAccelerationPolicyResponseCompressionPolicyGzipCompression',
    'GetAppAccelerationPoliciesFilterResult',
    'GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionResult',
    'GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResult',
    'GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCachingPolicyResult',
    'GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyResult',
    'GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyGzipCompressionResult',
    'GetAppAccelerationPolicyResponseCachingPolicyResult',
    'GetAppAccelerationPolicyResponseCompressionPolicyResult',
    'GetAppAccelerationPolicyResponseCompressionPolicyGzipCompressionResult',
    'GetAppAccelerationsFilterResult',
    'GetAppAccelerationsWebAppAccelerationCollectionResult',
    'GetAppAccelerationsWebAppAccelerationCollectionItemResult',
]

@pulumi.output_type
class AppAccelerationPolicyResponseCachingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isResponseHeaderBasedCachingEnabled":
            suggest = "is_response_header_based_caching_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAccelerationPolicyResponseCachingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAccelerationPolicyResponseCachingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAccelerationPolicyResponseCachingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_response_header_based_caching_enabled: Optional[bool] = None):
        if is_response_header_based_caching_enabled is not None:
            pulumi.set(__self__, "is_response_header_based_caching_enabled", is_response_header_based_caching_enabled)

    @property
    @pulumi.getter(name="isResponseHeaderBasedCachingEnabled")
    def is_response_header_based_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_header_based_caching_enabled")


@pulumi.output_type
class AppAccelerationPolicyResponseCompressionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gzipCompression":
            suggest = "gzip_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAccelerationPolicyResponseCompressionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAccelerationPolicyResponseCompressionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAccelerationPolicyResponseCompressionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gzip_compression: Optional['outputs.AppAccelerationPolicyResponseCompressionPolicyGzipCompression'] = None):
        if gzip_compression is not None:
            pulumi.set(__self__, "gzip_compression", gzip_compression)

    @property
    @pulumi.getter(name="gzipCompression")
    def gzip_compression(self) -> Optional['outputs.AppAccelerationPolicyResponseCompressionPolicyGzipCompression']:
        return pulumi.get(self, "gzip_compression")


@pulumi.output_type
class AppAccelerationPolicyResponseCompressionPolicyGzipCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppAccelerationPolicyResponseCompressionPolicyGzipCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppAccelerationPolicyResponseCompressionPolicyGzipCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppAccelerationPolicyResponseCompressionPolicyGzipCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetAppAccelerationPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 response_caching_policies: Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCachingPolicyResult']] = None,
                 response_compression_policies: Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if response_caching_policies is not None:
            pulumi.set(__self__, "response_caching_policies", response_caching_policies)
        if response_compression_policies is not None:
            pulumi.set(__self__, "response_compression_policies", response_compression_policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="responseCachingPolicies")
    def response_caching_policies(self) -> Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCachingPolicyResult']]:
        return pulumi.get(self, "response_caching_policies")

    @property
    @pulumi.getter(name="responseCompressionPolicies")
    def response_compression_policies(self) -> Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyResult']]:
        return pulumi.get(self, "response_compression_policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCachingPolicyResult(dict):
    def __init__(__self__, *,
                 is_response_header_based_caching_enabled: Optional[bool] = None):
        if is_response_header_based_caching_enabled is not None:
            pulumi.set(__self__, "is_response_header_based_caching_enabled", is_response_header_based_caching_enabled)

    @property
    @pulumi.getter(name="isResponseHeaderBasedCachingEnabled")
    def is_response_header_based_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_header_based_caching_enabled")


@pulumi.output_type
class GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyResult(dict):
    def __init__(__self__, *,
                 gzip_compressions: Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyGzipCompressionResult']] = None):
        if gzip_compressions is not None:
            pulumi.set(__self__, "gzip_compressions", gzip_compressions)

    @property
    @pulumi.getter(name="gzipCompressions")
    def gzip_compressions(self) -> Optional[Sequence['outputs.GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyGzipCompressionResult']]:
        return pulumi.get(self, "gzip_compressions")


@pulumi.output_type
class GetAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyGzipCompressionResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetAppAccelerationPolicyResponseCachingPolicyResult(dict):
    def __init__(__self__, *,
                 is_response_header_based_caching_enabled: Optional[bool] = None):
        if is_response_header_based_caching_enabled is not None:
            pulumi.set(__self__, "is_response_header_based_caching_enabled", is_response_header_based_caching_enabled)

    @property
    @pulumi.getter(name="isResponseHeaderBasedCachingEnabled")
    def is_response_header_based_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_header_based_caching_enabled")


@pulumi.output_type
class GetAppAccelerationPolicyResponseCompressionPolicyResult(dict):
    def __init__(__self__, *,
                 gzip_compressions: Optional[Sequence['outputs.GetAppAccelerationPolicyResponseCompressionPolicyGzipCompressionResult']] = None):
        if gzip_compressions is not None:
            pulumi.set(__self__, "gzip_compressions", gzip_compressions)

    @property
    @pulumi.getter(name="gzipCompressions")
    def gzip_compressions(self) -> Optional[Sequence['outputs.GetAppAccelerationPolicyResponseCompressionPolicyGzipCompressionResult']]:
        return pulumi.get(self, "gzip_compressions")


@pulumi.output_type
class GetAppAccelerationPolicyResponseCompressionPolicyGzipCompressionResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetAppAccelerationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAppAccelerationsWebAppAccelerationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAppAccelerationsWebAppAccelerationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAppAccelerationsWebAppAccelerationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAppAccelerationsWebAppAccelerationCollectionItemResult(dict):
    def __init__(__self__, *,
                 backend_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 web_app_acceleration_policy_id: Optional[str] = None):
        if backend_type is not None:
            pulumi.set(__self__, "backend_type", backend_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if web_app_acceleration_policy_id is not None:
            pulumi.set(__self__, "web_app_acceleration_policy_id", web_app_acceleration_policy_id)

    @property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> Optional[str]:
        return pulumi.get(self, "backend_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="webAppAccelerationPolicyId")
    def web_app_acceleration_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "web_app_acceleration_policy_id")


