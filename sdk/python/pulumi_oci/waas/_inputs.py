# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CertificateExtensionArgs',
    'CertificateIssuerNameArgs',
    'CertificatePublicKeyInfoArgs',
    'CertificateSubjectNameArgs',
    'HttpRedirectTargetArgs',
    'PolicyOriginArgs',
    'PolicyOriginCustomHeaderArgs',
    'PolicyOriginGroupArgs',
    'PolicyOriginGroupOriginGroupArgs',
    'PolicyPolicyConfigArgs',
    'PolicyPolicyConfigHealthChecksArgs',
    'PolicyPolicyConfigLoadBalancingMethodArgs',
    'PolicyWafConfigArgs',
    'PolicyWafConfigAccessRuleArgs',
    'PolicyWafConfigAccessRuleCriteriaArgs',
    'PolicyWafConfigAccessRuleResponseHeaderManipulationArgs',
    'PolicyWafConfigAddressRateLimitingArgs',
    'PolicyWafConfigCachingRuleArgs',
    'PolicyWafConfigCachingRuleCriteriaArgs',
    'PolicyWafConfigCaptchaArgs',
    'PolicyWafConfigCustomProtectionRuleArgs',
    'PolicyWafConfigCustomProtectionRuleExclusionArgs',
    'PolicyWafConfigDeviceFingerprintChallengeArgs',
    'PolicyWafConfigDeviceFingerprintChallengeChallengeSettingsArgs',
    'PolicyWafConfigHumanInteractionChallengeArgs',
    'PolicyWafConfigHumanInteractionChallengeChallengeSettingsArgs',
    'PolicyWafConfigHumanInteractionChallengeSetHttpHeaderArgs',
    'PolicyWafConfigJsChallengeArgs',
    'PolicyWafConfigJsChallengeChallengeSettingsArgs',
    'PolicyWafConfigJsChallengeCriteriaArgs',
    'PolicyWafConfigJsChallengeSetHttpHeaderArgs',
    'PolicyWafConfigProtectionSettingsArgs',
    'PolicyWafConfigWhitelistArgs',
    'ProtectionRuleExclusionArgs',
    'GetAddressListsFilterArgs',
    'GetCertificatesFilterArgs',
    'GetCustomProtectionRulesFilterArgs',
    'GetEdgeSubnetsFilterArgs',
    'GetHttpRedirectsFilterArgs',
    'GetProtectionRulesFilterArgs',
    'GetWaasPoliciesFilterArgs',
]

@pulumi.input_type
class CertificateExtensionArgs:
    def __init__(__self__, *,
                 is_critical: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_critical")

    @is_critical.setter
    def is_critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_critical", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CertificateIssuerNameArgs:
    def __init__(__self__, *,
                 common_name: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 organizational_unit: Optional[pulumi.Input[str]] = None,
                 state_province: Optional[pulumi.Input[str]] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_province")

    @state_province.setter
    def state_province(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_province", value)


@pulumi.input_type
class CertificatePublicKeyInfoArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 exponent: Optional[pulumi.Input[int]] = None,
                 key_size: Optional[pulumi.Input[int]] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if exponent is not None:
            pulumi.set(__self__, "exponent", exponent)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def exponent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "exponent")

    @exponent.setter
    def exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exponent", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_size", value)


@pulumi.input_type
class CertificateSubjectNameArgs:
    def __init__(__self__, *,
                 common_name: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 email_address: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 organizational_unit: Optional[pulumi.Input[str]] = None,
                 state_province: Optional[pulumi.Input[str]] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_province")

    @state_province.setter
    def state_province(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_province", value)


@pulumi.input_type
class HttpRedirectTargetArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 path: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 query: pulumi.Input[str],
                 port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "query", query)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class PolicyOriginArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 uri: pulumi.Input[str],
                 custom_headers: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOriginCustomHeaderArgs']]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "uri", uri)
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOriginCustomHeaderArgs']]]]:
        return pulumi.get(self, "custom_headers")

    @custom_headers.setter
    def custom_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyOriginCustomHeaderArgs']]]]):
        pulumi.set(self, "custom_headers", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)


@pulumi.input_type
class PolicyOriginCustomHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PolicyOriginGroupArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 origin_groups: pulumi.Input[Sequence[pulumi.Input['PolicyOriginGroupOriginGroupArgs']]]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "origin_groups", origin_groups)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyOriginGroupOriginGroupArgs']]]:
        return pulumi.get(self, "origin_groups")

    @origin_groups.setter
    def origin_groups(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyOriginGroupOriginGroupArgs']]]):
        pulumi.set(self, "origin_groups", value)


@pulumi.input_type
class PolicyOriginGroupOriginGroupArgs:
    def __init__(__self__, *,
                 origin: pulumi.Input[str],
                 weight: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "origin", origin)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class PolicyPolicyConfigArgs:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 cipher_group: Optional[pulumi.Input[str]] = None,
                 client_address_header: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input['PolicyPolicyConfigHealthChecksArgs']] = None,
                 is_behind_cdn: Optional[pulumi.Input[bool]] = None,
                 is_cache_control_respected: Optional[pulumi.Input[bool]] = None,
                 is_https_enabled: Optional[pulumi.Input[bool]] = None,
                 is_https_forced: Optional[pulumi.Input[bool]] = None,
                 is_origin_compression_enabled: Optional[pulumi.Input[bool]] = None,
                 is_response_buffering_enabled: Optional[pulumi.Input[bool]] = None,
                 is_sni_enabled: Optional[pulumi.Input[bool]] = None,
                 load_balancing_method: Optional[pulumi.Input['PolicyPolicyConfigLoadBalancingMethodArgs']] = None,
                 tls_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 websocket_path_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cipher_group is not None:
            pulumi.set(__self__, "cipher_group", cipher_group)
        if client_address_header is not None:
            pulumi.set(__self__, "client_address_header", client_address_header)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if is_behind_cdn is not None:
            pulumi.set(__self__, "is_behind_cdn", is_behind_cdn)
        if is_cache_control_respected is not None:
            pulumi.set(__self__, "is_cache_control_respected", is_cache_control_respected)
        if is_https_enabled is not None:
            pulumi.set(__self__, "is_https_enabled", is_https_enabled)
        if is_https_forced is not None:
            pulumi.set(__self__, "is_https_forced", is_https_forced)
        if is_origin_compression_enabled is not None:
            pulumi.set(__self__, "is_origin_compression_enabled", is_origin_compression_enabled)
        if is_response_buffering_enabled is not None:
            pulumi.set(__self__, "is_response_buffering_enabled", is_response_buffering_enabled)
        if is_sni_enabled is not None:
            pulumi.set(__self__, "is_sni_enabled", is_sni_enabled)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if tls_protocols is not None:
            pulumi.set(__self__, "tls_protocols", tls_protocols)
        if websocket_path_prefixes is not None:
            pulumi.set(__self__, "websocket_path_prefixes", websocket_path_prefixes)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="cipherGroup")
    def cipher_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cipher_group")

    @cipher_group.setter
    def cipher_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher_group", value)

    @property
    @pulumi.getter(name="clientAddressHeader")
    def client_address_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_address_header")

    @client_address_header.setter
    def client_address_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_address_header", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input['PolicyPolicyConfigHealthChecksArgs']]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input['PolicyPolicyConfigHealthChecksArgs']]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="isBehindCdn")
    def is_behind_cdn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_behind_cdn")

    @is_behind_cdn.setter
    def is_behind_cdn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_behind_cdn", value)

    @property
    @pulumi.getter(name="isCacheControlRespected")
    def is_cache_control_respected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_cache_control_respected")

    @is_cache_control_respected.setter
    def is_cache_control_respected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cache_control_respected", value)

    @property
    @pulumi.getter(name="isHttpsEnabled")
    def is_https_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_https_enabled")

    @is_https_enabled.setter
    def is_https_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_https_enabled", value)

    @property
    @pulumi.getter(name="isHttpsForced")
    def is_https_forced(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_https_forced")

    @is_https_forced.setter
    def is_https_forced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_https_forced", value)

    @property
    @pulumi.getter(name="isOriginCompressionEnabled")
    def is_origin_compression_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_origin_compression_enabled")

    @is_origin_compression_enabled.setter
    def is_origin_compression_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_origin_compression_enabled", value)

    @property
    @pulumi.getter(name="isResponseBufferingEnabled")
    def is_response_buffering_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_response_buffering_enabled")

    @is_response_buffering_enabled.setter
    def is_response_buffering_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_response_buffering_enabled", value)

    @property
    @pulumi.getter(name="isSniEnabled")
    def is_sni_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_sni_enabled")

    @is_sni_enabled.setter
    def is_sni_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sni_enabled", value)

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional[pulumi.Input['PolicyPolicyConfigLoadBalancingMethodArgs']]:
        return pulumi.get(self, "load_balancing_method")

    @load_balancing_method.setter
    def load_balancing_method(self, value: Optional[pulumi.Input['PolicyPolicyConfigLoadBalancingMethodArgs']]):
        pulumi.set(self, "load_balancing_method", value)

    @property
    @pulumi.getter(name="tlsProtocols")
    def tls_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_protocols")

    @tls_protocols.setter
    def tls_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_protocols", value)

    @property
    @pulumi.getter(name="websocketPathPrefixes")
    def websocket_path_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "websocket_path_prefixes")

    @websocket_path_prefixes.setter
    def websocket_path_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "websocket_path_prefixes", value)


@pulumi.input_type
class PolicyPolicyConfigHealthChecksArgs:
    def __init__(__self__, *,
                 expected_response_code_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expected_response_text: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 healthy_threshold: Optional[pulumi.Input[int]] = None,
                 interval_in_seconds: Optional[pulumi.Input[int]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_response_text_check_enabled: Optional[pulumi.Input[bool]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[int]] = None):
        if expected_response_code_groups is not None:
            pulumi.set(__self__, "expected_response_code_groups", expected_response_code_groups)
        if expected_response_text is not None:
            pulumi.set(__self__, "expected_response_text", expected_response_text)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_response_text_check_enabled is not None:
            pulumi.set(__self__, "is_response_text_check_enabled", is_response_text_check_enabled)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="expectedResponseCodeGroups")
    def expected_response_code_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "expected_response_code_groups")

    @expected_response_code_groups.setter
    def expected_response_code_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expected_response_code_groups", value)

    @property
    @pulumi.getter(name="expectedResponseText")
    def expected_response_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expected_response_text")

    @expected_response_text.setter
    def expected_response_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_response_text", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval_in_seconds")

    @interval_in_seconds.setter
    def interval_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_in_seconds", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isResponseTextCheckEnabled")
    def is_response_text_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_response_text_check_enabled")

    @is_response_text_check_enabled.setter
    def is_response_text_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_response_text_check_enabled", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_in_seconds", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class PolicyPolicyConfigLoadBalancingMethodArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None,
                 expiration_time_in_seconds: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "method", method)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if expiration_time_in_seconds is not None:
            pulumi.set(__self__, "expiration_time_in_seconds", expiration_time_in_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="expirationTimeInSeconds")
    def expiration_time_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expiration_time_in_seconds")

    @expiration_time_in_seconds.setter
    def expiration_time_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_time_in_seconds", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PolicyWafConfigArgs:
    def __init__(__self__, *,
                 access_rules: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleArgs']]]] = None,
                 address_rate_limiting: Optional[pulumi.Input['PolicyWafConfigAddressRateLimitingArgs']] = None,
                 caching_rules: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCachingRuleArgs']]]] = None,
                 captchas: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCaptchaArgs']]]] = None,
                 custom_protection_rules: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCustomProtectionRuleArgs']]]] = None,
                 device_fingerprint_challenge: Optional[pulumi.Input['PolicyWafConfigDeviceFingerprintChallengeArgs']] = None,
                 human_interaction_challenge: Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeArgs']] = None,
                 js_challenge: Optional[pulumi.Input['PolicyWafConfigJsChallengeArgs']] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 origin_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protection_settings: Optional[pulumi.Input['PolicyWafConfigProtectionSettingsArgs']] = None,
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigWhitelistArgs']]]] = None):
        if access_rules is not None:
            pulumi.set(__self__, "access_rules", access_rules)
        if address_rate_limiting is not None:
            pulumi.set(__self__, "address_rate_limiting", address_rate_limiting)
        if caching_rules is not None:
            pulumi.set(__self__, "caching_rules", caching_rules)
        if captchas is not None:
            pulumi.set(__self__, "captchas", captchas)
        if custom_protection_rules is not None:
            pulumi.set(__self__, "custom_protection_rules", custom_protection_rules)
        if device_fingerprint_challenge is not None:
            pulumi.set(__self__, "device_fingerprint_challenge", device_fingerprint_challenge)
        if human_interaction_challenge is not None:
            pulumi.set(__self__, "human_interaction_challenge", human_interaction_challenge)
        if js_challenge is not None:
            pulumi.set(__self__, "js_challenge", js_challenge)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)
        if protection_settings is not None:
            pulumi.set(__self__, "protection_settings", protection_settings)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleArgs']]]]:
        return pulumi.get(self, "access_rules")

    @access_rules.setter
    def access_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleArgs']]]]):
        pulumi.set(self, "access_rules", value)

    @property
    @pulumi.getter(name="addressRateLimiting")
    def address_rate_limiting(self) -> Optional[pulumi.Input['PolicyWafConfigAddressRateLimitingArgs']]:
        return pulumi.get(self, "address_rate_limiting")

    @address_rate_limiting.setter
    def address_rate_limiting(self, value: Optional[pulumi.Input['PolicyWafConfigAddressRateLimitingArgs']]):
        pulumi.set(self, "address_rate_limiting", value)

    @property
    @pulumi.getter(name="cachingRules")
    def caching_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCachingRuleArgs']]]]:
        return pulumi.get(self, "caching_rules")

    @caching_rules.setter
    def caching_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCachingRuleArgs']]]]):
        pulumi.set(self, "caching_rules", value)

    @property
    @pulumi.getter
    def captchas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCaptchaArgs']]]]:
        return pulumi.get(self, "captchas")

    @captchas.setter
    def captchas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCaptchaArgs']]]]):
        pulumi.set(self, "captchas", value)

    @property
    @pulumi.getter(name="customProtectionRules")
    def custom_protection_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCustomProtectionRuleArgs']]]]:
        return pulumi.get(self, "custom_protection_rules")

    @custom_protection_rules.setter
    def custom_protection_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCustomProtectionRuleArgs']]]]):
        pulumi.set(self, "custom_protection_rules", value)

    @property
    @pulumi.getter(name="deviceFingerprintChallenge")
    def device_fingerprint_challenge(self) -> Optional[pulumi.Input['PolicyWafConfigDeviceFingerprintChallengeArgs']]:
        return pulumi.get(self, "device_fingerprint_challenge")

    @device_fingerprint_challenge.setter
    def device_fingerprint_challenge(self, value: Optional[pulumi.Input['PolicyWafConfigDeviceFingerprintChallengeArgs']]):
        pulumi.set(self, "device_fingerprint_challenge", value)

    @property
    @pulumi.getter(name="humanInteractionChallenge")
    def human_interaction_challenge(self) -> Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeArgs']]:
        return pulumi.get(self, "human_interaction_challenge")

    @human_interaction_challenge.setter
    def human_interaction_challenge(self, value: Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeArgs']]):
        pulumi.set(self, "human_interaction_challenge", value)

    @property
    @pulumi.getter(name="jsChallenge")
    def js_challenge(self) -> Optional[pulumi.Input['PolicyWafConfigJsChallengeArgs']]:
        return pulumi.get(self, "js_challenge")

    @js_challenge.setter
    def js_challenge(self, value: Optional[pulumi.Input['PolicyWafConfigJsChallengeArgs']]):
        pulumi.set(self, "js_challenge", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "origin_groups")

    @origin_groups.setter
    def origin_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "origin_groups", value)

    @property
    @pulumi.getter(name="protectionSettings")
    def protection_settings(self) -> Optional[pulumi.Input['PolicyWafConfigProtectionSettingsArgs']]:
        return pulumi.get(self, "protection_settings")

    @protection_settings.setter
    def protection_settings(self, value: Optional[pulumi.Input['PolicyWafConfigProtectionSettingsArgs']]):
        pulumi.set(self, "protection_settings", value)

    @property
    @pulumi.getter
    def whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigWhitelistArgs']]]]:
        return pulumi.get(self, "whitelists")

    @whitelists.setter
    def whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigWhitelistArgs']]]]):
        pulumi.set(self, "whitelists", value)


@pulumi.input_type
class PolicyWafConfigAccessRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 criterias: pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleCriteriaArgs']]],
                 name: pulumi.Input[str],
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_error_page_code: Optional[pulumi.Input[str]] = None,
                 block_error_page_description: Optional[pulumi.Input[str]] = None,
                 block_error_page_message: Optional[pulumi.Input[str]] = None,
                 block_response_code: Optional[pulumi.Input[int]] = None,
                 bypass_challenges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 captcha_footer: Optional[pulumi.Input[str]] = None,
                 captcha_header: Optional[pulumi.Input[str]] = None,
                 captcha_submit_label: Optional[pulumi.Input[str]] = None,
                 captcha_title: Optional[pulumi.Input[str]] = None,
                 redirect_response_code: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 response_header_manipulations: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleResponseHeaderManipulationArgs']]]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "criterias", criterias)
        pulumi.set(__self__, "name", name)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if bypass_challenges is not None:
            pulumi.set(__self__, "bypass_challenges", bypass_challenges)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)
        if redirect_response_code is not None:
            pulumi.set(__self__, "redirect_response_code", redirect_response_code)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_header_manipulations is not None:
            pulumi.set(__self__, "response_header_manipulations", response_header_manipulations)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def criterias(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleCriteriaArgs']]]:
        return pulumi.get(self, "criterias")

    @criterias.setter
    def criterias(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleCriteriaArgs']]]):
        pulumi.set(self, "criterias", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_code")

    @block_error_page_code.setter
    def block_error_page_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_code", value)

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_description")

    @block_error_page_description.setter
    def block_error_page_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_description", value)

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_message")

    @block_error_page_message.setter
    def block_error_page_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_message", value)

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_response_code")

    @block_response_code.setter
    def block_response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_response_code", value)

    @property
    @pulumi.getter(name="bypassChallenges")
    def bypass_challenges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bypass_challenges")

    @bypass_challenges.setter
    def bypass_challenges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bypass_challenges", value)

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_footer")

    @captcha_footer.setter
    def captcha_footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_footer", value)

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_header")

    @captcha_header.setter
    def captcha_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_header", value)

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_submit_label")

    @captcha_submit_label.setter
    def captcha_submit_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_submit_label", value)

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_title")

    @captcha_title.setter
    def captcha_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_title", value)

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_response_code")

    @redirect_response_code.setter
    def redirect_response_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_response_code", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="responseHeaderManipulations")
    def response_header_manipulations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleResponseHeaderManipulationArgs']]]]:
        return pulumi.get(self, "response_header_manipulations")

    @response_header_manipulations.setter
    def response_header_manipulations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigAccessRuleResponseHeaderManipulationArgs']]]]):
        pulumi.set(self, "response_header_manipulations", value)


@pulumi.input_type
class PolicyWafConfigAccessRuleCriteriaArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 value: pulumi.Input[str],
                 is_case_sensitive: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_case_sensitive")

    @is_case_sensitive.setter
    def is_case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_case_sensitive", value)


@pulumi.input_type
class PolicyWafConfigAccessRuleResponseHeaderManipulationArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 header: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input[str]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PolicyWafConfigAddressRateLimitingArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool],
                 allowed_rate_per_address: Optional[pulumi.Input[int]] = None,
                 block_response_code: Optional[pulumi.Input[int]] = None,
                 max_delayed_count_per_address: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if allowed_rate_per_address is not None:
            pulumi.set(__self__, "allowed_rate_per_address", allowed_rate_per_address)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if max_delayed_count_per_address is not None:
            pulumi.set(__self__, "max_delayed_count_per_address", max_delayed_count_per_address)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="allowedRatePerAddress")
    def allowed_rate_per_address(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "allowed_rate_per_address")

    @allowed_rate_per_address.setter
    def allowed_rate_per_address(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowed_rate_per_address", value)

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_response_code")

    @block_response_code.setter
    def block_response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_response_code", value)

    @property
    @pulumi.getter(name="maxDelayedCountPerAddress")
    def max_delayed_count_per_address(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_delayed_count_per_address")

    @max_delayed_count_per_address.setter
    def max_delayed_count_per_address(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_delayed_count_per_address", value)


@pulumi.input_type
class PolicyWafConfigCachingRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 criterias: pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCachingRuleCriteriaArgs']]],
                 name: pulumi.Input[str],
                 caching_duration: Optional[pulumi.Input[str]] = None,
                 client_caching_duration: Optional[pulumi.Input[str]] = None,
                 is_client_caching_enabled: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "criterias", criterias)
        pulumi.set(__self__, "name", name)
        if caching_duration is not None:
            pulumi.set(__self__, "caching_duration", caching_duration)
        if client_caching_duration is not None:
            pulumi.set(__self__, "client_caching_duration", client_caching_duration)
        if is_client_caching_enabled is not None:
            pulumi.set(__self__, "is_client_caching_enabled", is_client_caching_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def criterias(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCachingRuleCriteriaArgs']]]:
        return pulumi.get(self, "criterias")

    @criterias.setter
    def criterias(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCachingRuleCriteriaArgs']]]):
        pulumi.set(self, "criterias", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cachingDuration")
    def caching_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caching_duration")

    @caching_duration.setter
    def caching_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_duration", value)

    @property
    @pulumi.getter(name="clientCachingDuration")
    def client_caching_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_caching_duration")

    @client_caching_duration.setter
    def client_caching_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_caching_duration", value)

    @property
    @pulumi.getter(name="isClientCachingEnabled")
    def is_client_caching_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_client_caching_enabled")

    @is_client_caching_enabled.setter
    def is_client_caching_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_client_caching_enabled", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class PolicyWafConfigCachingRuleCriteriaArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PolicyWafConfigCaptchaArgs:
    def __init__(__self__, *,
                 failure_message: pulumi.Input[str],
                 session_expiration_in_seconds: pulumi.Input[int],
                 submit_label: pulumi.Input[str],
                 title: pulumi.Input[str],
                 url: pulumi.Input[str],
                 footer_text: Optional[pulumi.Input[str]] = None,
                 header_text: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "failure_message", failure_message)
        pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        pulumi.set(__self__, "submit_label", submit_label)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "url", url)
        if footer_text is not None:
            pulumi.set(__self__, "footer_text", footer_text)
        if header_text is not None:
            pulumi.set(__self__, "header_text", header_text)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "failure_message")

    @failure_message.setter
    def failure_message(self, value: pulumi.Input[str]):
        pulumi.set(self, "failure_message", value)

    @property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "session_expiration_in_seconds")

    @session_expiration_in_seconds.setter
    def session_expiration_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "session_expiration_in_seconds", value)

    @property
    @pulumi.getter(name="submitLabel")
    def submit_label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "submit_label")

    @submit_label.setter
    def submit_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "submit_label", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="footerText")
    def footer_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "footer_text")

    @footer_text.setter
    def footer_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_text", value)

    @property
    @pulumi.getter(name="headerText")
    def header_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header_text")

    @header_text.setter
    def header_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_text", value)


@pulumi.input_type
class PolicyWafConfigCustomProtectionRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCustomProtectionRuleExclusionArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCustomProtectionRuleExclusionArgs']]]]:
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigCustomProtectionRuleExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PolicyWafConfigCustomProtectionRuleExclusionArgs:
    def __init__(__self__, *,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclusions", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class PolicyWafConfigDeviceFingerprintChallengeArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool],
                 action: Optional[pulumi.Input[str]] = None,
                 action_expiration_in_seconds: Optional[pulumi.Input[int]] = None,
                 challenge_settings: Optional[pulumi.Input['PolicyWafConfigDeviceFingerprintChallengeChallengeSettingsArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 failure_threshold_expiration_in_seconds: Optional[pulumi.Input[int]] = None,
                 max_address_count: Optional[pulumi.Input[int]] = None,
                 max_address_count_expiration_in_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if max_address_count is not None:
            pulumi.set(__self__, "max_address_count", max_address_count)
        if max_address_count_expiration_in_seconds is not None:
            pulumi.set(__self__, "max_address_count_expiration_in_seconds", max_address_count_expiration_in_seconds)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @action_expiration_in_seconds.setter
    def action_expiration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_expiration_in_seconds", value)

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional[pulumi.Input['PolicyWafConfigDeviceFingerprintChallengeChallengeSettingsArgs']]:
        return pulumi.get(self, "challenge_settings")

    @challenge_settings.setter
    def challenge_settings(self, value: Optional[pulumi.Input['PolicyWafConfigDeviceFingerprintChallengeChallengeSettingsArgs']]):
        pulumi.set(self, "challenge_settings", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @failure_threshold_expiration_in_seconds.setter
    def failure_threshold_expiration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold_expiration_in_seconds", value)

    @property
    @pulumi.getter(name="maxAddressCount")
    def max_address_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_address_count")

    @max_address_count.setter
    def max_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_address_count", value)

    @property
    @pulumi.getter(name="maxAddressCountExpirationInSeconds")
    def max_address_count_expiration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_address_count_expiration_in_seconds")

    @max_address_count_expiration_in_seconds.setter
    def max_address_count_expiration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_address_count_expiration_in_seconds", value)


@pulumi.input_type
class PolicyWafConfigDeviceFingerprintChallengeChallengeSettingsArgs:
    def __init__(__self__, *,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_error_page_code: Optional[pulumi.Input[str]] = None,
                 block_error_page_description: Optional[pulumi.Input[str]] = None,
                 block_error_page_message: Optional[pulumi.Input[str]] = None,
                 block_response_code: Optional[pulumi.Input[int]] = None,
                 captcha_footer: Optional[pulumi.Input[str]] = None,
                 captcha_header: Optional[pulumi.Input[str]] = None,
                 captcha_submit_label: Optional[pulumi.Input[str]] = None,
                 captcha_title: Optional[pulumi.Input[str]] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_code")

    @block_error_page_code.setter
    def block_error_page_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_code", value)

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_description")

    @block_error_page_description.setter
    def block_error_page_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_description", value)

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_message")

    @block_error_page_message.setter
    def block_error_page_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_message", value)

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_response_code")

    @block_response_code.setter
    def block_response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_response_code", value)

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_footer")

    @captcha_footer.setter
    def captcha_footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_footer", value)

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_header")

    @captcha_header.setter
    def captcha_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_header", value)

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_submit_label")

    @captcha_submit_label.setter
    def captcha_submit_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_submit_label", value)

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_title")

    @captcha_title.setter
    def captcha_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_title", value)


@pulumi.input_type
class PolicyWafConfigHumanInteractionChallengeArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool],
                 action: Optional[pulumi.Input[str]] = None,
                 action_expiration_in_seconds: Optional[pulumi.Input[int]] = None,
                 challenge_settings: Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeChallengeSettingsArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 failure_threshold_expiration_in_seconds: Optional[pulumi.Input[int]] = None,
                 interaction_threshold: Optional[pulumi.Input[int]] = None,
                 is_nat_enabled: Optional[pulumi.Input[bool]] = None,
                 recording_period_in_seconds: Optional[pulumi.Input[int]] = None,
                 set_http_header: Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeSetHttpHeaderArgs']] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if interaction_threshold is not None:
            pulumi.set(__self__, "interaction_threshold", interaction_threshold)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if recording_period_in_seconds is not None:
            pulumi.set(__self__, "recording_period_in_seconds", recording_period_in_seconds)
        if set_http_header is not None:
            pulumi.set(__self__, "set_http_header", set_http_header)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @action_expiration_in_seconds.setter
    def action_expiration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_expiration_in_seconds", value)

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeChallengeSettingsArgs']]:
        return pulumi.get(self, "challenge_settings")

    @challenge_settings.setter
    def challenge_settings(self, value: Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeChallengeSettingsArgs']]):
        pulumi.set(self, "challenge_settings", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @failure_threshold_expiration_in_seconds.setter
    def failure_threshold_expiration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold_expiration_in_seconds", value)

    @property
    @pulumi.getter(name="interactionThreshold")
    def interaction_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interaction_threshold")

    @interaction_threshold.setter
    def interaction_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interaction_threshold", value)

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_nat_enabled")

    @is_nat_enabled.setter
    def is_nat_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_nat_enabled", value)

    @property
    @pulumi.getter(name="recordingPeriodInSeconds")
    def recording_period_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recording_period_in_seconds")

    @recording_period_in_seconds.setter
    def recording_period_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recording_period_in_seconds", value)

    @property
    @pulumi.getter(name="setHttpHeader")
    def set_http_header(self) -> Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeSetHttpHeaderArgs']]:
        return pulumi.get(self, "set_http_header")

    @set_http_header.setter
    def set_http_header(self, value: Optional[pulumi.Input['PolicyWafConfigHumanInteractionChallengeSetHttpHeaderArgs']]):
        pulumi.set(self, "set_http_header", value)


@pulumi.input_type
class PolicyWafConfigHumanInteractionChallengeChallengeSettingsArgs:
    def __init__(__self__, *,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_error_page_code: Optional[pulumi.Input[str]] = None,
                 block_error_page_description: Optional[pulumi.Input[str]] = None,
                 block_error_page_message: Optional[pulumi.Input[str]] = None,
                 block_response_code: Optional[pulumi.Input[int]] = None,
                 captcha_footer: Optional[pulumi.Input[str]] = None,
                 captcha_header: Optional[pulumi.Input[str]] = None,
                 captcha_submit_label: Optional[pulumi.Input[str]] = None,
                 captcha_title: Optional[pulumi.Input[str]] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_code")

    @block_error_page_code.setter
    def block_error_page_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_code", value)

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_description")

    @block_error_page_description.setter
    def block_error_page_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_description", value)

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_message")

    @block_error_page_message.setter
    def block_error_page_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_message", value)

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_response_code")

    @block_response_code.setter
    def block_response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_response_code", value)

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_footer")

    @captcha_footer.setter
    def captcha_footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_footer", value)

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_header")

    @captcha_header.setter
    def captcha_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_header", value)

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_submit_label")

    @captcha_submit_label.setter
    def captcha_submit_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_submit_label", value)

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_title")

    @captcha_title.setter
    def captcha_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_title", value)


@pulumi.input_type
class PolicyWafConfigHumanInteractionChallengeSetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PolicyWafConfigJsChallengeArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool],
                 action: Optional[pulumi.Input[str]] = None,
                 action_expiration_in_seconds: Optional[pulumi.Input[int]] = None,
                 are_redirects_challenged: Optional[pulumi.Input[bool]] = None,
                 challenge_settings: Optional[pulumi.Input['PolicyWafConfigJsChallengeChallengeSettingsArgs']] = None,
                 criterias: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigJsChallengeCriteriaArgs']]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 is_nat_enabled: Optional[pulumi.Input[bool]] = None,
                 set_http_header: Optional[pulumi.Input['PolicyWafConfigJsChallengeSetHttpHeaderArgs']] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if are_redirects_challenged is not None:
            pulumi.set(__self__, "are_redirects_challenged", are_redirects_challenged)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if criterias is not None:
            pulumi.set(__self__, "criterias", criterias)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if set_http_header is not None:
            pulumi.set(__self__, "set_http_header", set_http_header)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @action_expiration_in_seconds.setter
    def action_expiration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_expiration_in_seconds", value)

    @property
    @pulumi.getter(name="areRedirectsChallenged")
    def are_redirects_challenged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "are_redirects_challenged")

    @are_redirects_challenged.setter
    def are_redirects_challenged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_redirects_challenged", value)

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional[pulumi.Input['PolicyWafConfigJsChallengeChallengeSettingsArgs']]:
        return pulumi.get(self, "challenge_settings")

    @challenge_settings.setter
    def challenge_settings(self, value: Optional[pulumi.Input['PolicyWafConfigJsChallengeChallengeSettingsArgs']]):
        pulumi.set(self, "challenge_settings", value)

    @property
    @pulumi.getter
    def criterias(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigJsChallengeCriteriaArgs']]]]:
        return pulumi.get(self, "criterias")

    @criterias.setter
    def criterias(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyWafConfigJsChallengeCriteriaArgs']]]]):
        pulumi.set(self, "criterias", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_nat_enabled")

    @is_nat_enabled.setter
    def is_nat_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_nat_enabled", value)

    @property
    @pulumi.getter(name="setHttpHeader")
    def set_http_header(self) -> Optional[pulumi.Input['PolicyWafConfigJsChallengeSetHttpHeaderArgs']]:
        return pulumi.get(self, "set_http_header")

    @set_http_header.setter
    def set_http_header(self, value: Optional[pulumi.Input['PolicyWafConfigJsChallengeSetHttpHeaderArgs']]):
        pulumi.set(self, "set_http_header", value)


@pulumi.input_type
class PolicyWafConfigJsChallengeChallengeSettingsArgs:
    def __init__(__self__, *,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_error_page_code: Optional[pulumi.Input[str]] = None,
                 block_error_page_description: Optional[pulumi.Input[str]] = None,
                 block_error_page_message: Optional[pulumi.Input[str]] = None,
                 block_response_code: Optional[pulumi.Input[int]] = None,
                 captcha_footer: Optional[pulumi.Input[str]] = None,
                 captcha_header: Optional[pulumi.Input[str]] = None,
                 captcha_submit_label: Optional[pulumi.Input[str]] = None,
                 captcha_title: Optional[pulumi.Input[str]] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_code")

    @block_error_page_code.setter
    def block_error_page_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_code", value)

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_description")

    @block_error_page_description.setter
    def block_error_page_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_description", value)

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_message")

    @block_error_page_message.setter
    def block_error_page_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_message", value)

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_response_code")

    @block_response_code.setter
    def block_response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_response_code", value)

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_footer")

    @captcha_footer.setter
    def captcha_footer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_footer", value)

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_header")

    @captcha_header.setter
    def captcha_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_header", value)

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_submit_label")

    @captcha_submit_label.setter
    def captcha_submit_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_submit_label", value)

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_title")

    @captcha_title.setter
    def captcha_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_title", value)


@pulumi.input_type
class PolicyWafConfigJsChallengeCriteriaArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 value: pulumi.Input[str],
                 is_case_sensitive: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_case_sensitive")

    @is_case_sensitive.setter
    def is_case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_case_sensitive", value)


@pulumi.input_type
class PolicyWafConfigJsChallengeSetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PolicyWafConfigProtectionSettingsArgs:
    def __init__(__self__, *,
                 allowed_http_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_error_page_code: Optional[pulumi.Input[str]] = None,
                 block_error_page_description: Optional[pulumi.Input[str]] = None,
                 block_error_page_message: Optional[pulumi.Input[str]] = None,
                 block_response_code: Optional[pulumi.Input[int]] = None,
                 is_response_inspected: Optional[pulumi.Input[bool]] = None,
                 max_argument_count: Optional[pulumi.Input[int]] = None,
                 max_name_length_per_argument: Optional[pulumi.Input[int]] = None,
                 max_response_size_in_ki_b: Optional[pulumi.Input[int]] = None,
                 max_total_name_length_of_arguments: Optional[pulumi.Input[int]] = None,
                 media_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 recommendations_period_in_days: Optional[pulumi.Input[int]] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if is_response_inspected is not None:
            pulumi.set(__self__, "is_response_inspected", is_response_inspected)
        if max_argument_count is not None:
            pulumi.set(__self__, "max_argument_count", max_argument_count)
        if max_name_length_per_argument is not None:
            pulumi.set(__self__, "max_name_length_per_argument", max_name_length_per_argument)
        if max_response_size_in_ki_b is not None:
            pulumi.set(__self__, "max_response_size_in_ki_b", max_response_size_in_ki_b)
        if max_total_name_length_of_arguments is not None:
            pulumi.set(__self__, "max_total_name_length_of_arguments", max_total_name_length_of_arguments)
        if media_types is not None:
            pulumi.set(__self__, "media_types", media_types)
        if recommendations_period_in_days is not None:
            pulumi.set(__self__, "recommendations_period_in_days", recommendations_period_in_days)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_http_methods")

    @allowed_http_methods.setter
    def allowed_http_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_http_methods", value)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_code")

    @block_error_page_code.setter
    def block_error_page_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_code", value)

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_description")

    @block_error_page_description.setter
    def block_error_page_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_description", value)

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_error_page_message")

    @block_error_page_message.setter
    def block_error_page_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_error_page_message", value)

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_response_code")

    @block_response_code.setter
    def block_response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_response_code", value)

    @property
    @pulumi.getter(name="isResponseInspected")
    def is_response_inspected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_response_inspected")

    @is_response_inspected.setter
    def is_response_inspected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_response_inspected", value)

    @property
    @pulumi.getter(name="maxArgumentCount")
    def max_argument_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_argument_count")

    @max_argument_count.setter
    def max_argument_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_argument_count", value)

    @property
    @pulumi.getter(name="maxNameLengthPerArgument")
    def max_name_length_per_argument(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_name_length_per_argument")

    @max_name_length_per_argument.setter
    def max_name_length_per_argument(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_name_length_per_argument", value)

    @property
    @pulumi.getter(name="maxResponseSizeInKiB")
    def max_response_size_in_ki_b(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_response_size_in_ki_b")

    @max_response_size_in_ki_b.setter
    def max_response_size_in_ki_b(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_response_size_in_ki_b", value)

    @property
    @pulumi.getter(name="maxTotalNameLengthOfArguments")
    def max_total_name_length_of_arguments(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_total_name_length_of_arguments")

    @max_total_name_length_of_arguments.setter
    def max_total_name_length_of_arguments(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_total_name_length_of_arguments", value)

    @property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "media_types")

    @media_types.setter
    def media_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "media_types", value)

    @property
    @pulumi.getter(name="recommendationsPeriodInDays")
    def recommendations_period_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "recommendations_period_in_days")

    @recommendations_period_in_days.setter
    def recommendations_period_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recommendations_period_in_days", value)


@pulumi.input_type
class PolicyWafConfigWhitelistArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 address_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "name", name)
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "address_lists")

    @address_lists.setter
    def address_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lists", value)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)


@pulumi.input_type
class ProtectionRuleExclusionArgs:
    def __init__(__self__, *,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclusions", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class GetAddressListsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetCertificatesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetCustomProtectionRulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetEdgeSubnetsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetHttpRedirectsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetProtectionRulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWaasPoliciesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


