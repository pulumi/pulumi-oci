# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEdgeSubnetsResult',
    'AwaitableGetEdgeSubnetsResult',
    'get_edge_subnets',
    'get_edge_subnets_output',
]

@pulumi.output_type
class GetEdgeSubnetsResult:
    """
    A collection of values returned by getEdgeSubnets.
    """
    def __init__(__self__, edge_subnets=None, filters=None, id=None):
        if edge_subnets and not isinstance(edge_subnets, list):
            raise TypeError("Expected argument 'edge_subnets' to be a list")
        pulumi.set(__self__, "edge_subnets", edge_subnets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="edgeSubnets")
    def edge_subnets(self) -> Optional[Sequence['outputs.GetEdgeSubnetsEdgeSubnetResult']]:
        return pulumi.get(self, "edge_subnets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetEdgeSubnetsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetEdgeSubnetsResult(GetEdgeSubnetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgeSubnetsResult(
            edge_subnets=self.edge_subnets,
            filters=self.filters,
            id=self.id)


def get_edge_subnets(filters: Optional[Sequence[pulumi.InputType['GetEdgeSubnetsFilterArgs']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEdgeSubnetsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Waas/getEdgeSubnets:getEdgeSubnets', __args__, opts=opts, typ=GetEdgeSubnetsResult).value

    return AwaitableGetEdgeSubnetsResult(
        edge_subnets=pulumi.get(__ret__, 'edge_subnets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_edge_subnets)
def get_edge_subnets_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetEdgeSubnetsFilterArgs']]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEdgeSubnetsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
