# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProtectionRuleResult',
    'AwaitableGetProtectionRuleResult',
    'get_protection_rule',
    'get_protection_rule_output',
]

@pulumi.output_type
class GetProtectionRuleResult:
    """
    A collection of values returned by getProtectionRule.
    """
    def __init__(__self__, action=None, description=None, exclusions=None, id=None, key=None, labels=None, mod_security_rule_ids=None, name=None, protection_rule_key=None, waas_policy_id=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if exclusions and not isinstance(exclusions, list):
            raise TypeError("Expected argument 'exclusions' to be a list")
        pulumi.set(__self__, "exclusions", exclusions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if mod_security_rule_ids and not isinstance(mod_security_rule_ids, list):
            raise TypeError("Expected argument 'mod_security_rule_ids' to be a list")
        pulumi.set(__self__, "mod_security_rule_ids", mod_security_rule_ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protection_rule_key and not isinstance(protection_rule_key, str):
            raise TypeError("Expected argument 'protection_rule_key' to be a str")
        pulumi.set(__self__, "protection_rule_key", protection_rule_key)
        if waas_policy_id and not isinstance(waas_policy_id, str):
            raise TypeError("Expected argument 'waas_policy_id' to be a str")
        pulumi.set(__self__, "waas_policy_id", waas_policy_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetProtectionRuleExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="modSecurityRuleIds")
    def mod_security_rule_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mod_security_rule_ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionRuleKey")
    def protection_rule_key(self) -> str:
        return pulumi.get(self, "protection_rule_key")

    @property
    @pulumi.getter(name="waasPolicyId")
    def waas_policy_id(self) -> str:
        return pulumi.get(self, "waas_policy_id")


class AwaitableGetProtectionRuleResult(GetProtectionRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProtectionRuleResult(
            action=self.action,
            description=self.description,
            exclusions=self.exclusions,
            id=self.id,
            key=self.key,
            labels=self.labels,
            mod_security_rule_ids=self.mod_security_rule_ids,
            name=self.name,
            protection_rule_key=self.protection_rule_key,
            waas_policy_id=self.waas_policy_id)


def get_protection_rule(protection_rule_key: Optional[str] = None,
                        waas_policy_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProtectionRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['protectionRuleKey'] = protection_rule_key
    __args__['waasPolicyId'] = waas_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Waas/getProtectionRule:getProtectionRule', __args__, opts=opts, typ=GetProtectionRuleResult).value

    return AwaitableGetProtectionRuleResult(
        action=pulumi.get(__ret__, 'action'),
        description=pulumi.get(__ret__, 'description'),
        exclusions=pulumi.get(__ret__, 'exclusions'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        labels=pulumi.get(__ret__, 'labels'),
        mod_security_rule_ids=pulumi.get(__ret__, 'mod_security_rule_ids'),
        name=pulumi.get(__ret__, 'name'),
        protection_rule_key=pulumi.get(__ret__, 'protection_rule_key'),
        waas_policy_id=pulumi.get(__ret__, 'waas_policy_id'))


@_utilities.lift_output_func(get_protection_rule)
def get_protection_rule_output(protection_rule_key: Optional[pulumi.Input[str]] = None,
                               waas_policy_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProtectionRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
