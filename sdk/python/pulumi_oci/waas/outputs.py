# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CertificateExtension',
    'CertificateIssuerName',
    'CertificatePublicKeyInfo',
    'CertificateSubjectName',
    'HttpRedirectTarget',
    'PolicyOrigin',
    'PolicyOriginCustomHeader',
    'PolicyOriginGroup',
    'PolicyOriginGroupOriginGroup',
    'PolicyPolicyConfig',
    'PolicyPolicyConfigHealthChecks',
    'PolicyPolicyConfigLoadBalancingMethod',
    'PolicyWafConfig',
    'PolicyWafConfigAccessRule',
    'PolicyWafConfigAccessRuleCriteria',
    'PolicyWafConfigAccessRuleResponseHeaderManipulation',
    'PolicyWafConfigAddressRateLimiting',
    'PolicyWafConfigCachingRule',
    'PolicyWafConfigCachingRuleCriteria',
    'PolicyWafConfigCaptcha',
    'PolicyWafConfigCustomProtectionRule',
    'PolicyWafConfigCustomProtectionRuleExclusion',
    'PolicyWafConfigDeviceFingerprintChallenge',
    'PolicyWafConfigDeviceFingerprintChallengeChallengeSettings',
    'PolicyWafConfigHumanInteractionChallenge',
    'PolicyWafConfigHumanInteractionChallengeChallengeSettings',
    'PolicyWafConfigHumanInteractionChallengeSetHttpHeader',
    'PolicyWafConfigJsChallenge',
    'PolicyWafConfigJsChallengeChallengeSettings',
    'PolicyWafConfigJsChallengeCriteria',
    'PolicyWafConfigJsChallengeSetHttpHeader',
    'PolicyWafConfigProtectionSettings',
    'PolicyWafConfigWhitelist',
    'ProtectionRuleExclusion',
    'GetAddressListsAddressListResult',
    'GetAddressListsFilterResult',
    'GetCertificateExtensionResult',
    'GetCertificateIssuerNameResult',
    'GetCertificatePublicKeyInfoResult',
    'GetCertificateSubjectNameResult',
    'GetCertificatesCertificateResult',
    'GetCertificatesCertificateExtensionResult',
    'GetCertificatesCertificateIssuerNameResult',
    'GetCertificatesCertificatePublicKeyInfoResult',
    'GetCertificatesCertificateSubjectNameResult',
    'GetCertificatesFilterResult',
    'GetCustomProtectionRulesCustomProtectionRuleResult',
    'GetCustomProtectionRulesFilterResult',
    'GetEdgeSubnetsEdgeSubnetResult',
    'GetEdgeSubnetsFilterResult',
    'GetHttpRedirectTargetResult',
    'GetHttpRedirectsFilterResult',
    'GetHttpRedirectsHttpRedirectResult',
    'GetHttpRedirectsHttpRedirectTargetResult',
    'GetProtectionRuleExclusionResult',
    'GetProtectionRulesFilterResult',
    'GetProtectionRulesProtectionRuleResult',
    'GetProtectionRulesProtectionRuleExclusionResult',
    'GetWaasPoliciesFilterResult',
    'GetWaasPoliciesWaasPolicyResult',
    'GetWaasPoliciesWaasPolicyOriginResult',
    'GetWaasPoliciesWaasPolicyOriginCustomHeaderResult',
    'GetWaasPoliciesWaasPolicyOriginGroupResult',
    'GetWaasPoliciesWaasPolicyOriginGroupOriginGroupResult',
    'GetWaasPoliciesWaasPolicyPolicyConfigResult',
    'GetWaasPoliciesWaasPolicyPolicyConfigHealthCheckResult',
    'GetWaasPoliciesWaasPolicyPolicyConfigLoadBalancingMethodResult',
    'GetWaasPoliciesWaasPolicyWafConfigResult',
    'GetWaasPoliciesWaasPolicyWafConfigAccessRuleResult',
    'GetWaasPoliciesWaasPolicyWafConfigAccessRuleCriteriaResult',
    'GetWaasPoliciesWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult',
    'GetWaasPoliciesWaasPolicyWafConfigAddressRateLimitingResult',
    'GetWaasPoliciesWaasPolicyWafConfigCachingRuleResult',
    'GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteriaResult',
    'GetWaasPoliciesWaasPolicyWafConfigCaptchaResult',
    'GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleResult',
    'GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleExclusionResult',
    'GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeResult',
    'GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingResult',
    'GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeResult',
    'GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingResult',
    'GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult',
    'GetWaasPoliciesWaasPolicyWafConfigJsChallengeResult',
    'GetWaasPoliciesWaasPolicyWafConfigJsChallengeChallengeSettingResult',
    'GetWaasPoliciesWaasPolicyWafConfigJsChallengeCriteriaResult',
    'GetWaasPoliciesWaasPolicyWafConfigJsChallengeSetHttpHeaderResult',
    'GetWaasPoliciesWaasPolicyWafConfigProtectionSettingResult',
    'GetWaasPoliciesWaasPolicyWafConfigWhitelistResult',
    'GetWaasPolicyOriginResult',
    'GetWaasPolicyOriginCustomHeaderResult',
    'GetWaasPolicyOriginGroupResult',
    'GetWaasPolicyOriginGroupOriginGroupResult',
    'GetWaasPolicyPolicyConfigResult',
    'GetWaasPolicyPolicyConfigHealthChecksResult',
    'GetWaasPolicyPolicyConfigLoadBalancingMethodResult',
    'GetWaasPolicyWafConfigResult',
    'GetWaasPolicyWafConfigAccessRuleResult',
    'GetWaasPolicyWafConfigAccessRuleCriteriaResult',
    'GetWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult',
    'GetWaasPolicyWafConfigAddressRateLimitingResult',
    'GetWaasPolicyWafConfigCachingRuleResult',
    'GetWaasPolicyWafConfigCachingRuleCriteriaResult',
    'GetWaasPolicyWafConfigCaptchaResult',
    'GetWaasPolicyWafConfigCustomProtectionRuleResult',
    'GetWaasPolicyWafConfigCustomProtectionRuleExclusionResult',
    'GetWaasPolicyWafConfigDeviceFingerprintChallengeResult',
    'GetWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingsResult',
    'GetWaasPolicyWafConfigHumanInteractionChallengeResult',
    'GetWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingsResult',
    'GetWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult',
    'GetWaasPolicyWafConfigJsChallengeResult',
    'GetWaasPolicyWafConfigJsChallengeChallengeSettingsResult',
    'GetWaasPolicyWafConfigJsChallengeCriteriaResult',
    'GetWaasPolicyWafConfigJsChallengeSetHttpHeaderResult',
    'GetWaasPolicyWafConfigProtectionSettingsResult',
    'GetWaasPolicyWafConfigWhitelistResult',
]

@pulumi.output_type
class CertificateExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCritical":
            suggest = "is_critical"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_critical: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[bool]:
        return pulumi.get(self, "is_critical")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CertificateIssuerName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "stateProvince":
            suggest = "state_province"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateIssuerName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateIssuerName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateIssuerName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 email_address: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 state_province: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[str]:
        return pulumi.get(self, "state_province")


@pulumi.output_type
class CertificatePublicKeyInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySize":
            suggest = "key_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificatePublicKeyInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificatePublicKeyInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificatePublicKeyInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 exponent: Optional[int] = None,
                 key_size: Optional[int] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if exponent is not None:
            pulumi.set(__self__, "exponent", exponent)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def exponent(self) -> Optional[int]:
        return pulumi.get(self, "exponent")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")


@pulumi.output_type
class CertificateSubjectName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "emailAddress":
            suggest = "email_address"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "stateProvince":
            suggest = "state_province"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateSubjectName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateSubjectName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateSubjectName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 email_address: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 state_province: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[str]:
        return pulumi.get(self, "state_province")


@pulumi.output_type
class HttpRedirectTarget(dict):
    def __init__(__self__, *,
                 host: str,
                 path: str,
                 protocol: str,
                 query: str,
                 port: Optional[int] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "query", query)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class PolicyOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHeaders":
            suggest = "custom_headers"
        elif key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 uri: str,
                 custom_headers: Optional[Sequence['outputs.PolicyOriginCustomHeader']] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "uri", uri)
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[Sequence['outputs.PolicyOriginCustomHeader']]:
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")


@pulumi.output_type
class PolicyOriginCustomHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyOriginGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originGroups":
            suggest = "origin_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyOriginGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyOriginGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyOriginGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 origin_groups: Sequence['outputs.PolicyOriginGroupOriginGroup']):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "origin_groups", origin_groups)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Sequence['outputs.PolicyOriginGroupOriginGroup']:
        return pulumi.get(self, "origin_groups")


@pulumi.output_type
class PolicyOriginGroupOriginGroup(dict):
    def __init__(__self__, *,
                 origin: str,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "origin", origin)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def origin(self) -> str:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class PolicyPolicyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "cipherGroup":
            suggest = "cipher_group"
        elif key == "clientAddressHeader":
            suggest = "client_address_header"
        elif key == "healthChecks":
            suggest = "health_checks"
        elif key == "isBehindCdn":
            suggest = "is_behind_cdn"
        elif key == "isCacheControlRespected":
            suggest = "is_cache_control_respected"
        elif key == "isHttpsEnabled":
            suggest = "is_https_enabled"
        elif key == "isHttpsForced":
            suggest = "is_https_forced"
        elif key == "isOriginCompressionEnabled":
            suggest = "is_origin_compression_enabled"
        elif key == "isResponseBufferingEnabled":
            suggest = "is_response_buffering_enabled"
        elif key == "isSniEnabled":
            suggest = "is_sni_enabled"
        elif key == "loadBalancingMethod":
            suggest = "load_balancing_method"
        elif key == "tlsProtocols":
            suggest = "tls_protocols"
        elif key == "websocketPathPrefixes":
            suggest = "websocket_path_prefixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyPolicyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyPolicyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyPolicyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 cipher_group: Optional[str] = None,
                 client_address_header: Optional[str] = None,
                 health_checks: Optional['outputs.PolicyPolicyConfigHealthChecks'] = None,
                 is_behind_cdn: Optional[bool] = None,
                 is_cache_control_respected: Optional[bool] = None,
                 is_https_enabled: Optional[bool] = None,
                 is_https_forced: Optional[bool] = None,
                 is_origin_compression_enabled: Optional[bool] = None,
                 is_response_buffering_enabled: Optional[bool] = None,
                 is_sni_enabled: Optional[bool] = None,
                 load_balancing_method: Optional['outputs.PolicyPolicyConfigLoadBalancingMethod'] = None,
                 tls_protocols: Optional[Sequence[str]] = None,
                 websocket_path_prefixes: Optional[Sequence[str]] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cipher_group is not None:
            pulumi.set(__self__, "cipher_group", cipher_group)
        if client_address_header is not None:
            pulumi.set(__self__, "client_address_header", client_address_header)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if is_behind_cdn is not None:
            pulumi.set(__self__, "is_behind_cdn", is_behind_cdn)
        if is_cache_control_respected is not None:
            pulumi.set(__self__, "is_cache_control_respected", is_cache_control_respected)
        if is_https_enabled is not None:
            pulumi.set(__self__, "is_https_enabled", is_https_enabled)
        if is_https_forced is not None:
            pulumi.set(__self__, "is_https_forced", is_https_forced)
        if is_origin_compression_enabled is not None:
            pulumi.set(__self__, "is_origin_compression_enabled", is_origin_compression_enabled)
        if is_response_buffering_enabled is not None:
            pulumi.set(__self__, "is_response_buffering_enabled", is_response_buffering_enabled)
        if is_sni_enabled is not None:
            pulumi.set(__self__, "is_sni_enabled", is_sni_enabled)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if tls_protocols is not None:
            pulumi.set(__self__, "tls_protocols", tls_protocols)
        if websocket_path_prefixes is not None:
            pulumi.set(__self__, "websocket_path_prefixes", websocket_path_prefixes)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="cipherGroup")
    def cipher_group(self) -> Optional[str]:
        return pulumi.get(self, "cipher_group")

    @property
    @pulumi.getter(name="clientAddressHeader")
    def client_address_header(self) -> Optional[str]:
        return pulumi.get(self, "client_address_header")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional['outputs.PolicyPolicyConfigHealthChecks']:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="isBehindCdn")
    def is_behind_cdn(self) -> Optional[bool]:
        return pulumi.get(self, "is_behind_cdn")

    @property
    @pulumi.getter(name="isCacheControlRespected")
    def is_cache_control_respected(self) -> Optional[bool]:
        return pulumi.get(self, "is_cache_control_respected")

    @property
    @pulumi.getter(name="isHttpsEnabled")
    def is_https_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_https_enabled")

    @property
    @pulumi.getter(name="isHttpsForced")
    def is_https_forced(self) -> Optional[bool]:
        return pulumi.get(self, "is_https_forced")

    @property
    @pulumi.getter(name="isOriginCompressionEnabled")
    def is_origin_compression_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_origin_compression_enabled")

    @property
    @pulumi.getter(name="isResponseBufferingEnabled")
    def is_response_buffering_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_buffering_enabled")

    @property
    @pulumi.getter(name="isSniEnabled")
    def is_sni_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_sni_enabled")

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional['outputs.PolicyPolicyConfigLoadBalancingMethod']:
        return pulumi.get(self, "load_balancing_method")

    @property
    @pulumi.getter(name="tlsProtocols")
    def tls_protocols(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tls_protocols")

    @property
    @pulumi.getter(name="websocketPathPrefixes")
    def websocket_path_prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "websocket_path_prefixes")


@pulumi.output_type
class PolicyPolicyConfigHealthChecks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponseCodeGroups":
            suggest = "expected_response_code_groups"
        elif key == "expectedResponseText":
            suggest = "expected_response_text"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "intervalInSeconds":
            suggest = "interval_in_seconds"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isResponseTextCheckEnabled":
            suggest = "is_response_text_check_enabled"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyPolicyConfigHealthChecks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyPolicyConfigHealthChecks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyPolicyConfigHealthChecks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response_code_groups: Optional[Sequence[str]] = None,
                 expected_response_text: Optional[str] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 healthy_threshold: Optional[int] = None,
                 interval_in_seconds: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 is_response_text_check_enabled: Optional[bool] = None,
                 method: Optional[str] = None,
                 path: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        if expected_response_code_groups is not None:
            pulumi.set(__self__, "expected_response_code_groups", expected_response_code_groups)
        if expected_response_text is not None:
            pulumi.set(__self__, "expected_response_text", expected_response_text)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_response_text_check_enabled is not None:
            pulumi.set(__self__, "is_response_text_check_enabled", is_response_text_check_enabled)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="expectedResponseCodeGroups")
    def expected_response_code_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expected_response_code_groups")

    @property
    @pulumi.getter(name="expectedResponseText")
    def expected_response_text(self) -> Optional[str]:
        return pulumi.get(self, "expected_response_text")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isResponseTextCheckEnabled")
    def is_response_text_check_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_text_check_enabled")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class PolicyPolicyConfigLoadBalancingMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationTimeInSeconds":
            suggest = "expiration_time_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyPolicyConfigLoadBalancingMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyPolicyConfigLoadBalancingMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyPolicyConfigLoadBalancingMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 domain: Optional[str] = None,
                 expiration_time_in_seconds: Optional[int] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if expiration_time_in_seconds is not None:
            pulumi.set(__self__, "expiration_time_in_seconds", expiration_time_in_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="expirationTimeInSeconds")
    def expiration_time_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_time_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PolicyWafConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessRules":
            suggest = "access_rules"
        elif key == "addressRateLimiting":
            suggest = "address_rate_limiting"
        elif key == "cachingRules":
            suggest = "caching_rules"
        elif key == "customProtectionRules":
            suggest = "custom_protection_rules"
        elif key == "deviceFingerprintChallenge":
            suggest = "device_fingerprint_challenge"
        elif key == "humanInteractionChallenge":
            suggest = "human_interaction_challenge"
        elif key == "jsChallenge":
            suggest = "js_challenge"
        elif key == "originGroups":
            suggest = "origin_groups"
        elif key == "protectionSettings":
            suggest = "protection_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_rules: Optional[Sequence['outputs.PolicyWafConfigAccessRule']] = None,
                 address_rate_limiting: Optional['outputs.PolicyWafConfigAddressRateLimiting'] = None,
                 caching_rules: Optional[Sequence['outputs.PolicyWafConfigCachingRule']] = None,
                 captchas: Optional[Sequence['outputs.PolicyWafConfigCaptcha']] = None,
                 custom_protection_rules: Optional[Sequence['outputs.PolicyWafConfigCustomProtectionRule']] = None,
                 device_fingerprint_challenge: Optional['outputs.PolicyWafConfigDeviceFingerprintChallenge'] = None,
                 human_interaction_challenge: Optional['outputs.PolicyWafConfigHumanInteractionChallenge'] = None,
                 js_challenge: Optional['outputs.PolicyWafConfigJsChallenge'] = None,
                 origin: Optional[str] = None,
                 origin_groups: Optional[Sequence[str]] = None,
                 protection_settings: Optional['outputs.PolicyWafConfigProtectionSettings'] = None,
                 whitelists: Optional[Sequence['outputs.PolicyWafConfigWhitelist']] = None):
        if access_rules is not None:
            pulumi.set(__self__, "access_rules", access_rules)
        if address_rate_limiting is not None:
            pulumi.set(__self__, "address_rate_limiting", address_rate_limiting)
        if caching_rules is not None:
            pulumi.set(__self__, "caching_rules", caching_rules)
        if captchas is not None:
            pulumi.set(__self__, "captchas", captchas)
        if custom_protection_rules is not None:
            pulumi.set(__self__, "custom_protection_rules", custom_protection_rules)
        if device_fingerprint_challenge is not None:
            pulumi.set(__self__, "device_fingerprint_challenge", device_fingerprint_challenge)
        if human_interaction_challenge is not None:
            pulumi.set(__self__, "human_interaction_challenge", human_interaction_challenge)
        if js_challenge is not None:
            pulumi.set(__self__, "js_challenge", js_challenge)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)
        if protection_settings is not None:
            pulumi.set(__self__, "protection_settings", protection_settings)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Optional[Sequence['outputs.PolicyWafConfigAccessRule']]:
        return pulumi.get(self, "access_rules")

    @property
    @pulumi.getter(name="addressRateLimiting")
    def address_rate_limiting(self) -> Optional['outputs.PolicyWafConfigAddressRateLimiting']:
        return pulumi.get(self, "address_rate_limiting")

    @property
    @pulumi.getter(name="cachingRules")
    def caching_rules(self) -> Optional[Sequence['outputs.PolicyWafConfigCachingRule']]:
        return pulumi.get(self, "caching_rules")

    @property
    @pulumi.getter
    def captchas(self) -> Optional[Sequence['outputs.PolicyWafConfigCaptcha']]:
        return pulumi.get(self, "captchas")

    @property
    @pulumi.getter(name="customProtectionRules")
    def custom_protection_rules(self) -> Optional[Sequence['outputs.PolicyWafConfigCustomProtectionRule']]:
        return pulumi.get(self, "custom_protection_rules")

    @property
    @pulumi.getter(name="deviceFingerprintChallenge")
    def device_fingerprint_challenge(self) -> Optional['outputs.PolicyWafConfigDeviceFingerprintChallenge']:
        return pulumi.get(self, "device_fingerprint_challenge")

    @property
    @pulumi.getter(name="humanInteractionChallenge")
    def human_interaction_challenge(self) -> Optional['outputs.PolicyWafConfigHumanInteractionChallenge']:
        return pulumi.get(self, "human_interaction_challenge")

    @property
    @pulumi.getter(name="jsChallenge")
    def js_challenge(self) -> Optional['outputs.PolicyWafConfigJsChallenge']:
        return pulumi.get(self, "js_challenge")

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_groups")

    @property
    @pulumi.getter(name="protectionSettings")
    def protection_settings(self) -> Optional['outputs.PolicyWafConfigProtectionSettings']:
        return pulumi.get(self, "protection_settings")

    @property
    @pulumi.getter
    def whitelists(self) -> Optional[Sequence['outputs.PolicyWafConfigWhitelist']]:
        return pulumi.get(self, "whitelists")


@pulumi.output_type
class PolicyWafConfigAccessRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAction":
            suggest = "block_action"
        elif key == "blockErrorPageCode":
            suggest = "block_error_page_code"
        elif key == "blockErrorPageDescription":
            suggest = "block_error_page_description"
        elif key == "blockErrorPageMessage":
            suggest = "block_error_page_message"
        elif key == "blockResponseCode":
            suggest = "block_response_code"
        elif key == "bypassChallenges":
            suggest = "bypass_challenges"
        elif key == "captchaFooter":
            suggest = "captcha_footer"
        elif key == "captchaHeader":
            suggest = "captcha_header"
        elif key == "captchaSubmitLabel":
            suggest = "captcha_submit_label"
        elif key == "captchaTitle":
            suggest = "captcha_title"
        elif key == "redirectResponseCode":
            suggest = "redirect_response_code"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "responseHeaderManipulations":
            suggest = "response_header_manipulations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigAccessRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigAccessRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigAccessRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 criterias: Sequence['outputs.PolicyWafConfigAccessRuleCriteria'],
                 name: str,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 bypass_challenges: Optional[Sequence[str]] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None,
                 redirect_response_code: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 response_header_manipulations: Optional[Sequence['outputs.PolicyWafConfigAccessRuleResponseHeaderManipulation']] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "criterias", criterias)
        pulumi.set(__self__, "name", name)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if bypass_challenges is not None:
            pulumi.set(__self__, "bypass_challenges", bypass_challenges)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)
        if redirect_response_code is not None:
            pulumi.set(__self__, "redirect_response_code", redirect_response_code)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_header_manipulations is not None:
            pulumi.set(__self__, "response_header_manipulations", response_header_manipulations)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def criterias(self) -> Sequence['outputs.PolicyWafConfigAccessRuleCriteria']:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="bypassChallenges")
    def bypass_challenges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bypass_challenges")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[str]:
        return pulumi.get(self, "redirect_response_code")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="responseHeaderManipulations")
    def response_header_manipulations(self) -> Optional[Sequence['outputs.PolicyWafConfigAccessRuleResponseHeaderManipulation']]:
        return pulumi.get(self, "response_header_manipulations")


@pulumi.output_type
class PolicyWafConfigAccessRuleCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCaseSensitive":
            suggest = "is_case_sensitive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigAccessRuleCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigAccessRuleCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigAccessRuleCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: str,
                 value: str,
                 is_case_sensitive: Optional[bool] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "is_case_sensitive")


@pulumi.output_type
class PolicyWafConfigAccessRuleResponseHeaderManipulation(dict):
    def __init__(__self__, *,
                 action: str,
                 header: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyWafConfigAddressRateLimiting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "allowedRatePerAddress":
            suggest = "allowed_rate_per_address"
        elif key == "blockResponseCode":
            suggest = "block_response_code"
        elif key == "maxDelayedCountPerAddress":
            suggest = "max_delayed_count_per_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigAddressRateLimiting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigAddressRateLimiting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigAddressRateLimiting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 allowed_rate_per_address: Optional[int] = None,
                 block_response_code: Optional[int] = None,
                 max_delayed_count_per_address: Optional[int] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if allowed_rate_per_address is not None:
            pulumi.set(__self__, "allowed_rate_per_address", allowed_rate_per_address)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if max_delayed_count_per_address is not None:
            pulumi.set(__self__, "max_delayed_count_per_address", max_delayed_count_per_address)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="allowedRatePerAddress")
    def allowed_rate_per_address(self) -> Optional[int]:
        return pulumi.get(self, "allowed_rate_per_address")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="maxDelayedCountPerAddress")
    def max_delayed_count_per_address(self) -> Optional[int]:
        return pulumi.get(self, "max_delayed_count_per_address")


@pulumi.output_type
class PolicyWafConfigCachingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cachingDuration":
            suggest = "caching_duration"
        elif key == "clientCachingDuration":
            suggest = "client_caching_duration"
        elif key == "isClientCachingEnabled":
            suggest = "is_client_caching_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigCachingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigCachingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigCachingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 criterias: Sequence['outputs.PolicyWafConfigCachingRuleCriteria'],
                 name: str,
                 caching_duration: Optional[str] = None,
                 client_caching_duration: Optional[str] = None,
                 is_client_caching_enabled: Optional[bool] = None,
                 key: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "criterias", criterias)
        pulumi.set(__self__, "name", name)
        if caching_duration is not None:
            pulumi.set(__self__, "caching_duration", caching_duration)
        if client_caching_duration is not None:
            pulumi.set(__self__, "client_caching_duration", client_caching_duration)
        if is_client_caching_enabled is not None:
            pulumi.set(__self__, "is_client_caching_enabled", is_client_caching_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def criterias(self) -> Sequence['outputs.PolicyWafConfigCachingRuleCriteria']:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cachingDuration")
    def caching_duration(self) -> Optional[str]:
        return pulumi.get(self, "caching_duration")

    @property
    @pulumi.getter(name="clientCachingDuration")
    def client_caching_duration(self) -> Optional[str]:
        return pulumi.get(self, "client_caching_duration")

    @property
    @pulumi.getter(name="isClientCachingEnabled")
    def is_client_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_client_caching_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class PolicyWafConfigCachingRuleCriteria(dict):
    def __init__(__self__, *,
                 condition: str,
                 value: str):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyWafConfigCaptcha(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureMessage":
            suggest = "failure_message"
        elif key == "sessionExpirationInSeconds":
            suggest = "session_expiration_in_seconds"
        elif key == "submitLabel":
            suggest = "submit_label"
        elif key == "footerText":
            suggest = "footer_text"
        elif key == "headerText":
            suggest = "header_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigCaptcha. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigCaptcha.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigCaptcha.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_message: str,
                 session_expiration_in_seconds: int,
                 submit_label: str,
                 title: str,
                 url: str,
                 footer_text: Optional[str] = None,
                 header_text: Optional[str] = None):
        pulumi.set(__self__, "failure_message", failure_message)
        pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        pulumi.set(__self__, "submit_label", submit_label)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "url", url)
        if footer_text is not None:
            pulumi.set(__self__, "footer_text", footer_text)
        if header_text is not None:
            pulumi.set(__self__, "header_text", header_text)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> str:
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> int:
        return pulumi.get(self, "session_expiration_in_seconds")

    @property
    @pulumi.getter(name="submitLabel")
    def submit_label(self) -> str:
        return pulumi.get(self, "submit_label")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="footerText")
    def footer_text(self) -> Optional[str]:
        return pulumi.get(self, "footer_text")

    @property
    @pulumi.getter(name="headerText")
    def header_text(self) -> Optional[str]:
        return pulumi.get(self, "header_text")


@pulumi.output_type
class PolicyWafConfigCustomProtectionRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exclusions: Optional[Sequence['outputs.PolicyWafConfigCustomProtectionRuleExclusion']] = None,
                 id: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.PolicyWafConfigCustomProtectionRuleExclusion']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class PolicyWafConfigCustomProtectionRuleExclusion(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class PolicyWafConfigDeviceFingerprintChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "actionExpirationInSeconds":
            suggest = "action_expiration_in_seconds"
        elif key == "challengeSettings":
            suggest = "challenge_settings"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "failureThresholdExpirationInSeconds":
            suggest = "failure_threshold_expiration_in_seconds"
        elif key == "maxAddressCount":
            suggest = "max_address_count"
        elif key == "maxAddressCountExpirationInSeconds":
            suggest = "max_address_count_expiration_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigDeviceFingerprintChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigDeviceFingerprintChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigDeviceFingerprintChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 challenge_settings: Optional['outputs.PolicyWafConfigDeviceFingerprintChallengeChallengeSettings'] = None,
                 failure_threshold: Optional[int] = None,
                 failure_threshold_expiration_in_seconds: Optional[int] = None,
                 max_address_count: Optional[int] = None,
                 max_address_count_expiration_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if max_address_count is not None:
            pulumi.set(__self__, "max_address_count", max_address_count)
        if max_address_count_expiration_in_seconds is not None:
            pulumi.set(__self__, "max_address_count_expiration_in_seconds", max_address_count_expiration_in_seconds)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional['outputs.PolicyWafConfigDeviceFingerprintChallengeChallengeSettings']:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @property
    @pulumi.getter(name="maxAddressCount")
    def max_address_count(self) -> Optional[int]:
        return pulumi.get(self, "max_address_count")

    @property
    @pulumi.getter(name="maxAddressCountExpirationInSeconds")
    def max_address_count_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_address_count_expiration_in_seconds")


@pulumi.output_type
class PolicyWafConfigDeviceFingerprintChallengeChallengeSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAction":
            suggest = "block_action"
        elif key == "blockErrorPageCode":
            suggest = "block_error_page_code"
        elif key == "blockErrorPageDescription":
            suggest = "block_error_page_description"
        elif key == "blockErrorPageMessage":
            suggest = "block_error_page_message"
        elif key == "blockResponseCode":
            suggest = "block_response_code"
        elif key == "captchaFooter":
            suggest = "captcha_footer"
        elif key == "captchaHeader":
            suggest = "captcha_header"
        elif key == "captchaSubmitLabel":
            suggest = "captcha_submit_label"
        elif key == "captchaTitle":
            suggest = "captcha_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigDeviceFingerprintChallengeChallengeSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigDeviceFingerprintChallengeChallengeSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigDeviceFingerprintChallengeChallengeSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class PolicyWafConfigHumanInteractionChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "actionExpirationInSeconds":
            suggest = "action_expiration_in_seconds"
        elif key == "challengeSettings":
            suggest = "challenge_settings"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "failureThresholdExpirationInSeconds":
            suggest = "failure_threshold_expiration_in_seconds"
        elif key == "interactionThreshold":
            suggest = "interaction_threshold"
        elif key == "isNatEnabled":
            suggest = "is_nat_enabled"
        elif key == "recordingPeriodInSeconds":
            suggest = "recording_period_in_seconds"
        elif key == "setHttpHeader":
            suggest = "set_http_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigHumanInteractionChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigHumanInteractionChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigHumanInteractionChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 challenge_settings: Optional['outputs.PolicyWafConfigHumanInteractionChallengeChallengeSettings'] = None,
                 failure_threshold: Optional[int] = None,
                 failure_threshold_expiration_in_seconds: Optional[int] = None,
                 interaction_threshold: Optional[int] = None,
                 is_nat_enabled: Optional[bool] = None,
                 recording_period_in_seconds: Optional[int] = None,
                 set_http_header: Optional['outputs.PolicyWafConfigHumanInteractionChallengeSetHttpHeader'] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if interaction_threshold is not None:
            pulumi.set(__self__, "interaction_threshold", interaction_threshold)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if recording_period_in_seconds is not None:
            pulumi.set(__self__, "recording_period_in_seconds", recording_period_in_seconds)
        if set_http_header is not None:
            pulumi.set(__self__, "set_http_header", set_http_header)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional['outputs.PolicyWafConfigHumanInteractionChallengeChallengeSettings']:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @property
    @pulumi.getter(name="interactionThreshold")
    def interaction_threshold(self) -> Optional[int]:
        return pulumi.get(self, "interaction_threshold")

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_enabled")

    @property
    @pulumi.getter(name="recordingPeriodInSeconds")
    def recording_period_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "recording_period_in_seconds")

    @property
    @pulumi.getter(name="setHttpHeader")
    def set_http_header(self) -> Optional['outputs.PolicyWafConfigHumanInteractionChallengeSetHttpHeader']:
        return pulumi.get(self, "set_http_header")


@pulumi.output_type
class PolicyWafConfigHumanInteractionChallengeChallengeSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAction":
            suggest = "block_action"
        elif key == "blockErrorPageCode":
            suggest = "block_error_page_code"
        elif key == "blockErrorPageDescription":
            suggest = "block_error_page_description"
        elif key == "blockErrorPageMessage":
            suggest = "block_error_page_message"
        elif key == "blockResponseCode":
            suggest = "block_response_code"
        elif key == "captchaFooter":
            suggest = "captcha_footer"
        elif key == "captchaHeader":
            suggest = "captcha_header"
        elif key == "captchaSubmitLabel":
            suggest = "captcha_submit_label"
        elif key == "captchaTitle":
            suggest = "captcha_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigHumanInteractionChallengeChallengeSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigHumanInteractionChallengeChallengeSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigHumanInteractionChallengeChallengeSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class PolicyWafConfigHumanInteractionChallengeSetHttpHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyWafConfigJsChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "actionExpirationInSeconds":
            suggest = "action_expiration_in_seconds"
        elif key == "areRedirectsChallenged":
            suggest = "are_redirects_challenged"
        elif key == "challengeSettings":
            suggest = "challenge_settings"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "isNatEnabled":
            suggest = "is_nat_enabled"
        elif key == "setHttpHeader":
            suggest = "set_http_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigJsChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigJsChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigJsChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 are_redirects_challenged: Optional[bool] = None,
                 challenge_settings: Optional['outputs.PolicyWafConfigJsChallengeChallengeSettings'] = None,
                 criterias: Optional[Sequence['outputs.PolicyWafConfigJsChallengeCriteria']] = None,
                 failure_threshold: Optional[int] = None,
                 is_nat_enabled: Optional[bool] = None,
                 set_http_header: Optional['outputs.PolicyWafConfigJsChallengeSetHttpHeader'] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if are_redirects_challenged is not None:
            pulumi.set(__self__, "are_redirects_challenged", are_redirects_challenged)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if criterias is not None:
            pulumi.set(__self__, "criterias", criterias)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if set_http_header is not None:
            pulumi.set(__self__, "set_http_header", set_http_header)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="areRedirectsChallenged")
    def are_redirects_challenged(self) -> Optional[bool]:
        return pulumi.get(self, "are_redirects_challenged")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional['outputs.PolicyWafConfigJsChallengeChallengeSettings']:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter
    def criterias(self) -> Optional[Sequence['outputs.PolicyWafConfigJsChallengeCriteria']]:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_enabled")

    @property
    @pulumi.getter(name="setHttpHeader")
    def set_http_header(self) -> Optional['outputs.PolicyWafConfigJsChallengeSetHttpHeader']:
        return pulumi.get(self, "set_http_header")


@pulumi.output_type
class PolicyWafConfigJsChallengeChallengeSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAction":
            suggest = "block_action"
        elif key == "blockErrorPageCode":
            suggest = "block_error_page_code"
        elif key == "blockErrorPageDescription":
            suggest = "block_error_page_description"
        elif key == "blockErrorPageMessage":
            suggest = "block_error_page_message"
        elif key == "blockResponseCode":
            suggest = "block_response_code"
        elif key == "captchaFooter":
            suggest = "captcha_footer"
        elif key == "captchaHeader":
            suggest = "captcha_header"
        elif key == "captchaSubmitLabel":
            suggest = "captcha_submit_label"
        elif key == "captchaTitle":
            suggest = "captcha_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigJsChallengeChallengeSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigJsChallengeChallengeSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigJsChallengeChallengeSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class PolicyWafConfigJsChallengeCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCaseSensitive":
            suggest = "is_case_sensitive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigJsChallengeCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigJsChallengeCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigJsChallengeCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: str,
                 value: str,
                 is_case_sensitive: Optional[bool] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "is_case_sensitive")


@pulumi.output_type
class PolicyWafConfigJsChallengeSetHttpHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyWafConfigProtectionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHttpMethods":
            suggest = "allowed_http_methods"
        elif key == "blockAction":
            suggest = "block_action"
        elif key == "blockErrorPageCode":
            suggest = "block_error_page_code"
        elif key == "blockErrorPageDescription":
            suggest = "block_error_page_description"
        elif key == "blockErrorPageMessage":
            suggest = "block_error_page_message"
        elif key == "blockResponseCode":
            suggest = "block_response_code"
        elif key == "isResponseInspected":
            suggest = "is_response_inspected"
        elif key == "maxArgumentCount":
            suggest = "max_argument_count"
        elif key == "maxNameLengthPerArgument":
            suggest = "max_name_length_per_argument"
        elif key == "maxResponseSizeInKiB":
            suggest = "max_response_size_in_ki_b"
        elif key == "maxTotalNameLengthOfArguments":
            suggest = "max_total_name_length_of_arguments"
        elif key == "mediaTypes":
            suggest = "media_types"
        elif key == "recommendationsPeriodInDays":
            suggest = "recommendations_period_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigProtectionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigProtectionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigProtectionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 is_response_inspected: Optional[bool] = None,
                 max_argument_count: Optional[int] = None,
                 max_name_length_per_argument: Optional[int] = None,
                 max_response_size_in_ki_b: Optional[int] = None,
                 max_total_name_length_of_arguments: Optional[int] = None,
                 media_types: Optional[Sequence[str]] = None,
                 recommendations_period_in_days: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if is_response_inspected is not None:
            pulumi.set(__self__, "is_response_inspected", is_response_inspected)
        if max_argument_count is not None:
            pulumi.set(__self__, "max_argument_count", max_argument_count)
        if max_name_length_per_argument is not None:
            pulumi.set(__self__, "max_name_length_per_argument", max_name_length_per_argument)
        if max_response_size_in_ki_b is not None:
            pulumi.set(__self__, "max_response_size_in_ki_b", max_response_size_in_ki_b)
        if max_total_name_length_of_arguments is not None:
            pulumi.set(__self__, "max_total_name_length_of_arguments", max_total_name_length_of_arguments)
        if media_types is not None:
            pulumi.set(__self__, "media_types", media_types)
        if recommendations_period_in_days is not None:
            pulumi.set(__self__, "recommendations_period_in_days", recommendations_period_in_days)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="isResponseInspected")
    def is_response_inspected(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_inspected")

    @property
    @pulumi.getter(name="maxArgumentCount")
    def max_argument_count(self) -> Optional[int]:
        return pulumi.get(self, "max_argument_count")

    @property
    @pulumi.getter(name="maxNameLengthPerArgument")
    def max_name_length_per_argument(self) -> Optional[int]:
        return pulumi.get(self, "max_name_length_per_argument")

    @property
    @pulumi.getter(name="maxResponseSizeInKiB")
    def max_response_size_in_ki_b(self) -> Optional[int]:
        return pulumi.get(self, "max_response_size_in_ki_b")

    @property
    @pulumi.getter(name="maxTotalNameLengthOfArguments")
    def max_total_name_length_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_total_name_length_of_arguments")

    @property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "media_types")

    @property
    @pulumi.getter(name="recommendationsPeriodInDays")
    def recommendations_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "recommendations_period_in_days")


@pulumi.output_type
class PolicyWafConfigWhitelist(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLists":
            suggest = "address_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyWafConfigWhitelist. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyWafConfigWhitelist.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyWafConfigWhitelist.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 address_lists: Optional[Sequence[str]] = None,
                 addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "address_lists")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")


@pulumi.output_type
class ProtectionRuleExclusion(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetAddressListsAddressListResult(dict):
    def __init__(__self__, *,
                 address_count: Optional[float] = None,
                 addresses: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if address_count is not None:
            pulumi.set(__self__, "address_count", address_count)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="addressCount")
    def address_count(self) -> Optional[float]:
        return pulumi.get(self, "address_count")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetAddressListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificateExtensionResult(dict):
    def __init__(__self__, *,
                 is_critical: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[bool]:
        return pulumi.get(self, "is_critical")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateIssuerNameResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 email_address: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 state_province: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[str]:
        return pulumi.get(self, "state_province")


@pulumi.output_type
class GetCertificatePublicKeyInfoResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 exponent: Optional[int] = None,
                 key_size: Optional[int] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if exponent is not None:
            pulumi.set(__self__, "exponent", exponent)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def exponent(self) -> Optional[int]:
        return pulumi.get(self, "exponent")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")


@pulumi.output_type
class GetCertificateSubjectNameResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 email_address: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 state_province: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[str]:
        return pulumi.get(self, "state_province")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 certificate_data: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extensions: Optional[Sequence['outputs.GetCertificatesCertificateExtensionResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_trust_verification_disabled: Optional[bool] = None,
                 issued_by: Optional[str] = None,
                 issuer_names: Optional[Sequence['outputs.GetCertificatesCertificateIssuerNameResult']] = None,
                 private_key_data: Optional[str] = None,
                 public_key_infos: Optional[Sequence['outputs.GetCertificatesCertificatePublicKeyInfoResult']] = None,
                 serial_number: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 state: Optional[str] = None,
                 subject_names: Optional[Sequence['outputs.GetCertificatesCertificateSubjectNameResult']] = None,
                 time_created: Optional[str] = None,
                 time_not_valid_after: Optional[str] = None,
                 time_not_valid_before: Optional[str] = None,
                 version: Optional[int] = None):
        if certificate_data is not None:
            pulumi.set(__self__, "certificate_data", certificate_data)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_trust_verification_disabled is not None:
            pulumi.set(__self__, "is_trust_verification_disabled", is_trust_verification_disabled)
        if issued_by is not None:
            pulumi.set(__self__, "issued_by", issued_by)
        if issuer_names is not None:
            pulumi.set(__self__, "issuer_names", issuer_names)
        if private_key_data is not None:
            pulumi.set(__self__, "private_key_data", private_key_data)
        if public_key_infos is not None:
            pulumi.set(__self__, "public_key_infos", public_key_infos)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subject_names is not None:
            pulumi.set(__self__, "subject_names", subject_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_not_valid_after is not None:
            pulumi.set(__self__, "time_not_valid_after", time_not_valid_after)
        if time_not_valid_before is not None:
            pulumi.set(__self__, "time_not_valid_before", time_not_valid_before)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> Optional[str]:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.GetCertificatesCertificateExtensionResult']]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isTrustVerificationDisabled")
    def is_trust_verification_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trust_verification_disabled")

    @property
    @pulumi.getter(name="issuedBy")
    def issued_by(self) -> Optional[str]:
        return pulumi.get(self, "issued_by")

    @property
    @pulumi.getter(name="issuerNames")
    def issuer_names(self) -> Optional[Sequence['outputs.GetCertificatesCertificateIssuerNameResult']]:
        return pulumi.get(self, "issuer_names")

    @property
    @pulumi.getter(name="privateKeyData")
    def private_key_data(self) -> Optional[str]:
        return pulumi.get(self, "private_key_data")

    @property
    @pulumi.getter(name="publicKeyInfos")
    def public_key_infos(self) -> Optional[Sequence['outputs.GetCertificatesCertificatePublicKeyInfoResult']]:
        return pulumi.get(self, "public_key_infos")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subjectNames")
    def subject_names(self) -> Optional[Sequence['outputs.GetCertificatesCertificateSubjectNameResult']]:
        return pulumi.get(self, "subject_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeNotValidAfter")
    def time_not_valid_after(self) -> Optional[str]:
        return pulumi.get(self, "time_not_valid_after")

    @property
    @pulumi.getter(name="timeNotValidBefore")
    def time_not_valid_before(self) -> Optional[str]:
        return pulumi.get(self, "time_not_valid_before")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCertificatesCertificateExtensionResult(dict):
    def __init__(__self__, *,
                 is_critical: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[bool]:
        return pulumi.get(self, "is_critical")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificatesCertificateIssuerNameResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 email_address: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 state_province: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[str]:
        return pulumi.get(self, "state_province")


@pulumi.output_type
class GetCertificatesCertificatePublicKeyInfoResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 exponent: Optional[int] = None,
                 key_size: Optional[int] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if exponent is not None:
            pulumi.set(__self__, "exponent", exponent)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def exponent(self) -> Optional[int]:
        return pulumi.get(self, "exponent")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")


@pulumi.output_type
class GetCertificatesCertificateSubjectNameResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 email_address: Optional[str] = None,
                 locality: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 state_province: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if state_province is not None:
            pulumi.set(__self__, "state_province", state_province)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> Optional[str]:
        return pulumi.get(self, "state_province")


@pulumi.output_type
class GetCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCustomProtectionRulesCustomProtectionRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 mod_security_rule_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 template: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mod_security_rule_ids is not None:
            pulumi.set(__self__, "mod_security_rule_ids", mod_security_rule_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modSecurityRuleIds")
    def mod_security_rule_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mod_security_rule_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCustomProtectionRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEdgeSubnetsEdgeSubnetResult(dict):
    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 region: Optional[str] = None,
                 time_modified: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if time_modified is not None:
            pulumi.set(__self__, "time_modified", time_modified)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_modified")


@pulumi.output_type
class GetEdgeSubnetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHttpRedirectTargetResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 query: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")


@pulumi.output_type
class GetHttpRedirectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetHttpRedirectsHttpRedirectResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 response_code: Optional[int] = None,
                 state: Optional[str] = None,
                 targets: Optional[Sequence['outputs.GetHttpRedirectsHttpRedirectTargetResult']] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetHttpRedirectsHttpRedirectTargetResult']]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetHttpRedirectsHttpRedirectTargetResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 query: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")


@pulumi.output_type
class GetProtectionRuleExclusionResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetProtectionRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProtectionRulesProtectionRuleResult(dict):
    def __init__(__self__, *,
                 key: str,
                 waas_policy_id: str,
                 action: Optional[str] = None,
                 description: Optional[str] = None,
                 exclusions: Optional[Sequence['outputs.GetProtectionRulesProtectionRuleExclusionResult']] = None,
                 labels: Optional[Sequence[str]] = None,
                 mod_security_rule_ids: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "waas_policy_id", waas_policy_id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mod_security_rule_ids is not None:
            pulumi.set(__self__, "mod_security_rule_ids", mod_security_rule_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="waasPolicyId")
    def waas_policy_id(self) -> str:
        return pulumi.get(self, "waas_policy_id")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetProtectionRulesProtectionRuleExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="modSecurityRuleIds")
    def mod_security_rule_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mod_security_rule_ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProtectionRulesProtectionRuleExclusionResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWaasPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyResult(dict):
    def __init__(__self__, *,
                 additional_domains: Optional[Sequence[str]] = None,
                 cname: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 origin_groups: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginGroupResult']] = None,
                 origins: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginResult']] = None,
                 policy_configs: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyPolicyConfigResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 waf_configs: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigResult']] = None):
        if additional_domains is not None:
            pulumi.set(__self__, "additional_domains", additional_domains)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if policy_configs is not None:
            pulumi.set(__self__, "policy_configs", policy_configs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if waf_configs is not None:
            pulumi.set(__self__, "waf_configs", waf_configs)

    @property
    @pulumi.getter(name="additionalDomains")
    def additional_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "additional_domains")

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginGroupResult']]:
        return pulumi.get(self, "origin_groups")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginResult']]:
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="policyConfigs")
    def policy_configs(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyPolicyConfigResult']]:
        return pulumi.get(self, "policy_configs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="wafConfigs")
    def waf_configs(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigResult']]:
        return pulumi.get(self, "waf_configs")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyOriginResult(dict):
    def __init__(__self__, *,
                 custom_headers: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginCustomHeaderResult']] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 label: Optional[str] = None,
                 uri: Optional[str] = None):
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginCustomHeaderResult']]:
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyOriginCustomHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyOriginGroupResult(dict):
    def __init__(__self__, *,
                 label: Optional[str] = None,
                 origin_groups: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginGroupOriginGroupResult']] = None):
        if label is not None:
            pulumi.set(__self__, "label", label)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyOriginGroupOriginGroupResult']]:
        return pulumi.get(self, "origin_groups")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyOriginGroupOriginGroupResult(dict):
    def __init__(__self__, *,
                 origin: Optional[str] = None,
                 weight: Optional[int] = None):
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyPolicyConfigResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 cipher_group: Optional[str] = None,
                 client_address_header: Optional[str] = None,
                 health_checks: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyPolicyConfigHealthCheckResult']] = None,
                 is_behind_cdn: Optional[bool] = None,
                 is_cache_control_respected: Optional[bool] = None,
                 is_https_enabled: Optional[bool] = None,
                 is_https_forced: Optional[bool] = None,
                 is_origin_compression_enabled: Optional[bool] = None,
                 is_response_buffering_enabled: Optional[bool] = None,
                 is_sni_enabled: Optional[bool] = None,
                 load_balancing_methods: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyPolicyConfigLoadBalancingMethodResult']] = None,
                 tls_protocols: Optional[Sequence[str]] = None,
                 websocket_path_prefixes: Optional[Sequence[str]] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cipher_group is not None:
            pulumi.set(__self__, "cipher_group", cipher_group)
        if client_address_header is not None:
            pulumi.set(__self__, "client_address_header", client_address_header)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if is_behind_cdn is not None:
            pulumi.set(__self__, "is_behind_cdn", is_behind_cdn)
        if is_cache_control_respected is not None:
            pulumi.set(__self__, "is_cache_control_respected", is_cache_control_respected)
        if is_https_enabled is not None:
            pulumi.set(__self__, "is_https_enabled", is_https_enabled)
        if is_https_forced is not None:
            pulumi.set(__self__, "is_https_forced", is_https_forced)
        if is_origin_compression_enabled is not None:
            pulumi.set(__self__, "is_origin_compression_enabled", is_origin_compression_enabled)
        if is_response_buffering_enabled is not None:
            pulumi.set(__self__, "is_response_buffering_enabled", is_response_buffering_enabled)
        if is_sni_enabled is not None:
            pulumi.set(__self__, "is_sni_enabled", is_sni_enabled)
        if load_balancing_methods is not None:
            pulumi.set(__self__, "load_balancing_methods", load_balancing_methods)
        if tls_protocols is not None:
            pulumi.set(__self__, "tls_protocols", tls_protocols)
        if websocket_path_prefixes is not None:
            pulumi.set(__self__, "websocket_path_prefixes", websocket_path_prefixes)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="cipherGroup")
    def cipher_group(self) -> Optional[str]:
        return pulumi.get(self, "cipher_group")

    @property
    @pulumi.getter(name="clientAddressHeader")
    def client_address_header(self) -> Optional[str]:
        return pulumi.get(self, "client_address_header")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyPolicyConfigHealthCheckResult']]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="isBehindCdn")
    def is_behind_cdn(self) -> Optional[bool]:
        return pulumi.get(self, "is_behind_cdn")

    @property
    @pulumi.getter(name="isCacheControlRespected")
    def is_cache_control_respected(self) -> Optional[bool]:
        return pulumi.get(self, "is_cache_control_respected")

    @property
    @pulumi.getter(name="isHttpsEnabled")
    def is_https_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_https_enabled")

    @property
    @pulumi.getter(name="isHttpsForced")
    def is_https_forced(self) -> Optional[bool]:
        return pulumi.get(self, "is_https_forced")

    @property
    @pulumi.getter(name="isOriginCompressionEnabled")
    def is_origin_compression_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_origin_compression_enabled")

    @property
    @pulumi.getter(name="isResponseBufferingEnabled")
    def is_response_buffering_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_buffering_enabled")

    @property
    @pulumi.getter(name="isSniEnabled")
    def is_sni_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_sni_enabled")

    @property
    @pulumi.getter(name="loadBalancingMethods")
    def load_balancing_methods(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyPolicyConfigLoadBalancingMethodResult']]:
        return pulumi.get(self, "load_balancing_methods")

    @property
    @pulumi.getter(name="tlsProtocols")
    def tls_protocols(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tls_protocols")

    @property
    @pulumi.getter(name="websocketPathPrefixes")
    def websocket_path_prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "websocket_path_prefixes")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyPolicyConfigHealthCheckResult(dict):
    def __init__(__self__, *,
                 expected_response_code_groups: Optional[Sequence[str]] = None,
                 expected_response_text: Optional[str] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 healthy_threshold: Optional[int] = None,
                 interval_in_seconds: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 is_response_text_check_enabled: Optional[bool] = None,
                 method: Optional[str] = None,
                 path: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        if expected_response_code_groups is not None:
            pulumi.set(__self__, "expected_response_code_groups", expected_response_code_groups)
        if expected_response_text is not None:
            pulumi.set(__self__, "expected_response_text", expected_response_text)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_response_text_check_enabled is not None:
            pulumi.set(__self__, "is_response_text_check_enabled", is_response_text_check_enabled)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="expectedResponseCodeGroups")
    def expected_response_code_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expected_response_code_groups")

    @property
    @pulumi.getter(name="expectedResponseText")
    def expected_response_text(self) -> Optional[str]:
        return pulumi.get(self, "expected_response_text")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isResponseTextCheckEnabled")
    def is_response_text_check_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_text_check_enabled")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyPolicyConfigLoadBalancingMethodResult(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 expiration_time_in_seconds: Optional[int] = None,
                 method: Optional[str] = None,
                 name: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if expiration_time_in_seconds is not None:
            pulumi.set(__self__, "expiration_time_in_seconds", expiration_time_in_seconds)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="expirationTimeInSeconds")
    def expiration_time_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_time_in_seconds")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigResult(dict):
    def __init__(__self__, *,
                 access_rules: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAccessRuleResult']] = None,
                 address_rate_limitings: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAddressRateLimitingResult']] = None,
                 caching_rules: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCachingRuleResult']] = None,
                 captchas: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCaptchaResult']] = None,
                 custom_protection_rules: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleResult']] = None,
                 device_fingerprint_challenges: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeResult']] = None,
                 human_interaction_challenges: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeResult']] = None,
                 js_challenges: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeResult']] = None,
                 origin: Optional[str] = None,
                 origin_groups: Optional[Sequence[str]] = None,
                 protection_settings: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigProtectionSettingResult']] = None,
                 whitelists: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigWhitelistResult']] = None):
        if access_rules is not None:
            pulumi.set(__self__, "access_rules", access_rules)
        if address_rate_limitings is not None:
            pulumi.set(__self__, "address_rate_limitings", address_rate_limitings)
        if caching_rules is not None:
            pulumi.set(__self__, "caching_rules", caching_rules)
        if captchas is not None:
            pulumi.set(__self__, "captchas", captchas)
        if custom_protection_rules is not None:
            pulumi.set(__self__, "custom_protection_rules", custom_protection_rules)
        if device_fingerprint_challenges is not None:
            pulumi.set(__self__, "device_fingerprint_challenges", device_fingerprint_challenges)
        if human_interaction_challenges is not None:
            pulumi.set(__self__, "human_interaction_challenges", human_interaction_challenges)
        if js_challenges is not None:
            pulumi.set(__self__, "js_challenges", js_challenges)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)
        if protection_settings is not None:
            pulumi.set(__self__, "protection_settings", protection_settings)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAccessRuleResult']]:
        return pulumi.get(self, "access_rules")

    @property
    @pulumi.getter(name="addressRateLimitings")
    def address_rate_limitings(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAddressRateLimitingResult']]:
        return pulumi.get(self, "address_rate_limitings")

    @property
    @pulumi.getter(name="cachingRules")
    def caching_rules(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCachingRuleResult']]:
        return pulumi.get(self, "caching_rules")

    @property
    @pulumi.getter
    def captchas(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCaptchaResult']]:
        return pulumi.get(self, "captchas")

    @property
    @pulumi.getter(name="customProtectionRules")
    def custom_protection_rules(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleResult']]:
        return pulumi.get(self, "custom_protection_rules")

    @property
    @pulumi.getter(name="deviceFingerprintChallenges")
    def device_fingerprint_challenges(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeResult']]:
        return pulumi.get(self, "device_fingerprint_challenges")

    @property
    @pulumi.getter(name="humanInteractionChallenges")
    def human_interaction_challenges(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeResult']]:
        return pulumi.get(self, "human_interaction_challenges")

    @property
    @pulumi.getter(name="jsChallenges")
    def js_challenges(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeResult']]:
        return pulumi.get(self, "js_challenges")

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_groups")

    @property
    @pulumi.getter(name="protectionSettings")
    def protection_settings(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigProtectionSettingResult']]:
        return pulumi.get(self, "protection_settings")

    @property
    @pulumi.getter
    def whitelists(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigWhitelistResult']]:
        return pulumi.get(self, "whitelists")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigAccessRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 bypass_challenges: Optional[Sequence[str]] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None,
                 criterias: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAccessRuleCriteriaResult']] = None,
                 name: Optional[str] = None,
                 redirect_response_code: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 response_header_manipulations: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if bypass_challenges is not None:
            pulumi.set(__self__, "bypass_challenges", bypass_challenges)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)
        if criterias is not None:
            pulumi.set(__self__, "criterias", criterias)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_response_code is not None:
            pulumi.set(__self__, "redirect_response_code", redirect_response_code)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_header_manipulations is not None:
            pulumi.set(__self__, "response_header_manipulations", response_header_manipulations)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="bypassChallenges")
    def bypass_challenges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bypass_challenges")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")

    @property
    @pulumi.getter
    def criterias(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAccessRuleCriteriaResult']]:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[str]:
        return pulumi.get(self, "redirect_response_code")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="responseHeaderManipulations")
    def response_header_manipulations(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult']]:
        return pulumi.get(self, "response_header_manipulations")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigAccessRuleCriteriaResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 is_case_sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "is_case_sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 header: Optional[str] = None,
                 value: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigAddressRateLimitingResult(dict):
    def __init__(__self__, *,
                 allowed_rate_per_address: Optional[int] = None,
                 block_response_code: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 max_delayed_count_per_address: Optional[int] = None):
        if allowed_rate_per_address is not None:
            pulumi.set(__self__, "allowed_rate_per_address", allowed_rate_per_address)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if max_delayed_count_per_address is not None:
            pulumi.set(__self__, "max_delayed_count_per_address", max_delayed_count_per_address)

    @property
    @pulumi.getter(name="allowedRatePerAddress")
    def allowed_rate_per_address(self) -> Optional[int]:
        return pulumi.get(self, "allowed_rate_per_address")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="maxDelayedCountPerAddress")
    def max_delayed_count_per_address(self) -> Optional[int]:
        return pulumi.get(self, "max_delayed_count_per_address")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigCachingRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 caching_duration: Optional[str] = None,
                 client_caching_duration: Optional[str] = None,
                 criterias: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteriaResult']] = None,
                 is_client_caching_enabled: Optional[bool] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if caching_duration is not None:
            pulumi.set(__self__, "caching_duration", caching_duration)
        if client_caching_duration is not None:
            pulumi.set(__self__, "client_caching_duration", client_caching_duration)
        if criterias is not None:
            pulumi.set(__self__, "criterias", criterias)
        if is_client_caching_enabled is not None:
            pulumi.set(__self__, "is_client_caching_enabled", is_client_caching_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cachingDuration")
    def caching_duration(self) -> Optional[str]:
        return pulumi.get(self, "caching_duration")

    @property
    @pulumi.getter(name="clientCachingDuration")
    def client_caching_duration(self) -> Optional[str]:
        return pulumi.get(self, "client_caching_duration")

    @property
    @pulumi.getter
    def criterias(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteriaResult']]:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter(name="isClientCachingEnabled")
    def is_client_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_client_caching_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigCachingRuleCriteriaResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 value: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigCaptchaResult(dict):
    def __init__(__self__, *,
                 failure_message: Optional[str] = None,
                 footer_text: Optional[str] = None,
                 header_text: Optional[str] = None,
                 session_expiration_in_seconds: Optional[int] = None,
                 submit_label: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if footer_text is not None:
            pulumi.set(__self__, "footer_text", footer_text)
        if header_text is not None:
            pulumi.set(__self__, "header_text", header_text)
        if session_expiration_in_seconds is not None:
            pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        if submit_label is not None:
            pulumi.set(__self__, "submit_label", submit_label)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[str]:
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="footerText")
    def footer_text(self) -> Optional[str]:
        return pulumi.get(self, "footer_text")

    @property
    @pulumi.getter(name="headerText")
    def header_text(self) -> Optional[str]:
        return pulumi.get(self, "header_text")

    @property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "session_expiration_in_seconds")

    @property
    @pulumi.getter(name="submitLabel")
    def submit_label(self) -> Optional[str]:
        return pulumi.get(self, "submit_label")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exclusions: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleExclusionResult']] = None,
                 id: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleExclusionResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 challenge_settings: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingResult']] = None,
                 failure_threshold: Optional[int] = None,
                 failure_threshold_expiration_in_seconds: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 max_address_count: Optional[int] = None,
                 max_address_count_expiration_in_seconds: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if max_address_count is not None:
            pulumi.set(__self__, "max_address_count", max_address_count)
        if max_address_count_expiration_in_seconds is not None:
            pulumi.set(__self__, "max_address_count_expiration_in_seconds", max_address_count_expiration_in_seconds)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingResult']]:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="maxAddressCount")
    def max_address_count(self) -> Optional[int]:
        return pulumi.get(self, "max_address_count")

    @property
    @pulumi.getter(name="maxAddressCountExpirationInSeconds")
    def max_address_count_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_address_count_expiration_in_seconds")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingResult(dict):
    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 challenge_settings: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingResult']] = None,
                 failure_threshold: Optional[int] = None,
                 failure_threshold_expiration_in_seconds: Optional[int] = None,
                 interaction_threshold: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 is_nat_enabled: Optional[bool] = None,
                 recording_period_in_seconds: Optional[int] = None,
                 set_http_headers: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if interaction_threshold is not None:
            pulumi.set(__self__, "interaction_threshold", interaction_threshold)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if recording_period_in_seconds is not None:
            pulumi.set(__self__, "recording_period_in_seconds", recording_period_in_seconds)
        if set_http_headers is not None:
            pulumi.set(__self__, "set_http_headers", set_http_headers)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingResult']]:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @property
    @pulumi.getter(name="interactionThreshold")
    def interaction_threshold(self) -> Optional[int]:
        return pulumi.get(self, "interaction_threshold")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_enabled")

    @property
    @pulumi.getter(name="recordingPeriodInSeconds")
    def recording_period_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "recording_period_in_seconds")

    @property
    @pulumi.getter(name="setHttpHeaders")
    def set_http_headers(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult']]:
        return pulumi.get(self, "set_http_headers")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingResult(dict):
    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigJsChallengeResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 are_redirects_challenged: Optional[bool] = None,
                 challenge_settings: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeChallengeSettingResult']] = None,
                 criterias: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeCriteriaResult']] = None,
                 failure_threshold: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 is_nat_enabled: Optional[bool] = None,
                 set_http_headers: Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeSetHttpHeaderResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if are_redirects_challenged is not None:
            pulumi.set(__self__, "are_redirects_challenged", are_redirects_challenged)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if criterias is not None:
            pulumi.set(__self__, "criterias", criterias)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if set_http_headers is not None:
            pulumi.set(__self__, "set_http_headers", set_http_headers)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="areRedirectsChallenged")
    def are_redirects_challenged(self) -> Optional[bool]:
        return pulumi.get(self, "are_redirects_challenged")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeChallengeSettingResult']]:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter
    def criterias(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeCriteriaResult']]:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_enabled")

    @property
    @pulumi.getter(name="setHttpHeaders")
    def set_http_headers(self) -> Optional[Sequence['outputs.GetWaasPoliciesWaasPolicyWafConfigJsChallengeSetHttpHeaderResult']]:
        return pulumi.get(self, "set_http_headers")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigJsChallengeChallengeSettingResult(dict):
    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigJsChallengeCriteriaResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 is_case_sensitive: Optional[bool] = None,
                 value: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "is_case_sensitive")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigJsChallengeSetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigProtectionSettingResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 is_response_inspected: Optional[bool] = None,
                 max_argument_count: Optional[int] = None,
                 max_name_length_per_argument: Optional[int] = None,
                 max_response_size_in_ki_b: Optional[int] = None,
                 max_total_name_length_of_arguments: Optional[int] = None,
                 media_types: Optional[Sequence[str]] = None,
                 recommendations_period_in_days: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if is_response_inspected is not None:
            pulumi.set(__self__, "is_response_inspected", is_response_inspected)
        if max_argument_count is not None:
            pulumi.set(__self__, "max_argument_count", max_argument_count)
        if max_name_length_per_argument is not None:
            pulumi.set(__self__, "max_name_length_per_argument", max_name_length_per_argument)
        if max_response_size_in_ki_b is not None:
            pulumi.set(__self__, "max_response_size_in_ki_b", max_response_size_in_ki_b)
        if max_total_name_length_of_arguments is not None:
            pulumi.set(__self__, "max_total_name_length_of_arguments", max_total_name_length_of_arguments)
        if media_types is not None:
            pulumi.set(__self__, "media_types", media_types)
        if recommendations_period_in_days is not None:
            pulumi.set(__self__, "recommendations_period_in_days", recommendations_period_in_days)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="isResponseInspected")
    def is_response_inspected(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_inspected")

    @property
    @pulumi.getter(name="maxArgumentCount")
    def max_argument_count(self) -> Optional[int]:
        return pulumi.get(self, "max_argument_count")

    @property
    @pulumi.getter(name="maxNameLengthPerArgument")
    def max_name_length_per_argument(self) -> Optional[int]:
        return pulumi.get(self, "max_name_length_per_argument")

    @property
    @pulumi.getter(name="maxResponseSizeInKiB")
    def max_response_size_in_ki_b(self) -> Optional[int]:
        return pulumi.get(self, "max_response_size_in_ki_b")

    @property
    @pulumi.getter(name="maxTotalNameLengthOfArguments")
    def max_total_name_length_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_total_name_length_of_arguments")

    @property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "media_types")

    @property
    @pulumi.getter(name="recommendationsPeriodInDays")
    def recommendations_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "recommendations_period_in_days")


@pulumi.output_type
class GetWaasPoliciesWaasPolicyWafConfigWhitelistResult(dict):
    def __init__(__self__, *,
                 address_lists: Optional[Sequence[str]] = None,
                 addresses: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "address_lists")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWaasPolicyOriginResult(dict):
    def __init__(__self__, *,
                 label: str,
                 uri: str,
                 custom_headers: Optional[Sequence['outputs.GetWaasPolicyOriginCustomHeaderResult']] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "uri", uri)
        if custom_headers is not None:
            pulumi.set(__self__, "custom_headers", custom_headers)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[Sequence['outputs.GetWaasPolicyOriginCustomHeaderResult']]:
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")


@pulumi.output_type
class GetWaasPolicyOriginCustomHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPolicyOriginGroupResult(dict):
    def __init__(__self__, *,
                 label: Optional[str] = None,
                 origin_groups: Optional[Sequence['outputs.GetWaasPolicyOriginGroupOriginGroupResult']] = None):
        if label is not None:
            pulumi.set(__self__, "label", label)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[Sequence['outputs.GetWaasPolicyOriginGroupOriginGroupResult']]:
        return pulumi.get(self, "origin_groups")


@pulumi.output_type
class GetWaasPolicyOriginGroupOriginGroupResult(dict):
    def __init__(__self__, *,
                 origin: Optional[str] = None,
                 weight: Optional[int] = None):
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetWaasPolicyPolicyConfigResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 cipher_group: Optional[str] = None,
                 client_address_header: Optional[str] = None,
                 health_checks: Optional['outputs.GetWaasPolicyPolicyConfigHealthChecksResult'] = None,
                 is_behind_cdn: Optional[bool] = None,
                 is_cache_control_respected: Optional[bool] = None,
                 is_https_enabled: Optional[bool] = None,
                 is_https_forced: Optional[bool] = None,
                 is_origin_compression_enabled: Optional[bool] = None,
                 is_response_buffering_enabled: Optional[bool] = None,
                 is_sni_enabled: Optional[bool] = None,
                 load_balancing_method: Optional['outputs.GetWaasPolicyPolicyConfigLoadBalancingMethodResult'] = None,
                 tls_protocols: Optional[Sequence[str]] = None,
                 websocket_path_prefixes: Optional[Sequence[str]] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cipher_group is not None:
            pulumi.set(__self__, "cipher_group", cipher_group)
        if client_address_header is not None:
            pulumi.set(__self__, "client_address_header", client_address_header)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if is_behind_cdn is not None:
            pulumi.set(__self__, "is_behind_cdn", is_behind_cdn)
        if is_cache_control_respected is not None:
            pulumi.set(__self__, "is_cache_control_respected", is_cache_control_respected)
        if is_https_enabled is not None:
            pulumi.set(__self__, "is_https_enabled", is_https_enabled)
        if is_https_forced is not None:
            pulumi.set(__self__, "is_https_forced", is_https_forced)
        if is_origin_compression_enabled is not None:
            pulumi.set(__self__, "is_origin_compression_enabled", is_origin_compression_enabled)
        if is_response_buffering_enabled is not None:
            pulumi.set(__self__, "is_response_buffering_enabled", is_response_buffering_enabled)
        if is_sni_enabled is not None:
            pulumi.set(__self__, "is_sni_enabled", is_sni_enabled)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if tls_protocols is not None:
            pulumi.set(__self__, "tls_protocols", tls_protocols)
        if websocket_path_prefixes is not None:
            pulumi.set(__self__, "websocket_path_prefixes", websocket_path_prefixes)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="cipherGroup")
    def cipher_group(self) -> Optional[str]:
        return pulumi.get(self, "cipher_group")

    @property
    @pulumi.getter(name="clientAddressHeader")
    def client_address_header(self) -> Optional[str]:
        return pulumi.get(self, "client_address_header")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional['outputs.GetWaasPolicyPolicyConfigHealthChecksResult']:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="isBehindCdn")
    def is_behind_cdn(self) -> Optional[bool]:
        return pulumi.get(self, "is_behind_cdn")

    @property
    @pulumi.getter(name="isCacheControlRespected")
    def is_cache_control_respected(self) -> Optional[bool]:
        return pulumi.get(self, "is_cache_control_respected")

    @property
    @pulumi.getter(name="isHttpsEnabled")
    def is_https_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_https_enabled")

    @property
    @pulumi.getter(name="isHttpsForced")
    def is_https_forced(self) -> Optional[bool]:
        return pulumi.get(self, "is_https_forced")

    @property
    @pulumi.getter(name="isOriginCompressionEnabled")
    def is_origin_compression_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_origin_compression_enabled")

    @property
    @pulumi.getter(name="isResponseBufferingEnabled")
    def is_response_buffering_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_buffering_enabled")

    @property
    @pulumi.getter(name="isSniEnabled")
    def is_sni_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_sni_enabled")

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional['outputs.GetWaasPolicyPolicyConfigLoadBalancingMethodResult']:
        return pulumi.get(self, "load_balancing_method")

    @property
    @pulumi.getter(name="tlsProtocols")
    def tls_protocols(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tls_protocols")

    @property
    @pulumi.getter(name="websocketPathPrefixes")
    def websocket_path_prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "websocket_path_prefixes")


@pulumi.output_type
class GetWaasPolicyPolicyConfigHealthChecksResult(dict):
    def __init__(__self__, *,
                 expected_response_code_groups: Optional[Sequence[str]] = None,
                 expected_response_text: Optional[str] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 healthy_threshold: Optional[int] = None,
                 interval_in_seconds: Optional[int] = None,
                 is_enabled: Optional[bool] = None,
                 is_response_text_check_enabled: Optional[bool] = None,
                 method: Optional[str] = None,
                 path: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        if expected_response_code_groups is not None:
            pulumi.set(__self__, "expected_response_code_groups", expected_response_code_groups)
        if expected_response_text is not None:
            pulumi.set(__self__, "expected_response_text", expected_response_text)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_response_text_check_enabled is not None:
            pulumi.set(__self__, "is_response_text_check_enabled", is_response_text_check_enabled)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="expectedResponseCodeGroups")
    def expected_response_code_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expected_response_code_groups")

    @property
    @pulumi.getter(name="expectedResponseText")
    def expected_response_text(self) -> Optional[str]:
        return pulumi.get(self, "expected_response_text")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isResponseTextCheckEnabled")
    def is_response_text_check_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_text_check_enabled")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetWaasPolicyPolicyConfigLoadBalancingMethodResult(dict):
    def __init__(__self__, *,
                 method: str,
                 domain: Optional[str] = None,
                 expiration_time_in_seconds: Optional[int] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if expiration_time_in_seconds is not None:
            pulumi.set(__self__, "expiration_time_in_seconds", expiration_time_in_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="expirationTimeInSeconds")
    def expiration_time_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "expiration_time_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWaasPolicyWafConfigResult(dict):
    def __init__(__self__, *,
                 access_rules: Optional[Sequence['outputs.GetWaasPolicyWafConfigAccessRuleResult']] = None,
                 address_rate_limiting: Optional['outputs.GetWaasPolicyWafConfigAddressRateLimitingResult'] = None,
                 caching_rules: Optional[Sequence['outputs.GetWaasPolicyWafConfigCachingRuleResult']] = None,
                 captchas: Optional[Sequence['outputs.GetWaasPolicyWafConfigCaptchaResult']] = None,
                 custom_protection_rules: Optional[Sequence['outputs.GetWaasPolicyWafConfigCustomProtectionRuleResult']] = None,
                 device_fingerprint_challenge: Optional['outputs.GetWaasPolicyWafConfigDeviceFingerprintChallengeResult'] = None,
                 human_interaction_challenge: Optional['outputs.GetWaasPolicyWafConfigHumanInteractionChallengeResult'] = None,
                 js_challenge: Optional['outputs.GetWaasPolicyWafConfigJsChallengeResult'] = None,
                 origin: Optional[str] = None,
                 origin_groups: Optional[Sequence[str]] = None,
                 protection_settings: Optional['outputs.GetWaasPolicyWafConfigProtectionSettingsResult'] = None,
                 whitelists: Optional[Sequence['outputs.GetWaasPolicyWafConfigWhitelistResult']] = None):
        if access_rules is not None:
            pulumi.set(__self__, "access_rules", access_rules)
        if address_rate_limiting is not None:
            pulumi.set(__self__, "address_rate_limiting", address_rate_limiting)
        if caching_rules is not None:
            pulumi.set(__self__, "caching_rules", caching_rules)
        if captchas is not None:
            pulumi.set(__self__, "captchas", captchas)
        if custom_protection_rules is not None:
            pulumi.set(__self__, "custom_protection_rules", custom_protection_rules)
        if device_fingerprint_challenge is not None:
            pulumi.set(__self__, "device_fingerprint_challenge", device_fingerprint_challenge)
        if human_interaction_challenge is not None:
            pulumi.set(__self__, "human_interaction_challenge", human_interaction_challenge)
        if js_challenge is not None:
            pulumi.set(__self__, "js_challenge", js_challenge)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_groups is not None:
            pulumi.set(__self__, "origin_groups", origin_groups)
        if protection_settings is not None:
            pulumi.set(__self__, "protection_settings", protection_settings)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigAccessRuleResult']]:
        return pulumi.get(self, "access_rules")

    @property
    @pulumi.getter(name="addressRateLimiting")
    def address_rate_limiting(self) -> Optional['outputs.GetWaasPolicyWafConfigAddressRateLimitingResult']:
        return pulumi.get(self, "address_rate_limiting")

    @property
    @pulumi.getter(name="cachingRules")
    def caching_rules(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigCachingRuleResult']]:
        return pulumi.get(self, "caching_rules")

    @property
    @pulumi.getter
    def captchas(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigCaptchaResult']]:
        return pulumi.get(self, "captchas")

    @property
    @pulumi.getter(name="customProtectionRules")
    def custom_protection_rules(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigCustomProtectionRuleResult']]:
        return pulumi.get(self, "custom_protection_rules")

    @property
    @pulumi.getter(name="deviceFingerprintChallenge")
    def device_fingerprint_challenge(self) -> Optional['outputs.GetWaasPolicyWafConfigDeviceFingerprintChallengeResult']:
        return pulumi.get(self, "device_fingerprint_challenge")

    @property
    @pulumi.getter(name="humanInteractionChallenge")
    def human_interaction_challenge(self) -> Optional['outputs.GetWaasPolicyWafConfigHumanInteractionChallengeResult']:
        return pulumi.get(self, "human_interaction_challenge")

    @property
    @pulumi.getter(name="jsChallenge")
    def js_challenge(self) -> Optional['outputs.GetWaasPolicyWafConfigJsChallengeResult']:
        return pulumi.get(self, "js_challenge")

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originGroups")
    def origin_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_groups")

    @property
    @pulumi.getter(name="protectionSettings")
    def protection_settings(self) -> Optional['outputs.GetWaasPolicyWafConfigProtectionSettingsResult']:
        return pulumi.get(self, "protection_settings")

    @property
    @pulumi.getter
    def whitelists(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigWhitelistResult']]:
        return pulumi.get(self, "whitelists")


@pulumi.output_type
class GetWaasPolicyWafConfigAccessRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 criterias: Sequence['outputs.GetWaasPolicyWafConfigAccessRuleCriteriaResult'],
                 name: str,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 bypass_challenges: Optional[Sequence[str]] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None,
                 redirect_response_code: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 response_header_manipulations: Optional[Sequence['outputs.GetWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult']] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "criterias", criterias)
        pulumi.set(__self__, "name", name)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if bypass_challenges is not None:
            pulumi.set(__self__, "bypass_challenges", bypass_challenges)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)
        if redirect_response_code is not None:
            pulumi.set(__self__, "redirect_response_code", redirect_response_code)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_header_manipulations is not None:
            pulumi.set(__self__, "response_header_manipulations", response_header_manipulations)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def criterias(self) -> Sequence['outputs.GetWaasPolicyWafConfigAccessRuleCriteriaResult']:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="bypassChallenges")
    def bypass_challenges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bypass_challenges")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")

    @property
    @pulumi.getter(name="redirectResponseCode")
    def redirect_response_code(self) -> Optional[str]:
        return pulumi.get(self, "redirect_response_code")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="responseHeaderManipulations")
    def response_header_manipulations(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult']]:
        return pulumi.get(self, "response_header_manipulations")


@pulumi.output_type
class GetWaasPolicyWafConfigAccessRuleCriteriaResult(dict):
    def __init__(__self__, *,
                 condition: str,
                 value: str,
                 is_case_sensitive: Optional[bool] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "is_case_sensitive")


@pulumi.output_type
class GetWaasPolicyWafConfigAccessRuleResponseHeaderManipulationResult(dict):
    def __init__(__self__, *,
                 action: str,
                 header: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def header(self) -> str:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPolicyWafConfigAddressRateLimitingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 allowed_rate_per_address: Optional[int] = None,
                 block_response_code: Optional[int] = None,
                 max_delayed_count_per_address: Optional[int] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if allowed_rate_per_address is not None:
            pulumi.set(__self__, "allowed_rate_per_address", allowed_rate_per_address)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if max_delayed_count_per_address is not None:
            pulumi.set(__self__, "max_delayed_count_per_address", max_delayed_count_per_address)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="allowedRatePerAddress")
    def allowed_rate_per_address(self) -> Optional[int]:
        return pulumi.get(self, "allowed_rate_per_address")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="maxDelayedCountPerAddress")
    def max_delayed_count_per_address(self) -> Optional[int]:
        return pulumi.get(self, "max_delayed_count_per_address")


@pulumi.output_type
class GetWaasPolicyWafConfigCachingRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 criterias: Sequence['outputs.GetWaasPolicyWafConfigCachingRuleCriteriaResult'],
                 name: str,
                 caching_duration: Optional[str] = None,
                 client_caching_duration: Optional[str] = None,
                 is_client_caching_enabled: Optional[bool] = None,
                 key: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "criterias", criterias)
        pulumi.set(__self__, "name", name)
        if caching_duration is not None:
            pulumi.set(__self__, "caching_duration", caching_duration)
        if client_caching_duration is not None:
            pulumi.set(__self__, "client_caching_duration", client_caching_duration)
        if is_client_caching_enabled is not None:
            pulumi.set(__self__, "is_client_caching_enabled", is_client_caching_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def criterias(self) -> Sequence['outputs.GetWaasPolicyWafConfigCachingRuleCriteriaResult']:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cachingDuration")
    def caching_duration(self) -> Optional[str]:
        return pulumi.get(self, "caching_duration")

    @property
    @pulumi.getter(name="clientCachingDuration")
    def client_caching_duration(self) -> Optional[str]:
        return pulumi.get(self, "client_caching_duration")

    @property
    @pulumi.getter(name="isClientCachingEnabled")
    def is_client_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_client_caching_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetWaasPolicyWafConfigCachingRuleCriteriaResult(dict):
    def __init__(__self__, *,
                 condition: str,
                 value: str):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPolicyWafConfigCaptchaResult(dict):
    def __init__(__self__, *,
                 failure_message: str,
                 session_expiration_in_seconds: int,
                 submit_label: str,
                 title: str,
                 url: str,
                 footer_text: Optional[str] = None,
                 header_text: Optional[str] = None):
        pulumi.set(__self__, "failure_message", failure_message)
        pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        pulumi.set(__self__, "submit_label", submit_label)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "url", url)
        if footer_text is not None:
            pulumi.set(__self__, "footer_text", footer_text)
        if header_text is not None:
            pulumi.set(__self__, "header_text", header_text)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> str:
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> int:
        return pulumi.get(self, "session_expiration_in_seconds")

    @property
    @pulumi.getter(name="submitLabel")
    def submit_label(self) -> str:
        return pulumi.get(self, "submit_label")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="footerText")
    def footer_text(self) -> Optional[str]:
        return pulumi.get(self, "footer_text")

    @property
    @pulumi.getter(name="headerText")
    def header_text(self) -> Optional[str]:
        return pulumi.get(self, "header_text")


@pulumi.output_type
class GetWaasPolicyWafConfigCustomProtectionRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exclusions: Optional[Sequence['outputs.GetWaasPolicyWafConfigCustomProtectionRuleExclusionResult']] = None,
                 id: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigCustomProtectionRuleExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWaasPolicyWafConfigCustomProtectionRuleExclusionResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 target: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetWaasPolicyWafConfigDeviceFingerprintChallengeResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 challenge_settings: Optional['outputs.GetWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingsResult'] = None,
                 failure_threshold: Optional[int] = None,
                 failure_threshold_expiration_in_seconds: Optional[int] = None,
                 max_address_count: Optional[int] = None,
                 max_address_count_expiration_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if max_address_count is not None:
            pulumi.set(__self__, "max_address_count", max_address_count)
        if max_address_count_expiration_in_seconds is not None:
            pulumi.set(__self__, "max_address_count_expiration_in_seconds", max_address_count_expiration_in_seconds)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional['outputs.GetWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingsResult']:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @property
    @pulumi.getter(name="maxAddressCount")
    def max_address_count(self) -> Optional[int]:
        return pulumi.get(self, "max_address_count")

    @property
    @pulumi.getter(name="maxAddressCountExpirationInSeconds")
    def max_address_count_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_address_count_expiration_in_seconds")


@pulumi.output_type
class GetWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettingsResult(dict):
    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class GetWaasPolicyWafConfigHumanInteractionChallengeResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 challenge_settings: Optional['outputs.GetWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingsResult'] = None,
                 failure_threshold: Optional[int] = None,
                 failure_threshold_expiration_in_seconds: Optional[int] = None,
                 interaction_threshold: Optional[int] = None,
                 is_nat_enabled: Optional[bool] = None,
                 recording_period_in_seconds: Optional[int] = None,
                 set_http_header: Optional['outputs.GetWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult'] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if failure_threshold_expiration_in_seconds is not None:
            pulumi.set(__self__, "failure_threshold_expiration_in_seconds", failure_threshold_expiration_in_seconds)
        if interaction_threshold is not None:
            pulumi.set(__self__, "interaction_threshold", interaction_threshold)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if recording_period_in_seconds is not None:
            pulumi.set(__self__, "recording_period_in_seconds", recording_period_in_seconds)
        if set_http_header is not None:
            pulumi.set(__self__, "set_http_header", set_http_header)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional['outputs.GetWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingsResult']:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="failureThresholdExpirationInSeconds")
    def failure_threshold_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold_expiration_in_seconds")

    @property
    @pulumi.getter(name="interactionThreshold")
    def interaction_threshold(self) -> Optional[int]:
        return pulumi.get(self, "interaction_threshold")

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_enabled")

    @property
    @pulumi.getter(name="recordingPeriodInSeconds")
    def recording_period_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "recording_period_in_seconds")

    @property
    @pulumi.getter(name="setHttpHeader")
    def set_http_header(self) -> Optional['outputs.GetWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult']:
        return pulumi.get(self, "set_http_header")


@pulumi.output_type
class GetWaasPolicyWafConfigHumanInteractionChallengeChallengeSettingsResult(dict):
    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class GetWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPolicyWafConfigJsChallengeResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 action: Optional[str] = None,
                 action_expiration_in_seconds: Optional[int] = None,
                 are_redirects_challenged: Optional[bool] = None,
                 challenge_settings: Optional['outputs.GetWaasPolicyWafConfigJsChallengeChallengeSettingsResult'] = None,
                 criterias: Optional[Sequence['outputs.GetWaasPolicyWafConfigJsChallengeCriteriaResult']] = None,
                 failure_threshold: Optional[int] = None,
                 is_nat_enabled: Optional[bool] = None,
                 set_http_header: Optional['outputs.GetWaasPolicyWafConfigJsChallengeSetHttpHeaderResult'] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_expiration_in_seconds is not None:
            pulumi.set(__self__, "action_expiration_in_seconds", action_expiration_in_seconds)
        if are_redirects_challenged is not None:
            pulumi.set(__self__, "are_redirects_challenged", are_redirects_challenged)
        if challenge_settings is not None:
            pulumi.set(__self__, "challenge_settings", challenge_settings)
        if criterias is not None:
            pulumi.set(__self__, "criterias", criterias)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if is_nat_enabled is not None:
            pulumi.set(__self__, "is_nat_enabled", is_nat_enabled)
        if set_http_header is not None:
            pulumi.set(__self__, "set_http_header", set_http_header)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionExpirationInSeconds")
    def action_expiration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_expiration_in_seconds")

    @property
    @pulumi.getter(name="areRedirectsChallenged")
    def are_redirects_challenged(self) -> Optional[bool]:
        return pulumi.get(self, "are_redirects_challenged")

    @property
    @pulumi.getter(name="challengeSettings")
    def challenge_settings(self) -> Optional['outputs.GetWaasPolicyWafConfigJsChallengeChallengeSettingsResult']:
        return pulumi.get(self, "challenge_settings")

    @property
    @pulumi.getter
    def criterias(self) -> Optional[Sequence['outputs.GetWaasPolicyWafConfigJsChallengeCriteriaResult']]:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="isNatEnabled")
    def is_nat_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_enabled")

    @property
    @pulumi.getter(name="setHttpHeader")
    def set_http_header(self) -> Optional['outputs.GetWaasPolicyWafConfigJsChallengeSetHttpHeaderResult']:
        return pulumi.get(self, "set_http_header")


@pulumi.output_type
class GetWaasPolicyWafConfigJsChallengeChallengeSettingsResult(dict):
    def __init__(__self__, *,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 captcha_footer: Optional[str] = None,
                 captcha_header: Optional[str] = None,
                 captcha_submit_label: Optional[str] = None,
                 captcha_title: Optional[str] = None):
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if captcha_footer is not None:
            pulumi.set(__self__, "captcha_footer", captcha_footer)
        if captcha_header is not None:
            pulumi.set(__self__, "captcha_header", captcha_header)
        if captcha_submit_label is not None:
            pulumi.set(__self__, "captcha_submit_label", captcha_submit_label)
        if captcha_title is not None:
            pulumi.set(__self__, "captcha_title", captcha_title)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="captchaFooter")
    def captcha_footer(self) -> Optional[str]:
        return pulumi.get(self, "captcha_footer")

    @property
    @pulumi.getter(name="captchaHeader")
    def captcha_header(self) -> Optional[str]:
        return pulumi.get(self, "captcha_header")

    @property
    @pulumi.getter(name="captchaSubmitLabel")
    def captcha_submit_label(self) -> Optional[str]:
        return pulumi.get(self, "captcha_submit_label")

    @property
    @pulumi.getter(name="captchaTitle")
    def captcha_title(self) -> Optional[str]:
        return pulumi.get(self, "captcha_title")


@pulumi.output_type
class GetWaasPolicyWafConfigJsChallengeCriteriaResult(dict):
    def __init__(__self__, *,
                 condition: str,
                 value: str,
                 is_case_sensitive: Optional[bool] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "value", value)
        if is_case_sensitive is not None:
            pulumi.set(__self__, "is_case_sensitive", is_case_sensitive)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="isCaseSensitive")
    def is_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "is_case_sensitive")


@pulumi.output_type
class GetWaasPolicyWafConfigJsChallengeSetHttpHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWaasPolicyWafConfigProtectionSettingsResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 block_action: Optional[str] = None,
                 block_error_page_code: Optional[str] = None,
                 block_error_page_description: Optional[str] = None,
                 block_error_page_message: Optional[str] = None,
                 block_response_code: Optional[int] = None,
                 is_response_inspected: Optional[bool] = None,
                 max_argument_count: Optional[int] = None,
                 max_name_length_per_argument: Optional[int] = None,
                 max_response_size_in_ki_b: Optional[int] = None,
                 max_total_name_length_of_arguments: Optional[int] = None,
                 media_types: Optional[Sequence[str]] = None,
                 recommendations_period_in_days: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_error_page_code is not None:
            pulumi.set(__self__, "block_error_page_code", block_error_page_code)
        if block_error_page_description is not None:
            pulumi.set(__self__, "block_error_page_description", block_error_page_description)
        if block_error_page_message is not None:
            pulumi.set(__self__, "block_error_page_message", block_error_page_message)
        if block_response_code is not None:
            pulumi.set(__self__, "block_response_code", block_response_code)
        if is_response_inspected is not None:
            pulumi.set(__self__, "is_response_inspected", is_response_inspected)
        if max_argument_count is not None:
            pulumi.set(__self__, "max_argument_count", max_argument_count)
        if max_name_length_per_argument is not None:
            pulumi.set(__self__, "max_name_length_per_argument", max_name_length_per_argument)
        if max_response_size_in_ki_b is not None:
            pulumi.set(__self__, "max_response_size_in_ki_b", max_response_size_in_ki_b)
        if max_total_name_length_of_arguments is not None:
            pulumi.set(__self__, "max_total_name_length_of_arguments", max_total_name_length_of_arguments)
        if media_types is not None:
            pulumi.set(__self__, "media_types", media_types)
        if recommendations_period_in_days is not None:
            pulumi.set(__self__, "recommendations_period_in_days", recommendations_period_in_days)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockErrorPageCode")
    def block_error_page_code(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_code")

    @property
    @pulumi.getter(name="blockErrorPageDescription")
    def block_error_page_description(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_description")

    @property
    @pulumi.getter(name="blockErrorPageMessage")
    def block_error_page_message(self) -> Optional[str]:
        return pulumi.get(self, "block_error_page_message")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> Optional[int]:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="isResponseInspected")
    def is_response_inspected(self) -> Optional[bool]:
        return pulumi.get(self, "is_response_inspected")

    @property
    @pulumi.getter(name="maxArgumentCount")
    def max_argument_count(self) -> Optional[int]:
        return pulumi.get(self, "max_argument_count")

    @property
    @pulumi.getter(name="maxNameLengthPerArgument")
    def max_name_length_per_argument(self) -> Optional[int]:
        return pulumi.get(self, "max_name_length_per_argument")

    @property
    @pulumi.getter(name="maxResponseSizeInKiB")
    def max_response_size_in_ki_b(self) -> Optional[int]:
        return pulumi.get(self, "max_response_size_in_ki_b")

    @property
    @pulumi.getter(name="maxTotalNameLengthOfArguments")
    def max_total_name_length_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_total_name_length_of_arguments")

    @property
    @pulumi.getter(name="mediaTypes")
    def media_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "media_types")

    @property
    @pulumi.getter(name="recommendationsPeriodInDays")
    def recommendations_period_in_days(self) -> Optional[int]:
        return pulumi.get(self, "recommendations_period_in_days")


@pulumi.output_type
class GetWaasPolicyWafConfigWhitelistResult(dict):
    def __init__(__self__, *,
                 name: str,
                 address_lists: Optional[Sequence[str]] = None,
                 addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "address_lists")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")


