# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppFirewallPolicyArgs', 'AppFirewallPolicy']

@pulumi.input_type
class AppFirewallPolicyArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AppFirewallPolicyActionArgs']]]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_access_control: Optional[pulumi.Input['AppFirewallPolicyRequestAccessControlArgs']] = None,
                 request_protection: Optional[pulumi.Input['AppFirewallPolicyRequestProtectionArgs']] = None,
                 request_rate_limiting: Optional[pulumi.Input['AppFirewallPolicyRequestRateLimitingArgs']] = None,
                 response_access_control: Optional[pulumi.Input['AppFirewallPolicyResponseAccessControlArgs']] = None,
                 response_protection: Optional[pulumi.Input['AppFirewallPolicyResponseProtectionArgs']] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a AppFirewallPolicy resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if request_access_control is not None:
            pulumi.set(__self__, "request_access_control", request_access_control)
        if request_protection is not None:
            pulumi.set(__self__, "request_protection", request_protection)
        if request_rate_limiting is not None:
            pulumi.set(__self__, "request_rate_limiting", request_rate_limiting)
        if response_access_control is not None:
            pulumi.set(__self__, "response_access_control", response_access_control)
        if response_protection is not None:
            pulumi.set(__self__, "response_protection", response_protection)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppFirewallPolicyActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppFirewallPolicyActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="requestAccessControl")
    def request_access_control(self) -> Optional[pulumi.Input['AppFirewallPolicyRequestAccessControlArgs']]:
        return pulumi.get(self, "request_access_control")

    @request_access_control.setter
    def request_access_control(self, value: Optional[pulumi.Input['AppFirewallPolicyRequestAccessControlArgs']]):
        pulumi.set(self, "request_access_control", value)

    @property
    @pulumi.getter(name="requestProtection")
    def request_protection(self) -> Optional[pulumi.Input['AppFirewallPolicyRequestProtectionArgs']]:
        return pulumi.get(self, "request_protection")

    @request_protection.setter
    def request_protection(self, value: Optional[pulumi.Input['AppFirewallPolicyRequestProtectionArgs']]):
        pulumi.set(self, "request_protection", value)

    @property
    @pulumi.getter(name="requestRateLimiting")
    def request_rate_limiting(self) -> Optional[pulumi.Input['AppFirewallPolicyRequestRateLimitingArgs']]:
        return pulumi.get(self, "request_rate_limiting")

    @request_rate_limiting.setter
    def request_rate_limiting(self, value: Optional[pulumi.Input['AppFirewallPolicyRequestRateLimitingArgs']]):
        pulumi.set(self, "request_rate_limiting", value)

    @property
    @pulumi.getter(name="responseAccessControl")
    def response_access_control(self) -> Optional[pulumi.Input['AppFirewallPolicyResponseAccessControlArgs']]:
        return pulumi.get(self, "response_access_control")

    @response_access_control.setter
    def response_access_control(self, value: Optional[pulumi.Input['AppFirewallPolicyResponseAccessControlArgs']]):
        pulumi.set(self, "response_access_control", value)

    @property
    @pulumi.getter(name="responseProtection")
    def response_protection(self) -> Optional[pulumi.Input['AppFirewallPolicyResponseProtectionArgs']]:
        return pulumi.get(self, "response_protection")

    @response_protection.setter
    def response_protection(self, value: Optional[pulumi.Input['AppFirewallPolicyResponseProtectionArgs']]):
        pulumi.set(self, "response_protection", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)


@pulumi.input_type
class _AppFirewallPolicyState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AppFirewallPolicyActionArgs']]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 request_access_control: Optional[pulumi.Input['AppFirewallPolicyRequestAccessControlArgs']] = None,
                 request_protection: Optional[pulumi.Input['AppFirewallPolicyRequestProtectionArgs']] = None,
                 request_rate_limiting: Optional[pulumi.Input['AppFirewallPolicyRequestRateLimitingArgs']] = None,
                 response_access_control: Optional[pulumi.Input['AppFirewallPolicyResponseAccessControlArgs']] = None,
                 response_protection: Optional[pulumi.Input['AppFirewallPolicyResponseProtectionArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppFirewallPolicy resources.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if request_access_control is not None:
            pulumi.set(__self__, "request_access_control", request_access_control)
        if request_protection is not None:
            pulumi.set(__self__, "request_protection", request_protection)
        if request_rate_limiting is not None:
            pulumi.set(__self__, "request_rate_limiting", request_rate_limiting)
        if response_access_control is not None:
            pulumi.set(__self__, "response_access_control", response_access_control)
        if response_protection is not None:
            pulumi.set(__self__, "response_protection", response_protection)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppFirewallPolicyActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppFirewallPolicyActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="requestAccessControl")
    def request_access_control(self) -> Optional[pulumi.Input['AppFirewallPolicyRequestAccessControlArgs']]:
        return pulumi.get(self, "request_access_control")

    @request_access_control.setter
    def request_access_control(self, value: Optional[pulumi.Input['AppFirewallPolicyRequestAccessControlArgs']]):
        pulumi.set(self, "request_access_control", value)

    @property
    @pulumi.getter(name="requestProtection")
    def request_protection(self) -> Optional[pulumi.Input['AppFirewallPolicyRequestProtectionArgs']]:
        return pulumi.get(self, "request_protection")

    @request_protection.setter
    def request_protection(self, value: Optional[pulumi.Input['AppFirewallPolicyRequestProtectionArgs']]):
        pulumi.set(self, "request_protection", value)

    @property
    @pulumi.getter(name="requestRateLimiting")
    def request_rate_limiting(self) -> Optional[pulumi.Input['AppFirewallPolicyRequestRateLimitingArgs']]:
        return pulumi.get(self, "request_rate_limiting")

    @request_rate_limiting.setter
    def request_rate_limiting(self, value: Optional[pulumi.Input['AppFirewallPolicyRequestRateLimitingArgs']]):
        pulumi.set(self, "request_rate_limiting", value)

    @property
    @pulumi.getter(name="responseAccessControl")
    def response_access_control(self) -> Optional[pulumi.Input['AppFirewallPolicyResponseAccessControlArgs']]:
        return pulumi.get(self, "response_access_control")

    @response_access_control.setter
    def response_access_control(self, value: Optional[pulumi.Input['AppFirewallPolicyResponseAccessControlArgs']]):
        pulumi.set(self, "response_access_control", value)

    @property
    @pulumi.getter(name="responseProtection")
    def response_protection(self) -> Optional[pulumi.Input['AppFirewallPolicyResponseProtectionArgs']]:
        return pulumi.get(self, "response_protection")

    @response_protection.setter
    def response_protection(self, value: Optional[pulumi.Input['AppFirewallPolicyResponseProtectionArgs']]):
        pulumi.set(self, "response_protection", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class AppFirewallPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppFirewallPolicyActionArgs']]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_access_control: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestAccessControlArgs']]] = None,
                 request_protection: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestProtectionArgs']]] = None,
                 request_rate_limiting: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestRateLimitingArgs']]] = None,
                 response_access_control: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyResponseAccessControlArgs']]] = None,
                 response_protection: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyResponseProtectionArgs']]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Create a AppFirewallPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppFirewallPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppFirewallPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppFirewallPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppFirewallPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppFirewallPolicyActionArgs']]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_access_control: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestAccessControlArgs']]] = None,
                 request_protection: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestProtectionArgs']]] = None,
                 request_rate_limiting: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestRateLimitingArgs']]] = None,
                 response_access_control: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyResponseAccessControlArgs']]] = None,
                 response_protection: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyResponseProtectionArgs']]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppFirewallPolicyArgs.__new__(AppFirewallPolicyArgs)

            __props__.__dict__["actions"] = actions
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["request_access_control"] = request_access_control
            __props__.__dict__["request_protection"] = request_protection
            __props__.__dict__["request_rate_limiting"] = request_rate_limiting
            __props__.__dict__["response_access_control"] = response_access_control
            __props__.__dict__["response_protection"] = response_protection
            __props__.__dict__["system_tags"] = system_tags
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(AppFirewallPolicy, __self__).__init__(
            'oci:Waf/appFirewallPolicy:AppFirewallPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppFirewallPolicyActionArgs']]]]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            request_access_control: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestAccessControlArgs']]] = None,
            request_protection: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestProtectionArgs']]] = None,
            request_rate_limiting: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyRequestRateLimitingArgs']]] = None,
            response_access_control: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyResponseAccessControlArgs']]] = None,
            response_protection: Optional[pulumi.Input[pulumi.InputType['AppFirewallPolicyResponseProtectionArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'AppFirewallPolicy':
        """
        Get an existing AppFirewallPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppFirewallPolicyState.__new__(_AppFirewallPolicyState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["request_access_control"] = request_access_control
        __props__.__dict__["request_protection"] = request_protection
        __props__.__dict__["request_rate_limiting"] = request_rate_limiting
        __props__.__dict__["response_access_control"] = response_access_control
        __props__.__dict__["response_protection"] = response_protection
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return AppFirewallPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Optional[Sequence['outputs.AppFirewallPolicyAction']]]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="requestAccessControl")
    def request_access_control(self) -> pulumi.Output[Optional['outputs.AppFirewallPolicyRequestAccessControl']]:
        return pulumi.get(self, "request_access_control")

    @property
    @pulumi.getter(name="requestProtection")
    def request_protection(self) -> pulumi.Output[Optional['outputs.AppFirewallPolicyRequestProtection']]:
        return pulumi.get(self, "request_protection")

    @property
    @pulumi.getter(name="requestRateLimiting")
    def request_rate_limiting(self) -> pulumi.Output[Optional['outputs.AppFirewallPolicyRequestRateLimiting']]:
        return pulumi.get(self, "request_rate_limiting")

    @property
    @pulumi.getter(name="responseAccessControl")
    def response_access_control(self) -> pulumi.Output[Optional['outputs.AppFirewallPolicyResponseAccessControl']]:
        return pulumi.get(self, "response_access_control")

    @property
    @pulumi.getter(name="responseProtection")
    def response_protection(self) -> pulumi.Output[Optional['outputs.AppFirewallPolicyResponseProtection']]:
        return pulumi.get(self, "response_protection")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

