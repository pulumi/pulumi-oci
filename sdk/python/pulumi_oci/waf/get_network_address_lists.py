# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkAddressListsResult',
    'AwaitableGetNetworkAddressListsResult',
    'get_network_address_lists',
    'get_network_address_lists_output',
]

@pulumi.output_type
class GetNetworkAddressListsResult:
    """
    A collection of values returned by getNetworkAddressLists.
    """
    def __init__(__self__, compartment_id=None, display_name=None, filters=None, id=None, network_address_list_collections=None, states=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_address_list_collections and not isinstance(network_address_list_collections, list):
            raise TypeError("Expected argument 'network_address_list_collections' to be a list")
        pulumi.set(__self__, "network_address_list_collections", network_address_list_collections)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNetworkAddressListsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkAddressListCollections")
    def network_address_list_collections(self) -> Optional[Sequence['outputs.GetNetworkAddressListsNetworkAddressListCollectionResult']]:
        return pulumi.get(self, "network_address_list_collections")

    @property
    @pulumi.getter
    def states(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "states")


class AwaitableGetNetworkAddressListsResult(GetNetworkAddressListsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkAddressListsResult(
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            network_address_list_collections=self.network_address_list_collections,
            states=self.states)


def get_network_address_lists(compartment_id: Optional[str] = None,
                              display_name: Optional[str] = None,
                              filters: Optional[Sequence[pulumi.InputType['GetNetworkAddressListsFilterArgs']]] = None,
                              id: Optional[str] = None,
                              states: Optional[Sequence[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkAddressListsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['states'] = states
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Waf/getNetworkAddressLists:getNetworkAddressLists', __args__, opts=opts, typ=GetNetworkAddressListsResult).value

    return AwaitableGetNetworkAddressListsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        network_address_list_collections=pulumi.get(__ret__, 'network_address_list_collections'),
        states=pulumi.get(__ret__, 'states'))


@_utilities.lift_output_func(get_network_address_lists)
def get_network_address_lists_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                     display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkAddressListsFilterArgs']]]]] = None,
                                     id: Optional[pulumi.Input[Optional[str]]] = None,
                                     states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkAddressListsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
