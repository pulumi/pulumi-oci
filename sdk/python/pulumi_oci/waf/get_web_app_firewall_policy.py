# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetWebAppFirewallPolicyResult',
    'AwaitableGetWebAppFirewallPolicyResult',
    'get_web_app_firewall_policy',
    'get_web_app_firewall_policy_output',
]

@pulumi.output_type
class GetWebAppFirewallPolicyResult:
    """
    A collection of values returned by getWebAppFirewallPolicy.
    """
    def __init__(__self__, actions=None, compartment_id=None, defined_tags=None, display_name=None, freeform_tags=None, id=None, lifecycle_details=None, request_access_controls=None, request_protections=None, request_rate_limitings=None, response_access_controls=None, response_protections=None, state=None, system_tags=None, time_created=None, time_updated=None, web_app_firewall_policy_id=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if request_access_controls and not isinstance(request_access_controls, list):
            raise TypeError("Expected argument 'request_access_controls' to be a list")
        pulumi.set(__self__, "request_access_controls", request_access_controls)
        if request_protections and not isinstance(request_protections, list):
            raise TypeError("Expected argument 'request_protections' to be a list")
        pulumi.set(__self__, "request_protections", request_protections)
        if request_rate_limitings and not isinstance(request_rate_limitings, list):
            raise TypeError("Expected argument 'request_rate_limitings' to be a list")
        pulumi.set(__self__, "request_rate_limitings", request_rate_limitings)
        if response_access_controls and not isinstance(response_access_controls, list):
            raise TypeError("Expected argument 'response_access_controls' to be a list")
        pulumi.set(__self__, "response_access_controls", response_access_controls)
        if response_protections and not isinstance(response_protections, list):
            raise TypeError("Expected argument 'response_protections' to be a list")
        pulumi.set(__self__, "response_protections", response_protections)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if web_app_firewall_policy_id and not isinstance(web_app_firewall_policy_id, str):
            raise TypeError("Expected argument 'web_app_firewall_policy_id' to be a str")
        pulumi.set(__self__, "web_app_firewall_policy_id", web_app_firewall_policy_id)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="requestAccessControls")
    def request_access_controls(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestAccessControlResult']]:
        return pulumi.get(self, "request_access_controls")

    @property
    @pulumi.getter(name="requestProtections")
    def request_protections(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionResult']]:
        return pulumi.get(self, "request_protections")

    @property
    @pulumi.getter(name="requestRateLimitings")
    def request_rate_limitings(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestRateLimitingResult']]:
        return pulumi.get(self, "request_rate_limitings")

    @property
    @pulumi.getter(name="responseAccessControls")
    def response_access_controls(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseAccessControlResult']]:
        return pulumi.get(self, "response_access_controls")

    @property
    @pulumi.getter(name="responseProtections")
    def response_protections(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionResult']]:
        return pulumi.get(self, "response_protections")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="webAppFirewallPolicyId")
    def web_app_firewall_policy_id(self) -> str:
        return pulumi.get(self, "web_app_firewall_policy_id")


class AwaitableGetWebAppFirewallPolicyResult(GetWebAppFirewallPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppFirewallPolicyResult(
            actions=self.actions,
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            lifecycle_details=self.lifecycle_details,
            request_access_controls=self.request_access_controls,
            request_protections=self.request_protections,
            request_rate_limitings=self.request_rate_limitings,
            response_access_controls=self.response_access_controls,
            response_protections=self.response_protections,
            state=self.state,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated,
            web_app_firewall_policy_id=self.web_app_firewall_policy_id)


def get_web_app_firewall_policy(web_app_firewall_policy_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebAppFirewallPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['webAppFirewallPolicyId'] = web_app_firewall_policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Waf/getWebAppFirewallPolicy:getWebAppFirewallPolicy', __args__, opts=opts, typ=GetWebAppFirewallPolicyResult).value

    return AwaitableGetWebAppFirewallPolicyResult(
        actions=pulumi.get(__ret__, 'actions'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        request_access_controls=pulumi.get(__ret__, 'request_access_controls'),
        request_protections=pulumi.get(__ret__, 'request_protections'),
        request_rate_limitings=pulumi.get(__ret__, 'request_rate_limitings'),
        response_access_controls=pulumi.get(__ret__, 'response_access_controls'),
        response_protections=pulumi.get(__ret__, 'response_protections'),
        state=pulumi.get(__ret__, 'state'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        web_app_firewall_policy_id=pulumi.get(__ret__, 'web_app_firewall_policy_id'))


@_utilities.lift_output_func(get_web_app_firewall_policy)
def get_web_app_firewall_policy_output(web_app_firewall_policy_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWebAppFirewallPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
