# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AppFirewallPolicyAction',
    'AppFirewallPolicyActionBody',
    'AppFirewallPolicyActionHeader',
    'AppFirewallPolicyRequestAccessControl',
    'AppFirewallPolicyRequestAccessControlRule',
    'AppFirewallPolicyRequestProtection',
    'AppFirewallPolicyRequestProtectionRule',
    'AppFirewallPolicyRequestProtectionRuleProtectionCapability',
    'AppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight',
    'AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions',
    'AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings',
    'AppFirewallPolicyRequestRateLimiting',
    'AppFirewallPolicyRequestRateLimitingRule',
    'AppFirewallPolicyRequestRateLimitingRuleConfiguration',
    'AppFirewallPolicyResponseAccessControl',
    'AppFirewallPolicyResponseAccessControlRule',
    'AppFirewallPolicyResponseProtection',
    'AppFirewallPolicyResponseProtectionRule',
    'AppFirewallPolicyResponseProtectionRuleProtectionCapability',
    'AppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight',
    'AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions',
    'AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings',
    'NetworkAddressListVcnAddress',
    'GetFirewallsFilterResult',
    'GetFirewallsWebAppFirewallCollectionResult',
    'GetFirewallsWebAppFirewallCollectionItemResult',
    'GetNetworkAddressListVcnAddressResult',
    'GetNetworkAddressListsFilterResult',
    'GetNetworkAddressListsNetworkAddressListCollectionResult',
    'GetNetworkAddressListsNetworkAddressListCollectionItemResult',
    'GetNetworkAddressListsNetworkAddressListCollectionItemVcnAddressResult',
    'GetProtectionCapabilitiesFilterResult',
    'GetProtectionCapabilitiesProtectionCapabilityCollectionResult',
    'GetProtectionCapabilitiesProtectionCapabilityCollectionItemResult',
    'GetProtectionCapabilitiesProtectionCapabilityCollectionItemCollaborativeWeightResult',
    'GetProtectionCapabilityGroupTagsFilterResult',
    'GetProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionResult',
    'GetProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionItemResult',
    'GetWebAppFirewallPoliciesFilterResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionBodyResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionHeaderResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlRuleResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityExclusionResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilitySettingResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleConfigurationResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlRuleResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityExclusionResult',
    'GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilitySettingResult',
    'GetWebAppFirewallPolicyActionResult',
    'GetWebAppFirewallPolicyActionBodyResult',
    'GetWebAppFirewallPolicyActionHeaderResult',
    'GetWebAppFirewallPolicyRequestAccessControlResult',
    'GetWebAppFirewallPolicyRequestAccessControlRuleResult',
    'GetWebAppFirewallPolicyRequestProtectionResult',
    'GetWebAppFirewallPolicyRequestProtectionRuleResult',
    'GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityResult',
    'GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult',
    'GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusionResult',
    'GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettingResult',
    'GetWebAppFirewallPolicyRequestRateLimitingResult',
    'GetWebAppFirewallPolicyRequestRateLimitingRuleResult',
    'GetWebAppFirewallPolicyRequestRateLimitingRuleConfigurationResult',
    'GetWebAppFirewallPolicyResponseAccessControlResult',
    'GetWebAppFirewallPolicyResponseAccessControlRuleResult',
    'GetWebAppFirewallPolicyResponseProtectionResult',
    'GetWebAppFirewallPolicyResponseProtectionRuleResult',
    'GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityResult',
    'GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult',
    'GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusionResult',
    'GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettingResult',
]

@pulumi.output_type
class AppFirewallPolicyAction(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 body: Optional['outputs.AppFirewallPolicyActionBody'] = None,
                 code: Optional[int] = None,
                 headers: Optional[Sequence['outputs.AppFirewallPolicyActionHeader']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def body(self) -> Optional['outputs.AppFirewallPolicyActionBody']:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.AppFirewallPolicyActionHeader']]:
        return pulumi.get(self, "headers")


@pulumi.output_type
class AppFirewallPolicyActionBody(dict):
    def __init__(__self__, *,
                 text: str,
                 type: str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AppFirewallPolicyActionHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AppFirewallPolicyRequestAccessControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultActionName":
            suggest = "default_action_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestAccessControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestAccessControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestAccessControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_action_name: str,
                 rules: Optional[Sequence['outputs.AppFirewallPolicyRequestAccessControlRule']] = None):
        pulumi.set(__self__, "default_action_name", default_action_name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="defaultActionName")
    def default_action_name(self) -> str:
        return pulumi.get(self, "default_action_name")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AppFirewallPolicyRequestAccessControlRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AppFirewallPolicyRequestAccessControlRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "conditionLanguage":
            suggest = "condition_language"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestAccessControlRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestAccessControlRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestAccessControlRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: str,
                 name: str,
                 type: str,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None):
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")


@pulumi.output_type
class AppFirewallPolicyRequestProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodyInspectionSizeLimitExceededActionName":
            suggest = "body_inspection_size_limit_exceeded_action_name"
        elif key == "bodyInspectionSizeLimitInBytes":
            suggest = "body_inspection_size_limit_in_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body_inspection_size_limit_exceeded_action_name: Optional[str] = None,
                 body_inspection_size_limit_in_bytes: Optional[int] = None,
                 rules: Optional[Sequence['outputs.AppFirewallPolicyRequestProtectionRule']] = None):
        if body_inspection_size_limit_exceeded_action_name is not None:
            pulumi.set(__self__, "body_inspection_size_limit_exceeded_action_name", body_inspection_size_limit_exceeded_action_name)
        if body_inspection_size_limit_in_bytes is not None:
            pulumi.set(__self__, "body_inspection_size_limit_in_bytes", body_inspection_size_limit_in_bytes)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="bodyInspectionSizeLimitExceededActionName")
    def body_inspection_size_limit_exceeded_action_name(self) -> Optional[str]:
        return pulumi.get(self, "body_inspection_size_limit_exceeded_action_name")

    @property
    @pulumi.getter(name="bodyInspectionSizeLimitInBytes")
    def body_inspection_size_limit_in_bytes(self) -> Optional[int]:
        return pulumi.get(self, "body_inspection_size_limit_in_bytes")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AppFirewallPolicyRequestProtectionRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AppFirewallPolicyRequestProtectionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "protectionCapabilities":
            suggest = "protection_capabilities"
        elif key == "conditionLanguage":
            suggest = "condition_language"
        elif key == "isBodyInspectionEnabled":
            suggest = "is_body_inspection_enabled"
        elif key == "protectionCapabilitySettings":
            suggest = "protection_capability_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestProtectionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestProtectionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestProtectionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: str,
                 name: str,
                 protection_capabilities: Sequence['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapability'],
                 type: str,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 is_body_inspection_enabled: Optional[bool] = None,
                 protection_capability_settings: Optional['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings'] = None):
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protection_capabilities", protection_capabilities)
        pulumi.set(__self__, "type", type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if is_body_inspection_enabled is not None:
            pulumi.set(__self__, "is_body_inspection_enabled", is_body_inspection_enabled)
        if protection_capability_settings is not None:
            pulumi.set(__self__, "protection_capability_settings", protection_capability_settings)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionCapabilities")
    def protection_capabilities(self) -> Sequence['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapability']:
        return pulumi.get(self, "protection_capabilities")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter(name="isBodyInspectionEnabled")
    def is_body_inspection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_body_inspection_enabled")

    @property
    @pulumi.getter(name="protectionCapabilitySettings")
    def protection_capability_settings(self) -> Optional['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings']:
        return pulumi.get(self, "protection_capability_settings")


@pulumi.output_type
class AppFirewallPolicyRequestProtectionRuleProtectionCapability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "collaborativeActionThreshold":
            suggest = "collaborative_action_threshold"
        elif key == "collaborativeWeights":
            suggest = "collaborative_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestProtectionRuleProtectionCapability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestProtectionRuleProtectionCapability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestProtectionRuleProtectionCapability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 version: int,
                 action_name: Optional[str] = None,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight']] = None,
                 exclusions: Optional['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions'] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional['outputs.AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions']:
        return pulumi.get(self, "exclusions")


@pulumi.output_type
class AppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight(dict):
    def __init__(__self__, *,
                 key: str,
                 weight: int):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestCookies":
            suggest = "request_cookies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 request_cookies: Optional[Sequence[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if request_cookies is not None:
            pulumi.set(__self__, "request_cookies", request_cookies)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="requestCookies")
    def request_cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "request_cookies")


@pulumi.output_type
class AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHttpMethods":
            suggest = "allowed_http_methods"
        elif key == "maxHttpRequestHeaderLength":
            suggest = "max_http_request_header_length"
        elif key == "maxHttpRequestHeaders":
            suggest = "max_http_request_headers"
        elif key == "maxNumberOfArguments":
            suggest = "max_number_of_arguments"
        elif key == "maxSingleArgumentLength":
            suggest = "max_single_argument_length"
        elif key == "maxTotalArgumentLength":
            suggest = "max_total_argument_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 max_http_request_header_length: Optional[int] = None,
                 max_http_request_headers: Optional[int] = None,
                 max_number_of_arguments: Optional[int] = None,
                 max_single_argument_length: Optional[int] = None,
                 max_total_argument_length: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if max_http_request_header_length is not None:
            pulumi.set(__self__, "max_http_request_header_length", max_http_request_header_length)
        if max_http_request_headers is not None:
            pulumi.set(__self__, "max_http_request_headers", max_http_request_headers)
        if max_number_of_arguments is not None:
            pulumi.set(__self__, "max_number_of_arguments", max_number_of_arguments)
        if max_single_argument_length is not None:
            pulumi.set(__self__, "max_single_argument_length", max_single_argument_length)
        if max_total_argument_length is not None:
            pulumi.set(__self__, "max_total_argument_length", max_total_argument_length)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="maxHttpRequestHeaderLength")
    def max_http_request_header_length(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_header_length")

    @property
    @pulumi.getter(name="maxHttpRequestHeaders")
    def max_http_request_headers(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_headers")

    @property
    @pulumi.getter(name="maxNumberOfArguments")
    def max_number_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_arguments")

    @property
    @pulumi.getter(name="maxSingleArgumentLength")
    def max_single_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_single_argument_length")

    @property
    @pulumi.getter(name="maxTotalArgumentLength")
    def max_total_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_total_argument_length")


@pulumi.output_type
class AppFirewallPolicyRequestRateLimiting(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.AppFirewallPolicyRequestRateLimitingRule']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AppFirewallPolicyRequestRateLimitingRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AppFirewallPolicyRequestRateLimitingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "conditionLanguage":
            suggest = "condition_language"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestRateLimitingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestRateLimitingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestRateLimitingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: str,
                 configurations: Sequence['outputs.AppFirewallPolicyRequestRateLimitingRuleConfiguration'],
                 name: str,
                 type: str,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None):
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.AppFirewallPolicyRequestRateLimitingRuleConfiguration']:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")


@pulumi.output_type
class AppFirewallPolicyRequestRateLimitingRuleConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "periodInSeconds":
            suggest = "period_in_seconds"
        elif key == "requestsLimit":
            suggest = "requests_limit"
        elif key == "actionDurationInSeconds":
            suggest = "action_duration_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyRequestRateLimitingRuleConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyRequestRateLimitingRuleConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyRequestRateLimitingRuleConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period_in_seconds: int,
                 requests_limit: int,
                 action_duration_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "period_in_seconds", period_in_seconds)
        pulumi.set(__self__, "requests_limit", requests_limit)
        if action_duration_in_seconds is not None:
            pulumi.set(__self__, "action_duration_in_seconds", action_duration_in_seconds)

    @property
    @pulumi.getter(name="periodInSeconds")
    def period_in_seconds(self) -> int:
        return pulumi.get(self, "period_in_seconds")

    @property
    @pulumi.getter(name="requestsLimit")
    def requests_limit(self) -> int:
        return pulumi.get(self, "requests_limit")

    @property
    @pulumi.getter(name="actionDurationInSeconds")
    def action_duration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_duration_in_seconds")


@pulumi.output_type
class AppFirewallPolicyResponseAccessControl(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.AppFirewallPolicyResponseAccessControlRule']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AppFirewallPolicyResponseAccessControlRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AppFirewallPolicyResponseAccessControlRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "conditionLanguage":
            suggest = "condition_language"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyResponseAccessControlRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyResponseAccessControlRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyResponseAccessControlRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: str,
                 name: str,
                 type: str,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None):
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")


@pulumi.output_type
class AppFirewallPolicyResponseProtection(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.AppFirewallPolicyResponseProtectionRule']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AppFirewallPolicyResponseProtectionRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AppFirewallPolicyResponseProtectionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "protectionCapabilities":
            suggest = "protection_capabilities"
        elif key == "conditionLanguage":
            suggest = "condition_language"
        elif key == "isBodyInspectionEnabled":
            suggest = "is_body_inspection_enabled"
        elif key == "protectionCapabilitySettings":
            suggest = "protection_capability_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyResponseProtectionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyResponseProtectionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyResponseProtectionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_name: str,
                 name: str,
                 protection_capabilities: Sequence['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapability'],
                 type: str,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 is_body_inspection_enabled: Optional[bool] = None,
                 protection_capability_settings: Optional['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings'] = None):
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protection_capabilities", protection_capabilities)
        pulumi.set(__self__, "type", type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if is_body_inspection_enabled is not None:
            pulumi.set(__self__, "is_body_inspection_enabled", is_body_inspection_enabled)
        if protection_capability_settings is not None:
            pulumi.set(__self__, "protection_capability_settings", protection_capability_settings)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionCapabilities")
    def protection_capabilities(self) -> Sequence['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapability']:
        return pulumi.get(self, "protection_capabilities")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter(name="isBodyInspectionEnabled")
    def is_body_inspection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_body_inspection_enabled")

    @property
    @pulumi.getter(name="protectionCapabilitySettings")
    def protection_capability_settings(self) -> Optional['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings']:
        return pulumi.get(self, "protection_capability_settings")


@pulumi.output_type
class AppFirewallPolicyResponseProtectionRuleProtectionCapability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionName":
            suggest = "action_name"
        elif key == "collaborativeActionThreshold":
            suggest = "collaborative_action_threshold"
        elif key == "collaborativeWeights":
            suggest = "collaborative_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyResponseProtectionRuleProtectionCapability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyResponseProtectionRuleProtectionCapability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyResponseProtectionRuleProtectionCapability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 version: int,
                 action_name: Optional[str] = None,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight']] = None,
                 exclusions: Optional['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions'] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional['outputs.AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions']:
        return pulumi.get(self, "exclusions")


@pulumi.output_type
class AppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight(dict):
    def __init__(__self__, *,
                 key: str,
                 weight: int):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestCookies":
            suggest = "request_cookies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 request_cookies: Optional[Sequence[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if request_cookies is not None:
            pulumi.set(__self__, "request_cookies", request_cookies)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="requestCookies")
    def request_cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "request_cookies")


@pulumi.output_type
class AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHttpMethods":
            suggest = "allowed_http_methods"
        elif key == "maxHttpRequestHeaderLength":
            suggest = "max_http_request_header_length"
        elif key == "maxHttpRequestHeaders":
            suggest = "max_http_request_headers"
        elif key == "maxNumberOfArguments":
            suggest = "max_number_of_arguments"
        elif key == "maxSingleArgumentLength":
            suggest = "max_single_argument_length"
        elif key == "maxTotalArgumentLength":
            suggest = "max_total_argument_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 max_http_request_header_length: Optional[int] = None,
                 max_http_request_headers: Optional[int] = None,
                 max_number_of_arguments: Optional[int] = None,
                 max_single_argument_length: Optional[int] = None,
                 max_total_argument_length: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if max_http_request_header_length is not None:
            pulumi.set(__self__, "max_http_request_header_length", max_http_request_header_length)
        if max_http_request_headers is not None:
            pulumi.set(__self__, "max_http_request_headers", max_http_request_headers)
        if max_number_of_arguments is not None:
            pulumi.set(__self__, "max_number_of_arguments", max_number_of_arguments)
        if max_single_argument_length is not None:
            pulumi.set(__self__, "max_single_argument_length", max_single_argument_length)
        if max_total_argument_length is not None:
            pulumi.set(__self__, "max_total_argument_length", max_total_argument_length)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="maxHttpRequestHeaderLength")
    def max_http_request_header_length(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_header_length")

    @property
    @pulumi.getter(name="maxHttpRequestHeaders")
    def max_http_request_headers(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_headers")

    @property
    @pulumi.getter(name="maxNumberOfArguments")
    def max_number_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_arguments")

    @property
    @pulumi.getter(name="maxSingleArgumentLength")
    def max_single_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_single_argument_length")

    @property
    @pulumi.getter(name="maxTotalArgumentLength")
    def max_total_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_total_argument_length")


@pulumi.output_type
class NetworkAddressListVcnAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vcnId":
            suggest = "vcn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkAddressListVcnAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkAddressListVcnAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkAddressListVcnAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetFirewallsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFirewallsWebAppFirewallCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetFirewallsWebAppFirewallCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetFirewallsWebAppFirewallCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFirewallsWebAppFirewallCollectionItemResult(dict):
    def __init__(__self__, *,
                 backend_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 web_app_firewall_policy_id: Optional[str] = None):
        if backend_type is not None:
            pulumi.set(__self__, "backend_type", backend_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if web_app_firewall_policy_id is not None:
            pulumi.set(__self__, "web_app_firewall_policy_id", web_app_firewall_policy_id)

    @property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> Optional[str]:
        return pulumi.get(self, "backend_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="webAppFirewallPolicyId")
    def web_app_firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "web_app_firewall_policy_id")


@pulumi.output_type
class GetNetworkAddressListVcnAddressResult(dict):
    def __init__(__self__, *,
                 addresses: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetNetworkAddressListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkAddressListsNetworkAddressListCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetNetworkAddressListsNetworkAddressListCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetNetworkAddressListsNetworkAddressListCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNetworkAddressListsNetworkAddressListCollectionItemResult(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 vcn_addresses: Optional[Sequence['outputs.GetNetworkAddressListsNetworkAddressListCollectionItemVcnAddressResult']] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vcn_addresses is not None:
            pulumi.set(__self__, "vcn_addresses", vcn_addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vcnAddresses")
    def vcn_addresses(self) -> Optional[Sequence['outputs.GetNetworkAddressListsNetworkAddressListCollectionItemVcnAddressResult']]:
        return pulumi.get(self, "vcn_addresses")


@pulumi.output_type
class GetNetworkAddressListsNetworkAddressListCollectionItemVcnAddressResult(dict):
    def __init__(__self__, *,
                 addresses: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[str]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetProtectionCapabilitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProtectionCapabilitiesProtectionCapabilityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProtectionCapabilitiesProtectionCapabilityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProtectionCapabilitiesProtectionCapabilityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProtectionCapabilitiesProtectionCapabilityCollectionItemResult(dict):
    def __init__(__self__, *,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.GetProtectionCapabilitiesProtectionCapabilityCollectionItemCollaborativeWeightResult']] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 group_tags: Optional[Sequence[str]] = None,
                 is_latest_version: Optional[bool] = None,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 version: Optional[int] = None):
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group_tags is not None:
            pulumi.set(__self__, "group_tags", group_tags)
        if is_latest_version is not None:
            pulumi.set(__self__, "is_latest_version", is_latest_version)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.GetProtectionCapabilitiesProtectionCapabilityCollectionItemCollaborativeWeightResult']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupTags")
    def group_tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_tags")

    @property
    @pulumi.getter(name="isLatestVersion")
    def is_latest_version(self) -> Optional[bool]:
        return pulumi.get(self, "is_latest_version")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProtectionCapabilitiesProtectionCapabilityCollectionItemCollaborativeWeightResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 key: Optional[str] = None,
                 weight: Optional[int] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetProtectionCapabilityGroupTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWebAppFirewallPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 request_access_controls: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlResult']] = None,
                 request_protections: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionResult']] = None,
                 request_rate_limitings: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingResult']] = None,
                 response_access_controls: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlResult']] = None,
                 response_protections: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if request_access_controls is not None:
            pulumi.set(__self__, "request_access_controls", request_access_controls)
        if request_protections is not None:
            pulumi.set(__self__, "request_protections", request_protections)
        if request_rate_limitings is not None:
            pulumi.set(__self__, "request_rate_limitings", request_rate_limitings)
        if response_access_controls is not None:
            pulumi.set(__self__, "response_access_controls", response_access_controls)
        if response_protections is not None:
            pulumi.set(__self__, "response_protections", response_protections)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="requestAccessControls")
    def request_access_controls(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlResult']]:
        return pulumi.get(self, "request_access_controls")

    @property
    @pulumi.getter(name="requestProtections")
    def request_protections(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionResult']]:
        return pulumi.get(self, "request_protections")

    @property
    @pulumi.getter(name="requestRateLimitings")
    def request_rate_limitings(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingResult']]:
        return pulumi.get(self, "request_rate_limitings")

    @property
    @pulumi.getter(name="responseAccessControls")
    def response_access_controls(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlResult']]:
        return pulumi.get(self, "response_access_controls")

    @property
    @pulumi.getter(name="responseProtections")
    def response_protections(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionResult']]:
        return pulumi.get(self, "response_protections")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 bodies: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionBodyResult']] = None,
                 code: Optional[int] = None,
                 headers: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionHeaderResult']] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionBodyResult']]:
        return pulumi.get(self, "bodies")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionBodyResult(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None,
                 type: Optional[str] = None):
        if text is not None:
            pulumi.set(__self__, "text", text)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlResult(dict):
    def __init__(__self__, *,
                 default_action_name: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlRuleResult']] = None):
        if default_action_name is not None:
            pulumi.set(__self__, "default_action_name", default_action_name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="defaultActionName")
    def default_action_name(self) -> Optional[str]:
        return pulumi.get(self, "default_action_name")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionResult(dict):
    def __init__(__self__, *,
                 body_inspection_size_limit_exceeded_action_name: Optional[str] = None,
                 body_inspection_size_limit_in_bytes: Optional[int] = None,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleResult']] = None):
        if body_inspection_size_limit_exceeded_action_name is not None:
            pulumi.set(__self__, "body_inspection_size_limit_exceeded_action_name", body_inspection_size_limit_exceeded_action_name)
        if body_inspection_size_limit_in_bytes is not None:
            pulumi.set(__self__, "body_inspection_size_limit_in_bytes", body_inspection_size_limit_in_bytes)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="bodyInspectionSizeLimitExceededActionName")
    def body_inspection_size_limit_exceeded_action_name(self) -> Optional[str]:
        return pulumi.get(self, "body_inspection_size_limit_exceeded_action_name")

    @property
    @pulumi.getter(name="bodyInspectionSizeLimitInBytes")
    def body_inspection_size_limit_in_bytes(self) -> Optional[int]:
        return pulumi.get(self, "body_inspection_size_limit_in_bytes")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 is_body_inspection_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 protection_capabilities: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityResult']] = None,
                 protection_capability_settings: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilitySettingResult']] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if is_body_inspection_enabled is not None:
            pulumi.set(__self__, "is_body_inspection_enabled", is_body_inspection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protection_capabilities is not None:
            pulumi.set(__self__, "protection_capabilities", protection_capabilities)
        if protection_capability_settings is not None:
            pulumi.set(__self__, "protection_capability_settings", protection_capability_settings)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter(name="isBodyInspectionEnabled")
    def is_body_inspection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_body_inspection_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionCapabilities")
    def protection_capabilities(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityResult']]:
        return pulumi.get(self, "protection_capabilities")

    @property
    @pulumi.getter(name="protectionCapabilitySettings")
    def protection_capability_settings(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilitySettingResult']]:
        return pulumi.get(self, "protection_capability_settings")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult']] = None,
                 exclusions: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityExclusionResult']] = None,
                 key: Optional[str] = None,
                 version: Optional[int] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 weight: Optional[int] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityExclusionResult(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 request_cookies: Optional[Sequence[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if request_cookies is not None:
            pulumi.set(__self__, "request_cookies", request_cookies)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="requestCookies")
    def request_cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "request_cookies")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilitySettingResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 max_http_request_header_length: Optional[int] = None,
                 max_http_request_headers: Optional[int] = None,
                 max_number_of_arguments: Optional[int] = None,
                 max_single_argument_length: Optional[int] = None,
                 max_total_argument_length: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if max_http_request_header_length is not None:
            pulumi.set(__self__, "max_http_request_header_length", max_http_request_header_length)
        if max_http_request_headers is not None:
            pulumi.set(__self__, "max_http_request_headers", max_http_request_headers)
        if max_number_of_arguments is not None:
            pulumi.set(__self__, "max_number_of_arguments", max_number_of_arguments)
        if max_single_argument_length is not None:
            pulumi.set(__self__, "max_single_argument_length", max_single_argument_length)
        if max_total_argument_length is not None:
            pulumi.set(__self__, "max_total_argument_length", max_total_argument_length)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="maxHttpRequestHeaderLength")
    def max_http_request_header_length(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_header_length")

    @property
    @pulumi.getter(name="maxHttpRequestHeaders")
    def max_http_request_headers(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_headers")

    @property
    @pulumi.getter(name="maxNumberOfArguments")
    def max_number_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_arguments")

    @property
    @pulumi.getter(name="maxSingleArgumentLength")
    def max_single_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_single_argument_length")

    @property
    @pulumi.getter(name="maxTotalArgumentLength")
    def max_total_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_total_argument_length")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleResult']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleConfigurationResult']] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleConfigurationResult(dict):
    def __init__(__self__, *,
                 action_duration_in_seconds: Optional[int] = None,
                 period_in_seconds: Optional[int] = None,
                 requests_limit: Optional[int] = None):
        if action_duration_in_seconds is not None:
            pulumi.set(__self__, "action_duration_in_seconds", action_duration_in_seconds)
        if period_in_seconds is not None:
            pulumi.set(__self__, "period_in_seconds", period_in_seconds)
        if requests_limit is not None:
            pulumi.set(__self__, "requests_limit", requests_limit)

    @property
    @pulumi.getter(name="actionDurationInSeconds")
    def action_duration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_duration_in_seconds")

    @property
    @pulumi.getter(name="periodInSeconds")
    def period_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_in_seconds")

    @property
    @pulumi.getter(name="requestsLimit")
    def requests_limit(self) -> Optional[int]:
        return pulumi.get(self, "requests_limit")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlRuleResult']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleResult']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 is_body_inspection_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 protection_capabilities: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityResult']] = None,
                 protection_capability_settings: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilitySettingResult']] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if is_body_inspection_enabled is not None:
            pulumi.set(__self__, "is_body_inspection_enabled", is_body_inspection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protection_capabilities is not None:
            pulumi.set(__self__, "protection_capabilities", protection_capabilities)
        if protection_capability_settings is not None:
            pulumi.set(__self__, "protection_capability_settings", protection_capability_settings)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter(name="isBodyInspectionEnabled")
    def is_body_inspection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_body_inspection_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionCapabilities")
    def protection_capabilities(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityResult']]:
        return pulumi.get(self, "protection_capabilities")

    @property
    @pulumi.getter(name="protectionCapabilitySettings")
    def protection_capability_settings(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilitySettingResult']]:
        return pulumi.get(self, "protection_capability_settings")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult']] = None,
                 exclusions: Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityExclusionResult']] = None,
                 key: Optional[str] = None,
                 version: Optional[int] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 weight: Optional[int] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityExclusionResult(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 request_cookies: Optional[Sequence[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if request_cookies is not None:
            pulumi.set(__self__, "request_cookies", request_cookies)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="requestCookies")
    def request_cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "request_cookies")


@pulumi.output_type
class GetWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilitySettingResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 max_http_request_header_length: Optional[int] = None,
                 max_http_request_headers: Optional[int] = None,
                 max_number_of_arguments: Optional[int] = None,
                 max_single_argument_length: Optional[int] = None,
                 max_total_argument_length: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if max_http_request_header_length is not None:
            pulumi.set(__self__, "max_http_request_header_length", max_http_request_header_length)
        if max_http_request_headers is not None:
            pulumi.set(__self__, "max_http_request_headers", max_http_request_headers)
        if max_number_of_arguments is not None:
            pulumi.set(__self__, "max_number_of_arguments", max_number_of_arguments)
        if max_single_argument_length is not None:
            pulumi.set(__self__, "max_single_argument_length", max_single_argument_length)
        if max_total_argument_length is not None:
            pulumi.set(__self__, "max_total_argument_length", max_total_argument_length)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="maxHttpRequestHeaderLength")
    def max_http_request_header_length(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_header_length")

    @property
    @pulumi.getter(name="maxHttpRequestHeaders")
    def max_http_request_headers(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_headers")

    @property
    @pulumi.getter(name="maxNumberOfArguments")
    def max_number_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_arguments")

    @property
    @pulumi.getter(name="maxSingleArgumentLength")
    def max_single_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_single_argument_length")

    @property
    @pulumi.getter(name="maxTotalArgumentLength")
    def max_total_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_total_argument_length")


@pulumi.output_type
class GetWebAppFirewallPolicyActionResult(dict):
    def __init__(__self__, *,
                 bodies: Optional[Sequence['outputs.GetWebAppFirewallPolicyActionBodyResult']] = None,
                 code: Optional[int] = None,
                 headers: Optional[Sequence['outputs.GetWebAppFirewallPolicyActionHeaderResult']] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyActionBodyResult']]:
        return pulumi.get(self, "bodies")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyActionHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyActionBodyResult(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None,
                 type: Optional[str] = None):
        if text is not None:
            pulumi.set(__self__, "text", text)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyActionHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestAccessControlResult(dict):
    def __init__(__self__, *,
                 default_action_name: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestAccessControlRuleResult']] = None):
        if default_action_name is not None:
            pulumi.set(__self__, "default_action_name", default_action_name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="defaultActionName")
    def default_action_name(self) -> Optional[str]:
        return pulumi.get(self, "default_action_name")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestAccessControlRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestAccessControlRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestProtectionResult(dict):
    def __init__(__self__, *,
                 body_inspection_size_limit_exceeded_action_name: Optional[str] = None,
                 body_inspection_size_limit_in_bytes: Optional[int] = None,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleResult']] = None):
        if body_inspection_size_limit_exceeded_action_name is not None:
            pulumi.set(__self__, "body_inspection_size_limit_exceeded_action_name", body_inspection_size_limit_exceeded_action_name)
        if body_inspection_size_limit_in_bytes is not None:
            pulumi.set(__self__, "body_inspection_size_limit_in_bytes", body_inspection_size_limit_in_bytes)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="bodyInspectionSizeLimitExceededActionName")
    def body_inspection_size_limit_exceeded_action_name(self) -> Optional[str]:
        return pulumi.get(self, "body_inspection_size_limit_exceeded_action_name")

    @property
    @pulumi.getter(name="bodyInspectionSizeLimitInBytes")
    def body_inspection_size_limit_in_bytes(self) -> Optional[int]:
        return pulumi.get(self, "body_inspection_size_limit_in_bytes")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestProtectionRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 is_body_inspection_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 protection_capabilities: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityResult']] = None,
                 protection_capability_settings: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettingResult']] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if is_body_inspection_enabled is not None:
            pulumi.set(__self__, "is_body_inspection_enabled", is_body_inspection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protection_capabilities is not None:
            pulumi.set(__self__, "protection_capabilities", protection_capabilities)
        if protection_capability_settings is not None:
            pulumi.set(__self__, "protection_capability_settings", protection_capability_settings)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter(name="isBodyInspectionEnabled")
    def is_body_inspection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_body_inspection_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionCapabilities")
    def protection_capabilities(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityResult']]:
        return pulumi.get(self, "protection_capabilities")

    @property
    @pulumi.getter(name="protectionCapabilitySettings")
    def protection_capability_settings(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettingResult']]:
        return pulumi.get(self, "protection_capability_settings")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult']] = None,
                 exclusions: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusionResult']] = None,
                 key: Optional[str] = None,
                 version: Optional[int] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeightResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 weight: Optional[int] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusionResult(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 request_cookies: Optional[Sequence[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if request_cookies is not None:
            pulumi.set(__self__, "request_cookies", request_cookies)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="requestCookies")
    def request_cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "request_cookies")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettingResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 max_http_request_header_length: Optional[int] = None,
                 max_http_request_headers: Optional[int] = None,
                 max_number_of_arguments: Optional[int] = None,
                 max_single_argument_length: Optional[int] = None,
                 max_total_argument_length: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if max_http_request_header_length is not None:
            pulumi.set(__self__, "max_http_request_header_length", max_http_request_header_length)
        if max_http_request_headers is not None:
            pulumi.set(__self__, "max_http_request_headers", max_http_request_headers)
        if max_number_of_arguments is not None:
            pulumi.set(__self__, "max_number_of_arguments", max_number_of_arguments)
        if max_single_argument_length is not None:
            pulumi.set(__self__, "max_single_argument_length", max_single_argument_length)
        if max_total_argument_length is not None:
            pulumi.set(__self__, "max_total_argument_length", max_total_argument_length)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="maxHttpRequestHeaderLength")
    def max_http_request_header_length(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_header_length")

    @property
    @pulumi.getter(name="maxHttpRequestHeaders")
    def max_http_request_headers(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_headers")

    @property
    @pulumi.getter(name="maxNumberOfArguments")
    def max_number_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_arguments")

    @property
    @pulumi.getter(name="maxSingleArgumentLength")
    def max_single_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_single_argument_length")

    @property
    @pulumi.getter(name="maxTotalArgumentLength")
    def max_total_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_total_argument_length")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestRateLimitingResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestRateLimitingRuleResult']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestRateLimitingRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestRateLimitingRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestRateLimitingRuleConfigurationResult']] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyRequestRateLimitingRuleConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyRequestRateLimitingRuleConfigurationResult(dict):
    def __init__(__self__, *,
                 action_duration_in_seconds: Optional[int] = None,
                 period_in_seconds: Optional[int] = None,
                 requests_limit: Optional[int] = None):
        if action_duration_in_seconds is not None:
            pulumi.set(__self__, "action_duration_in_seconds", action_duration_in_seconds)
        if period_in_seconds is not None:
            pulumi.set(__self__, "period_in_seconds", period_in_seconds)
        if requests_limit is not None:
            pulumi.set(__self__, "requests_limit", requests_limit)

    @property
    @pulumi.getter(name="actionDurationInSeconds")
    def action_duration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "action_duration_in_seconds")

    @property
    @pulumi.getter(name="periodInSeconds")
    def period_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_in_seconds")

    @property
    @pulumi.getter(name="requestsLimit")
    def requests_limit(self) -> Optional[int]:
        return pulumi.get(self, "requests_limit")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseAccessControlResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseAccessControlRuleResult']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseAccessControlRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseAccessControlRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseProtectionResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleResult']] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseProtectionRuleResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 condition: Optional[str] = None,
                 condition_language: Optional[str] = None,
                 is_body_inspection_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 protection_capabilities: Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityResult']] = None,
                 protection_capability_settings: Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettingResult']] = None,
                 type: Optional[str] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_language is not None:
            pulumi.set(__self__, "condition_language", condition_language)
        if is_body_inspection_enabled is not None:
            pulumi.set(__self__, "is_body_inspection_enabled", is_body_inspection_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protection_capabilities is not None:
            pulumi.set(__self__, "protection_capabilities", protection_capabilities)
        if protection_capability_settings is not None:
            pulumi.set(__self__, "protection_capability_settings", protection_capability_settings)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionLanguage")
    def condition_language(self) -> Optional[str]:
        return pulumi.get(self, "condition_language")

    @property
    @pulumi.getter(name="isBodyInspectionEnabled")
    def is_body_inspection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_body_inspection_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protectionCapabilities")
    def protection_capabilities(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityResult']]:
        return pulumi.get(self, "protection_capabilities")

    @property
    @pulumi.getter(name="protectionCapabilitySettings")
    def protection_capability_settings(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettingResult']]:
        return pulumi.get(self, "protection_capability_settings")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityResult(dict):
    def __init__(__self__, *,
                 action_name: Optional[str] = None,
                 collaborative_action_threshold: Optional[int] = None,
                 collaborative_weights: Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult']] = None,
                 exclusions: Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusionResult']] = None,
                 key: Optional[str] = None,
                 version: Optional[int] = None):
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if collaborative_action_threshold is not None:
            pulumi.set(__self__, "collaborative_action_threshold", collaborative_action_threshold)
        if collaborative_weights is not None:
            pulumi.set(__self__, "collaborative_weights", collaborative_weights)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[str]:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="collaborativeActionThreshold")
    def collaborative_action_threshold(self) -> Optional[int]:
        return pulumi.get(self, "collaborative_action_threshold")

    @property
    @pulumi.getter(name="collaborativeWeights")
    def collaborative_weights(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult']]:
        return pulumi.get(self, "collaborative_weights")

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence['outputs.GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusionResult']]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeightResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 weight: Optional[int] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusionResult(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 request_cookies: Optional[Sequence[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if request_cookies is not None:
            pulumi.set(__self__, "request_cookies", request_cookies)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="requestCookies")
    def request_cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "request_cookies")


@pulumi.output_type
class GetWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettingResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 max_http_request_header_length: Optional[int] = None,
                 max_http_request_headers: Optional[int] = None,
                 max_number_of_arguments: Optional[int] = None,
                 max_single_argument_length: Optional[int] = None,
                 max_total_argument_length: Optional[int] = None):
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if max_http_request_header_length is not None:
            pulumi.set(__self__, "max_http_request_header_length", max_http_request_header_length)
        if max_http_request_headers is not None:
            pulumi.set(__self__, "max_http_request_headers", max_http_request_headers)
        if max_number_of_arguments is not None:
            pulumi.set(__self__, "max_number_of_arguments", max_number_of_arguments)
        if max_single_argument_length is not None:
            pulumi.set(__self__, "max_single_argument_length", max_single_argument_length)
        if max_total_argument_length is not None:
            pulumi.set(__self__, "max_total_argument_length", max_total_argument_length)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="maxHttpRequestHeaderLength")
    def max_http_request_header_length(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_header_length")

    @property
    @pulumi.getter(name="maxHttpRequestHeaders")
    def max_http_request_headers(self) -> Optional[int]:
        return pulumi.get(self, "max_http_request_headers")

    @property
    @pulumi.getter(name="maxNumberOfArguments")
    def max_number_of_arguments(self) -> Optional[int]:
        return pulumi.get(self, "max_number_of_arguments")

    @property
    @pulumi.getter(name="maxSingleArgumentLength")
    def max_single_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_single_argument_length")

    @property
    @pulumi.getter(name="maxTotalArgumentLength")
    def max_total_argument_length(self) -> Optional[int]:
        return pulumi.get(self, "max_total_argument_length")


